// Copyright (c) 2022 Mica, Inc. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.12
// source: mica/discount/discount/v1/discount.proto

package discountv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	approvaltypev1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/approvaltypev1"
	currencyv1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/currencyv1"
	discounttypev1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/discounttypev1"
	unitv1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/unitv1"
	v1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiscountStatus int32

const (
	DiscountStatus_DISCOUNT_STATUS_UNSPECIFIED DiscountStatus = 0
	DiscountStatus_DISCOUNT_STATUS_AVAILABLE   DiscountStatus = 1
	// transitory status set by Mica when a discount would apply during transaction processing.
	DiscountStatus_DISCOUNT_STATUS_HOLD DiscountStatus = 2
	// set by the discount provider
	DiscountStatus_DISCOUNT_STATUS_SUSPENDED DiscountStatus = 3
	DiscountStatus_DISCOUNT_STATUS_USED      DiscountStatus = 4
	DiscountStatus_DISCOUNT_STATUS_CLOSED    DiscountStatus = 5
)

// Enum value maps for DiscountStatus.
var (
	DiscountStatus_name = map[int32]string{
		0: "DISCOUNT_STATUS_UNSPECIFIED",
		1: "DISCOUNT_STATUS_AVAILABLE",
		2: "DISCOUNT_STATUS_HOLD",
		3: "DISCOUNT_STATUS_SUSPENDED",
		4: "DISCOUNT_STATUS_USED",
		5: "DISCOUNT_STATUS_CLOSED",
	}
	DiscountStatus_value = map[string]int32{
		"DISCOUNT_STATUS_UNSPECIFIED": 0,
		"DISCOUNT_STATUS_AVAILABLE":   1,
		"DISCOUNT_STATUS_HOLD":        2,
		"DISCOUNT_STATUS_SUSPENDED":   3,
		"DISCOUNT_STATUS_USED":        4,
		"DISCOUNT_STATUS_CLOSED":      5,
	}
)

func (x DiscountStatus) Enum() *DiscountStatus {
	p := new(DiscountStatus)
	*p = x
	return p
}

func (x DiscountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_discount_discount_v1_discount_proto_enumTypes[0].Descriptor()
}

func (DiscountStatus) Type() protoreflect.EnumType {
	return &file_mica_discount_discount_v1_discount_proto_enumTypes[0]
}

func (x DiscountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscountStatus.Descriptor instead.
func (DiscountStatus) EnumDescriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{0}
}

type CreateDiscountResponse_Status int32

const (
	CreateDiscountResponse_STATUS_UNSPECIFIED CreateDiscountResponse_Status = 0
	CreateDiscountResponse_STATUS_SUCCESS     CreateDiscountResponse_Status = 1
	CreateDiscountResponse_STATUS_ERROR       CreateDiscountResponse_Status = 2
)

// Enum value maps for CreateDiscountResponse_Status.
var (
	CreateDiscountResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	CreateDiscountResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x CreateDiscountResponse_Status) Enum() *CreateDiscountResponse_Status {
	p := new(CreateDiscountResponse_Status)
	*p = x
	return p
}

func (x CreateDiscountResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateDiscountResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_discount_discount_v1_discount_proto_enumTypes[1].Descriptor()
}

func (CreateDiscountResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_discount_discount_v1_discount_proto_enumTypes[1]
}

func (x CreateDiscountResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateDiscountResponse_Status.Descriptor instead.
func (CreateDiscountResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{7, 0}
}

type GetDiscountResponse_Status int32

const (
	GetDiscountResponse_STATUS_UNSPECIFIED GetDiscountResponse_Status = 0
	GetDiscountResponse_STATUS_SUCCESS     GetDiscountResponse_Status = 1
	GetDiscountResponse_STATUS_ERROR       GetDiscountResponse_Status = 2
	GetDiscountResponse_STATUS_NOT_FOUND   GetDiscountResponse_Status = 3
)

// Enum value maps for GetDiscountResponse_Status.
var (
	GetDiscountResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	GetDiscountResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x GetDiscountResponse_Status) Enum() *GetDiscountResponse_Status {
	p := new(GetDiscountResponse_Status)
	*p = x
	return p
}

func (x GetDiscountResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDiscountResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_discount_discount_v1_discount_proto_enumTypes[2].Descriptor()
}

func (GetDiscountResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_discount_discount_v1_discount_proto_enumTypes[2]
}

func (x GetDiscountResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDiscountResponse_Status.Descriptor instead.
func (GetDiscountResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{9, 0}
}

type UpdateDiscountResponse_Status int32

const (
	UpdateDiscountResponse_STATUS_UNSPECIFIED UpdateDiscountResponse_Status = 0
	UpdateDiscountResponse_STATUS_SUCCESS     UpdateDiscountResponse_Status = 1
	UpdateDiscountResponse_STATUS_ERROR       UpdateDiscountResponse_Status = 2
	UpdateDiscountResponse_STATUS_NOT_FOUND   UpdateDiscountResponse_Status = 3
)

// Enum value maps for UpdateDiscountResponse_Status.
var (
	UpdateDiscountResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	UpdateDiscountResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x UpdateDiscountResponse_Status) Enum() *UpdateDiscountResponse_Status {
	p := new(UpdateDiscountResponse_Status)
	*p = x
	return p
}

func (x UpdateDiscountResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateDiscountResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_discount_discount_v1_discount_proto_enumTypes[3].Descriptor()
}

func (UpdateDiscountResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_discount_discount_v1_discount_proto_enumTypes[3]
}

func (x UpdateDiscountResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateDiscountResponse_Status.Descriptor instead.
func (UpdateDiscountResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{11, 0}
}

type UpdateDiscountStatusResponse_Status int32

const (
	UpdateDiscountStatusResponse_STATUS_UNSPECIFIED              UpdateDiscountStatusResponse_Status = 0
	UpdateDiscountStatusResponse_STATUS_SUCCESS                  UpdateDiscountStatusResponse_Status = 1
	UpdateDiscountStatusResponse_STATUS_ERROR                    UpdateDiscountStatusResponse_Status = 2
	UpdateDiscountStatusResponse_STATUS_NOT_FOUND                UpdateDiscountStatusResponse_Status = 3
	UpdateDiscountStatusResponse_STATUS_INVALID_STATE_TRANSITION UpdateDiscountStatusResponse_Status = 4
)

// Enum value maps for UpdateDiscountStatusResponse_Status.
var (
	UpdateDiscountStatusResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_INVALID_STATE_TRANSITION",
	}
	UpdateDiscountStatusResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":              0,
		"STATUS_SUCCESS":                  1,
		"STATUS_ERROR":                    2,
		"STATUS_NOT_FOUND":                3,
		"STATUS_INVALID_STATE_TRANSITION": 4,
	}
)

func (x UpdateDiscountStatusResponse_Status) Enum() *UpdateDiscountStatusResponse_Status {
	p := new(UpdateDiscountStatusResponse_Status)
	*p = x
	return p
}

func (x UpdateDiscountStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateDiscountStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_discount_discount_v1_discount_proto_enumTypes[4].Descriptor()
}

func (UpdateDiscountStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_discount_discount_v1_discount_proto_enumTypes[4]
}

func (x UpdateDiscountStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateDiscountStatusResponse_Status.Descriptor instead.
func (UpdateDiscountStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{13, 0}
}

type RemoveDiscountResponse_Status int32

const (
	RemoveDiscountResponse_STATUS_UNSPECIFIED RemoveDiscountResponse_Status = 0
	RemoveDiscountResponse_STATUS_SUCCESS     RemoveDiscountResponse_Status = 1
	RemoveDiscountResponse_STATUS_ERROR       RemoveDiscountResponse_Status = 2
	RemoveDiscountResponse_STATUS_NOT_FOUND   RemoveDiscountResponse_Status = 3
)

// Enum value maps for RemoveDiscountResponse_Status.
var (
	RemoveDiscountResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	RemoveDiscountResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x RemoveDiscountResponse_Status) Enum() *RemoveDiscountResponse_Status {
	p := new(RemoveDiscountResponse_Status)
	*p = x
	return p
}

func (x RemoveDiscountResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveDiscountResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_discount_discount_v1_discount_proto_enumTypes[5].Descriptor()
}

func (RemoveDiscountResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_discount_discount_v1_discount_proto_enumTypes[5]
}

func (x RemoveDiscountResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveDiscountResponse_Status.Descriptor instead.
func (RemoveDiscountResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{15, 0}
}

type ApplyDiscountNotificationResponse_Status int32

const (
	ApplyDiscountNotificationResponse_STATUS_UNSPECIFIED    ApplyDiscountNotificationResponse_Status = 0
	ApplyDiscountNotificationResponse_STATUS_SUCCESS        ApplyDiscountNotificationResponse_Status = 1
	ApplyDiscountNotificationResponse_STATUS_ERROR          ApplyDiscountNotificationResponse_Status = 2
	ApplyDiscountNotificationResponse_STATUS_NOT_FOUND      ApplyDiscountNotificationResponse_Status = 3
	ApplyDiscountNotificationResponse_STATUS_INVALID_STATUS ApplyDiscountNotificationResponse_Status = 4 // unexpected status
)

// Enum value maps for ApplyDiscountNotificationResponse_Status.
var (
	ApplyDiscountNotificationResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_INVALID_STATUS",
	}
	ApplyDiscountNotificationResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_SUCCESS":        1,
		"STATUS_ERROR":          2,
		"STATUS_NOT_FOUND":      3,
		"STATUS_INVALID_STATUS": 4,
	}
)

func (x ApplyDiscountNotificationResponse_Status) Enum() *ApplyDiscountNotificationResponse_Status {
	p := new(ApplyDiscountNotificationResponse_Status)
	*p = x
	return p
}

func (x ApplyDiscountNotificationResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplyDiscountNotificationResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_discount_discount_v1_discount_proto_enumTypes[6].Descriptor()
}

func (ApplyDiscountNotificationResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_discount_discount_v1_discount_proto_enumTypes[6]
}

func (x ApplyDiscountNotificationResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplyDiscountNotificationResponse_Status.Descriptor instead.
func (ApplyDiscountNotificationResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{17, 0}
}

type SearchDiscountResponse_Status int32

const (
	SearchDiscountResponse_STATUS_UNSPECIFIED SearchDiscountResponse_Status = 0
	SearchDiscountResponse_STATUS_SUCCESS     SearchDiscountResponse_Status = 1
	SearchDiscountResponse_STATUS_ERROR       SearchDiscountResponse_Status = 2
	SearchDiscountResponse_STATUS_NOT_FOUND   SearchDiscountResponse_Status = 3
)

// Enum value maps for SearchDiscountResponse_Status.
var (
	SearchDiscountResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	SearchDiscountResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x SearchDiscountResponse_Status) Enum() *SearchDiscountResponse_Status {
	p := new(SearchDiscountResponse_Status)
	*p = x
	return p
}

func (x SearchDiscountResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchDiscountResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_discount_discount_v1_discount_proto_enumTypes[7].Descriptor()
}

func (SearchDiscountResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_discount_discount_v1_discount_proto_enumTypes[7]
}

func (x SearchDiscountResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchDiscountResponse_Status.Descriptor instead.
func (SearchDiscountResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{19, 0}
}

type TransactionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovalType approvaltypev1.ApprovalType `protobuf:"varint,1,opt,name=approval_type,json=approvalType,proto3,enum=micashared.common.enums.approvaltype.v1.ApprovalType" json:"approval_type,omitempty"`
	// Mica's transaction record primary key.
	TransactionKey      string         `protobuf:"bytes,2,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	PartnerKey          string         `protobuf:"bytes,3,opt,name=partner_key,json=partnerKey,proto3" json:"partner_key,omitempty"`
	PartnerName         string         `protobuf:"bytes,4,opt,name=partner_name,json=partnerName,proto3" json:"partner_name,omitempty"`
	OrganizationKey     string         `protobuf:"bytes,5,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	OrganizationName    string         `protobuf:"bytes,6,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	OrganizationAddress *v1.Address    `protobuf:"bytes,7,opt,name=organization_address,json=organizationAddress,proto3" json:"organization_address,omitempty"`
	StoreKey            string         `protobuf:"bytes,9,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	StoreNumber         string         `protobuf:"bytes,10,opt,name=store_number,json=storeNumber,proto3" json:"store_number,omitempty"`
	StoreAddress        *v1.Address    `protobuf:"bytes,11,opt,name=store_address,json=storeAddress,proto3" json:"store_address,omitempty"`
	LineItems           []*v1.LineItem `protobuf:"bytes,12,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
}

func (x *TransactionDetails) Reset() {
	*x = TransactionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDetails) ProtoMessage() {}

func (x *TransactionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDetails.ProtoReflect.Descriptor instead.
func (*TransactionDetails) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionDetails) GetApprovalType() approvaltypev1.ApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return approvaltypev1.ApprovalType(0)
}

func (x *TransactionDetails) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *TransactionDetails) GetPartnerKey() string {
	if x != nil {
		return x.PartnerKey
	}
	return ""
}

func (x *TransactionDetails) GetPartnerName() string {
	if x != nil {
		return x.PartnerName
	}
	return ""
}

func (x *TransactionDetails) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *TransactionDetails) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *TransactionDetails) GetOrganizationAddress() *v1.Address {
	if x != nil {
		return x.OrganizationAddress
	}
	return nil
}

func (x *TransactionDetails) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *TransactionDetails) GetStoreNumber() string {
	if x != nil {
		return x.StoreNumber
	}
	return ""
}

func (x *TransactionDetails) GetStoreAddress() *v1.Address {
	if x != nil {
		return x.StoreAddress
	}
	return nil
}

func (x *TransactionDetails) GetLineItems() []*v1.LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type Discount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscountDefinitionKey string                 `protobuf:"bytes,1,opt,name=discount_definition_key,json=discountDefinitionKey,proto3" json:"discount_definition_key,omitempty"`
	DiscountDefinitionRef string                 `protobuf:"bytes,2,opt,name=discount_definition_ref,json=discountDefinitionRef,proto3" json:"discount_definition_ref,omitempty"`
	DiscountKey           string                 `protobuf:"bytes,3,opt,name=discount_key,json=discountKey,proto3" json:"discount_key,omitempty"`
	DiscountVersion       int32                  `protobuf:"varint,23,opt,name=discount_version,json=discountVersion,proto3" json:"discount_version,omitempty"`
	Version               int64                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Created               *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Updated               *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	DiscountRef           string                 `protobuf:"bytes,7,opt,name=discount_ref,json=discountRef,proto3" json:"discount_ref,omitempty"`
	// human readable description for a given discount that can be shown to the end user
	Headline string `protobuf:"bytes,20,opt,name=headline,proto3" json:"headline,omitempty"`
	// human readable description for a given discount that can be shown to the end user
	Summary string `protobuf:"bytes,21,opt,name=summary,proto3" json:"summary,omitempty"`
	// address to the image for this discount definition (note that this image is expected to be square)
	ThumbnailUrl       string                      `protobuf:"bytes,22,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	ReceiptDescription string                      `protobuf:"bytes,8,opt,name=receipt_description,json=receiptDescription,proto3" json:"receipt_description,omitempty"`
	Status             DiscountStatus              `protobuf:"varint,9,opt,name=status,proto3,enum=mica.discount.discount.v1.DiscountStatus" json:"status,omitempty"`
	Type               discounttypev1.DiscountType `protobuf:"varint,10,opt,name=type,proto3,enum=micashared.common.enums.discounttype.v1.DiscountType" json:"type,omitempty"`
	ValidFrom          *timestamppb.Timestamp      `protobuf:"bytes,11,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo            *timestamppb.Timestamp      `protobuf:"bytes,12,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	// the basket must include items that match each of the criteria (i.e. it's an and operation) in order for this
	// discount to apply
	DiscountCriteria []*DiscountCriteria `protobuf:"bytes,13,rep,name=discount_criteria,json=discountCriteria,proto3" json:"discount_criteria,omitempty"`
	Currency         currencyv1.Currency `protobuf:"varint,14,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	UserKey          string              `protobuf:"bytes,15,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	UserRef          string              `protobuf:"bytes,16,opt,name=user_ref,json=userRef,proto3" json:"user_ref,omitempty"`
	// Types that are assignable to DiscountAmount:
	//
	//	*Discount_MonetaryAmount
	//	*Discount_PercentageAmount
	DiscountAmount     isDiscount_DiscountAmount `protobuf_oneof:"discount_amount"`
	TransactionDetails *TransactionDetails       `protobuf:"bytes,19,opt,name=transaction_details,json=transactionDetails,proto3" json:"transaction_details,omitempty"`
}

func (x *Discount) Reset() {
	*x = Discount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discount) ProtoMessage() {}

func (x *Discount) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discount.ProtoReflect.Descriptor instead.
func (*Discount) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{1}
}

func (x *Discount) GetDiscountDefinitionKey() string {
	if x != nil {
		return x.DiscountDefinitionKey
	}
	return ""
}

func (x *Discount) GetDiscountDefinitionRef() string {
	if x != nil {
		return x.DiscountDefinitionRef
	}
	return ""
}

func (x *Discount) GetDiscountKey() string {
	if x != nil {
		return x.DiscountKey
	}
	return ""
}

func (x *Discount) GetDiscountVersion() int32 {
	if x != nil {
		return x.DiscountVersion
	}
	return 0
}

func (x *Discount) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Discount) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Discount) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Discount) GetDiscountRef() string {
	if x != nil {
		return x.DiscountRef
	}
	return ""
}

func (x *Discount) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *Discount) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Discount) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Discount) GetReceiptDescription() string {
	if x != nil {
		return x.ReceiptDescription
	}
	return ""
}

func (x *Discount) GetStatus() DiscountStatus {
	if x != nil {
		return x.Status
	}
	return DiscountStatus_DISCOUNT_STATUS_UNSPECIFIED
}

func (x *Discount) GetType() discounttypev1.DiscountType {
	if x != nil {
		return x.Type
	}
	return discounttypev1.DiscountType(0)
}

func (x *Discount) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *Discount) GetValidTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *Discount) GetDiscountCriteria() []*DiscountCriteria {
	if x != nil {
		return x.DiscountCriteria
	}
	return nil
}

func (x *Discount) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *Discount) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *Discount) GetUserRef() string {
	if x != nil {
		return x.UserRef
	}
	return ""
}

func (m *Discount) GetDiscountAmount() isDiscount_DiscountAmount {
	if m != nil {
		return m.DiscountAmount
	}
	return nil
}

func (x *Discount) GetMonetaryAmount() *MonetaryAmount {
	if x, ok := x.GetDiscountAmount().(*Discount_MonetaryAmount); ok {
		return x.MonetaryAmount
	}
	return nil
}

func (x *Discount) GetPercentageAmount() *PercentageAmount {
	if x, ok := x.GetDiscountAmount().(*Discount_PercentageAmount); ok {
		return x.PercentageAmount
	}
	return nil
}

func (x *Discount) GetTransactionDetails() *TransactionDetails {
	if x != nil {
		return x.TransactionDetails
	}
	return nil
}

type isDiscount_DiscountAmount interface {
	isDiscount_DiscountAmount()
}

type Discount_MonetaryAmount struct {
	MonetaryAmount *MonetaryAmount `protobuf:"bytes,17,opt,name=monetary_amount,json=monetaryAmount,proto3,oneof"`
}

type Discount_PercentageAmount struct {
	PercentageAmount *PercentageAmount `protobuf:"bytes,18,opt,name=percentage_amount,json=percentageAmount,proto3,oneof"`
}

func (*Discount_MonetaryAmount) isDiscount_DiscountAmount() {}

func (*Discount_PercentageAmount) isDiscount_DiscountAmount() {}

type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an integer or decimal number
	Quantity string      `protobuf:"bytes,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Unit     unitv1.Unit `protobuf:"varint,2,opt,name=unit,proto3,enum=micashared.common.enums.unit.v1.Unit" json:"unit,omitempty"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{2}
}

func (x *Quantity) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *Quantity) GetUnit() unitv1.Unit {
	if x != nil {
		return x.Unit
	}
	return unitv1.Unit(0)
}

type DiscountCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity       *Quantity       `protobuf:"bytes,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	MonetaryAmount *MonetaryAmount `protobuf:"bytes,2,opt,name=monetary_amount,json=monetaryAmount,proto3" json:"monetary_amount,omitempty"`
	// indicates that this criteria is used to determine how much value to apply to these items
	DiscountAmountApplicable bool     `protobuf:"varint,3,opt,name=discount_amount_applicable,json=discountAmountApplicable,proto3" json:"discount_amount_applicable,omitempty"`
	ProductGroupRefs         []string `protobuf:"bytes,4,rep,name=product_group_refs,json=productGroupRefs,proto3" json:"product_group_refs,omitempty"`
	ProductMatchFilters      []string `protobuf:"bytes,5,rep,name=product_match_filters,json=productMatchFilters,proto3" json:"product_match_filters,omitempty"`
	// list of product codes of which the basket must include at least one in this list (i.e. it's an or operation)
	ProductCodes []string `protobuf:"bytes,6,rep,name=product_codes,json=productCodes,proto3" json:"product_codes,omitempty"`
}

func (x *DiscountCriteria) Reset() {
	*x = DiscountCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscountCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscountCriteria) ProtoMessage() {}

func (x *DiscountCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscountCriteria.ProtoReflect.Descriptor instead.
func (*DiscountCriteria) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{3}
}

func (x *DiscountCriteria) GetQuantity() *Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *DiscountCriteria) GetMonetaryAmount() *MonetaryAmount {
	if x != nil {
		return x.MonetaryAmount
	}
	return nil
}

func (x *DiscountCriteria) GetDiscountAmountApplicable() bool {
	if x != nil {
		return x.DiscountAmountApplicable
	}
	return false
}

func (x *DiscountCriteria) GetProductGroupRefs() []string {
	if x != nil {
		return x.ProductGroupRefs
	}
	return nil
}

func (x *DiscountCriteria) GetProductMatchFilters() []string {
	if x != nil {
		return x.ProductMatchFilters
	}
	return nil
}

func (x *DiscountCriteria) GetProductCodes() []string {
	if x != nil {
		return x.ProductCodes
	}
	return nil
}

type MonetaryAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// must be a monetary amount (e.g. 0.34)
	Amount    string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	TaxAmount string `protobuf:"bytes,2,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
}

func (x *MonetaryAmount) Reset() {
	*x = MonetaryAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonetaryAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonetaryAmount) ProtoMessage() {}

func (x *MonetaryAmount) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonetaryAmount.ProtoReflect.Descriptor instead.
func (*MonetaryAmount) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{4}
}

func (x *MonetaryAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MonetaryAmount) GetTaxAmount() string {
	if x != nil {
		return x.TaxAmount
	}
	return ""
}

type PercentageAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// must be a percentage (50.3%)
	PercentageAmount    string `protobuf:"bytes,1,opt,name=percentage_amount,json=percentageAmount,proto3" json:"percentage_amount,omitempty"`
	PercentageTaxAmount string `protobuf:"bytes,2,opt,name=percentage_tax_amount,json=percentageTaxAmount,proto3" json:"percentage_tax_amount,omitempty"`
	// must be a monetary amount (e.g. 0.34)
	MaxAmount *MonetaryAmount `protobuf:"bytes,3,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
}

func (x *PercentageAmount) Reset() {
	*x = PercentageAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentageAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentageAmount) ProtoMessage() {}

func (x *PercentageAmount) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentageAmount.ProtoReflect.Descriptor instead.
func (*PercentageAmount) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{5}
}

func (x *PercentageAmount) GetPercentageAmount() string {
	if x != nil {
		return x.PercentageAmount
	}
	return ""
}

func (x *PercentageAmount) GetPercentageTaxAmount() string {
	if x != nil {
		return x.PercentageTaxAmount
	}
	return ""
}

func (x *PercentageAmount) GetMaxAmount() *MonetaryAmount {
	if x != nil {
		return x.MaxAmount
	}
	return nil
}

type CreateDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscountDefinitionRef string `protobuf:"bytes,1,opt,name=discount_definition_ref,json=discountDefinitionRef,proto3" json:"discount_definition_ref,omitempty"`
	DiscountRef           string `protobuf:"bytes,2,opt,name=discount_ref,json=discountRef,proto3" json:"discount_ref,omitempty"`
	ReceiptDescription    string `protobuf:"bytes,3,opt,name=receipt_description,json=receiptDescription,proto3" json:"receipt_description,omitempty"`
	// the intial status of the discount has to be set and it cannot be unspecified
	Status    DiscountStatus         `protobuf:"varint,4,opt,name=status,proto3,enum=mica.discount.discount.v1.DiscountStatus" json:"status,omitempty"`
	ValidFrom *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	// the basket must include items that match each of the criteria (i.e. it's an and operation) in order for this
	// discount to apply
	DiscountCriteria []*DiscountCriteria `protobuf:"bytes,7,rep,name=discount_criteria,json=discountCriteria,proto3" json:"discount_criteria,omitempty"`
	UserKey          string              `protobuf:"bytes,8,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	UserRef          string              `protobuf:"bytes,9,opt,name=user_ref,json=userRef,proto3" json:"user_ref,omitempty"`
	// Types that are assignable to DiscountAmount:
	//
	//	*CreateDiscountRequest_MonetaryAmount
	//	*CreateDiscountRequest_PercentageAmount
	DiscountAmount isCreateDiscountRequest_DiscountAmount `protobuf_oneof:"discount_amount"`
}

func (x *CreateDiscountRequest) Reset() {
	*x = CreateDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiscountRequest) ProtoMessage() {}

func (x *CreateDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiscountRequest.ProtoReflect.Descriptor instead.
func (*CreateDiscountRequest) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDiscountRequest) GetDiscountDefinitionRef() string {
	if x != nil {
		return x.DiscountDefinitionRef
	}
	return ""
}

func (x *CreateDiscountRequest) GetDiscountRef() string {
	if x != nil {
		return x.DiscountRef
	}
	return ""
}

func (x *CreateDiscountRequest) GetReceiptDescription() string {
	if x != nil {
		return x.ReceiptDescription
	}
	return ""
}

func (x *CreateDiscountRequest) GetStatus() DiscountStatus {
	if x != nil {
		return x.Status
	}
	return DiscountStatus_DISCOUNT_STATUS_UNSPECIFIED
}

func (x *CreateDiscountRequest) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *CreateDiscountRequest) GetValidTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *CreateDiscountRequest) GetDiscountCriteria() []*DiscountCriteria {
	if x != nil {
		return x.DiscountCriteria
	}
	return nil
}

func (x *CreateDiscountRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *CreateDiscountRequest) GetUserRef() string {
	if x != nil {
		return x.UserRef
	}
	return ""
}

func (m *CreateDiscountRequest) GetDiscountAmount() isCreateDiscountRequest_DiscountAmount {
	if m != nil {
		return m.DiscountAmount
	}
	return nil
}

func (x *CreateDiscountRequest) GetMonetaryAmount() *MonetaryAmount {
	if x, ok := x.GetDiscountAmount().(*CreateDiscountRequest_MonetaryAmount); ok {
		return x.MonetaryAmount
	}
	return nil
}

func (x *CreateDiscountRequest) GetPercentageAmount() *PercentageAmount {
	if x, ok := x.GetDiscountAmount().(*CreateDiscountRequest_PercentageAmount); ok {
		return x.PercentageAmount
	}
	return nil
}

type isCreateDiscountRequest_DiscountAmount interface {
	isCreateDiscountRequest_DiscountAmount()
}

type CreateDiscountRequest_MonetaryAmount struct {
	MonetaryAmount *MonetaryAmount `protobuf:"bytes,10,opt,name=monetary_amount,json=monetaryAmount,proto3,oneof"`
}

type CreateDiscountRequest_PercentageAmount struct {
	PercentageAmount *PercentageAmount `protobuf:"bytes,11,opt,name=percentage_amount,json=percentageAmount,proto3,oneof"`
}

func (*CreateDiscountRequest_MonetaryAmount) isCreateDiscountRequest_DiscountAmount() {}

func (*CreateDiscountRequest_PercentageAmount) isCreateDiscountRequest_DiscountAmount() {}

type CreateDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          CreateDiscountResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.discount.discount.v1.CreateDiscountResponse_Status" json:"status,omitempty"`
	Error           *v1.Error                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	DiscountKey     string                        `protobuf:"bytes,3,opt,name=discount_key,json=discountKey,proto3" json:"discount_key,omitempty"`
	DiscountVersion int32                         `protobuf:"varint,5,opt,name=discount_version,json=discountVersion,proto3" json:"discount_version,omitempty"`
	Version         int64                         `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CreateDiscountResponse) Reset() {
	*x = CreateDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiscountResponse) ProtoMessage() {}

func (x *CreateDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiscountResponse.ProtoReflect.Descriptor instead.
func (*CreateDiscountResponse) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDiscountResponse) GetStatus() CreateDiscountResponse_Status {
	if x != nil {
		return x.Status
	}
	return CreateDiscountResponse_STATUS_UNSPECIFIED
}

func (x *CreateDiscountResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateDiscountResponse) GetDiscountKey() string {
	if x != nil {
		return x.DiscountKey
	}
	return ""
}

func (x *CreateDiscountResponse) GetDiscountVersion() int32 {
	if x != nil {
		return x.DiscountVersion
	}
	return 0
}

func (x *CreateDiscountResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DiscountIdentifier:
	//
	//	*GetDiscountRequest_DiscountRef
	//	*GetDiscountRequest_DiscountKey
	DiscountIdentifier isGetDiscountRequest_DiscountIdentifier `protobuf_oneof:"discount_identifier"`
}

func (x *GetDiscountRequest) Reset() {
	*x = GetDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountRequest) ProtoMessage() {}

func (x *GetDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountRequest.ProtoReflect.Descriptor instead.
func (*GetDiscountRequest) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{8}
}

func (m *GetDiscountRequest) GetDiscountIdentifier() isGetDiscountRequest_DiscountIdentifier {
	if m != nil {
		return m.DiscountIdentifier
	}
	return nil
}

func (x *GetDiscountRequest) GetDiscountRef() string {
	if x, ok := x.GetDiscountIdentifier().(*GetDiscountRequest_DiscountRef); ok {
		return x.DiscountRef
	}
	return ""
}

func (x *GetDiscountRequest) GetDiscountKey() string {
	if x, ok := x.GetDiscountIdentifier().(*GetDiscountRequest_DiscountKey); ok {
		return x.DiscountKey
	}
	return ""
}

type isGetDiscountRequest_DiscountIdentifier interface {
	isGetDiscountRequest_DiscountIdentifier()
}

type GetDiscountRequest_DiscountRef struct {
	DiscountRef string `protobuf:"bytes,1,opt,name=discount_ref,json=discountRef,proto3,oneof"`
}

type GetDiscountRequest_DiscountKey struct {
	DiscountKey string `protobuf:"bytes,2,opt,name=discount_key,json=discountKey,proto3,oneof"`
}

func (*GetDiscountRequest_DiscountRef) isGetDiscountRequest_DiscountIdentifier() {}

func (*GetDiscountRequest_DiscountKey) isGetDiscountRequest_DiscountIdentifier() {}

type GetDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   GetDiscountResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.discount.discount.v1.GetDiscountResponse_Status" json:"status,omitempty"`
	Error    *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Discount *Discount                  `protobuf:"bytes,3,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *GetDiscountResponse) Reset() {
	*x = GetDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountResponse) ProtoMessage() {}

func (x *GetDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountResponse.ProtoReflect.Descriptor instead.
func (*GetDiscountResponse) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{9}
}

func (x *GetDiscountResponse) GetStatus() GetDiscountResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetDiscountResponse_STATUS_UNSPECIFIED
}

func (x *GetDiscountResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetDiscountResponse) GetDiscount() *Discount {
	if x != nil {
		return x.Discount
	}
	return nil
}

type UpdateDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DiscountIdentifier:
	//
	//	*UpdateDiscountRequest_DiscountRef
	//	*UpdateDiscountRequest_DiscountKey
	DiscountIdentifier isUpdateDiscountRequest_DiscountIdentifier `protobuf_oneof:"discount_identifier"`
	Version            int64                                      `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	ReceiptDescription string                                     `protobuf:"bytes,3,opt,name=receipt_description,json=receiptDescription,proto3" json:"receipt_description,omitempty"`
	// the update status of the discount has to be set and it cannot be unspecified
	Status    DiscountStatus         `protobuf:"varint,4,opt,name=status,proto3,enum=mica.discount.discount.v1.DiscountStatus" json:"status,omitempty"`
	ValidFrom *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	// the basket must include items that match each of the criteria (i.e. it's an and operation) in order for this
	// discount to apply
	DiscountCriteria []*DiscountCriteria `protobuf:"bytes,7,rep,name=discount_criteria,json=discountCriteria,proto3" json:"discount_criteria,omitempty"`
	UserKey          string              `protobuf:"bytes,8,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	UserRef          string              `protobuf:"bytes,9,opt,name=user_ref,json=userRef,proto3" json:"user_ref,omitempty"`
	// Types that are assignable to DiscountAmount:
	//
	//	*UpdateDiscountRequest_MonetaryAmount
	//	*UpdateDiscountRequest_PercentageAmount
	DiscountAmount isUpdateDiscountRequest_DiscountAmount `protobuf_oneof:"discount_amount"`
}

func (x *UpdateDiscountRequest) Reset() {
	*x = UpdateDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscountRequest) ProtoMessage() {}

func (x *UpdateDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscountRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiscountRequest) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateDiscountRequest) GetDiscountIdentifier() isUpdateDiscountRequest_DiscountIdentifier {
	if m != nil {
		return m.DiscountIdentifier
	}
	return nil
}

func (x *UpdateDiscountRequest) GetDiscountRef() string {
	if x, ok := x.GetDiscountIdentifier().(*UpdateDiscountRequest_DiscountRef); ok {
		return x.DiscountRef
	}
	return ""
}

func (x *UpdateDiscountRequest) GetDiscountKey() string {
	if x, ok := x.GetDiscountIdentifier().(*UpdateDiscountRequest_DiscountKey); ok {
		return x.DiscountKey
	}
	return ""
}

func (x *UpdateDiscountRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UpdateDiscountRequest) GetReceiptDescription() string {
	if x != nil {
		return x.ReceiptDescription
	}
	return ""
}

func (x *UpdateDiscountRequest) GetStatus() DiscountStatus {
	if x != nil {
		return x.Status
	}
	return DiscountStatus_DISCOUNT_STATUS_UNSPECIFIED
}

func (x *UpdateDiscountRequest) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *UpdateDiscountRequest) GetValidTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *UpdateDiscountRequest) GetDiscountCriteria() []*DiscountCriteria {
	if x != nil {
		return x.DiscountCriteria
	}
	return nil
}

func (x *UpdateDiscountRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *UpdateDiscountRequest) GetUserRef() string {
	if x != nil {
		return x.UserRef
	}
	return ""
}

func (m *UpdateDiscountRequest) GetDiscountAmount() isUpdateDiscountRequest_DiscountAmount {
	if m != nil {
		return m.DiscountAmount
	}
	return nil
}

func (x *UpdateDiscountRequest) GetMonetaryAmount() *MonetaryAmount {
	if x, ok := x.GetDiscountAmount().(*UpdateDiscountRequest_MonetaryAmount); ok {
		return x.MonetaryAmount
	}
	return nil
}

func (x *UpdateDiscountRequest) GetPercentageAmount() *PercentageAmount {
	if x, ok := x.GetDiscountAmount().(*UpdateDiscountRequest_PercentageAmount); ok {
		return x.PercentageAmount
	}
	return nil
}

type isUpdateDiscountRequest_DiscountIdentifier interface {
	isUpdateDiscountRequest_DiscountIdentifier()
}

type UpdateDiscountRequest_DiscountRef struct {
	DiscountRef string `protobuf:"bytes,1,opt,name=discount_ref,json=discountRef,proto3,oneof"`
}

type UpdateDiscountRequest_DiscountKey struct {
	DiscountKey string `protobuf:"bytes,12,opt,name=discount_key,json=discountKey,proto3,oneof"`
}

func (*UpdateDiscountRequest_DiscountRef) isUpdateDiscountRequest_DiscountIdentifier() {}

func (*UpdateDiscountRequest_DiscountKey) isUpdateDiscountRequest_DiscountIdentifier() {}

type isUpdateDiscountRequest_DiscountAmount interface {
	isUpdateDiscountRequest_DiscountAmount()
}

type UpdateDiscountRequest_MonetaryAmount struct {
	MonetaryAmount *MonetaryAmount `protobuf:"bytes,10,opt,name=monetary_amount,json=monetaryAmount,proto3,oneof"`
}

type UpdateDiscountRequest_PercentageAmount struct {
	PercentageAmount *PercentageAmount `protobuf:"bytes,11,opt,name=percentage_amount,json=percentageAmount,proto3,oneof"`
}

func (*UpdateDiscountRequest_MonetaryAmount) isUpdateDiscountRequest_DiscountAmount() {}

func (*UpdateDiscountRequest_PercentageAmount) isUpdateDiscountRequest_DiscountAmount() {}

type UpdateDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  UpdateDiscountResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.discount.discount.v1.UpdateDiscountResponse_Status" json:"status,omitempty"`
	Error   *v1.Error                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Version int64                         `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateDiscountResponse) Reset() {
	*x = UpdateDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscountResponse) ProtoMessage() {}

func (x *UpdateDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscountResponse.ProtoReflect.Descriptor instead.
func (*UpdateDiscountResponse) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateDiscountResponse) GetStatus() UpdateDiscountResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateDiscountResponse_STATUS_UNSPECIFIED
}

func (x *UpdateDiscountResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateDiscountResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type UpdateDiscountStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DiscountIdentifier:
	//
	//	*UpdateDiscountStatusRequest_DiscountRef
	//	*UpdateDiscountStatusRequest_DiscountKey
	DiscountIdentifier isUpdateDiscountStatusRequest_DiscountIdentifier `protobuf_oneof:"discount_identifier"`
	DiscountStatus     DiscountStatus                                   `protobuf:"varint,2,opt,name=discount_status,json=discountStatus,proto3,enum=mica.discount.discount.v1.DiscountStatus" json:"discount_status,omitempty"`
}

func (x *UpdateDiscountStatusRequest) Reset() {
	*x = UpdateDiscountStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscountStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscountStatusRequest) ProtoMessage() {}

func (x *UpdateDiscountStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscountStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiscountStatusRequest) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{12}
}

func (m *UpdateDiscountStatusRequest) GetDiscountIdentifier() isUpdateDiscountStatusRequest_DiscountIdentifier {
	if m != nil {
		return m.DiscountIdentifier
	}
	return nil
}

func (x *UpdateDiscountStatusRequest) GetDiscountRef() string {
	if x, ok := x.GetDiscountIdentifier().(*UpdateDiscountStatusRequest_DiscountRef); ok {
		return x.DiscountRef
	}
	return ""
}

func (x *UpdateDiscountStatusRequest) GetDiscountKey() string {
	if x, ok := x.GetDiscountIdentifier().(*UpdateDiscountStatusRequest_DiscountKey); ok {
		return x.DiscountKey
	}
	return ""
}

func (x *UpdateDiscountStatusRequest) GetDiscountStatus() DiscountStatus {
	if x != nil {
		return x.DiscountStatus
	}
	return DiscountStatus_DISCOUNT_STATUS_UNSPECIFIED
}

type isUpdateDiscountStatusRequest_DiscountIdentifier interface {
	isUpdateDiscountStatusRequest_DiscountIdentifier()
}

type UpdateDiscountStatusRequest_DiscountRef struct {
	DiscountRef string `protobuf:"bytes,1,opt,name=discount_ref,json=discountRef,proto3,oneof"`
}

type UpdateDiscountStatusRequest_DiscountKey struct {
	DiscountKey string `protobuf:"bytes,3,opt,name=discount_key,json=discountKey,proto3,oneof"`
}

func (*UpdateDiscountStatusRequest_DiscountRef) isUpdateDiscountStatusRequest_DiscountIdentifier() {}

func (*UpdateDiscountStatusRequest_DiscountKey) isUpdateDiscountStatusRequest_DiscountIdentifier() {}

type UpdateDiscountStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  UpdateDiscountStatusResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.discount.discount.v1.UpdateDiscountStatusResponse_Status" json:"status,omitempty"`
	Error   *v1.Error                           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Version int64                               `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateDiscountStatusResponse) Reset() {
	*x = UpdateDiscountStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscountStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscountStatusResponse) ProtoMessage() {}

func (x *UpdateDiscountStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscountStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateDiscountStatusResponse) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateDiscountStatusResponse) GetStatus() UpdateDiscountStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateDiscountStatusResponse_STATUS_UNSPECIFIED
}

func (x *UpdateDiscountStatusResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateDiscountStatusResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type RemoveDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DiscountIdentifier:
	//
	//	*RemoveDiscountRequest_DiscountRef
	//	*RemoveDiscountRequest_DiscountKey
	DiscountIdentifier isRemoveDiscountRequest_DiscountIdentifier `protobuf_oneof:"discount_identifier"`
}

func (x *RemoveDiscountRequest) Reset() {
	*x = RemoveDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDiscountRequest) ProtoMessage() {}

func (x *RemoveDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDiscountRequest.ProtoReflect.Descriptor instead.
func (*RemoveDiscountRequest) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{14}
}

func (m *RemoveDiscountRequest) GetDiscountIdentifier() isRemoveDiscountRequest_DiscountIdentifier {
	if m != nil {
		return m.DiscountIdentifier
	}
	return nil
}

func (x *RemoveDiscountRequest) GetDiscountRef() string {
	if x, ok := x.GetDiscountIdentifier().(*RemoveDiscountRequest_DiscountRef); ok {
		return x.DiscountRef
	}
	return ""
}

func (x *RemoveDiscountRequest) GetDiscountKey() string {
	if x, ok := x.GetDiscountIdentifier().(*RemoveDiscountRequest_DiscountKey); ok {
		return x.DiscountKey
	}
	return ""
}

type isRemoveDiscountRequest_DiscountIdentifier interface {
	isRemoveDiscountRequest_DiscountIdentifier()
}

type RemoveDiscountRequest_DiscountRef struct {
	DiscountRef string `protobuf:"bytes,1,opt,name=discount_ref,json=discountRef,proto3,oneof"`
}

type RemoveDiscountRequest_DiscountKey struct {
	DiscountKey string `protobuf:"bytes,2,opt,name=discount_key,json=discountKey,proto3,oneof"`
}

func (*RemoveDiscountRequest_DiscountRef) isRemoveDiscountRequest_DiscountIdentifier() {}

func (*RemoveDiscountRequest_DiscountKey) isRemoveDiscountRequest_DiscountIdentifier() {}

type RemoveDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemoveDiscountResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.discount.discount.v1.RemoveDiscountResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RemoveDiscountResponse) Reset() {
	*x = RemoveDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDiscountResponse) ProtoMessage() {}

func (x *RemoveDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDiscountResponse.ProtoReflect.Descriptor instead.
func (*RemoveDiscountResponse) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveDiscountResponse) GetStatus() RemoveDiscountResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemoveDiscountResponse_STATUS_UNSPECIFIED
}

func (x *RemoveDiscountResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ApplyDiscountNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// discount details
	DiscountKey     string              `protobuf:"bytes,1,opt,name=discount_key,json=discountKey,proto3" json:"discount_key,omitempty"`
	DiscountRef     string              `protobuf:"bytes,2,opt,name=discount_ref,json=discountRef,proto3" json:"discount_ref,omitempty"`
	DiscountVersion int32               `protobuf:"varint,23,opt,name=discount_version,json=discountVersion,proto3" json:"discount_version,omitempty"`
	Status          DiscountStatus      `protobuf:"varint,3,opt,name=status,proto3,enum=mica.discount.discount.v1.DiscountStatus" json:"status,omitempty"` // only USED supported initially
	Currency        currencyv1.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	MonetaryAmount  *MonetaryAmount     `protobuf:"bytes,5,opt,name=monetary_amount,json=monetaryAmount,proto3" json:"monetary_amount,omitempty"`
	// transaction details
	TransactionKey      string                 `protobuf:"bytes,10,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	TransactionCreated  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=transaction_created,json=transactionCreated,proto3" json:"transaction_created,omitempty"` // Timestamp when discount was applied
	PartnerKey          string                 `protobuf:"bytes,13,opt,name=partner_key,json=partnerKey,proto3" json:"partner_key,omitempty"`
	PartnerName         string                 `protobuf:"bytes,14,opt,name=partner_name,json=partnerName,proto3" json:"partner_name,omitempty"`
	OrganizationKey     string                 `protobuf:"bytes,15,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	OrganizationName    string                 `protobuf:"bytes,16,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	OrganizationAddress *v1.Address            `protobuf:"bytes,17,opt,name=organization_address,json=organizationAddress,proto3" json:"organization_address,omitempty"`
	StoreKey            string                 `protobuf:"bytes,19,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	StoreNumber         string                 `protobuf:"bytes,20,opt,name=store_number,json=storeNumber,proto3" json:"store_number,omitempty"`
	StoreAddress        *v1.Address            `protobuf:"bytes,21,opt,name=store_address,json=storeAddress,proto3" json:"store_address,omitempty"`
	LineItems           []*v1.LineItem         `protobuf:"bytes,22,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
}

func (x *ApplyDiscountNotificationRequest) Reset() {
	*x = ApplyDiscountNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDiscountNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDiscountNotificationRequest) ProtoMessage() {}

func (x *ApplyDiscountNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDiscountNotificationRequest.ProtoReflect.Descriptor instead.
func (*ApplyDiscountNotificationRequest) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{16}
}

func (x *ApplyDiscountNotificationRequest) GetDiscountKey() string {
	if x != nil {
		return x.DiscountKey
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetDiscountRef() string {
	if x != nil {
		return x.DiscountRef
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetDiscountVersion() int32 {
	if x != nil {
		return x.DiscountVersion
	}
	return 0
}

func (x *ApplyDiscountNotificationRequest) GetStatus() DiscountStatus {
	if x != nil {
		return x.Status
	}
	return DiscountStatus_DISCOUNT_STATUS_UNSPECIFIED
}

func (x *ApplyDiscountNotificationRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *ApplyDiscountNotificationRequest) GetMonetaryAmount() *MonetaryAmount {
	if x != nil {
		return x.MonetaryAmount
	}
	return nil
}

func (x *ApplyDiscountNotificationRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetTransactionCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionCreated
	}
	return nil
}

func (x *ApplyDiscountNotificationRequest) GetPartnerKey() string {
	if x != nil {
		return x.PartnerKey
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetPartnerName() string {
	if x != nil {
		return x.PartnerName
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetOrganizationAddress() *v1.Address {
	if x != nil {
		return x.OrganizationAddress
	}
	return nil
}

func (x *ApplyDiscountNotificationRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetStoreNumber() string {
	if x != nil {
		return x.StoreNumber
	}
	return ""
}

func (x *ApplyDiscountNotificationRequest) GetStoreAddress() *v1.Address {
	if x != nil {
		return x.StoreAddress
	}
	return nil
}

func (x *ApplyDiscountNotificationRequest) GetLineItems() []*v1.LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type ApplyDiscountNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ApplyDiscountNotificationResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.discount.discount.v1.ApplyDiscountNotificationResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// TODO(kuchlein): determine if we want to have an identifier passed back. I'm leaning towards not
	ExternalRef string `protobuf:"bytes,3,opt,name=external_ref,json=externalRef,proto3" json:"external_ref,omitempty"`
}

func (x *ApplyDiscountNotificationResponse) Reset() {
	*x = ApplyDiscountNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDiscountNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDiscountNotificationResponse) ProtoMessage() {}

func (x *ApplyDiscountNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDiscountNotificationResponse.ProtoReflect.Descriptor instead.
func (*ApplyDiscountNotificationResponse) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{17}
}

func (x *ApplyDiscountNotificationResponse) GetStatus() ApplyDiscountNotificationResponse_Status {
	if x != nil {
		return x.Status
	}
	return ApplyDiscountNotificationResponse_STATUS_UNSPECIFIED
}

func (x *ApplyDiscountNotificationResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ApplyDiscountNotificationResponse) GetExternalRef() string {
	if x != nil {
		return x.ExternalRef
	}
	return ""
}

type SearchDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscountDefinitionRef string                      `protobuf:"bytes,2,opt,name=discount_definition_ref,json=discountDefinitionRef,proto3" json:"discount_definition_ref,omitempty"`
	ReceiptDescription    string                      `protobuf:"bytes,3,opt,name=receipt_description,json=receiptDescription,proto3" json:"receipt_description,omitempty"`
	Status                DiscountStatus              `protobuf:"varint,4,opt,name=status,proto3,enum=mica.discount.discount.v1.DiscountStatus" json:"status,omitempty"`
	Type                  discounttypev1.DiscountType `protobuf:"varint,5,opt,name=type,proto3,enum=micashared.common.enums.discounttype.v1.DiscountType" json:"type,omitempty"`
	ValidFrom             *timestamppb.Timestamp      `protobuf:"bytes,6,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo               *timestamppb.Timestamp      `protobuf:"bytes,7,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	Currency              currencyv1.Currency         `protobuf:"varint,8,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	UserRef               string                      `protobuf:"bytes,9,opt,name=user_ref,json=userRef,proto3" json:"user_ref,omitempty"`
}

func (x *SearchDiscountRequest) Reset() {
	*x = SearchDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDiscountRequest) ProtoMessage() {}

func (x *SearchDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDiscountRequest.ProtoReflect.Descriptor instead.
func (*SearchDiscountRequest) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{18}
}

func (x *SearchDiscountRequest) GetDiscountDefinitionRef() string {
	if x != nil {
		return x.DiscountDefinitionRef
	}
	return ""
}

func (x *SearchDiscountRequest) GetReceiptDescription() string {
	if x != nil {
		return x.ReceiptDescription
	}
	return ""
}

func (x *SearchDiscountRequest) GetStatus() DiscountStatus {
	if x != nil {
		return x.Status
	}
	return DiscountStatus_DISCOUNT_STATUS_UNSPECIFIED
}

func (x *SearchDiscountRequest) GetType() discounttypev1.DiscountType {
	if x != nil {
		return x.Type
	}
	return discounttypev1.DiscountType(0)
}

func (x *SearchDiscountRequest) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *SearchDiscountRequest) GetValidTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *SearchDiscountRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *SearchDiscountRequest) GetUserRef() string {
	if x != nil {
		return x.UserRef
	}
	return ""
}

type SearchDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    SearchDiscountResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.discount.discount.v1.SearchDiscountResponse_Status" json:"status,omitempty"`
	Error     *v1.Error                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Discounts []*Discount                   `protobuf:"bytes,3,rep,name=discounts,proto3" json:"discounts,omitempty"`
}

func (x *SearchDiscountResponse) Reset() {
	*x = SearchDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDiscountResponse) ProtoMessage() {}

func (x *SearchDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_discount_discount_v1_discount_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDiscountResponse.ProtoReflect.Descriptor instead.
func (*SearchDiscountResponse) Descriptor() ([]byte, []int) {
	return file_mica_discount_discount_v1_discount_proto_rawDescGZIP(), []int{19}
}

func (x *SearchDiscountResponse) GetStatus() SearchDiscountResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchDiscountResponse_STATUS_UNSPECIFIED
}

func (x *SearchDiscountResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchDiscountResponse) GetDiscounts() []*Discount {
	if x != nil {
		return x.Discounts
	}
	return nil
}

var File_mica_discount_discount_v1_discount_proto protoreflect.FileDescriptor

var file_mica_discount_discount_v1_discount_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x75, 0x6e,
	0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x05, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x84, 0x0b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x41, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x52, 0x15, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x52,
	0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xac, 0x02, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xac, 0x02, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xb2, 0x01, 0x02, 0x08, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04, 0x08, 0x00, 0x40, 0x01, 0x52, 0x07, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x6f, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x49,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x54, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x6e,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x8a, 0x03,
	0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x73, 0x12, 0x3c, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x0e, 0x4d, 0x6f,
	0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61,
	0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x82, 0x06, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x32, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x38,
	0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x00, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04,
	0x08, 0x00, 0x40, 0x01, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x58, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x24, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x1b, 0x18, 0x32, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x54, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0xb6, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xa0, 0x06, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x1b, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x12, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x20, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xb2, 0x01, 0x02, 0x08, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04, 0x08, 0x00, 0x40, 0x01, 0x52, 0x07, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x6f, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x54, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01, 0x52,
	0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xf2, 0x01, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xd0, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x81, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12,
	0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x2e,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x15,
	0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xfb, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x03, 0x22, 0xf2, 0x07, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x52, 0x0a,
	0x0f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e,
	0x18, 0x32, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18,
	0x32, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x21, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x32, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x22, 0x77, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x04, 0x22, 0xe6, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0xbe,
	0x02, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x41,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x2a,
	0xbf, 0x01, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x05, 0x42, 0x4e, 0x0a, 0x1c, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x42, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x18, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43,
	0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_discount_discount_v1_discount_proto_rawDescOnce sync.Once
	file_mica_discount_discount_v1_discount_proto_rawDescData = file_mica_discount_discount_v1_discount_proto_rawDesc
)

func file_mica_discount_discount_v1_discount_proto_rawDescGZIP() []byte {
	file_mica_discount_discount_v1_discount_proto_rawDescOnce.Do(func() {
		file_mica_discount_discount_v1_discount_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_discount_discount_v1_discount_proto_rawDescData)
	})
	return file_mica_discount_discount_v1_discount_proto_rawDescData
}

var file_mica_discount_discount_v1_discount_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_mica_discount_discount_v1_discount_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_mica_discount_discount_v1_discount_proto_goTypes = []interface{}{
	(DiscountStatus)(0),                           // 0: mica.discount.discount.v1.DiscountStatus
	(CreateDiscountResponse_Status)(0),            // 1: mica.discount.discount.v1.CreateDiscountResponse.Status
	(GetDiscountResponse_Status)(0),               // 2: mica.discount.discount.v1.GetDiscountResponse.Status
	(UpdateDiscountResponse_Status)(0),            // 3: mica.discount.discount.v1.UpdateDiscountResponse.Status
	(UpdateDiscountStatusResponse_Status)(0),      // 4: mica.discount.discount.v1.UpdateDiscountStatusResponse.Status
	(RemoveDiscountResponse_Status)(0),            // 5: mica.discount.discount.v1.RemoveDiscountResponse.Status
	(ApplyDiscountNotificationResponse_Status)(0), // 6: mica.discount.discount.v1.ApplyDiscountNotificationResponse.Status
	(SearchDiscountResponse_Status)(0),            // 7: mica.discount.discount.v1.SearchDiscountResponse.Status
	(*TransactionDetails)(nil),                    // 8: mica.discount.discount.v1.TransactionDetails
	(*Discount)(nil),                              // 9: mica.discount.discount.v1.Discount
	(*Quantity)(nil),                              // 10: mica.discount.discount.v1.Quantity
	(*DiscountCriteria)(nil),                      // 11: mica.discount.discount.v1.DiscountCriteria
	(*MonetaryAmount)(nil),                        // 12: mica.discount.discount.v1.MonetaryAmount
	(*PercentageAmount)(nil),                      // 13: mica.discount.discount.v1.PercentageAmount
	(*CreateDiscountRequest)(nil),                 // 14: mica.discount.discount.v1.CreateDiscountRequest
	(*CreateDiscountResponse)(nil),                // 15: mica.discount.discount.v1.CreateDiscountResponse
	(*GetDiscountRequest)(nil),                    // 16: mica.discount.discount.v1.GetDiscountRequest
	(*GetDiscountResponse)(nil),                   // 17: mica.discount.discount.v1.GetDiscountResponse
	(*UpdateDiscountRequest)(nil),                 // 18: mica.discount.discount.v1.UpdateDiscountRequest
	(*UpdateDiscountResponse)(nil),                // 19: mica.discount.discount.v1.UpdateDiscountResponse
	(*UpdateDiscountStatusRequest)(nil),           // 20: mica.discount.discount.v1.UpdateDiscountStatusRequest
	(*UpdateDiscountStatusResponse)(nil),          // 21: mica.discount.discount.v1.UpdateDiscountStatusResponse
	(*RemoveDiscountRequest)(nil),                 // 22: mica.discount.discount.v1.RemoveDiscountRequest
	(*RemoveDiscountResponse)(nil),                // 23: mica.discount.discount.v1.RemoveDiscountResponse
	(*ApplyDiscountNotificationRequest)(nil),      // 24: mica.discount.discount.v1.ApplyDiscountNotificationRequest
	(*ApplyDiscountNotificationResponse)(nil),     // 25: mica.discount.discount.v1.ApplyDiscountNotificationResponse
	(*SearchDiscountRequest)(nil),                 // 26: mica.discount.discount.v1.SearchDiscountRequest
	(*SearchDiscountResponse)(nil),                // 27: mica.discount.discount.v1.SearchDiscountResponse
	(approvaltypev1.ApprovalType)(0),              // 28: micashared.common.enums.approvaltype.v1.ApprovalType
	(*v1.Address)(nil),                            // 29: micashared.common.v1.Address
	(*v1.LineItem)(nil),                           // 30: micashared.common.v1.LineItem
	(*timestamppb.Timestamp)(nil),                 // 31: google.protobuf.Timestamp
	(discounttypev1.DiscountType)(0),              // 32: micashared.common.enums.discounttype.v1.DiscountType
	(currencyv1.Currency)(0),                      // 33: micashared.common.enums.currency.v1.Currency
	(unitv1.Unit)(0),                              // 34: micashared.common.enums.unit.v1.Unit
	(*v1.Error)(nil),                              // 35: micashared.common.v1.Error
}
var file_mica_discount_discount_v1_discount_proto_depIdxs = []int32{
	28, // 0: mica.discount.discount.v1.TransactionDetails.approval_type:type_name -> micashared.common.enums.approvaltype.v1.ApprovalType
	29, // 1: mica.discount.discount.v1.TransactionDetails.organization_address:type_name -> micashared.common.v1.Address
	29, // 2: mica.discount.discount.v1.TransactionDetails.store_address:type_name -> micashared.common.v1.Address
	30, // 3: mica.discount.discount.v1.TransactionDetails.line_items:type_name -> micashared.common.v1.LineItem
	31, // 4: mica.discount.discount.v1.Discount.created:type_name -> google.protobuf.Timestamp
	31, // 5: mica.discount.discount.v1.Discount.updated:type_name -> google.protobuf.Timestamp
	0,  // 6: mica.discount.discount.v1.Discount.status:type_name -> mica.discount.discount.v1.DiscountStatus
	32, // 7: mica.discount.discount.v1.Discount.type:type_name -> micashared.common.enums.discounttype.v1.DiscountType
	31, // 8: mica.discount.discount.v1.Discount.valid_from:type_name -> google.protobuf.Timestamp
	31, // 9: mica.discount.discount.v1.Discount.valid_to:type_name -> google.protobuf.Timestamp
	11, // 10: mica.discount.discount.v1.Discount.discount_criteria:type_name -> mica.discount.discount.v1.DiscountCriteria
	33, // 11: mica.discount.discount.v1.Discount.currency:type_name -> micashared.common.enums.currency.v1.Currency
	12, // 12: mica.discount.discount.v1.Discount.monetary_amount:type_name -> mica.discount.discount.v1.MonetaryAmount
	13, // 13: mica.discount.discount.v1.Discount.percentage_amount:type_name -> mica.discount.discount.v1.PercentageAmount
	8,  // 14: mica.discount.discount.v1.Discount.transaction_details:type_name -> mica.discount.discount.v1.TransactionDetails
	34, // 15: mica.discount.discount.v1.Quantity.unit:type_name -> micashared.common.enums.unit.v1.Unit
	10, // 16: mica.discount.discount.v1.DiscountCriteria.quantity:type_name -> mica.discount.discount.v1.Quantity
	12, // 17: mica.discount.discount.v1.DiscountCriteria.monetary_amount:type_name -> mica.discount.discount.v1.MonetaryAmount
	12, // 18: mica.discount.discount.v1.PercentageAmount.max_amount:type_name -> mica.discount.discount.v1.MonetaryAmount
	0,  // 19: mica.discount.discount.v1.CreateDiscountRequest.status:type_name -> mica.discount.discount.v1.DiscountStatus
	31, // 20: mica.discount.discount.v1.CreateDiscountRequest.valid_from:type_name -> google.protobuf.Timestamp
	31, // 21: mica.discount.discount.v1.CreateDiscountRequest.valid_to:type_name -> google.protobuf.Timestamp
	11, // 22: mica.discount.discount.v1.CreateDiscountRequest.discount_criteria:type_name -> mica.discount.discount.v1.DiscountCriteria
	12, // 23: mica.discount.discount.v1.CreateDiscountRequest.monetary_amount:type_name -> mica.discount.discount.v1.MonetaryAmount
	13, // 24: mica.discount.discount.v1.CreateDiscountRequest.percentage_amount:type_name -> mica.discount.discount.v1.PercentageAmount
	1,  // 25: mica.discount.discount.v1.CreateDiscountResponse.status:type_name -> mica.discount.discount.v1.CreateDiscountResponse.Status
	35, // 26: mica.discount.discount.v1.CreateDiscountResponse.error:type_name -> micashared.common.v1.Error
	2,  // 27: mica.discount.discount.v1.GetDiscountResponse.status:type_name -> mica.discount.discount.v1.GetDiscountResponse.Status
	35, // 28: mica.discount.discount.v1.GetDiscountResponse.error:type_name -> micashared.common.v1.Error
	9,  // 29: mica.discount.discount.v1.GetDiscountResponse.discount:type_name -> mica.discount.discount.v1.Discount
	0,  // 30: mica.discount.discount.v1.UpdateDiscountRequest.status:type_name -> mica.discount.discount.v1.DiscountStatus
	31, // 31: mica.discount.discount.v1.UpdateDiscountRequest.valid_from:type_name -> google.protobuf.Timestamp
	31, // 32: mica.discount.discount.v1.UpdateDiscountRequest.valid_to:type_name -> google.protobuf.Timestamp
	11, // 33: mica.discount.discount.v1.UpdateDiscountRequest.discount_criteria:type_name -> mica.discount.discount.v1.DiscountCriteria
	12, // 34: mica.discount.discount.v1.UpdateDiscountRequest.monetary_amount:type_name -> mica.discount.discount.v1.MonetaryAmount
	13, // 35: mica.discount.discount.v1.UpdateDiscountRequest.percentage_amount:type_name -> mica.discount.discount.v1.PercentageAmount
	3,  // 36: mica.discount.discount.v1.UpdateDiscountResponse.status:type_name -> mica.discount.discount.v1.UpdateDiscountResponse.Status
	35, // 37: mica.discount.discount.v1.UpdateDiscountResponse.error:type_name -> micashared.common.v1.Error
	0,  // 38: mica.discount.discount.v1.UpdateDiscountStatusRequest.discount_status:type_name -> mica.discount.discount.v1.DiscountStatus
	4,  // 39: mica.discount.discount.v1.UpdateDiscountStatusResponse.status:type_name -> mica.discount.discount.v1.UpdateDiscountStatusResponse.Status
	35, // 40: mica.discount.discount.v1.UpdateDiscountStatusResponse.error:type_name -> micashared.common.v1.Error
	5,  // 41: mica.discount.discount.v1.RemoveDiscountResponse.status:type_name -> mica.discount.discount.v1.RemoveDiscountResponse.Status
	35, // 42: mica.discount.discount.v1.RemoveDiscountResponse.error:type_name -> micashared.common.v1.Error
	0,  // 43: mica.discount.discount.v1.ApplyDiscountNotificationRequest.status:type_name -> mica.discount.discount.v1.DiscountStatus
	33, // 44: mica.discount.discount.v1.ApplyDiscountNotificationRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	12, // 45: mica.discount.discount.v1.ApplyDiscountNotificationRequest.monetary_amount:type_name -> mica.discount.discount.v1.MonetaryAmount
	31, // 46: mica.discount.discount.v1.ApplyDiscountNotificationRequest.transaction_created:type_name -> google.protobuf.Timestamp
	29, // 47: mica.discount.discount.v1.ApplyDiscountNotificationRequest.organization_address:type_name -> micashared.common.v1.Address
	29, // 48: mica.discount.discount.v1.ApplyDiscountNotificationRequest.store_address:type_name -> micashared.common.v1.Address
	30, // 49: mica.discount.discount.v1.ApplyDiscountNotificationRequest.line_items:type_name -> micashared.common.v1.LineItem
	6,  // 50: mica.discount.discount.v1.ApplyDiscountNotificationResponse.status:type_name -> mica.discount.discount.v1.ApplyDiscountNotificationResponse.Status
	35, // 51: mica.discount.discount.v1.ApplyDiscountNotificationResponse.error:type_name -> micashared.common.v1.Error
	0,  // 52: mica.discount.discount.v1.SearchDiscountRequest.status:type_name -> mica.discount.discount.v1.DiscountStatus
	32, // 53: mica.discount.discount.v1.SearchDiscountRequest.type:type_name -> micashared.common.enums.discounttype.v1.DiscountType
	31, // 54: mica.discount.discount.v1.SearchDiscountRequest.valid_from:type_name -> google.protobuf.Timestamp
	31, // 55: mica.discount.discount.v1.SearchDiscountRequest.valid_to:type_name -> google.protobuf.Timestamp
	33, // 56: mica.discount.discount.v1.SearchDiscountRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	7,  // 57: mica.discount.discount.v1.SearchDiscountResponse.status:type_name -> mica.discount.discount.v1.SearchDiscountResponse.Status
	35, // 58: mica.discount.discount.v1.SearchDiscountResponse.error:type_name -> micashared.common.v1.Error
	9,  // 59: mica.discount.discount.v1.SearchDiscountResponse.discounts:type_name -> mica.discount.discount.v1.Discount
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_mica_discount_discount_v1_discount_proto_init() }
func file_mica_discount_discount_v1_discount_proto_init() {
	if File_mica_discount_discount_v1_discount_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_discount_discount_v1_discount_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscountCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonetaryAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentageAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscountStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscountStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDiscountNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDiscountNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_discount_discount_v1_discount_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_discount_discount_v1_discount_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Discount_MonetaryAmount)(nil),
		(*Discount_PercentageAmount)(nil),
	}
	file_mica_discount_discount_v1_discount_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CreateDiscountRequest_MonetaryAmount)(nil),
		(*CreateDiscountRequest_PercentageAmount)(nil),
	}
	file_mica_discount_discount_v1_discount_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GetDiscountRequest_DiscountRef)(nil),
		(*GetDiscountRequest_DiscountKey)(nil),
	}
	file_mica_discount_discount_v1_discount_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*UpdateDiscountRequest_DiscountRef)(nil),
		(*UpdateDiscountRequest_DiscountKey)(nil),
		(*UpdateDiscountRequest_MonetaryAmount)(nil),
		(*UpdateDiscountRequest_PercentageAmount)(nil),
	}
	file_mica_discount_discount_v1_discount_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*UpdateDiscountStatusRequest_DiscountRef)(nil),
		(*UpdateDiscountStatusRequest_DiscountKey)(nil),
	}
	file_mica_discount_discount_v1_discount_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*RemoveDiscountRequest_DiscountRef)(nil),
		(*RemoveDiscountRequest_DiscountKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_discount_discount_v1_discount_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_discount_discount_v1_discount_proto_goTypes,
		DependencyIndexes: file_mica_discount_discount_v1_discount_proto_depIdxs,
		EnumInfos:         file_mica_discount_discount_v1_discount_proto_enumTypes,
		MessageInfos:      file_mica_discount_discount_v1_discount_proto_msgTypes,
	}.Build()
	File_mica_discount_discount_v1_discount_proto = out.File
	file_mica_discount_discount_v1_discount_proto_rawDesc = nil
	file_mica_discount_discount_v1_discount_proto_goTypes = nil
	file_mica_discount_discount_v1_discount_proto_depIdxs = nil
}
