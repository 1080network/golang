// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: mica/member/auth/v1/mtls_to_mica_service.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MTLSToMicaService_GenerateCertificate_FullMethodName = "/mica.member.auth.v1.MTLSToMicaService/GenerateCertificate"
	MTLSToMicaService_EnableCertificate_FullMethodName   = "/mica.member.auth.v1.MTLSToMicaService/EnableCertificate"
	MTLSToMicaService_DisableCertificate_FullMethodName  = "/mica.member.auth.v1.MTLSToMicaService/DisableCertificate"
	MTLSToMicaService_SearchCertificate_FullMethodName   = "/mica.member.auth.v1.MTLSToMicaService/SearchCertificate"
	MTLSToMicaService_GetCertificate_FullMethodName      = "/mica.member.auth.v1.MTLSToMicaService/GetCertificate"
)

// MTLSToMicaServiceClient is the client API for MTLSToMicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MTLSToMicaServiceClient interface {
	// Generate a new mTLS certificate for authenticating calls to Mica member APIs
	GenerateCertificate(ctx context.Context, in *GenerateCertificateRequest, opts ...grpc.CallOption) (*GenerateCertificateResponse, error)
	// Update the certificate with a given serial number, only supports enable/disable for now
	EnableCertificate(ctx context.Context, in *EnableCertificateRequest, opts ...grpc.CallOption) (*EnableCertificateResponse, error)
	// do we need a separate Disable call?
	DisableCertificate(ctx context.Context, in *DisableCertificateRequest, opts ...grpc.CallOption) (*DisableCertificateResponse, error)
	// Search for certificates and return the ones that match the criteria provided
	SearchCertificate(ctx context.Context, in *SearchCertificateRequest, opts ...grpc.CallOption) (*SearchCertificateResponse, error)
	// return a single certificate
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateResponse, error)
}

type mTLSToMicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMTLSToMicaServiceClient(cc grpc.ClientConnInterface) MTLSToMicaServiceClient {
	return &mTLSToMicaServiceClient{cc}
}

func (c *mTLSToMicaServiceClient) GenerateCertificate(ctx context.Context, in *GenerateCertificateRequest, opts ...grpc.CallOption) (*GenerateCertificateResponse, error) {
	out := new(GenerateCertificateResponse)
	err := c.cc.Invoke(ctx, MTLSToMicaService_GenerateCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTLSToMicaServiceClient) EnableCertificate(ctx context.Context, in *EnableCertificateRequest, opts ...grpc.CallOption) (*EnableCertificateResponse, error) {
	out := new(EnableCertificateResponse)
	err := c.cc.Invoke(ctx, MTLSToMicaService_EnableCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTLSToMicaServiceClient) DisableCertificate(ctx context.Context, in *DisableCertificateRequest, opts ...grpc.CallOption) (*DisableCertificateResponse, error) {
	out := new(DisableCertificateResponse)
	err := c.cc.Invoke(ctx, MTLSToMicaService_DisableCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTLSToMicaServiceClient) SearchCertificate(ctx context.Context, in *SearchCertificateRequest, opts ...grpc.CallOption) (*SearchCertificateResponse, error) {
	out := new(SearchCertificateResponse)
	err := c.cc.Invoke(ctx, MTLSToMicaService_SearchCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTLSToMicaServiceClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateResponse, error) {
	out := new(GetCertificateResponse)
	err := c.cc.Invoke(ctx, MTLSToMicaService_GetCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MTLSToMicaServiceServer is the server API for MTLSToMicaService service.
// All implementations must embed UnimplementedMTLSToMicaServiceServer
// for forward compatibility
type MTLSToMicaServiceServer interface {
	// Generate a new mTLS certificate for authenticating calls to Mica member APIs
	GenerateCertificate(context.Context, *GenerateCertificateRequest) (*GenerateCertificateResponse, error)
	// Update the certificate with a given serial number, only supports enable/disable for now
	EnableCertificate(context.Context, *EnableCertificateRequest) (*EnableCertificateResponse, error)
	// do we need a separate Disable call?
	DisableCertificate(context.Context, *DisableCertificateRequest) (*DisableCertificateResponse, error)
	// Search for certificates and return the ones that match the criteria provided
	SearchCertificate(context.Context, *SearchCertificateRequest) (*SearchCertificateResponse, error)
	// return a single certificate
	GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error)
	mustEmbedUnimplementedMTLSToMicaServiceServer()
}

// UnimplementedMTLSToMicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMTLSToMicaServiceServer struct {
}

func (UnimplementedMTLSToMicaServiceServer) GenerateCertificate(context.Context, *GenerateCertificateRequest) (*GenerateCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCertificate not implemented")
}
func (UnimplementedMTLSToMicaServiceServer) EnableCertificate(context.Context, *EnableCertificateRequest) (*EnableCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCertificate not implemented")
}
func (UnimplementedMTLSToMicaServiceServer) DisableCertificate(context.Context, *DisableCertificateRequest) (*DisableCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCertificate not implemented")
}
func (UnimplementedMTLSToMicaServiceServer) SearchCertificate(context.Context, *SearchCertificateRequest) (*SearchCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCertificate not implemented")
}
func (UnimplementedMTLSToMicaServiceServer) GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (UnimplementedMTLSToMicaServiceServer) mustEmbedUnimplementedMTLSToMicaServiceServer() {}

// UnsafeMTLSToMicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MTLSToMicaServiceServer will
// result in compilation errors.
type UnsafeMTLSToMicaServiceServer interface {
	mustEmbedUnimplementedMTLSToMicaServiceServer()
}

func RegisterMTLSToMicaServiceServer(s grpc.ServiceRegistrar, srv MTLSToMicaServiceServer) {
	s.RegisterService(&MTLSToMicaService_ServiceDesc, srv)
}

func _MTLSToMicaService_GenerateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTLSToMicaServiceServer).GenerateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTLSToMicaService_GenerateCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTLSToMicaServiceServer).GenerateCertificate(ctx, req.(*GenerateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTLSToMicaService_EnableCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTLSToMicaServiceServer).EnableCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTLSToMicaService_EnableCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTLSToMicaServiceServer).EnableCertificate(ctx, req.(*EnableCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTLSToMicaService_DisableCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTLSToMicaServiceServer).DisableCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTLSToMicaService_DisableCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTLSToMicaServiceServer).DisableCertificate(ctx, req.(*DisableCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTLSToMicaService_SearchCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTLSToMicaServiceServer).SearchCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTLSToMicaService_SearchCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTLSToMicaServiceServer).SearchCertificate(ctx, req.(*SearchCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTLSToMicaService_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTLSToMicaServiceServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTLSToMicaService_GetCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTLSToMicaServiceServer).GetCertificate(ctx, req.(*GetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MTLSToMicaService_ServiceDesc is the grpc.ServiceDesc for MTLSToMicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MTLSToMicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.member.auth.v1.MTLSToMicaService",
	HandlerType: (*MTLSToMicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCertificate",
			Handler:    _MTLSToMicaService_GenerateCertificate_Handler,
		},
		{
			MethodName: "EnableCertificate",
			Handler:    _MTLSToMicaService_EnableCertificate_Handler,
		},
		{
			MethodName: "DisableCertificate",
			Handler:    _MTLSToMicaService_DisableCertificate_Handler,
		},
		{
			MethodName: "SearchCertificate",
			Handler:    _MTLSToMicaService_SearchCertificate_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _MTLSToMicaService_GetCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/serviceprovider/proto/mica/member/auth/v1/mtls_to_mica_service.proto",
}
