// Copyright (c) 2022 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.12
// source: mica/serviceprovider/value/v1/value.proto

package valuev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	approvaltypev1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/approvaltypev1"
	currencyv1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/currencyv1"
	organizationcategoryv1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/organizationcategoryv1"
	valueoperationtypev1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/valueoperationtypev1"
	v1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PINStatus int32

const (
	PINStatus_PIN_STATUS_UNSPECIFIED PINStatus = 0
	PINStatus_PIN_STATUS_MATCH       PINStatus = 1
)

// Enum value maps for PINStatus.
var (
	PINStatus_name = map[int32]string{
		0: "PIN_STATUS_UNSPECIFIED",
		1: "PIN_STATUS_MATCH",
	}
	PINStatus_value = map[string]int32{
		"PIN_STATUS_UNSPECIFIED": 0,
		"PIN_STATUS_MATCH":       1,
	}
)

func (x PINStatus) Enum() *PINStatus {
	p := new(PINStatus)
	*p = x
	return p
}

func (x PINStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PINStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[0].Descriptor()
}

func (PINStatus) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[0]
}

func (x PINStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PINStatus.Descriptor instead.
func (PINStatus) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{0}
}

type ObtainValueResponse_Status int32

const (
	ObtainValueResponse_STATUS_UNSPECIFIED ObtainValueResponse_Status = 0
	// An approval for the full amount
	ObtainValueResponse_STATUS_FULL_APPROVAL ObtainValueResponse_Status = 1
	// An error occurred when processing the request
	ObtainValueResponse_STATUS_ERROR ObtainValueResponse_Status = 2
	// An approval was given for a partial amount
	ObtainValueResponse_STATUS_PARTIAL_APPROVAL ObtainValueResponse_Status = 3
	// User instrument doesn't have sufficient value to cover the transaction
	ObtainValueResponse_STATUS_INSUFFICIENT_VALUE ObtainValueResponse_Status = 4
	// When all products are either ineligible or age restricted
	ObtainValueResponse_STATUS_INELIGIBLE_PRODUCTS ObtainValueResponse_Status = 5
	// Instrument/account not found
	ObtainValueResponse_STATUS_NOT_FOUND ObtainValueResponse_Status = 6
	// User instrument is closed
	ObtainValueResponse_STATUS_INSTRUMENT_CLOSED ObtainValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_TRANSACTION_RISK_FRAUD ObtainValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ObtainValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_USER_RISK_FRAUD ObtainValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ObtainValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	ObtainValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ObtainValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	ObtainValueResponse_STATUS_UNSUPPORTED ObtainValueResponse_Status = 10
	// The Service Provider is temporarily unavailable
	ObtainValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ObtainValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	ObtainValueResponse_STATUS_INVALID_UUEK ObtainValueResponse_Status = 12
	// A valid PIN is required for this transaction
	ObtainValueResponse_STATUS_PIN_REQUIRED ObtainValueResponse_Status = 13
	// Request resulted in one or more limits being exceeded at the Service Provider
	ObtainValueResponse_STATUS_LIMIT_EXCEEDED ObtainValueResponse_Status = 19
)

// Enum value maps for ObtainValueResponse_Status.
var (
	ObtainValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		3:  "STATUS_PARTIAL_APPROVAL",
		4:  "STATUS_INSUFFICIENT_VALUE",
		5:  "STATUS_INELIGIBLE_PRODUCTS",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		19: "STATUS_LIMIT_EXCEEDED",
	}
	ObtainValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_PARTIAL_APPROVAL":             3,
		"STATUS_INSUFFICIENT_VALUE":           4,
		"STATUS_INELIGIBLE_PRODUCTS":          5,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_LIMIT_EXCEEDED":               19,
	}
)

func (x ObtainValueResponse_Status) Enum() *ObtainValueResponse_Status {
	p := new(ObtainValueResponse_Status)
	*p = x
	return p
}

func (x ObtainValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObtainValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[1].Descriptor()
}

func (ObtainValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[1]
}

func (x ObtainValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObtainValueResponse_Status.Descriptor instead.
func (ObtainValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{3, 0}
}

type ReturnValueResponse_Status int32

const (
	ReturnValueResponse_STATUS_UNSPECIFIED ReturnValueResponse_Status = 0
	// An approval for the full amount
	ReturnValueResponse_STATUS_FULL_APPROVAL ReturnValueResponse_Status = 1
	// An error occurred when processing the request
	ReturnValueResponse_STATUS_ERROR ReturnValueResponse_Status = 2
	// Instrument/account not found
	ReturnValueResponse_STATUS_NOT_FOUND ReturnValueResponse_Status = 6
	// User instrument is closed
	ReturnValueResponse_STATUS_INSTRUMENT_CLOSED ReturnValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_TRANSACTION_RISK_FRAUD ReturnValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ReturnValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_USER_RISK_FRAUD ReturnValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ReturnValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	ReturnValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ReturnValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	ReturnValueResponse_STATUS_UNSUPPORTED ReturnValueResponse_Status = 10
	// The Service Provider is temporarily unavailable
	ReturnValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ReturnValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	ReturnValueResponse_STATUS_INVALID_UUEK ReturnValueResponse_Status = 12
	// A valid PIN is required for this transaction
	ReturnValueResponse_STATUS_PIN_REQUIRED ReturnValueResponse_Status = 13
	// Request resulted in one or more limits being exceeded at the Service Provider
	ReturnValueResponse_STATUS_LIMIT_EXCEEDED ReturnValueResponse_Status = 19
)

// Enum value maps for ReturnValueResponse_Status.
var (
	ReturnValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		19: "STATUS_LIMIT_EXCEEDED",
	}
	ReturnValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_LIMIT_EXCEEDED":               19,
	}
)

func (x ReturnValueResponse_Status) Enum() *ReturnValueResponse_Status {
	p := new(ReturnValueResponse_Status)
	*p = x
	return p
}

func (x ReturnValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[2].Descriptor()
}

func (ReturnValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[2]
}

func (x ReturnValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnValueResponse_Status.Descriptor instead.
func (ReturnValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{5, 0}
}

type ReceiveValueResponse_Status int32

const (
	ReceiveValueResponse_STATUS_UNSPECIFIED ReceiveValueResponse_Status = 0
	ReceiveValueResponse_STATUS_SUCCESS     ReceiveValueResponse_Status = 1
	ReceiveValueResponse_STATUS_ERROR       ReceiveValueResponse_Status = 2
)

// Enum value maps for ReceiveValueResponse_Status.
var (
	ReceiveValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	ReceiveValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x ReceiveValueResponse_Status) Enum() *ReceiveValueResponse_Status {
	p := new(ReceiveValueResponse_Status)
	*p = x
	return p
}

func (x ReceiveValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiveValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[3].Descriptor()
}

func (ReceiveValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[3]
}

func (x ReceiveValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiveValueResponse_Status.Descriptor instead.
func (ReceiveValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{8, 0}
}

type GetValueResponse_Status int32

const (
	GetValueResponse_STATUS_UNSPECIFIED GetValueResponse_Status = 0
	GetValueResponse_STATUS_SUCCESS     GetValueResponse_Status = 1
	GetValueResponse_STATUS_ERROR       GetValueResponse_Status = 2
	GetValueResponse_STATUS_NOT_FOUND   GetValueResponse_Status = 3
)

// Enum value maps for GetValueResponse_Status.
var (
	GetValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	GetValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x GetValueResponse_Status) Enum() *GetValueResponse_Status {
	p := new(GetValueResponse_Status)
	*p = x
	return p
}

func (x GetValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[4].Descriptor()
}

func (GetValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[4]
}

func (x GetValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetValueResponse_Status.Descriptor instead.
func (GetValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{10, 0}
}

type SearchValueResponse_Status int32

const (
	SearchValueResponse_STATUS_UNSPECIFIED SearchValueResponse_Status = 0
	SearchValueResponse_STATUS_SUCCESS     SearchValueResponse_Status = 1
	SearchValueResponse_STATUS_ERROR       SearchValueResponse_Status = 2
)

// Enum value maps for SearchValueResponse_Status.
var (
	SearchValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchValueResponse_Status) Enum() *SearchValueResponse_Status {
	p := new(SearchValueResponse_Status)
	*p = x
	return p
}

func (x SearchValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[5].Descriptor()
}

func (SearchValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[5]
}

func (x SearchValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchValueResponse_Status.Descriptor instead.
func (SearchValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{12, 0}
}

type SendValueResponse_Status int32

const (
	SendValueResponse_STATUS_UNSPECIFIED SendValueResponse_Status = 0
	SendValueResponse_STATUS_SUCCESS     SendValueResponse_Status = 1
	SendValueResponse_STATUS_ERROR       SendValueResponse_Status = 2
)

// Enum value maps for SendValueResponse_Status.
var (
	SendValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SendValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SendValueResponse_Status) Enum() *SendValueResponse_Status {
	p := new(SendValueResponse_Status)
	*p = x
	return p
}

func (x SendValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[6].Descriptor()
}

func (SendValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[6]
}

func (x SendValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendValueResponse_Status.Descriptor instead.
func (SendValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{14, 0}
}

// Type that represents the details of the value request (either to obtain or return).
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// version of the user record, used for optimistic locking.
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Date that the Store was created at Mica.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// Date that the Store was last updated at Mica.
	Updated       *timestamppb.Timestamp                  `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	OperationType valueoperationtypev1.ValueOperationType `protobuf:"varint,5,opt,name=operation_type,json=operationType,proto3,enum=micashared.common.enums.valueoperationtype.v1.ValueOperationType" json:"operation_type,omitempty"`
	// The Mica generated key for this instrument.
	ServiceProviderInstrumentKey string `protobuf:"bytes,6,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	// Service Provider's primary key for their instrument.
	ServiceProviderInstrumentRef string `protobuf:"bytes,7,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
	Currency currencyv1.Currency `protobuf:"varint,9,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// The organization this operation is being processed for.
	OrganizationKey string `protobuf:"bytes,10,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	// The organization name this operation is being processed for.
	OrganizationName string `protobuf:"bytes,11,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// The organization address this operation is being processed for.
	OrganizationAddress *v1.Address `protobuf:"bytes,12,opt,name=organization_address,json=organizationAddress,proto3" json:"organization_address,omitempty"`
	// The organizations category.
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,13,opt,name=category,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
	// The store where this operation occurred.
	StoreKey string `protobuf:"bytes,14,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The number of this store (an alternative unique value).
	StoreNumber string `protobuf:"bytes,15,opt,name=store_number,json=storeNumber,proto3" json:"store_number,omitempty"`
	// The street address of this store.
	StoreAddress *v1.Address `protobuf:"bytes,16,opt,name=store_address,json=storeAddress,proto3" json:"store_address,omitempty"`
	// The clerk that processed this operation.
	ClerkIdentifier string `protobuf:"bytes,17,opt,name=clerk_identifier,json=clerkIdentifier,proto3" json:"clerk_identifier,omitempty"`
	// Total amount for this transaction.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,18,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Total discount amount for this transaction.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	DiscountAmount string `protobuf:"bytes,21,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	// Total discount amount for this transaction.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	IneligibleAmount string `protobuf:"bytes,22,opt,name=ineligible_amount,json=ineligibleAmount,proto3" json:"ineligible_amount,omitempty"`
	// The amount requested from the Service Provider for this transaction. Note that this calculated as:
	//
	//	requested_amount = total_amount - discount_amount - ineligible_amount
	//
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	RequestedAmount string `protobuf:"bytes,19,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"`
	OrderNumber     string `protobuf:"bytes,20,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{0}
}

func (x *Value) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *Value) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Value) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Value) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Value) GetOperationType() valueoperationtypev1.ValueOperationType {
	if x != nil {
		return x.OperationType
	}
	return valueoperationtypev1.ValueOperationType(0)
}

func (x *Value) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *Value) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *Value) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *Value) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *Value) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *Value) GetOrganizationAddress() *v1.Address {
	if x != nil {
		return x.OrganizationAddress
	}
	return nil
}

func (x *Value) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

func (x *Value) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *Value) GetStoreNumber() string {
	if x != nil {
		return x.StoreNumber
	}
	return ""
}

func (x *Value) GetStoreAddress() *v1.Address {
	if x != nil {
		return x.StoreAddress
	}
	return nil
}

func (x *Value) GetClerkIdentifier() string {
	if x != nil {
		return x.ClerkIdentifier
	}
	return ""
}

func (x *Value) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *Value) GetDiscountAmount() string {
	if x != nil {
		return x.DiscountAmount
	}
	return ""
}

func (x *Value) GetIneligibleAmount() string {
	if x != nil {
		return x.IneligibleAmount
	}
	return ""
}

func (x *Value) GetRequestedAmount() string {
	if x != nil {
		return x.RequestedAmount
	}
	return ""
}

func (x *Value) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

// Type that represents the details of the value request (either to obtain or return).
type ValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// The Mica generated key for this instrument.
	ServiceProviderInstrumentKey string `protobuf:"bytes,2,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	// Service Provider's primary key for their instrument.
	ServiceProviderInstrumentRef string `protobuf:"bytes,3,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
	Currency currencyv1.Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// The organization this operation is being processed for.
	OrganizationKey string `protobuf:"bytes,6,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	// The organization name this operation is being processed for.
	OrganizationName string `protobuf:"bytes,7,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// The organization address this operation is being processed for.
	OrganizationAddress *v1.Address `protobuf:"bytes,8,opt,name=organization_address,json=organizationAddress,proto3" json:"organization_address,omitempty"`
	// The organizations category.
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,9,opt,name=category,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
	// The store where this operation occurred.
	StoreKey string `protobuf:"bytes,10,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The number of this store (an alternative unique value).
	StoreNumber string `protobuf:"bytes,11,opt,name=store_number,json=storeNumber,proto3" json:"store_number,omitempty"`
	// The street address of this store.
	StoreAddress *v1.Address `protobuf:"bytes,12,opt,name=store_address,json=storeAddress,proto3" json:"store_address,omitempty"`
	// The clerk that processed this operation.
	ClerkIdentifier string `protobuf:"bytes,13,opt,name=clerk_identifier,json=clerkIdentifier,proto3" json:"clerk_identifier,omitempty"`
	// Total amount for this transaction.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,14,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Total discount amount for this transaction.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	DiscountAmount string `protobuf:"bytes,17,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	// Total discount amount for this transaction.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	IneligibleAmount string `protobuf:"bytes,18,opt,name=ineligible_amount,json=ineligibleAmount,proto3" json:"ineligible_amount,omitempty"`
	// The amount requested from the Service Provider for this transaction. Note that this calculated as:
	//
	//	requested_amount = total_amount - discount_amount - ineligible_amount
	//
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	RequestedAmount string `protobuf:"bytes,15,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"`
	OrderNumber     string `protobuf:"bytes,16,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
}

func (x *ValueRequest) Reset() {
	*x = ValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRequest) ProtoMessage() {}

func (x *ValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRequest.ProtoReflect.Descriptor instead.
func (*ValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{1}
}

func (x *ValueRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ValueRequest) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *ValueRequest) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *ValueRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *ValueRequest) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *ValueRequest) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *ValueRequest) GetOrganizationAddress() *v1.Address {
	if x != nil {
		return x.OrganizationAddress
	}
	return nil
}

func (x *ValueRequest) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

func (x *ValueRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *ValueRequest) GetStoreNumber() string {
	if x != nil {
		return x.StoreNumber
	}
	return ""
}

func (x *ValueRequest) GetStoreAddress() *v1.Address {
	if x != nil {
		return x.StoreAddress
	}
	return nil
}

func (x *ValueRequest) GetClerkIdentifier() string {
	if x != nil {
		return x.ClerkIdentifier
	}
	return ""
}

func (x *ValueRequest) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *ValueRequest) GetDiscountAmount() string {
	if x != nil {
		return x.DiscountAmount
	}
	return ""
}

func (x *ValueRequest) GetIneligibleAmount() string {
	if x != nil {
		return x.IneligibleAmount
	}
	return ""
}

func (x *ValueRequest) GetRequestedAmount() string {
	if x != nil {
		return x.RequestedAmount
	}
	return ""
}

func (x *ValueRequest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

type ObtainValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovalType approvaltypev1.ApprovalType `protobuf:"varint,1,opt,name=approval_type,json=approvalType,proto3,enum=micashared.common.enums.approvaltype.v1.ApprovalType" json:"approval_type,omitempty"`
	Value        *ValueRequest               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ObtainValueRequest) Reset() {
	*x = ObtainValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainValueRequest) ProtoMessage() {}

func (x *ObtainValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainValueRequest.ProtoReflect.Descriptor instead.
func (*ObtainValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{2}
}

func (x *ObtainValueRequest) GetApprovalType() approvaltypev1.ApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return approvaltypev1.ApprovalType(0)
}

func (x *ObtainValueRequest) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

type ObtainValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ObtainValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ObtainValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                     `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,4,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *ObtainValueResponse) Reset() {
	*x = ObtainValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainValueResponse) ProtoMessage() {}

func (x *ObtainValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainValueResponse.ProtoReflect.Descriptor instead.
func (*ObtainValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{3}
}

func (x *ObtainValueResponse) GetStatus() ObtainValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ObtainValueResponse_STATUS_UNSPECIFIED
}

func (x *ObtainValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ObtainValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ObtainValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type ReturnValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *ValueRequest `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReturnValueRequest) Reset() {
	*x = ReturnValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnValueRequest) ProtoMessage() {}

func (x *ReturnValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnValueRequest.ProtoReflect.Descriptor instead.
func (*ReturnValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{4}
}

func (x *ReturnValueRequest) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

type ReturnValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ReturnValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ReturnValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                     `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,4,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *ReturnValueResponse) Reset() {
	*x = ReturnValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnValueResponse) ProtoMessage() {}

func (x *ReturnValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnValueResponse.ProtoReflect.Descriptor instead.
func (*ReturnValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{5}
}

func (x *ReturnValueResponse) GetStatus() ReturnValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReturnValueResponse_STATUS_UNSPECIFIED
}

func (x *ReturnValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReturnValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ReturnValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type From struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the sender uuek
	Uuek string `protobuf:"bytes,4,opt,name=uuek,proto3" json:"uuek,omitempty"`
	// The first name of the sender.
	FirstName string `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name of the sender.
	LastName string `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The email of the sender.
	Email string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	// name of sending service provider
	ServiceProviderName string `protobuf:"bytes,8,opt,name=service_provider_name,json=serviceProviderName,proto3" json:"service_provider_name,omitempty"`
}

func (x *From) Reset() {
	*x = From{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *From) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*From) ProtoMessage() {}

func (x *From) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use From.ProtoReflect.Descriptor instead.
func (*From) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{6}
}

func (x *From) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

func (x *From) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *From) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *From) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *From) GetServiceProviderName() string {
	if x != nil {
		return x.ServiceProviderName
	}
	return ""
}

type ReceiveValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Mica generated key for this instrument.
	ToServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=to_service_provider_instrument_key,json=toServiceProviderInstrumentKey,proto3" json:"to_service_provider_instrument_key,omitempty"`
	// Service Provider's primary key for their instrument.
	ToServiceProviderInstrumentRef string              `protobuf:"bytes,2,opt,name=to_service_provider_instrument_ref,json=toServiceProviderInstrumentRef,proto3" json:"to_service_provider_instrument_ref,omitempty"`
	Currency                       currencyv1.Currency `protobuf:"varint,3,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// the amount that's being received
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	From   *From  `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *ReceiveValueRequest) Reset() {
	*x = ReceiveValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveValueRequest) ProtoMessage() {}

func (x *ReceiveValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveValueRequest.ProtoReflect.Descriptor instead.
func (*ReceiveValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{7}
}

func (x *ReceiveValueRequest) GetToServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ToServiceProviderInstrumentKey
	}
	return ""
}

func (x *ReceiveValueRequest) GetToServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ToServiceProviderInstrumentRef
	}
	return ""
}

func (x *ReceiveValueRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *ReceiveValueRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ReceiveValueRequest) GetFrom() *From {
	if x != nil {
		return x.From
	}
	return nil
}

type ReceiveValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ReceiveValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ReceiveValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                      `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
}

func (x *ReceiveValueResponse) Reset() {
	*x = ReceiveValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveValueResponse) ProtoMessage() {}

func (x *ReceiveValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveValueResponse.ProtoReflect.Descriptor instead.
func (*ReceiveValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{8}
}

func (x *ReceiveValueResponse) GetStatus() ReceiveValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReceiveValueResponse_STATUS_UNSPECIFIED
}

func (x *ReceiveValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReceiveValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

type GetValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*GetValueRequest_TransactionKey
	//	*GetValueRequest_PartnerTransactionRef
	Identifier isGetValueRequest_Identifier `protobuf_oneof:"identifier"`
}

func (x *GetValueRequest) Reset() {
	*x = GetValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueRequest) ProtoMessage() {}

func (x *GetValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueRequest.ProtoReflect.Descriptor instead.
func (*GetValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{9}
}

func (m *GetValueRequest) GetIdentifier() isGetValueRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetValueRequest) GetTransactionKey() string {
	if x, ok := x.GetIdentifier().(*GetValueRequest_TransactionKey); ok {
		return x.TransactionKey
	}
	return ""
}

func (x *GetValueRequest) GetPartnerTransactionRef() string {
	if x, ok := x.GetIdentifier().(*GetValueRequest_PartnerTransactionRef); ok {
		return x.PartnerTransactionRef
	}
	return ""
}

type isGetValueRequest_Identifier interface {
	isGetValueRequest_Identifier()
}

type GetValueRequest_TransactionKey struct {
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3,oneof"`
}

type GetValueRequest_PartnerTransactionRef struct {
	// the Partner's reference for this transaction
	PartnerTransactionRef string `protobuf:"bytes,2,opt,name=partner_transaction_ref,json=partnerTransactionRef,proto3,oneof"`
}

func (*GetValueRequest_TransactionKey) isGetValueRequest_Identifier() {}

func (*GetValueRequest_PartnerTransactionRef) isGetValueRequest_Identifier() {}

type GetValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.GetValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error               `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Value  *Value                  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetValueResponse) Reset() {
	*x = GetValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueResponse) ProtoMessage() {}

func (x *GetValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueResponse.ProtoReflect.Descriptor instead.
func (*GetValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{10}
}

func (x *GetValueResponse) GetStatus() GetValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetValueResponse_STATUS_UNSPECIFIED
}

func (x *GetValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetValueResponse) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type SearchValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// The UUEK of the user.
	ServiceProviderUuek string `protobuf:"bytes,2,opt,name=service_provider_uuek,json=serviceProviderUuek,proto3" json:"service_provider_uuek,omitempty"`
	// Service Provider's primary key for their instrument.
	ServiceProviderInstrumentRef string `protobuf:"bytes,3,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// Transactions that occurred after this date (inclusive).
	DateFrom *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// Transactions that occurred before this date (exclusive).
	DateTo *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
}

func (x *SearchValueRequest) Reset() {
	*x = SearchValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchValueRequest) ProtoMessage() {}

func (x *SearchValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchValueRequest.ProtoReflect.Descriptor instead.
func (*SearchValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{11}
}

func (x *SearchValueRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *SearchValueRequest) GetServiceProviderUuek() string {
	if x != nil {
		return x.ServiceProviderUuek
	}
	return ""
}

func (x *SearchValueRequest) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *SearchValueRequest) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *SearchValueRequest) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

type SearchValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SearchValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.SearchValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Value  []*Value                   `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *SearchValueResponse) Reset() {
	*x = SearchValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchValueResponse) ProtoMessage() {}

func (x *SearchValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchValueResponse.ProtoReflect.Descriptor instead.
func (*SearchValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{12}
}

func (x *SearchValueResponse) GetStatus() SearchValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchValueResponse_STATUS_UNSPECIFIED
}

func (x *SearchValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchValueResponse) GetValue() []*Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type SendValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromServiceProviderUserKey       string `protobuf:"bytes,1,opt,name=from_service_provider_user_key,json=fromServiceProviderUserKey,proto3" json:"from_service_provider_user_key,omitempty"`
	FromServiceProviderInstrumentKey string `protobuf:"bytes,2,opt,name=from_service_provider_instrument_key,json=fromServiceProviderInstrumentKey,proto3" json:"from_service_provider_instrument_key,omitempty"`
	// @gotags: mask:"security"
	ToUuek   string              `protobuf:"bytes,3,opt,name=to_uuek,json=toUuek,proto3" json:"to_uuek,omitempty"`
	Currency currencyv1.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SendValueRequest) Reset() {
	*x = SendValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendValueRequest) ProtoMessage() {}

func (x *SendValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendValueRequest.ProtoReflect.Descriptor instead.
func (*SendValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{13}
}

func (x *SendValueRequest) GetFromServiceProviderUserKey() string {
	if x != nil {
		return x.FromServiceProviderUserKey
	}
	return ""
}

func (x *SendValueRequest) GetFromServiceProviderInstrumentKey() string {
	if x != nil {
		return x.FromServiceProviderInstrumentKey
	}
	return ""
}

func (x *SendValueRequest) GetToUuek() string {
	if x != nil {
		return x.ToUuek
	}
	return ""
}

func (x *SendValueRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *SendValueRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type SendValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         SendValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.SendValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionKey string                   `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
}

func (x *SendValueResponse) Reset() {
	*x = SendValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendValueResponse) ProtoMessage() {}

func (x *SendValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendValueResponse.ProtoReflect.Descriptor instead.
func (*SendValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{14}
}

func (x *SendValueResponse) GetStatus() SendValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return SendValueResponse_STATUS_UNSPECIFIED
}

func (x *SendValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SendValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

var File_mica_serviceprovider_value_v1_value_proto protoreflect.FileDescriptor

var file_mica_serviceprovider_value_v1_value_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa6, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x32, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbd, 0x07, 0x0a, 0x0c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x4e, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x32, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x12,
	0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x83, 0x06, 0x0a, 0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x93, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55,
	0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x11,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44,
	0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x55, 0x45,
	0x4b, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13, 0x22, 0x57, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xb3, 0x05, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc3, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46,
	0x52, 0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55,
	0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x55, 0x45, 0x4b, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03,
	0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22, 0xa0, 0x01, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x65, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x22, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x1e, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x6f, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x22, 0x8e, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xb1, 0x02, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x75, 0x65, 0x6b, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0x9f,
	0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x22, 0xc3, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x1e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x1a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x24, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x22, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x06, 0x74, 0x6f, 0x55,
	0x75, 0x65, 0x6b, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x2a, 0x3d, 0x0a, 0x09, 0x50, 0x49, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01,
	0x42, 0x53, 0x0a, 0x20, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x1c, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x76, 0x31, 0xa2, 0x02,
	0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_serviceprovider_value_v1_value_proto_rawDescOnce sync.Once
	file_mica_serviceprovider_value_v1_value_proto_rawDescData = file_mica_serviceprovider_value_v1_value_proto_rawDesc
)

func file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP() []byte {
	file_mica_serviceprovider_value_v1_value_proto_rawDescOnce.Do(func() {
		file_mica_serviceprovider_value_v1_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_serviceprovider_value_v1_value_proto_rawDescData)
	})
	return file_mica_serviceprovider_value_v1_value_proto_rawDescData
}

var file_mica_serviceprovider_value_v1_value_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_mica_serviceprovider_value_v1_value_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_mica_serviceprovider_value_v1_value_proto_goTypes = []interface{}{
	(PINStatus)(0),                                   // 0: mica.serviceprovider.value.v1.PINStatus
	(ObtainValueResponse_Status)(0),                  // 1: mica.serviceprovider.value.v1.ObtainValueResponse.Status
	(ReturnValueResponse_Status)(0),                  // 2: mica.serviceprovider.value.v1.ReturnValueResponse.Status
	(ReceiveValueResponse_Status)(0),                 // 3: mica.serviceprovider.value.v1.ReceiveValueResponse.Status
	(GetValueResponse_Status)(0),                     // 4: mica.serviceprovider.value.v1.GetValueResponse.Status
	(SearchValueResponse_Status)(0),                  // 5: mica.serviceprovider.value.v1.SearchValueResponse.Status
	(SendValueResponse_Status)(0),                    // 6: mica.serviceprovider.value.v1.SendValueResponse.Status
	(*Value)(nil),                                    // 7: mica.serviceprovider.value.v1.Value
	(*ValueRequest)(nil),                             // 8: mica.serviceprovider.value.v1.ValueRequest
	(*ObtainValueRequest)(nil),                       // 9: mica.serviceprovider.value.v1.ObtainValueRequest
	(*ObtainValueResponse)(nil),                      // 10: mica.serviceprovider.value.v1.ObtainValueResponse
	(*ReturnValueRequest)(nil),                       // 11: mica.serviceprovider.value.v1.ReturnValueRequest
	(*ReturnValueResponse)(nil),                      // 12: mica.serviceprovider.value.v1.ReturnValueResponse
	(*From)(nil),                                     // 13: mica.serviceprovider.value.v1.From
	(*ReceiveValueRequest)(nil),                      // 14: mica.serviceprovider.value.v1.ReceiveValueRequest
	(*ReceiveValueResponse)(nil),                     // 15: mica.serviceprovider.value.v1.ReceiveValueResponse
	(*GetValueRequest)(nil),                          // 16: mica.serviceprovider.value.v1.GetValueRequest
	(*GetValueResponse)(nil),                         // 17: mica.serviceprovider.value.v1.GetValueResponse
	(*SearchValueRequest)(nil),                       // 18: mica.serviceprovider.value.v1.SearchValueRequest
	(*SearchValueResponse)(nil),                      // 19: mica.serviceprovider.value.v1.SearchValueResponse
	(*SendValueRequest)(nil),                         // 20: mica.serviceprovider.value.v1.SendValueRequest
	(*SendValueResponse)(nil),                        // 21: mica.serviceprovider.value.v1.SendValueResponse
	(*timestamppb.Timestamp)(nil),                    // 22: google.protobuf.Timestamp
	(valueoperationtypev1.ValueOperationType)(0),     // 23: micashared.common.enums.valueoperationtype.v1.ValueOperationType
	(currencyv1.Currency)(0),                         // 24: micashared.common.enums.currency.v1.Currency
	(*v1.Address)(nil),                               // 25: micashared.common.v1.Address
	(organizationcategoryv1.OrganizationCategory)(0), // 26: micashared.common.enums.organizationcategory.v1.OrganizationCategory
	(approvaltypev1.ApprovalType)(0),                 // 27: micashared.common.enums.approvaltype.v1.ApprovalType
	(*v1.Error)(nil),                                 // 28: micashared.common.v1.Error
}
var file_mica_serviceprovider_value_v1_value_proto_depIdxs = []int32{
	22, // 0: mica.serviceprovider.value.v1.Value.created:type_name -> google.protobuf.Timestamp
	22, // 1: mica.serviceprovider.value.v1.Value.updated:type_name -> google.protobuf.Timestamp
	23, // 2: mica.serviceprovider.value.v1.Value.operation_type:type_name -> micashared.common.enums.valueoperationtype.v1.ValueOperationType
	24, // 3: mica.serviceprovider.value.v1.Value.currency:type_name -> micashared.common.enums.currency.v1.Currency
	25, // 4: mica.serviceprovider.value.v1.Value.organization_address:type_name -> micashared.common.v1.Address
	26, // 5: mica.serviceprovider.value.v1.Value.category:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	25, // 6: mica.serviceprovider.value.v1.Value.store_address:type_name -> micashared.common.v1.Address
	24, // 7: mica.serviceprovider.value.v1.ValueRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	25, // 8: mica.serviceprovider.value.v1.ValueRequest.organization_address:type_name -> micashared.common.v1.Address
	26, // 9: mica.serviceprovider.value.v1.ValueRequest.category:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	25, // 10: mica.serviceprovider.value.v1.ValueRequest.store_address:type_name -> micashared.common.v1.Address
	27, // 11: mica.serviceprovider.value.v1.ObtainValueRequest.approval_type:type_name -> micashared.common.enums.approvaltype.v1.ApprovalType
	8,  // 12: mica.serviceprovider.value.v1.ObtainValueRequest.value:type_name -> mica.serviceprovider.value.v1.ValueRequest
	1,  // 13: mica.serviceprovider.value.v1.ObtainValueResponse.status:type_name -> mica.serviceprovider.value.v1.ObtainValueResponse.Status
	28, // 14: mica.serviceprovider.value.v1.ObtainValueResponse.error:type_name -> micashared.common.v1.Error
	8,  // 15: mica.serviceprovider.value.v1.ReturnValueRequest.value:type_name -> mica.serviceprovider.value.v1.ValueRequest
	2,  // 16: mica.serviceprovider.value.v1.ReturnValueResponse.status:type_name -> mica.serviceprovider.value.v1.ReturnValueResponse.Status
	28, // 17: mica.serviceprovider.value.v1.ReturnValueResponse.error:type_name -> micashared.common.v1.Error
	24, // 18: mica.serviceprovider.value.v1.ReceiveValueRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	13, // 19: mica.serviceprovider.value.v1.ReceiveValueRequest.from:type_name -> mica.serviceprovider.value.v1.From
	3,  // 20: mica.serviceprovider.value.v1.ReceiveValueResponse.status:type_name -> mica.serviceprovider.value.v1.ReceiveValueResponse.Status
	28, // 21: mica.serviceprovider.value.v1.ReceiveValueResponse.error:type_name -> micashared.common.v1.Error
	4,  // 22: mica.serviceprovider.value.v1.GetValueResponse.status:type_name -> mica.serviceprovider.value.v1.GetValueResponse.Status
	28, // 23: mica.serviceprovider.value.v1.GetValueResponse.error:type_name -> micashared.common.v1.Error
	7,  // 24: mica.serviceprovider.value.v1.GetValueResponse.value:type_name -> mica.serviceprovider.value.v1.Value
	22, // 25: mica.serviceprovider.value.v1.SearchValueRequest.date_from:type_name -> google.protobuf.Timestamp
	22, // 26: mica.serviceprovider.value.v1.SearchValueRequest.date_to:type_name -> google.protobuf.Timestamp
	5,  // 27: mica.serviceprovider.value.v1.SearchValueResponse.status:type_name -> mica.serviceprovider.value.v1.SearchValueResponse.Status
	28, // 28: mica.serviceprovider.value.v1.SearchValueResponse.error:type_name -> micashared.common.v1.Error
	7,  // 29: mica.serviceprovider.value.v1.SearchValueResponse.value:type_name -> mica.serviceprovider.value.v1.Value
	24, // 30: mica.serviceprovider.value.v1.SendValueRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	6,  // 31: mica.serviceprovider.value.v1.SendValueResponse.status:type_name -> mica.serviceprovider.value.v1.SendValueResponse.Status
	28, // 32: mica.serviceprovider.value.v1.SendValueResponse.error:type_name -> micashared.common.v1.Error
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_mica_serviceprovider_value_v1_value_proto_init() }
func file_mica_serviceprovider_value_v1_value_proto_init() {
	if File_mica_serviceprovider_value_v1_value_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*From); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_serviceprovider_value_v1_value_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*GetValueRequest_TransactionKey)(nil),
		(*GetValueRequest_PartnerTransactionRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_serviceprovider_value_v1_value_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_serviceprovider_value_v1_value_proto_goTypes,
		DependencyIndexes: file_mica_serviceprovider_value_v1_value_proto_depIdxs,
		EnumInfos:         file_mica_serviceprovider_value_v1_value_proto_enumTypes,
		MessageInfos:      file_mica_serviceprovider_value_v1_value_proto_msgTypes,
	}.Build()
	File_mica_serviceprovider_value_v1_value_proto = out.File
	file_mica_serviceprovider_value_v1_value_proto_rawDesc = nil
	file_mica_serviceprovider_value_v1_value_proto_goTypes = nil
	file_mica_serviceprovider_value_v1_value_proto_depIdxs = nil
}
