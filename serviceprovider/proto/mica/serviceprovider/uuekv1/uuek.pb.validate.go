// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mica/serviceprovider/uuek/v1/uuek.proto

package uuekv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceProviderUUEK with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceProviderUUEK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceProviderUUEK with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceProviderUUEKMultiError, or nil if none found.
func (m *ServiceProviderUUEK) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceProviderUUEK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetServiceProviderUserKey()); l < 30 || l > 50 {
		err := ServiceProviderUUEKValidationError{
			field:  "ServiceProviderUserKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceProviderUserRef

	if l := utf8.RuneCountInString(m.GetServiceProviderInstrumentKey()); l < 30 || l > 50 {
		err := ServiceProviderUUEKValidationError{
			field:  "ServiceProviderInstrumentKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceProviderInstrumentRef

	if all {
		switch v := interface{}(m.GetUuek()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceProviderUUEKValidationError{
					field:  "Uuek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceProviderUUEKValidationError{
					field:  "Uuek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUuek()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceProviderUUEKValidationError{
				field:  "Uuek",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceProviderUUEKMultiError(errors)
	}

	return nil
}

// ServiceProviderUUEKMultiError is an error wrapping multiple validation
// errors returned by ServiceProviderUUEK.ValidateAll() if the designated
// constraints aren't met.
type ServiceProviderUUEKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceProviderUUEKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceProviderUUEKMultiError) AllErrors() []error { return m }

// ServiceProviderUUEKValidationError is the validation error returned by
// ServiceProviderUUEK.Validate if the designated constraints aren't met.
type ServiceProviderUUEKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceProviderUUEKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceProviderUUEKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceProviderUUEKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceProviderUUEKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceProviderUUEKValidationError) ErrorName() string {
	return "ServiceProviderUUEKValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceProviderUUEKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceProviderUUEK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceProviderUUEKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceProviderUUEKValidationError{}

// Validate checks the field values on ProvisionServiceProviderUUEKRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProvisionServiceProviderUUEKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvisionServiceProviderUUEKRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProvisionServiceProviderUUEKRequestMultiError, or nil if none found.
func (m *ProvisionServiceProviderUUEKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionServiceProviderUUEKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValidFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvisionServiceProviderUUEKRequestValidationError{
					field:  "ValidFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvisionServiceProviderUUEKRequestValidationError{
					field:  "ValidFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionServiceProviderUUEKRequestValidationError{
				field:  "ValidFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvisionServiceProviderUUEKRequestValidationError{
					field:  "ValidTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvisionServiceProviderUUEKRequestValidationError{
					field:  "ValidTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionServiceProviderUUEKRequestValidationError{
				field:  "ValidTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Criteria.(type) {
	case *ProvisionServiceProviderUUEKRequest_ServiceProviderInstrumentKey:
		if v == nil {
			err := ProvisionServiceProviderUUEKRequestValidationError{
				field:  "Criteria",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetServiceProviderInstrumentKey()); l < 30 || l > 50 {
			err := ProvisionServiceProviderUUEKRequestValidationError{
				field:  "ServiceProviderInstrumentKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ProvisionServiceProviderUUEKRequest_ServiceProviderInstrumentRef:
		if v == nil {
			err := ProvisionServiceProviderUUEKRequestValidationError{
				field:  "Criteria",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ServiceProviderInstrumentRef
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ProvisionServiceProviderUUEKRequestMultiError(errors)
	}

	return nil
}

// ProvisionServiceProviderUUEKRequestMultiError is an error wrapping multiple
// validation errors returned by
// ProvisionServiceProviderUUEKRequest.ValidateAll() if the designated
// constraints aren't met.
type ProvisionServiceProviderUUEKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionServiceProviderUUEKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionServiceProviderUUEKRequestMultiError) AllErrors() []error { return m }

// ProvisionServiceProviderUUEKRequestValidationError is the validation error
// returned by ProvisionServiceProviderUUEKRequest.Validate if the designated
// constraints aren't met.
type ProvisionServiceProviderUUEKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionServiceProviderUUEKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionServiceProviderUUEKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionServiceProviderUUEKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionServiceProviderUUEKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionServiceProviderUUEKRequestValidationError) ErrorName() string {
	return "ProvisionServiceProviderUUEKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionServiceProviderUUEKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionServiceProviderUUEKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionServiceProviderUUEKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionServiceProviderUUEKRequestValidationError{}

// Validate checks the field values on ProvisionServiceProviderUUEKResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ProvisionServiceProviderUUEKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvisionServiceProviderUUEKResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProvisionServiceProviderUUEKResponseMultiError, or nil if none found.
func (m *ProvisionServiceProviderUUEKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionServiceProviderUUEKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvisionServiceProviderUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvisionServiceProviderUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionServiceProviderUUEKResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetServiceProviderUuek()); l < 30 || l > 50 {
		err := ProvisionServiceProviderUUEKResponseValidationError{
			field:  "ServiceProviderUuek",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProvisionServiceProviderUUEKResponseMultiError(errors)
	}

	return nil
}

// ProvisionServiceProviderUUEKResponseMultiError is an error wrapping multiple
// validation errors returned by
// ProvisionServiceProviderUUEKResponse.ValidateAll() if the designated
// constraints aren't met.
type ProvisionServiceProviderUUEKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionServiceProviderUUEKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionServiceProviderUUEKResponseMultiError) AllErrors() []error { return m }

// ProvisionServiceProviderUUEKResponseValidationError is the validation error
// returned by ProvisionServiceProviderUUEKResponse.Validate if the designated
// constraints aren't met.
type ProvisionServiceProviderUUEKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionServiceProviderUUEKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionServiceProviderUUEKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionServiceProviderUUEKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionServiceProviderUUEKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionServiceProviderUUEKResponseValidationError) ErrorName() string {
	return "ProvisionServiceProviderUUEKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionServiceProviderUUEKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionServiceProviderUUEKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionServiceProviderUUEKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionServiceProviderUUEKResponseValidationError{}

// Validate checks the field values on RemoveServiceProviderUUEKRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveServiceProviderUUEKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveServiceProviderUUEKRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveServiceProviderUUEKRequestMultiError, or nil if none found.
func (m *RemoveServiceProviderUUEKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServiceProviderUUEKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Criteria.(type) {
	case *RemoveServiceProviderUUEKRequest_ServiceProviderInstrumentKey:
		if v == nil {
			err := RemoveServiceProviderUUEKRequestValidationError{
				field:  "Criteria",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetServiceProviderInstrumentKey()); l < 30 || l > 50 {
			err := RemoveServiceProviderUUEKRequestValidationError{
				field:  "ServiceProviderInstrumentKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RemoveServiceProviderUUEKRequest_ServiceProviderInstrumentRef:
		if v == nil {
			err := RemoveServiceProviderUUEKRequestValidationError{
				field:  "Criteria",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ServiceProviderInstrumentRef
	case *RemoveServiceProviderUUEKRequest_ServiceProviderUuek:
		if v == nil {
			err := RemoveServiceProviderUUEKRequestValidationError{
				field:  "Criteria",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ServiceProviderUuek
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RemoveServiceProviderUUEKRequestMultiError(errors)
	}

	return nil
}

// RemoveServiceProviderUUEKRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveServiceProviderUUEKRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveServiceProviderUUEKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServiceProviderUUEKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServiceProviderUUEKRequestMultiError) AllErrors() []error { return m }

// RemoveServiceProviderUUEKRequestValidationError is the validation error
// returned by RemoveServiceProviderUUEKRequest.Validate if the designated
// constraints aren't met.
type RemoveServiceProviderUUEKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceProviderUUEKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceProviderUUEKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceProviderUUEKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceProviderUUEKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceProviderUUEKRequestValidationError) ErrorName() string {
	return "RemoveServiceProviderUUEKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceProviderUUEKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceProviderUUEKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceProviderUUEKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceProviderUUEKRequestValidationError{}

// Validate checks the field values on RemoveServiceProviderUUEKResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveServiceProviderUUEKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveServiceProviderUUEKResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveServiceProviderUUEKResponseMultiError, or nil if none found.
func (m *RemoveServiceProviderUUEKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServiceProviderUUEKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveServiceProviderUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveServiceProviderUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveServiceProviderUUEKResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveServiceProviderUUEKResponseMultiError(errors)
	}

	return nil
}

// RemoveServiceProviderUUEKResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveServiceProviderUUEKResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveServiceProviderUUEKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServiceProviderUUEKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServiceProviderUUEKResponseMultiError) AllErrors() []error { return m }

// RemoveServiceProviderUUEKResponseValidationError is the validation error
// returned by RemoveServiceProviderUUEKResponse.Validate if the designated
// constraints aren't met.
type RemoveServiceProviderUUEKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceProviderUUEKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceProviderUUEKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceProviderUUEKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceProviderUUEKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceProviderUUEKResponseValidationError) ErrorName() string {
	return "RemoveServiceProviderUUEKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceProviderUUEKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceProviderUUEKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceProviderUUEKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceProviderUUEKResponseValidationError{}

// Validate checks the field values on SearchServiceProviderUUEKRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchServiceProviderUUEKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchServiceProviderUUEKRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchServiceProviderUUEKRequestMultiError, or nil if none found.
func (m *SearchServiceProviderUUEKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchServiceProviderUUEKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceProviderUserKey()) > 50 {
		err := SearchServiceProviderUUEKRequestValidationError{
			field:  "ServiceProviderUserKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceProviderInstrumentKey()) > 50 {
		err := SearchServiceProviderUUEKRequestValidationError{
			field:  "ServiceProviderInstrumentKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchServiceProviderUUEKRequestMultiError(errors)
	}

	return nil
}

// SearchServiceProviderUUEKRequestMultiError is an error wrapping multiple
// validation errors returned by
// SearchServiceProviderUUEKRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchServiceProviderUUEKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchServiceProviderUUEKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchServiceProviderUUEKRequestMultiError) AllErrors() []error { return m }

// SearchServiceProviderUUEKRequestValidationError is the validation error
// returned by SearchServiceProviderUUEKRequest.Validate if the designated
// constraints aren't met.
type SearchServiceProviderUUEKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchServiceProviderUUEKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchServiceProviderUUEKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchServiceProviderUUEKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchServiceProviderUUEKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchServiceProviderUUEKRequestValidationError) ErrorName() string {
	return "SearchServiceProviderUUEKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchServiceProviderUUEKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchServiceProviderUUEKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchServiceProviderUUEKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchServiceProviderUUEKRequestValidationError{}

// Validate checks the field values on SearchServiceProviderUUEKResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchServiceProviderUUEKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchServiceProviderUUEKResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchServiceProviderUUEKResponseMultiError, or nil if none found.
func (m *SearchServiceProviderUUEKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchServiceProviderUUEKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchServiceProviderUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchServiceProviderUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchServiceProviderUUEKResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetServiceProviderUueks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchServiceProviderUUEKResponseValidationError{
						field:  fmt.Sprintf("ServiceProviderUueks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchServiceProviderUUEKResponseValidationError{
						field:  fmt.Sprintf("ServiceProviderUueks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchServiceProviderUUEKResponseValidationError{
					field:  fmt.Sprintf("ServiceProviderUueks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchServiceProviderUUEKResponseMultiError(errors)
	}

	return nil
}

// SearchServiceProviderUUEKResponseMultiError is an error wrapping multiple
// validation errors returned by
// SearchServiceProviderUUEKResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchServiceProviderUUEKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchServiceProviderUUEKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchServiceProviderUUEKResponseMultiError) AllErrors() []error { return m }

// SearchServiceProviderUUEKResponseValidationError is the validation error
// returned by SearchServiceProviderUUEKResponse.Validate if the designated
// constraints aren't met.
type SearchServiceProviderUUEKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchServiceProviderUUEKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchServiceProviderUUEKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchServiceProviderUUEKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchServiceProviderUUEKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchServiceProviderUUEKResponseValidationError) ErrorName() string {
	return "SearchServiceProviderUUEKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchServiceProviderUUEKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchServiceProviderUUEKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchServiceProviderUUEKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchServiceProviderUUEKResponseValidationError{}
