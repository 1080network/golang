// Copyright (c) 2022 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.24.3
// source: mica/serviceprovider/service/v1/service_provider_to_mica_wip_service.proto

package servicev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	currencyv1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/currencyv1"
	instrumenttypev1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/instrumenttypev1"
	v1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VisibilityStatus int32

const (
	VisibilityStatus_VISIBILITY_STATUS_UNSPECIFIED  VisibilityStatus = 0
	VisibilityStatus_VISIBILITY_STATUS_DISCOVERABLE VisibilityStatus = 1
	VisibilityStatus_VISIBILITY_STATUS_HIDDEN       VisibilityStatus = 2
)

// Enum value maps for VisibilityStatus.
var (
	VisibilityStatus_name = map[int32]string{
		0: "VISIBILITY_STATUS_UNSPECIFIED",
		1: "VISIBILITY_STATUS_DISCOVERABLE",
		2: "VISIBILITY_STATUS_HIDDEN",
	}
	VisibilityStatus_value = map[string]int32{
		"VISIBILITY_STATUS_UNSPECIFIED":  0,
		"VISIBILITY_STATUS_DISCOVERABLE": 1,
		"VISIBILITY_STATUS_HIDDEN":       2,
	}
)

func (x VisibilityStatus) Enum() *VisibilityStatus {
	p := new(VisibilityStatus)
	*p = x
	return p
}

func (x VisibilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisibilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[0].Descriptor()
}

func (VisibilityStatus) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[0]
}

func (x VisibilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisibilityStatus.Descriptor instead.
func (VisibilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{0}
}

type SetVisibilityStatusResponse_Status int32

const (
	SetVisibilityStatusResponse_STATUS_UNSPECIFIED SetVisibilityStatusResponse_Status = 0
	SetVisibilityStatusResponse_STATUS_SUCCESS     SetVisibilityStatusResponse_Status = 1
	SetVisibilityStatusResponse_STATUS_ERROR       SetVisibilityStatusResponse_Status = 2
	SetVisibilityStatusResponse_STATUS_NOT_FOUND   SetVisibilityStatusResponse_Status = 3
)

// Enum value maps for SetVisibilityStatusResponse_Status.
var (
	SetVisibilityStatusResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	SetVisibilityStatusResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x SetVisibilityStatusResponse_Status) Enum() *SetVisibilityStatusResponse_Status {
	p := new(SetVisibilityStatusResponse_Status)
	*p = x
	return p
}

func (x SetVisibilityStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetVisibilityStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[1].Descriptor()
}

func (SetVisibilityStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[1]
}

func (x SetVisibilityStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetVisibilityStatusResponse_Status.Descriptor instead.
func (SetVisibilityStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{1, 0}
}

type DiscoverUserResponse_Status int32

const (
	DiscoverUserResponse_STATUS_UNSPECIFIED DiscoverUserResponse_Status = 0
	DiscoverUserResponse_STATUS_SUCCESS     DiscoverUserResponse_Status = 1
	DiscoverUserResponse_STATUS_ERROR       DiscoverUserResponse_Status = 2
)

// Enum value maps for DiscoverUserResponse_Status.
var (
	DiscoverUserResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	DiscoverUserResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x DiscoverUserResponse_Status) Enum() *DiscoverUserResponse_Status {
	p := new(DiscoverUserResponse_Status)
	*p = x
	return p
}

func (x DiscoverUserResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoverUserResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[2].Descriptor()
}

func (DiscoverUserResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[2]
}

func (x DiscoverUserResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoverUserResponse_Status.Descriptor instead.
func (DiscoverUserResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetServiceProviderUUEKResponse_Status int32

const (
	GetServiceProviderUUEKResponse_STATUS_UNSPECIFIED          GetServiceProviderUUEKResponse_Status = 0
	GetServiceProviderUUEKResponse_STATUS_SUCCESS              GetServiceProviderUUEKResponse_Status = 1
	GetServiceProviderUUEKResponse_STATUS_ERROR                GetServiceProviderUUEKResponse_Status = 2
	GetServiceProviderUUEKResponse_STATUS_INSTRUMENT_NOT_FOUND GetServiceProviderUUEKResponse_Status = 3
)

// Enum value maps for GetServiceProviderUUEKResponse_Status.
var (
	GetServiceProviderUUEKResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_INSTRUMENT_NOT_FOUND",
	}
	GetServiceProviderUUEKResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":          0,
		"STATUS_SUCCESS":              1,
		"STATUS_ERROR":                2,
		"STATUS_INSTRUMENT_NOT_FOUND": 3,
	}
)

func (x GetServiceProviderUUEKResponse_Status) Enum() *GetServiceProviderUUEKResponse_Status {
	p := new(GetServiceProviderUUEKResponse_Status)
	*p = x
	return p
}

func (x GetServiceProviderUUEKResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetServiceProviderUUEKResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[3].Descriptor()
}

func (GetServiceProviderUUEKResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[3]
}

func (x GetServiceProviderUUEKResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetServiceProviderUUEKResponse_Status.Descriptor instead.
func (GetServiceProviderUUEKResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{5, 0}
}

type ProvisionEnrollmentValidationCodeResponse_Status int32

const (
	ProvisionEnrollmentValidationCodeResponse_STATUS_UNSPECIFIED          ProvisionEnrollmentValidationCodeResponse_Status = 0
	ProvisionEnrollmentValidationCodeResponse_STATUS_SUCCESS              ProvisionEnrollmentValidationCodeResponse_Status = 1
	ProvisionEnrollmentValidationCodeResponse_STATUS_ERROR                ProvisionEnrollmentValidationCodeResponse_Status = 2
	ProvisionEnrollmentValidationCodeResponse_STATUS_INSTRUMENT_NOT_FOUND ProvisionEnrollmentValidationCodeResponse_Status = 3
	ProvisionEnrollmentValidationCodeResponse_STATUS_USER_NOT_FOUND       ProvisionEnrollmentValidationCodeResponse_Status = 4
)

// Enum value maps for ProvisionEnrollmentValidationCodeResponse_Status.
var (
	ProvisionEnrollmentValidationCodeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_INSTRUMENT_NOT_FOUND",
		4: "STATUS_USER_NOT_FOUND",
	}
	ProvisionEnrollmentValidationCodeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":          0,
		"STATUS_SUCCESS":              1,
		"STATUS_ERROR":                2,
		"STATUS_INSTRUMENT_NOT_FOUND": 3,
		"STATUS_USER_NOT_FOUND":       4,
	}
)

func (x ProvisionEnrollmentValidationCodeResponse_Status) Enum() *ProvisionEnrollmentValidationCodeResponse_Status {
	p := new(ProvisionEnrollmentValidationCodeResponse_Status)
	*p = x
	return p
}

func (x ProvisionEnrollmentValidationCodeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisionEnrollmentValidationCodeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[4].Descriptor()
}

func (ProvisionEnrollmentValidationCodeResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[4]
}

func (x ProvisionEnrollmentValidationCodeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisionEnrollmentValidationCodeResponse_Status.Descriptor instead.
func (ProvisionEnrollmentValidationCodeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{8, 0}
}

type SetVisibilityStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceProviderUserKey       string           `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	ServiceProviderInstrumentKey string           `protobuf:"bytes,3,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	VisibilityStatus             VisibilityStatus `protobuf:"varint,7,opt,name=visibility_status,json=visibilityStatus,proto3,enum=mica.serviceprovider.service.v1.VisibilityStatus" json:"visibility_status,omitempty"`
}

func (x *SetVisibilityStatusRequest) Reset() {
	*x = SetVisibilityStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVisibilityStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVisibilityStatusRequest) ProtoMessage() {}

func (x *SetVisibilityStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVisibilityStatusRequest.ProtoReflect.Descriptor instead.
func (*SetVisibilityStatusRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{0}
}

func (x *SetVisibilityStatusRequest) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *SetVisibilityStatusRequest) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *SetVisibilityStatusRequest) GetVisibilityStatus() VisibilityStatus {
	if x != nil {
		return x.VisibilityStatus
	}
	return VisibilityStatus_VISIBILITY_STATUS_UNSPECIFIED
}

type SetVisibilityStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SetVisibilityStatusResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.SetVisibilityStatusResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetVisibilityStatusResponse) Reset() {
	*x = SetVisibilityStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVisibilityStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVisibilityStatusResponse) ProtoMessage() {}

func (x *SetVisibilityStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVisibilityStatusResponse.ProtoReflect.Descriptor instead.
func (*SetVisibilityStatusResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{1}
}

func (x *SetVisibilityStatusResponse) GetStatus() SetVisibilityStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return SetVisibilityStatusResponse_STATUS_UNSPECIFIED
}

func (x *SetVisibilityStatusResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type DiscoverUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDemographic *v1.UserDemographic `protobuf:"bytes,2,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
	Pagination      *v1.Pagination      `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DiscoverUserRequest) Reset() {
	*x = DiscoverUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverUserRequest) ProtoMessage() {}

func (x *DiscoverUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverUserRequest.ProtoReflect.Descriptor instead.
func (*DiscoverUserRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{2}
}

func (x *DiscoverUserRequest) GetUserDemographic() *v1.UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

func (x *DiscoverUserRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DiscoverUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     DiscoverUserResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.DiscoverUserResponse_Status" json:"status,omitempty"`
	Error      *v1.Error                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Users      []*User                     `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	Pagination *v1.Pagination              `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DiscoverUserResponse) Reset() {
	*x = DiscoverUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverUserResponse) ProtoMessage() {}

func (x *DiscoverUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverUserResponse.ProtoReflect.Descriptor instead.
func (*DiscoverUserResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{3}
}

func (x *DiscoverUserResponse) GetStatus() DiscoverUserResponse_Status {
	if x != nil {
		return x.Status
	}
	return DiscoverUserResponse_STATUS_UNSPECIFIED
}

func (x *DiscoverUserResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DiscoverUserResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *DiscoverUserResponse) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetServiceProviderUUEKRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuek string `protobuf:"bytes,4,opt,name=uuek,proto3" json:"uuek,omitempty"`
}

func (x *GetServiceProviderUUEKRequest) Reset() {
	*x = GetServiceProviderUUEKRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderUUEKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderUUEKRequest) ProtoMessage() {}

func (x *GetServiceProviderUUEKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderUUEKRequest.ProtoReflect.Descriptor instead.
func (*GetServiceProviderUUEKRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetServiceProviderUUEKRequest) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

type GetServiceProviderUUEKResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          GetServiceProviderUUEKResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse_Status" json:"status,omitempty"`
	Error           *v1.Error                             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	UserDemographic *v1.UserDemographic                   `protobuf:"bytes,3,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
}

func (x *GetServiceProviderUUEKResponse) Reset() {
	*x = GetServiceProviderUUEKResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderUUEKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderUUEKResponse) ProtoMessage() {}

func (x *GetServiceProviderUUEKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderUUEKResponse.ProtoReflect.Descriptor instead.
func (*GetServiceProviderUUEKResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetServiceProviderUUEKResponse) GetStatus() GetServiceProviderUUEKResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetServiceProviderUUEKResponse_STATUS_UNSPECIFIED
}

func (x *GetServiceProviderUUEKResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetServiceProviderUUEKResponse) GetUserDemographic() *v1.UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceProviderUserKey string                          `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	UserDemographic        *v1.UserDemographic             `protobuf:"bytes,2,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
	ServiceProviderName    string                          `protobuf:"bytes,3,opt,name=service_provider_name,json=serviceProviderName,proto3" json:"service_provider_name,omitempty"`
	InstrumentType         instrumenttypev1.InstrumentType `protobuf:"varint,4,opt,name=instrument_type,json=instrumentType,proto3,enum=micashared.common.enums.instrumenttype.v1.InstrumentType" json:"instrument_type,omitempty"`
	// The 3-letter currency code defined in ISO 4217.
	Currency currencyv1.Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Last 4 digits of this instrument.
	Nickname string `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Uuek     string `protobuf:"bytes,7,opt,name=uuek,proto3" json:"uuek,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *User) GetUserDemographic() *v1.UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

func (x *User) GetServiceProviderName() string {
	if x != nil {
		return x.ServiceProviderName
	}
	return ""
}

func (x *User) GetInstrumentType() instrumenttypev1.InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return instrumenttypev1.InstrumentType(0)
}

func (x *User) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

type ProvisionEnrollmentValidationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserRef
	//	*ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserKey
	UserIdentifier isProvisionEnrollmentValidationCodeRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
	// Types that are assignable to InstrumentIdentifier:
	//
	//	*ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentRef
	//	*ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentKey
	InstrumentIdentifier isProvisionEnrollmentValidationCodeRequest_InstrumentIdentifier `protobuf_oneof:"instrument_identifier"`
	// if this is set the values will be shared with the other side that is performing the enrollment
	SharedUserInformation *v1.UserDemographic `protobuf:"bytes,5,opt,name=shared_user_information,json=sharedUserInformation,proto3" json:"shared_user_information,omitempty"`
}

func (x *ProvisionEnrollmentValidationCodeRequest) Reset() {
	*x = ProvisionEnrollmentValidationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionEnrollmentValidationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionEnrollmentValidationCodeRequest) ProtoMessage() {}

func (x *ProvisionEnrollmentValidationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionEnrollmentValidationCodeRequest.ProtoReflect.Descriptor instead.
func (*ProvisionEnrollmentValidationCodeRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{7}
}

func (m *ProvisionEnrollmentValidationCodeRequest) GetUserIdentifier() isProvisionEnrollmentValidationCodeRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *ProvisionEnrollmentValidationCodeRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *ProvisionEnrollmentValidationCodeRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (m *ProvisionEnrollmentValidationCodeRequest) GetInstrumentIdentifier() isProvisionEnrollmentValidationCodeRequest_InstrumentIdentifier {
	if m != nil {
		return m.InstrumentIdentifier
	}
	return nil
}

func (x *ProvisionEnrollmentValidationCodeRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetInstrumentIdentifier().(*ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *ProvisionEnrollmentValidationCodeRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetInstrumentIdentifier().(*ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *ProvisionEnrollmentValidationCodeRequest) GetSharedUserInformation() *v1.UserDemographic {
	if x != nil {
		return x.SharedUserInformation
	}
	return nil
}

type isProvisionEnrollmentValidationCodeRequest_UserIdentifier interface {
	isProvisionEnrollmentValidationCodeRequest_UserIdentifier()
}

type ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserRef struct {
	// this is the id in the service provider for the user that is requesting an enrollment
	ServiceProviderUserRef string `protobuf:"bytes,1,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

type ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserKey struct {
	ServiceProviderUserKey string `protobuf:"bytes,2,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

func (*ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserRef) isProvisionEnrollmentValidationCodeRequest_UserIdentifier() {
}

func (*ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserKey) isProvisionEnrollmentValidationCodeRequest_UserIdentifier() {
}

type isProvisionEnrollmentValidationCodeRequest_InstrumentIdentifier interface {
	isProvisionEnrollmentValidationCodeRequest_InstrumentIdentifier()
}

type ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentRef struct {
	// this is the id in the service provider for the instrument (account, etc) that will be used to transact.
	ServiceProviderInstrumentRef string `protobuf:"bytes,3,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

type ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentKey struct {
	ServiceProviderInstrumentKey string `protobuf:"bytes,4,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

func (*ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentRef) isProvisionEnrollmentValidationCodeRequest_InstrumentIdentifier() {
}

func (*ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentKey) isProvisionEnrollmentValidationCodeRequest_InstrumentIdentifier() {
}

type ProvisionEnrollmentValidationCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ProvisionEnrollmentValidationCodeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// this is the code that the service provider will present/send or do something with for the user
	ValidationCode string `protobuf:"bytes,3,opt,name=validation_code,json=validationCode,proto3" json:"validation_code,omitempty"`
}

func (x *ProvisionEnrollmentValidationCodeResponse) Reset() {
	*x = ProvisionEnrollmentValidationCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionEnrollmentValidationCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionEnrollmentValidationCodeResponse) ProtoMessage() {}

func (x *ProvisionEnrollmentValidationCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionEnrollmentValidationCodeResponse.ProtoReflect.Descriptor instead.
func (*ProvisionEnrollmentValidationCodeResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{8}
}

func (x *ProvisionEnrollmentValidationCodeResponse) GetStatus() ProvisionEnrollmentValidationCodeResponse_Status {
	if x != nil {
		return x.Status
	}
	return ProvisionEnrollmentValidationCodeResponse_STATUS_UNSPECIFIED
}

func (x *ProvisionEnrollmentValidationCodeResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProvisionEnrollmentValidationCodeResponse) GetValidationCode() string {
	if x != nil {
		return x.ValidationCode
	}
	return ""
}

var File_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto protoreflect.FileDescriptor

var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x61, 0x5f, 0x77, 0x69, 0x70, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x32, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3f, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e,
	0x18, 0x32, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x1f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x11,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x02, 0x0a,
	0x1b, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22,
	0x3e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x22,
	0xee, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0x67, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03,
	0x22, 0xbc, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x50, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x22,
	0xcb, 0x03, 0x0a, 0x28, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x3b, 0x0a, 0x19, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x16,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12,
	0x47, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x52, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x42,
	0x1c, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xf7, 0x02,
	0x0a, 0x29, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0x77, 0x0a, 0x10, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x56,
	0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02,
	0x32, 0x92, 0x05, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x57, 0x49, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x0c, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55,
	0x55, 0x45, 0x4b, 0x12, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbc, 0x01, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x71, 0x0a, 0x22, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x24, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x4d, 0x69,
	0x63, 0x61, 0x57, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x1e, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescOnce sync.Once
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescData = file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDesc
)

func file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP() []byte {
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescOnce.Do(func() {
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescData)
	})
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescData
}

var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_goTypes = []interface{}{
	(VisibilityStatus)(0),                                 // 0: mica.serviceprovider.service.v1.VisibilityStatus
	(SetVisibilityStatusResponse_Status)(0),               // 1: mica.serviceprovider.service.v1.SetVisibilityStatusResponse.Status
	(DiscoverUserResponse_Status)(0),                      // 2: mica.serviceprovider.service.v1.DiscoverUserResponse.Status
	(GetServiceProviderUUEKResponse_Status)(0),            // 3: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.Status
	(ProvisionEnrollmentValidationCodeResponse_Status)(0), // 4: mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeResponse.Status
	(*SetVisibilityStatusRequest)(nil),                    // 5: mica.serviceprovider.service.v1.SetVisibilityStatusRequest
	(*SetVisibilityStatusResponse)(nil),                   // 6: mica.serviceprovider.service.v1.SetVisibilityStatusResponse
	(*DiscoverUserRequest)(nil),                           // 7: mica.serviceprovider.service.v1.DiscoverUserRequest
	(*DiscoverUserResponse)(nil),                          // 8: mica.serviceprovider.service.v1.DiscoverUserResponse
	(*GetServiceProviderUUEKRequest)(nil),                 // 9: mica.serviceprovider.service.v1.GetServiceProviderUUEKRequest
	(*GetServiceProviderUUEKResponse)(nil),                // 10: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse
	(*User)(nil),                                          // 11: mica.serviceprovider.service.v1.User
	(*ProvisionEnrollmentValidationCodeRequest)(nil),      // 12: mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeRequest
	(*ProvisionEnrollmentValidationCodeResponse)(nil),     // 13: mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeResponse
	(*v1.Error)(nil),                                      // 14: micashared.common.v1.Error
	(*v1.UserDemographic)(nil),                            // 15: micashared.common.v1.UserDemographic
	(*v1.Pagination)(nil),                                 // 16: micashared.common.v1.Pagination
	(instrumenttypev1.InstrumentType)(0),                  // 17: micashared.common.enums.instrumenttype.v1.InstrumentType
	(currencyv1.Currency)(0),                              // 18: micashared.common.enums.currency.v1.Currency
}
var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_depIdxs = []int32{
	0,  // 0: mica.serviceprovider.service.v1.SetVisibilityStatusRequest.visibility_status:type_name -> mica.serviceprovider.service.v1.VisibilityStatus
	1,  // 1: mica.serviceprovider.service.v1.SetVisibilityStatusResponse.status:type_name -> mica.serviceprovider.service.v1.SetVisibilityStatusResponse.Status
	14, // 2: mica.serviceprovider.service.v1.SetVisibilityStatusResponse.error:type_name -> micashared.common.v1.Error
	15, // 3: mica.serviceprovider.service.v1.DiscoverUserRequest.user_demographic:type_name -> micashared.common.v1.UserDemographic
	16, // 4: mica.serviceprovider.service.v1.DiscoverUserRequest.pagination:type_name -> micashared.common.v1.Pagination
	2,  // 5: mica.serviceprovider.service.v1.DiscoverUserResponse.status:type_name -> mica.serviceprovider.service.v1.DiscoverUserResponse.Status
	14, // 6: mica.serviceprovider.service.v1.DiscoverUserResponse.error:type_name -> micashared.common.v1.Error
	11, // 7: mica.serviceprovider.service.v1.DiscoverUserResponse.users:type_name -> mica.serviceprovider.service.v1.User
	16, // 8: mica.serviceprovider.service.v1.DiscoverUserResponse.pagination:type_name -> micashared.common.v1.Pagination
	3,  // 9: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.status:type_name -> mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.Status
	14, // 10: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.error:type_name -> micashared.common.v1.Error
	15, // 11: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.user_demographic:type_name -> micashared.common.v1.UserDemographic
	15, // 12: mica.serviceprovider.service.v1.User.user_demographic:type_name -> micashared.common.v1.UserDemographic
	17, // 13: mica.serviceprovider.service.v1.User.instrument_type:type_name -> micashared.common.enums.instrumenttype.v1.InstrumentType
	18, // 14: mica.serviceprovider.service.v1.User.currency:type_name -> micashared.common.enums.currency.v1.Currency
	15, // 15: mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeRequest.shared_user_information:type_name -> micashared.common.v1.UserDemographic
	4,  // 16: mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeResponse.status:type_name -> mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeResponse.Status
	14, // 17: mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeResponse.error:type_name -> micashared.common.v1.Error
	5,  // 18: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.SetVisibilityStatus:input_type -> mica.serviceprovider.service.v1.SetVisibilityStatusRequest
	7,  // 19: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.DiscoverUser:input_type -> mica.serviceprovider.service.v1.DiscoverUserRequest
	9,  // 20: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.GetServiceProviderUUEK:input_type -> mica.serviceprovider.service.v1.GetServiceProviderUUEKRequest
	12, // 21: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.ProvisionEnrollmentValidationCode:input_type -> mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeRequest
	6,  // 22: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.SetVisibilityStatus:output_type -> mica.serviceprovider.service.v1.SetVisibilityStatusResponse
	8,  // 23: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.DiscoverUser:output_type -> mica.serviceprovider.service.v1.DiscoverUserResponse
	10, // 24: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.GetServiceProviderUUEK:output_type -> mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse
	13, // 25: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.ProvisionEnrollmentValidationCode:output_type -> mica.serviceprovider.service.v1.ProvisionEnrollmentValidationCodeResponse
	22, // [22:26] is the sub-list for method output_type
	18, // [18:22] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_init() }
func file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_init() {
	if File_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVisibilityStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVisibilityStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderUUEKRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderUUEKResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionEnrollmentValidationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionEnrollmentValidationCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserRef)(nil),
		(*ProvisionEnrollmentValidationCodeRequest_ServiceProviderUserKey)(nil),
		(*ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentRef)(nil),
		(*ProvisionEnrollmentValidationCodeRequest_ServiceProviderInstrumentKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_goTypes,
		DependencyIndexes: file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_depIdxs,
		EnumInfos:         file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes,
		MessageInfos:      file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes,
	}.Build()
	File_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto = out.File
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDesc = nil
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_goTypes = nil
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_depIdxs = nil
}
