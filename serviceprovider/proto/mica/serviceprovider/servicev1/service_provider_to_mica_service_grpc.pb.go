// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: mica/serviceprovider/service/v1/service_provider_to_mica_service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	instrumentv1 "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/instrumentv1"
	serviceproviderv1 "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/serviceproviderv1"
	userv1 "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/userv1"
	uuekv1 "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/uuekv1"
	valuev1 "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/valuev1"
	v1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceProviderToMicaService_GetServiceProvider_FullMethodName             = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetServiceProvider"
	ServiceProviderToMicaService_RegisterUser_FullMethodName                   = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RegisterUser"
	ServiceProviderToMicaService_GetUser_FullMethodName                        = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetUser"
	ServiceProviderToMicaService_UpdateUser_FullMethodName                     = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/UpdateUser"
	ServiceProviderToMicaService_RemoveUser_FullMethodName                     = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveUser"
	ServiceProviderToMicaService_SearchUser_FullMethodName                     = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchUser"
	ServiceProviderToMicaService_RegisterInstrument_FullMethodName             = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RegisterInstrument"
	ServiceProviderToMicaService_GetInstrument_FullMethodName                  = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetInstrument"
	ServiceProviderToMicaService_RemoveInstrument_FullMethodName               = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveInstrument"
	ServiceProviderToMicaService_SearchInstrument_FullMethodName               = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchInstrument"
	ServiceProviderToMicaService_ProvisionServiceProviderUUEK_FullMethodName   = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/ProvisionServiceProviderUUEK"
	ServiceProviderToMicaService_ProvisionInstrumentLinkingCode_FullMethodName = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/ProvisionInstrumentLinkingCode"
	ServiceProviderToMicaService_CompleteLinkingWithCode_FullMethodName        = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/CompleteLinkingWithCode"
	ServiceProviderToMicaService_GetInstrumentLink_FullMethodName              = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetInstrumentLink"
	ServiceProviderToMicaService_SearchInstrumentLinks_FullMethodName          = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/SearchInstrumentLinks"
	ServiceProviderToMicaService_RemoveInstrumentLink_FullMethodName           = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/RemoveInstrumentLink"
	ServiceProviderToMicaService_GetValue_FullMethodName                       = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetValue"
	ServiceProviderToMicaService_GetReceipt_FullMethodName                     = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/GetReceipt"
	ServiceProviderToMicaService_Ping_FullMethodName                           = "/mica.serviceprovider.service.v1.ServiceProviderToMicaService/Ping"
)

// ServiceProviderToMicaServiceClient is the client API for ServiceProviderToMicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProviderToMicaServiceClient interface {
	// Retrieves the details of the service provider record at Mica.
	GetServiceProvider(ctx context.Context, in *serviceproviderv1.GetServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.GetServiceProviderResponse, error)
	// Called when the Service Provider wants to register one of their users for Mica. Note that this does only the user and not the instrument (account).
	RegisterUser(ctx context.Context, in *userv1.RegisterUserRequest, opts ...grpc.CallOption) (*userv1.RegisterUserResponse, error)
	// Retrieve a user based on it's identifier.
	GetUser(ctx context.Context, in *userv1.GetUserRequest, opts ...grpc.CallOption) (*userv1.GetUserResponse, error)
	// Update a user's demographic data held at Mica.
	UpdateUser(ctx context.Context, in *userv1.UpdateUserRequest, opts ...grpc.CallOption) (*userv1.UpdateUserResponse, error)
	// Remove a User from Mica. Typically called when a User ends their relationship with the issuer (e.g. closes their account).
	RemoveUser(ctx context.Context, in *userv1.RemoveUserRequest, opts ...grpc.CallOption) (*userv1.RemoveUserResponse, error)
	// Searches for Users held at Mica.
	SearchUser(ctx context.Context, in *userv1.SearchUserRequest, opts ...grpc.CallOption) (*userv1.SearchUserResponse, error)
	// Called to register a Users instrument (account) for use at Mica. This requires a user to already have been registered.
	RegisterInstrument(ctx context.Context, in *instrumentv1.RegisterInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RegisterInstrumentResponse, error)
	// Retrieve an instrument based on it's key.
	GetInstrument(ctx context.Context, in *instrumentv1.GetInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentResponse, error)
	// Remove an instrument from Mica.
	RemoveInstrument(ctx context.Context, in *instrumentv1.RemoveInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentResponse, error)
	// Like GetInstrument, can be used to retrieve Instruments based on the criteria in the request.
	SearchInstrument(ctx context.Context, in *instrumentv1.SearchInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentResponse, error)
	// Used to create a UUEK that can be given to the Issuer's users in order to transact at Merchants (Partners) that support Mica.
	ProvisionServiceProviderUUEK(ctx context.Context, in *uuekv1.ProvisionServiceProviderUUEKRequest, opts ...grpc.CallOption) (*uuekv1.ProvisionServiceProviderUUEKResponse, error)
	// Initiates a linking process by returning a code based on the account owned by this user which will be linked to
	// another member. This would typically be used by the user to establish a persistent payment method at a merchant.
	ProvisionInstrumentLinkingCode(ctx context.Context, in *instrumentv1.ProvisionInstrumentLinkingCodeRequest, opts ...grpc.CallOption) (*instrumentv1.ProvisionInstrumentLinkingCodeResponse, error)
	// If another member of the network initiated a link then this allows the link to be completed.
	CompleteLinkingWithCode(ctx context.Context, in *instrumentv1.CompleteLinkingWithCodeRequest, opts ...grpc.CallOption) (*instrumentv1.CompleteLinkingWithCodeResponse, error)
	// Retrieve a specific instrument link between two members.
	GetInstrumentLink(ctx context.Context, in *instrumentv1.GetInstrumentLinkRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentLinkResponse, error)
	// Search for instrument links.
	SearchInstrumentLinks(ctx context.Context, in *instrumentv1.SearchInstrumentLinksRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentLinksResponse, error)
	// Remove a instrument link.
	RemoveInstrumentLink(ctx context.Context, in *instrumentv1.RemoveInstrumentLinkRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentLinkResponse, error)
	// Retrieve a given transaction based on the transaction identifier. This is used to retrieve the details of a
	// transaction that has already occurred and is intended to be used in a pre-production environment. Mica aggressively
	// purges transaction data from the operational data store within a short period of time and this call retrieves
	// transactions from the operational data store.
	GetValue(ctx context.Context, in *valuev1.GetValueRequest, opts ...grpc.CallOption) (*valuev1.GetValueResponse, error)
	// Retrieve a receipt based on the transaction key.
	GetReceipt(ctx context.Context, in *v1.GetReceiptRequest, opts ...grpc.CallOption) (*v1.GetReceiptResponse, error)
	// Deprecated: Do not use.
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	// DEPRECATED. Please switch use cases to dedicated mica.member.ping.v1.PingService
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type serviceProviderToMicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProviderToMicaServiceClient(cc grpc.ClientConnInterface) ServiceProviderToMicaServiceClient {
	return &serviceProviderToMicaServiceClient{cc}
}

func (c *serviceProviderToMicaServiceClient) GetServiceProvider(ctx context.Context, in *serviceproviderv1.GetServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.GetServiceProviderResponse, error) {
	out := new(serviceproviderv1.GetServiceProviderResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_GetServiceProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RegisterUser(ctx context.Context, in *userv1.RegisterUserRequest, opts ...grpc.CallOption) (*userv1.RegisterUserResponse, error) {
	out := new(userv1.RegisterUserResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) GetUser(ctx context.Context, in *userv1.GetUserRequest, opts ...grpc.CallOption) (*userv1.GetUserResponse, error) {
	out := new(userv1.GetUserResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) UpdateUser(ctx context.Context, in *userv1.UpdateUserRequest, opts ...grpc.CallOption) (*userv1.UpdateUserResponse, error) {
	out := new(userv1.UpdateUserResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RemoveUser(ctx context.Context, in *userv1.RemoveUserRequest, opts ...grpc.CallOption) (*userv1.RemoveUserResponse, error) {
	out := new(userv1.RemoveUserResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_RemoveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchUser(ctx context.Context, in *userv1.SearchUserRequest, opts ...grpc.CallOption) (*userv1.SearchUserResponse, error) {
	out := new(userv1.SearchUserResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_SearchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RegisterInstrument(ctx context.Context, in *instrumentv1.RegisterInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RegisterInstrumentResponse, error) {
	out := new(instrumentv1.RegisterInstrumentResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_RegisterInstrument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) GetInstrument(ctx context.Context, in *instrumentv1.GetInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentResponse, error) {
	out := new(instrumentv1.GetInstrumentResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_GetInstrument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RemoveInstrument(ctx context.Context, in *instrumentv1.RemoveInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentResponse, error) {
	out := new(instrumentv1.RemoveInstrumentResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_RemoveInstrument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchInstrument(ctx context.Context, in *instrumentv1.SearchInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentResponse, error) {
	out := new(instrumentv1.SearchInstrumentResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_SearchInstrument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) ProvisionServiceProviderUUEK(ctx context.Context, in *uuekv1.ProvisionServiceProviderUUEKRequest, opts ...grpc.CallOption) (*uuekv1.ProvisionServiceProviderUUEKResponse, error) {
	out := new(uuekv1.ProvisionServiceProviderUUEKResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_ProvisionServiceProviderUUEK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) ProvisionInstrumentLinkingCode(ctx context.Context, in *instrumentv1.ProvisionInstrumentLinkingCodeRequest, opts ...grpc.CallOption) (*instrumentv1.ProvisionInstrumentLinkingCodeResponse, error) {
	out := new(instrumentv1.ProvisionInstrumentLinkingCodeResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_ProvisionInstrumentLinkingCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) CompleteLinkingWithCode(ctx context.Context, in *instrumentv1.CompleteLinkingWithCodeRequest, opts ...grpc.CallOption) (*instrumentv1.CompleteLinkingWithCodeResponse, error) {
	out := new(instrumentv1.CompleteLinkingWithCodeResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_CompleteLinkingWithCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) GetInstrumentLink(ctx context.Context, in *instrumentv1.GetInstrumentLinkRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentLinkResponse, error) {
	out := new(instrumentv1.GetInstrumentLinkResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_GetInstrumentLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchInstrumentLinks(ctx context.Context, in *instrumentv1.SearchInstrumentLinksRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentLinksResponse, error) {
	out := new(instrumentv1.SearchInstrumentLinksResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_SearchInstrumentLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RemoveInstrumentLink(ctx context.Context, in *instrumentv1.RemoveInstrumentLinkRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentLinkResponse, error) {
	out := new(instrumentv1.RemoveInstrumentLinkResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_RemoveInstrumentLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) GetValue(ctx context.Context, in *valuev1.GetValueRequest, opts ...grpc.CallOption) (*valuev1.GetValueResponse, error) {
	out := new(valuev1.GetValueResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) GetReceipt(ctx context.Context, in *v1.GetReceiptRequest, opts ...grpc.CallOption) (*v1.GetReceiptResponse, error) {
	out := new(v1.GetReceiptResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *serviceProviderToMicaServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ServiceProviderToMicaService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProviderToMicaServiceServer is the server API for ServiceProviderToMicaService service.
// All implementations must embed UnimplementedServiceProviderToMicaServiceServer
// for forward compatibility
type ServiceProviderToMicaServiceServer interface {
	// Retrieves the details of the service provider record at Mica.
	GetServiceProvider(context.Context, *serviceproviderv1.GetServiceProviderRequest) (*serviceproviderv1.GetServiceProviderResponse, error)
	// Called when the Service Provider wants to register one of their users for Mica. Note that this does only the user and not the instrument (account).
	RegisterUser(context.Context, *userv1.RegisterUserRequest) (*userv1.RegisterUserResponse, error)
	// Retrieve a user based on it's identifier.
	GetUser(context.Context, *userv1.GetUserRequest) (*userv1.GetUserResponse, error)
	// Update a user's demographic data held at Mica.
	UpdateUser(context.Context, *userv1.UpdateUserRequest) (*userv1.UpdateUserResponse, error)
	// Remove a User from Mica. Typically called when a User ends their relationship with the issuer (e.g. closes their account).
	RemoveUser(context.Context, *userv1.RemoveUserRequest) (*userv1.RemoveUserResponse, error)
	// Searches for Users held at Mica.
	SearchUser(context.Context, *userv1.SearchUserRequest) (*userv1.SearchUserResponse, error)
	// Called to register a Users instrument (account) for use at Mica. This requires a user to already have been registered.
	RegisterInstrument(context.Context, *instrumentv1.RegisterInstrumentRequest) (*instrumentv1.RegisterInstrumentResponse, error)
	// Retrieve an instrument based on it's key.
	GetInstrument(context.Context, *instrumentv1.GetInstrumentRequest) (*instrumentv1.GetInstrumentResponse, error)
	// Remove an instrument from Mica.
	RemoveInstrument(context.Context, *instrumentv1.RemoveInstrumentRequest) (*instrumentv1.RemoveInstrumentResponse, error)
	// Like GetInstrument, can be used to retrieve Instruments based on the criteria in the request.
	SearchInstrument(context.Context, *instrumentv1.SearchInstrumentRequest) (*instrumentv1.SearchInstrumentResponse, error)
	// Used to create a UUEK that can be given to the Issuer's users in order to transact at Merchants (Partners) that support Mica.
	ProvisionServiceProviderUUEK(context.Context, *uuekv1.ProvisionServiceProviderUUEKRequest) (*uuekv1.ProvisionServiceProviderUUEKResponse, error)
	// Initiates a linking process by returning a code based on the account owned by this user which will be linked to
	// another member. This would typically be used by the user to establish a persistent payment method at a merchant.
	ProvisionInstrumentLinkingCode(context.Context, *instrumentv1.ProvisionInstrumentLinkingCodeRequest) (*instrumentv1.ProvisionInstrumentLinkingCodeResponse, error)
	// If another member of the network initiated a link then this allows the link to be completed.
	CompleteLinkingWithCode(context.Context, *instrumentv1.CompleteLinkingWithCodeRequest) (*instrumentv1.CompleteLinkingWithCodeResponse, error)
	// Retrieve a specific instrument link between two members.
	GetInstrumentLink(context.Context, *instrumentv1.GetInstrumentLinkRequest) (*instrumentv1.GetInstrumentLinkResponse, error)
	// Search for instrument links.
	SearchInstrumentLinks(context.Context, *instrumentv1.SearchInstrumentLinksRequest) (*instrumentv1.SearchInstrumentLinksResponse, error)
	// Remove a instrument link.
	RemoveInstrumentLink(context.Context, *instrumentv1.RemoveInstrumentLinkRequest) (*instrumentv1.RemoveInstrumentLinkResponse, error)
	// Retrieve a given transaction based on the transaction identifier. This is used to retrieve the details of a
	// transaction that has already occurred and is intended to be used in a pre-production environment. Mica aggressively
	// purges transaction data from the operational data store within a short period of time and this call retrieves
	// transactions from the operational data store.
	GetValue(context.Context, *valuev1.GetValueRequest) (*valuev1.GetValueResponse, error)
	// Retrieve a receipt based on the transaction key.
	GetReceipt(context.Context, *v1.GetReceiptRequest) (*v1.GetReceiptResponse, error)
	// Deprecated: Do not use.
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	// DEPRECATED. Please switch use cases to dedicated mica.member.ping.v1.PingService
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedServiceProviderToMicaServiceServer()
}

// UnimplementedServiceProviderToMicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProviderToMicaServiceServer struct {
}

func (UnimplementedServiceProviderToMicaServiceServer) GetServiceProvider(context.Context, *serviceproviderv1.GetServiceProviderRequest) (*serviceproviderv1.GetServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceProvider not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RegisterUser(context.Context, *userv1.RegisterUserRequest) (*userv1.RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) GetUser(context.Context, *userv1.GetUserRequest) (*userv1.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) UpdateUser(context.Context, *userv1.UpdateUserRequest) (*userv1.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RemoveUser(context.Context, *userv1.RemoveUserRequest) (*userv1.RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchUser(context.Context, *userv1.SearchUserRequest) (*userv1.SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RegisterInstrument(context.Context, *instrumentv1.RegisterInstrumentRequest) (*instrumentv1.RegisterInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInstrument not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) GetInstrument(context.Context, *instrumentv1.GetInstrumentRequest) (*instrumentv1.GetInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrument not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RemoveInstrument(context.Context, *instrumentv1.RemoveInstrumentRequest) (*instrumentv1.RemoveInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstrument not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchInstrument(context.Context, *instrumentv1.SearchInstrumentRequest) (*instrumentv1.SearchInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInstrument not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) ProvisionServiceProviderUUEK(context.Context, *uuekv1.ProvisionServiceProviderUUEKRequest) (*uuekv1.ProvisionServiceProviderUUEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionServiceProviderUUEK not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) ProvisionInstrumentLinkingCode(context.Context, *instrumentv1.ProvisionInstrumentLinkingCodeRequest) (*instrumentv1.ProvisionInstrumentLinkingCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionInstrumentLinkingCode not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) CompleteLinkingWithCode(context.Context, *instrumentv1.CompleteLinkingWithCodeRequest) (*instrumentv1.CompleteLinkingWithCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteLinkingWithCode not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) GetInstrumentLink(context.Context, *instrumentv1.GetInstrumentLinkRequest) (*instrumentv1.GetInstrumentLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentLink not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchInstrumentLinks(context.Context, *instrumentv1.SearchInstrumentLinksRequest) (*instrumentv1.SearchInstrumentLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInstrumentLinks not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RemoveInstrumentLink(context.Context, *instrumentv1.RemoveInstrumentLinkRequest) (*instrumentv1.RemoveInstrumentLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstrumentLink not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) GetValue(context.Context, *valuev1.GetValueRequest) (*valuev1.GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) GetReceipt(context.Context, *v1.GetReceiptRequest) (*v1.GetReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) mustEmbedUnimplementedServiceProviderToMicaServiceServer() {
}

// UnsafeServiceProviderToMicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProviderToMicaServiceServer will
// result in compilation errors.
type UnsafeServiceProviderToMicaServiceServer interface {
	mustEmbedUnimplementedServiceProviderToMicaServiceServer()
}

func RegisterServiceProviderToMicaServiceServer(s grpc.ServiceRegistrar, srv ServiceProviderToMicaServiceServer) {
	s.RegisterService(&ServiceProviderToMicaService_ServiceDesc, srv)
}

func _ServiceProviderToMicaService_GetServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceproviderv1.GetServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_GetServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetServiceProvider(ctx, req.(*serviceproviderv1.GetServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RegisterUser(ctx, req.(*userv1.RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetUser(ctx, req.(*userv1.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).UpdateUser(ctx, req.(*userv1.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RemoveUser(ctx, req.(*userv1.RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchUser(ctx, req.(*userv1.SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RegisterInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RegisterInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RegisterInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_RegisterInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RegisterInstrument(ctx, req.(*instrumentv1.RegisterInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_GetInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.GetInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_GetInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetInstrument(ctx, req.(*instrumentv1.GetInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RemoveInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RemoveInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RemoveInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_RemoveInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RemoveInstrument(ctx, req.(*instrumentv1.RemoveInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.SearchInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_SearchInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchInstrument(ctx, req.(*instrumentv1.SearchInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_ProvisionServiceProviderUUEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uuekv1.ProvisionServiceProviderUUEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).ProvisionServiceProviderUUEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_ProvisionServiceProviderUUEK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).ProvisionServiceProviderUUEK(ctx, req.(*uuekv1.ProvisionServiceProviderUUEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_ProvisionInstrumentLinkingCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.ProvisionInstrumentLinkingCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).ProvisionInstrumentLinkingCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_ProvisionInstrumentLinkingCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).ProvisionInstrumentLinkingCode(ctx, req.(*instrumentv1.ProvisionInstrumentLinkingCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_CompleteLinkingWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.CompleteLinkingWithCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).CompleteLinkingWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_CompleteLinkingWithCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).CompleteLinkingWithCode(ctx, req.(*instrumentv1.CompleteLinkingWithCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_GetInstrumentLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.GetInstrumentLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetInstrumentLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_GetInstrumentLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetInstrumentLink(ctx, req.(*instrumentv1.GetInstrumentLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchInstrumentLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.SearchInstrumentLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchInstrumentLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_SearchInstrumentLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchInstrumentLinks(ctx, req.(*instrumentv1.SearchInstrumentLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RemoveInstrumentLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RemoveInstrumentLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RemoveInstrumentLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_RemoveInstrumentLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RemoveInstrumentLink(ctx, req.(*instrumentv1.RemoveInstrumentLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetValue(ctx, req.(*valuev1.GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetReceipt(ctx, req.(*v1.GetReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderToMicaService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProviderToMicaService_ServiceDesc is the grpc.ServiceDesc for ServiceProviderToMicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProviderToMicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.serviceprovider.service.v1.ServiceProviderToMicaService",
	HandlerType: (*ServiceProviderToMicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceProvider",
			Handler:    _ServiceProviderToMicaService_GetServiceProvider_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _ServiceProviderToMicaService_RegisterUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ServiceProviderToMicaService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ServiceProviderToMicaService_UpdateUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _ServiceProviderToMicaService_RemoveUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _ServiceProviderToMicaService_SearchUser_Handler,
		},
		{
			MethodName: "RegisterInstrument",
			Handler:    _ServiceProviderToMicaService_RegisterInstrument_Handler,
		},
		{
			MethodName: "GetInstrument",
			Handler:    _ServiceProviderToMicaService_GetInstrument_Handler,
		},
		{
			MethodName: "RemoveInstrument",
			Handler:    _ServiceProviderToMicaService_RemoveInstrument_Handler,
		},
		{
			MethodName: "SearchInstrument",
			Handler:    _ServiceProviderToMicaService_SearchInstrument_Handler,
		},
		{
			MethodName: "ProvisionServiceProviderUUEK",
			Handler:    _ServiceProviderToMicaService_ProvisionServiceProviderUUEK_Handler,
		},
		{
			MethodName: "ProvisionInstrumentLinkingCode",
			Handler:    _ServiceProviderToMicaService_ProvisionInstrumentLinkingCode_Handler,
		},
		{
			MethodName: "CompleteLinkingWithCode",
			Handler:    _ServiceProviderToMicaService_CompleteLinkingWithCode_Handler,
		},
		{
			MethodName: "GetInstrumentLink",
			Handler:    _ServiceProviderToMicaService_GetInstrumentLink_Handler,
		},
		{
			MethodName: "SearchInstrumentLinks",
			Handler:    _ServiceProviderToMicaService_SearchInstrumentLinks_Handler,
		},
		{
			MethodName: "RemoveInstrumentLink",
			Handler:    _ServiceProviderToMicaService_RemoveInstrumentLink_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _ServiceProviderToMicaService_GetValue_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _ServiceProviderToMicaService_GetReceipt_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ServiceProviderToMicaService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/service/v1/service_provider_to_mica_service.proto",
}
