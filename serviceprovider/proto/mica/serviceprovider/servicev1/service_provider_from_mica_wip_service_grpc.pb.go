// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: mica/serviceprovider/service/v1/service_provider_from_mica_wip_service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	valuev1 "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/valuev1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceProviderFromMicaWIPService_ApproveChargeback_FullMethodName = "/mica.serviceprovider.service.v1.ServiceProviderFromMicaWIPService/ApproveChargeback"
	ServiceProviderFromMicaWIPService_ReceiveValue_FullMethodName      = "/mica.serviceprovider.service.v1.ServiceProviderFromMicaWIPService/ReceiveValue"
)

// ServiceProviderFromMicaWIPServiceClient is the client API for ServiceProviderFromMicaWIPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProviderFromMicaWIPServiceClient interface {
	// This operation will only be used when a dispute is resolved in favor of the user _and_ the money is going back to
	// the users instrument. If the dispute resulted in a replacement or an in-store credit, then the Service Provider
	// is not called.
	ApproveChargeback(ctx context.Context, in *ApproveChargebackRequest, opts ...grpc.CallOption) (*ApproveChargebackResponse, error)
	ReceiveValue(ctx context.Context, in *valuev1.ReceiveValueRequest, opts ...grpc.CallOption) (*valuev1.ReceiveValueResponse, error)
}

type serviceProviderFromMicaWIPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProviderFromMicaWIPServiceClient(cc grpc.ClientConnInterface) ServiceProviderFromMicaWIPServiceClient {
	return &serviceProviderFromMicaWIPServiceClient{cc}
}

func (c *serviceProviderFromMicaWIPServiceClient) ApproveChargeback(ctx context.Context, in *ApproveChargebackRequest, opts ...grpc.CallOption) (*ApproveChargebackResponse, error) {
	out := new(ApproveChargebackResponse)
	err := c.cc.Invoke(ctx, ServiceProviderFromMicaWIPService_ApproveChargeback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderFromMicaWIPServiceClient) ReceiveValue(ctx context.Context, in *valuev1.ReceiveValueRequest, opts ...grpc.CallOption) (*valuev1.ReceiveValueResponse, error) {
	out := new(valuev1.ReceiveValueResponse)
	err := c.cc.Invoke(ctx, ServiceProviderFromMicaWIPService_ReceiveValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProviderFromMicaWIPServiceServer is the server API for ServiceProviderFromMicaWIPService service.
// All implementations must embed UnimplementedServiceProviderFromMicaWIPServiceServer
// for forward compatibility
type ServiceProviderFromMicaWIPServiceServer interface {
	// This operation will only be used when a dispute is resolved in favor of the user _and_ the money is going back to
	// the users instrument. If the dispute resulted in a replacement or an in-store credit, then the Service Provider
	// is not called.
	ApproveChargeback(context.Context, *ApproveChargebackRequest) (*ApproveChargebackResponse, error)
	ReceiveValue(context.Context, *valuev1.ReceiveValueRequest) (*valuev1.ReceiveValueResponse, error)
	mustEmbedUnimplementedServiceProviderFromMicaWIPServiceServer()
}

// UnimplementedServiceProviderFromMicaWIPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProviderFromMicaWIPServiceServer struct {
}

func (UnimplementedServiceProviderFromMicaWIPServiceServer) ApproveChargeback(context.Context, *ApproveChargebackRequest) (*ApproveChargebackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveChargeback not implemented")
}
func (UnimplementedServiceProviderFromMicaWIPServiceServer) ReceiveValue(context.Context, *valuev1.ReceiveValueRequest) (*valuev1.ReceiveValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveValue not implemented")
}
func (UnimplementedServiceProviderFromMicaWIPServiceServer) mustEmbedUnimplementedServiceProviderFromMicaWIPServiceServer() {
}

// UnsafeServiceProviderFromMicaWIPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProviderFromMicaWIPServiceServer will
// result in compilation errors.
type UnsafeServiceProviderFromMicaWIPServiceServer interface {
	mustEmbedUnimplementedServiceProviderFromMicaWIPServiceServer()
}

func RegisterServiceProviderFromMicaWIPServiceServer(s grpc.ServiceRegistrar, srv ServiceProviderFromMicaWIPServiceServer) {
	s.RegisterService(&ServiceProviderFromMicaWIPService_ServiceDesc, srv)
}

func _ServiceProviderFromMicaWIPService_ApproveChargeback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveChargebackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderFromMicaWIPServiceServer).ApproveChargeback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderFromMicaWIPService_ApproveChargeback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderFromMicaWIPServiceServer).ApproveChargeback(ctx, req.(*ApproveChargebackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderFromMicaWIPService_ReceiveValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ReceiveValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderFromMicaWIPServiceServer).ReceiveValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderFromMicaWIPService_ReceiveValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderFromMicaWIPServiceServer).ReceiveValue(ctx, req.(*valuev1.ReceiveValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProviderFromMicaWIPService_ServiceDesc is the grpc.ServiceDesc for ServiceProviderFromMicaWIPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProviderFromMicaWIPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.serviceprovider.service.v1.ServiceProviderFromMicaWIPService",
	HandlerType: (*ServiceProviderFromMicaWIPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApproveChargeback",
			Handler:    _ServiceProviderFromMicaWIPService_ApproveChargeback_Handler,
		},
		{
			MethodName: "ReceiveValue",
			Handler:    _ServiceProviderFromMicaWIPService_ReceiveValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/service/v1/service_provider_from_mica_wip_service.proto",
}
