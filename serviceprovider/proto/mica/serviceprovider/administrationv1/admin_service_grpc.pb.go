// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: mica/serviceprovider/administration/v1/admin_service.proto

package administrationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceProviderAdministrationService_GenerateFromMicaClientCertificate_FullMethodName   = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/GenerateFromMicaClientCertificate"
	ServiceProviderAdministrationService_UpdateFromMicaClientCertificate_FullMethodName     = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/UpdateFromMicaClientCertificate"
	ServiceProviderAdministrationService_EnableFromMicaClientCertificate_FullMethodName     = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/EnableFromMicaClientCertificate"
	ServiceProviderAdministrationService_SearchFromMicaClientCertificate_FullMethodName     = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/SearchFromMicaClientCertificate"
	ServiceProviderAdministrationService_GetFromMicaClientSettings_FullMethodName           = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/GetFromMicaClientSettings"
	ServiceProviderAdministrationService_UpdateFromMicaClientCallbackAddress_FullMethodName = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/UpdateFromMicaClientCallbackAddress"
	ServiceProviderAdministrationService_SearchDataExtractionStatistics_FullMethodName      = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/SearchDataExtractionStatistics"
	ServiceProviderAdministrationService_GetDataExtractionStatistics_FullMethodName         = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/GetDataExtractionStatistics"
	ServiceProviderAdministrationService_PingExternal_FullMethodName                        = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/PingExternal"
	ServiceProviderAdministrationService_PingExternalWithCertificate_FullMethodName         = "/mica.serviceprovider.administration.v1.ServiceProviderAdministrationService/PingExternalWithCertificate"
)

// ServiceProviderAdministrationServiceClient is the client API for ServiceProviderAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProviderAdministrationServiceClient interface {
	// Client certificates are used when mica needs to call out to a customers environment.
	GenerateFromMicaClientCertificate(ctx context.Context, in *GenerateFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*GenerateFromMicaClientCertificateResponse, error)
	// After signing the CSR the member will upload the signed cert
	UpdateFromMicaClientCertificate(ctx context.Context, in *UpdateFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*UpdateFromMicaClientCertificateResponse, error)
	// there can only be one enable cert for each endpoint
	EnableFromMicaClientCertificate(ctx context.Context, in *EnableFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*EnableFromMicaClientCertificateResponse, error)
	// return all from mica certs for now
	SearchFromMicaClientCertificate(ctx context.Context, in *SearchFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*SearchFromMicaClientCertificateResponse, error)
	// External authentication mechanisms for Mica to call provider endpoints
	GetFromMicaClientSettings(ctx context.Context, in *GetFromMicaClientSettingsRequest, opts ...grpc.CallOption) (*GetFromMicaClientSettingsResponse, error)
	UpdateFromMicaClientCallbackAddress(ctx context.Context, in *UpdateFromMicaClientCallbackAddressRequest, opts ...grpc.CallOption) (*UpdateFromMicaClientCallbackAddressResponse, error)
	SearchDataExtractionStatistics(ctx context.Context, in *SearchDataExtractionStatisticsRequest, opts ...grpc.CallOption) (*SearchDataExtractionStatisticsResponse, error)
	GetDataExtractionStatistics(ctx context.Context, in *GetDataExtractionStatisticsRequest, opts ...grpc.CallOption) (*GetDataExtractionStatisticsResponse, error)
	// tests the external call to verify proper configuration and connectivity using the currently enabled certificate
	PingExternal(ctx context.Context, in *PingExternalRequest, opts ...grpc.CallOption) (*PingExternalResponse, error)
	// tests the call to the callback service using a specific certificate that may or may not be enabled
	PingExternalWithCertificate(ctx context.Context, in *PingExternalWithCertificateRequest, opts ...grpc.CallOption) (*PingExternalWithCertificateResponse, error)
}

type serviceProviderAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProviderAdministrationServiceClient(cc grpc.ClientConnInterface) ServiceProviderAdministrationServiceClient {
	return &serviceProviderAdministrationServiceClient{cc}
}

func (c *serviceProviderAdministrationServiceClient) GenerateFromMicaClientCertificate(ctx context.Context, in *GenerateFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*GenerateFromMicaClientCertificateResponse, error) {
	out := new(GenerateFromMicaClientCertificateResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_GenerateFromMicaClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) UpdateFromMicaClientCertificate(ctx context.Context, in *UpdateFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*UpdateFromMicaClientCertificateResponse, error) {
	out := new(UpdateFromMicaClientCertificateResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_UpdateFromMicaClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) EnableFromMicaClientCertificate(ctx context.Context, in *EnableFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*EnableFromMicaClientCertificateResponse, error) {
	out := new(EnableFromMicaClientCertificateResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_EnableFromMicaClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) SearchFromMicaClientCertificate(ctx context.Context, in *SearchFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*SearchFromMicaClientCertificateResponse, error) {
	out := new(SearchFromMicaClientCertificateResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_SearchFromMicaClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) GetFromMicaClientSettings(ctx context.Context, in *GetFromMicaClientSettingsRequest, opts ...grpc.CallOption) (*GetFromMicaClientSettingsResponse, error) {
	out := new(GetFromMicaClientSettingsResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_GetFromMicaClientSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) UpdateFromMicaClientCallbackAddress(ctx context.Context, in *UpdateFromMicaClientCallbackAddressRequest, opts ...grpc.CallOption) (*UpdateFromMicaClientCallbackAddressResponse, error) {
	out := new(UpdateFromMicaClientCallbackAddressResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_UpdateFromMicaClientCallbackAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) SearchDataExtractionStatistics(ctx context.Context, in *SearchDataExtractionStatisticsRequest, opts ...grpc.CallOption) (*SearchDataExtractionStatisticsResponse, error) {
	out := new(SearchDataExtractionStatisticsResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_SearchDataExtractionStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) GetDataExtractionStatistics(ctx context.Context, in *GetDataExtractionStatisticsRequest, opts ...grpc.CallOption) (*GetDataExtractionStatisticsResponse, error) {
	out := new(GetDataExtractionStatisticsResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_GetDataExtractionStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) PingExternal(ctx context.Context, in *PingExternalRequest, opts ...grpc.CallOption) (*PingExternalResponse, error) {
	out := new(PingExternalResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_PingExternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdministrationServiceClient) PingExternalWithCertificate(ctx context.Context, in *PingExternalWithCertificateRequest, opts ...grpc.CallOption) (*PingExternalWithCertificateResponse, error) {
	out := new(PingExternalWithCertificateResponse)
	err := c.cc.Invoke(ctx, ServiceProviderAdministrationService_PingExternalWithCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProviderAdministrationServiceServer is the server API for ServiceProviderAdministrationService service.
// All implementations must embed UnimplementedServiceProviderAdministrationServiceServer
// for forward compatibility
type ServiceProviderAdministrationServiceServer interface {
	// Client certificates are used when mica needs to call out to a customers environment.
	GenerateFromMicaClientCertificate(context.Context, *GenerateFromMicaClientCertificateRequest) (*GenerateFromMicaClientCertificateResponse, error)
	// After signing the CSR the member will upload the signed cert
	UpdateFromMicaClientCertificate(context.Context, *UpdateFromMicaClientCertificateRequest) (*UpdateFromMicaClientCertificateResponse, error)
	// there can only be one enable cert for each endpoint
	EnableFromMicaClientCertificate(context.Context, *EnableFromMicaClientCertificateRequest) (*EnableFromMicaClientCertificateResponse, error)
	// return all from mica certs for now
	SearchFromMicaClientCertificate(context.Context, *SearchFromMicaClientCertificateRequest) (*SearchFromMicaClientCertificateResponse, error)
	// External authentication mechanisms for Mica to call provider endpoints
	GetFromMicaClientSettings(context.Context, *GetFromMicaClientSettingsRequest) (*GetFromMicaClientSettingsResponse, error)
	UpdateFromMicaClientCallbackAddress(context.Context, *UpdateFromMicaClientCallbackAddressRequest) (*UpdateFromMicaClientCallbackAddressResponse, error)
	SearchDataExtractionStatistics(context.Context, *SearchDataExtractionStatisticsRequest) (*SearchDataExtractionStatisticsResponse, error)
	GetDataExtractionStatistics(context.Context, *GetDataExtractionStatisticsRequest) (*GetDataExtractionStatisticsResponse, error)
	// tests the external call to verify proper configuration and connectivity using the currently enabled certificate
	PingExternal(context.Context, *PingExternalRequest) (*PingExternalResponse, error)
	// tests the call to the callback service using a specific certificate that may or may not be enabled
	PingExternalWithCertificate(context.Context, *PingExternalWithCertificateRequest) (*PingExternalWithCertificateResponse, error)
	mustEmbedUnimplementedServiceProviderAdministrationServiceServer()
}

// UnimplementedServiceProviderAdministrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProviderAdministrationServiceServer struct {
}

func (UnimplementedServiceProviderAdministrationServiceServer) GenerateFromMicaClientCertificate(context.Context, *GenerateFromMicaClientCertificateRequest) (*GenerateFromMicaClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFromMicaClientCertificate not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) UpdateFromMicaClientCertificate(context.Context, *UpdateFromMicaClientCertificateRequest) (*UpdateFromMicaClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFromMicaClientCertificate not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) EnableFromMicaClientCertificate(context.Context, *EnableFromMicaClientCertificateRequest) (*EnableFromMicaClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFromMicaClientCertificate not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) SearchFromMicaClientCertificate(context.Context, *SearchFromMicaClientCertificateRequest) (*SearchFromMicaClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFromMicaClientCertificate not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) GetFromMicaClientSettings(context.Context, *GetFromMicaClientSettingsRequest) (*GetFromMicaClientSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromMicaClientSettings not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) UpdateFromMicaClientCallbackAddress(context.Context, *UpdateFromMicaClientCallbackAddressRequest) (*UpdateFromMicaClientCallbackAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFromMicaClientCallbackAddress not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) SearchDataExtractionStatistics(context.Context, *SearchDataExtractionStatisticsRequest) (*SearchDataExtractionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDataExtractionStatistics not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) GetDataExtractionStatistics(context.Context, *GetDataExtractionStatisticsRequest) (*GetDataExtractionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataExtractionStatistics not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) PingExternal(context.Context, *PingExternalRequest) (*PingExternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingExternal not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) PingExternalWithCertificate(context.Context, *PingExternalWithCertificateRequest) (*PingExternalWithCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingExternalWithCertificate not implemented")
}
func (UnimplementedServiceProviderAdministrationServiceServer) mustEmbedUnimplementedServiceProviderAdministrationServiceServer() {
}

// UnsafeServiceProviderAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProviderAdministrationServiceServer will
// result in compilation errors.
type UnsafeServiceProviderAdministrationServiceServer interface {
	mustEmbedUnimplementedServiceProviderAdministrationServiceServer()
}

func RegisterServiceProviderAdministrationServiceServer(s grpc.ServiceRegistrar, srv ServiceProviderAdministrationServiceServer) {
	s.RegisterService(&ServiceProviderAdministrationService_ServiceDesc, srv)
}

func _ServiceProviderAdministrationService_GenerateFromMicaClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFromMicaClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).GenerateFromMicaClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_GenerateFromMicaClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).GenerateFromMicaClientCertificate(ctx, req.(*GenerateFromMicaClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_UpdateFromMicaClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFromMicaClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).UpdateFromMicaClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_UpdateFromMicaClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).UpdateFromMicaClientCertificate(ctx, req.(*UpdateFromMicaClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_EnableFromMicaClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFromMicaClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).EnableFromMicaClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_EnableFromMicaClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).EnableFromMicaClientCertificate(ctx, req.(*EnableFromMicaClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_SearchFromMicaClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFromMicaClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).SearchFromMicaClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_SearchFromMicaClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).SearchFromMicaClientCertificate(ctx, req.(*SearchFromMicaClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_GetFromMicaClientSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFromMicaClientSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).GetFromMicaClientSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_GetFromMicaClientSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).GetFromMicaClientSettings(ctx, req.(*GetFromMicaClientSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_UpdateFromMicaClientCallbackAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFromMicaClientCallbackAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).UpdateFromMicaClientCallbackAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_UpdateFromMicaClientCallbackAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).UpdateFromMicaClientCallbackAddress(ctx, req.(*UpdateFromMicaClientCallbackAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_SearchDataExtractionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDataExtractionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).SearchDataExtractionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_SearchDataExtractionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).SearchDataExtractionStatistics(ctx, req.(*SearchDataExtractionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_GetDataExtractionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataExtractionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).GetDataExtractionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_GetDataExtractionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).GetDataExtractionStatistics(ctx, req.(*GetDataExtractionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_PingExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingExternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).PingExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_PingExternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).PingExternal(ctx, req.(*PingExternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdministrationService_PingExternalWithCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingExternalWithCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdministrationServiceServer).PingExternalWithCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProviderAdministrationService_PingExternalWithCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdministrationServiceServer).PingExternalWithCertificate(ctx, req.(*PingExternalWithCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProviderAdministrationService_ServiceDesc is the grpc.ServiceDesc for ServiceProviderAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProviderAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.serviceprovider.administration.v1.ServiceProviderAdministrationService",
	HandlerType: (*ServiceProviderAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateFromMicaClientCertificate",
			Handler:    _ServiceProviderAdministrationService_GenerateFromMicaClientCertificate_Handler,
		},
		{
			MethodName: "UpdateFromMicaClientCertificate",
			Handler:    _ServiceProviderAdministrationService_UpdateFromMicaClientCertificate_Handler,
		},
		{
			MethodName: "EnableFromMicaClientCertificate",
			Handler:    _ServiceProviderAdministrationService_EnableFromMicaClientCertificate_Handler,
		},
		{
			MethodName: "SearchFromMicaClientCertificate",
			Handler:    _ServiceProviderAdministrationService_SearchFromMicaClientCertificate_Handler,
		},
		{
			MethodName: "GetFromMicaClientSettings",
			Handler:    _ServiceProviderAdministrationService_GetFromMicaClientSettings_Handler,
		},
		{
			MethodName: "UpdateFromMicaClientCallbackAddress",
			Handler:    _ServiceProviderAdministrationService_UpdateFromMicaClientCallbackAddress_Handler,
		},
		{
			MethodName: "SearchDataExtractionStatistics",
			Handler:    _ServiceProviderAdministrationService_SearchDataExtractionStatistics_Handler,
		},
		{
			MethodName: "GetDataExtractionStatistics",
			Handler:    _ServiceProviderAdministrationService_GetDataExtractionStatistics_Handler,
		},
		{
			MethodName: "PingExternal",
			Handler:    _ServiceProviderAdministrationService_PingExternal_Handler,
		},
		{
			MethodName: "PingExternalWithCertificate",
			Handler:    _ServiceProviderAdministrationService_PingExternalWithCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/serviceprovider/proto/mica/serviceprovider/administration/v1/admin_service.proto",
}
