// Copyright (c) 2022 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: mica/serviceprovider/transaction/v1/transaction.proto

package transactionv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	currencyv1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/currencyv1"
	regionv1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/enums/regionv1"
	v1 "github.com/1080network/golang/serviceprovider/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IntervalType int32

const (
	IntervalType_INTERVAL_TYPE_UNSPECIFIED IntervalType = 0
	IntervalType_INTERVAL_TYPE_HOUR        IntervalType = 1
	IntervalType_INTERVAL_TYPE_DAY         IntervalType = 2
	IntervalType_INTERVAL_TYPE_WEEK        IntervalType = 3
	IntervalType_INTERVAL_TYPE_MONTH       IntervalType = 4
	IntervalType_INTERVAL_TYPE_YEAR        IntervalType = 5
	IntervalType_INTERVAL_TYPE_SECOND      IntervalType = 60
	IntervalType_INTERVAL_TYPE_MINUTE      IntervalType = 61
)

// Enum value maps for IntervalType.
var (
	IntervalType_name = map[int32]string{
		0:  "INTERVAL_TYPE_UNSPECIFIED",
		1:  "INTERVAL_TYPE_HOUR",
		2:  "INTERVAL_TYPE_DAY",
		3:  "INTERVAL_TYPE_WEEK",
		4:  "INTERVAL_TYPE_MONTH",
		5:  "INTERVAL_TYPE_YEAR",
		60: "INTERVAL_TYPE_SECOND",
		61: "INTERVAL_TYPE_MINUTE",
	}
	IntervalType_value = map[string]int32{
		"INTERVAL_TYPE_UNSPECIFIED": 0,
		"INTERVAL_TYPE_HOUR":        1,
		"INTERVAL_TYPE_DAY":         2,
		"INTERVAL_TYPE_WEEK":        3,
		"INTERVAL_TYPE_MONTH":       4,
		"INTERVAL_TYPE_YEAR":        5,
		"INTERVAL_TYPE_SECOND":      60,
		"INTERVAL_TYPE_MINUTE":      61,
	}
)

func (x IntervalType) Enum() *IntervalType {
	p := new(IntervalType)
	*p = x
	return p
}

func (x IntervalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntervalType) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[0].Descriptor()
}

func (IntervalType) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[0]
}

func (x IntervalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntervalType.Descriptor instead.
func (IntervalType) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{0}
}

type TransactionType int32

const (
	TransactionType_TRANSACTION_TYPE_UNSPECIFIED            TransactionType = 0
	TransactionType_TRANSACTION_TYPE_OBTAIN_APPROVAL        TransactionType = 1
	TransactionType_TRANSACTION_TYPE_OBTAIN_DECLINE         TransactionType = 2
	TransactionType_TRANSACTION_TYPE_RETURN_APPROVAL        TransactionType = 3
	TransactionType_TRANSACTION_TYPE_RETURN_DECLINE         TransactionType = 4
	TransactionType_TRANSACTION_TYPE_OBTAIN_NETWORK_DECLINE TransactionType = 5
	TransactionType_TRANSACTION_TYPE_RETURN_NETWORK_DECLINE TransactionType = 6
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "TRANSACTION_TYPE_UNSPECIFIED",
		1: "TRANSACTION_TYPE_OBTAIN_APPROVAL",
		2: "TRANSACTION_TYPE_OBTAIN_DECLINE",
		3: "TRANSACTION_TYPE_RETURN_APPROVAL",
		4: "TRANSACTION_TYPE_RETURN_DECLINE",
		5: "TRANSACTION_TYPE_OBTAIN_NETWORK_DECLINE",
		6: "TRANSACTION_TYPE_RETURN_NETWORK_DECLINE",
	}
	TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED":            0,
		"TRANSACTION_TYPE_OBTAIN_APPROVAL":        1,
		"TRANSACTION_TYPE_OBTAIN_DECLINE":         2,
		"TRANSACTION_TYPE_RETURN_APPROVAL":        3,
		"TRANSACTION_TYPE_RETURN_DECLINE":         4,
		"TRANSACTION_TYPE_OBTAIN_NETWORK_DECLINE": 5,
		"TRANSACTION_TYPE_RETURN_NETWORK_DECLINE": 6,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[1].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[1]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{1}
}

type SearchTransactionDataResponse_Status int32

const (
	SearchTransactionDataResponse_STATUS_UNSPECIFIED SearchTransactionDataResponse_Status = 0
	SearchTransactionDataResponse_STATUS_SUCCESS     SearchTransactionDataResponse_Status = 1
	SearchTransactionDataResponse_STATUS_ERROR       SearchTransactionDataResponse_Status = 2
)

// Enum value maps for SearchTransactionDataResponse_Status.
var (
	SearchTransactionDataResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchTransactionDataResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchTransactionDataResponse_Status) Enum() *SearchTransactionDataResponse_Status {
	p := new(SearchTransactionDataResponse_Status)
	*p = x
	return p
}

func (x SearchTransactionDataResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchTransactionDataResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[2].Descriptor()
}

func (SearchTransactionDataResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[2]
}

func (x SearchTransactionDataResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchTransactionDataResponse_Status.Descriptor instead.
func (SearchTransactionDataResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{2, 0}
}

type SearchTransactionGeographyDataResponse_Status int32

const (
	SearchTransactionGeographyDataResponse_STATUS_UNSPECIFIED SearchTransactionGeographyDataResponse_Status = 0
	SearchTransactionGeographyDataResponse_STATUS_SUCCESS     SearchTransactionGeographyDataResponse_Status = 1
	SearchTransactionGeographyDataResponse_STATUS_ERROR       SearchTransactionGeographyDataResponse_Status = 2
)

// Enum value maps for SearchTransactionGeographyDataResponse_Status.
var (
	SearchTransactionGeographyDataResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchTransactionGeographyDataResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchTransactionGeographyDataResponse_Status) Enum() *SearchTransactionGeographyDataResponse_Status {
	p := new(SearchTransactionGeographyDataResponse_Status)
	*p = x
	return p
}

func (x SearchTransactionGeographyDataResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchTransactionGeographyDataResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[3].Descriptor()
}

func (SearchTransactionGeographyDataResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[3]
}

func (x SearchTransactionGeographyDataResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchTransactionGeographyDataResponse_Status.Descriptor instead.
func (SearchTransactionGeographyDataResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{5, 0}
}

type SearchTransactionPartnerDataResponse_Status int32

const (
	SearchTransactionPartnerDataResponse_STATUS_UNSPECIFIED SearchTransactionPartnerDataResponse_Status = 0
	SearchTransactionPartnerDataResponse_STATUS_SUCCESS     SearchTransactionPartnerDataResponse_Status = 1
	SearchTransactionPartnerDataResponse_STATUS_ERROR       SearchTransactionPartnerDataResponse_Status = 2
)

// Enum value maps for SearchTransactionPartnerDataResponse_Status.
var (
	SearchTransactionPartnerDataResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchTransactionPartnerDataResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchTransactionPartnerDataResponse_Status) Enum() *SearchTransactionPartnerDataResponse_Status {
	p := new(SearchTransactionPartnerDataResponse_Status)
	*p = x
	return p
}

func (x SearchTransactionPartnerDataResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchTransactionPartnerDataResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[4].Descriptor()
}

func (SearchTransactionPartnerDataResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes[4]
}

func (x SearchTransactionPartnerDataResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchTransactionPartnerDataResponse_Status.Descriptor instead.
func (SearchTransactionPartnerDataResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{8, 0}
}

type SearchTransactionDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start of data range inclusive
	DateFrom *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// end of data range exclusive - optional
	DateTo *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
	// optional
	IntervalType IntervalType `protobuf:"varint,3,opt,name=interval_type,json=intervalType,proto3,enum=mica.serviceprovider.transaction.v1.IntervalType" json:"interval_type,omitempty"`
	// the number of records to return
	// optional
	TopN int64 `protobuf:"varint,4,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	// optional
	TransactionType TransactionType `protobuf:"varint,5,opt,name=transaction_type,json=transactionType,proto3,enum=mica.serviceprovider.transaction.v1.TransactionType" json:"transaction_type,omitempty"`
	// optional
	Currency currencyv1.Currency `protobuf:"varint,6,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// optional
	OrganizationKey string `protobuf:"bytes,7,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	// optional
	StoreKey string `protobuf:"bytes,8,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// minimum amount inclusive - optional
	MinAmount string `protobuf:"bytes,9,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// maximum amount exclusive - optional
	MaxAmount string `protobuf:"bytes,10,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
}

func (x *SearchTransactionDataRequest) Reset() {
	*x = SearchTransactionDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTransactionDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTransactionDataRequest) ProtoMessage() {}

func (x *SearchTransactionDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTransactionDataRequest.ProtoReflect.Descriptor instead.
func (*SearchTransactionDataRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *SearchTransactionDataRequest) GetDateFrom() *timestamp.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *SearchTransactionDataRequest) GetDateTo() *timestamp.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

func (x *SearchTransactionDataRequest) GetIntervalType() IntervalType {
	if x != nil {
		return x.IntervalType
	}
	return IntervalType_INTERVAL_TYPE_UNSPECIFIED
}

func (x *SearchTransactionDataRequest) GetTopN() int64 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *SearchTransactionDataRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *SearchTransactionDataRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *SearchTransactionDataRequest) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *SearchTransactionDataRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *SearchTransactionDataRequest) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *SearchTransactionDataRequest) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

type CountAmountItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                       *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Currency                   currencyv1.Currency  `protobuf:"varint,2,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	ObtainApprovalCount        int64                `protobuf:"varint,3,opt,name=obtain_approval_count,json=obtainApprovalCount,proto3" json:"obtain_approval_count,omitempty"`
	ObtainApprovalAmount       string               `protobuf:"bytes,4,opt,name=obtain_approval_amount,json=obtainApprovalAmount,proto3" json:"obtain_approval_amount,omitempty"`
	ObtainDeclineCount         int64                `protobuf:"varint,5,opt,name=obtain_decline_count,json=obtainDeclineCount,proto3" json:"obtain_decline_count,omitempty"`
	ObtainDeclineAmount        string               `protobuf:"bytes,6,opt,name=obtain_decline_amount,json=obtainDeclineAmount,proto3" json:"obtain_decline_amount,omitempty"`
	ObtainNetworkDeclineCount  int64                `protobuf:"varint,7,opt,name=obtain_network_decline_count,json=obtainNetworkDeclineCount,proto3" json:"obtain_network_decline_count,omitempty"`
	ObtainNetworkDeclineAmount string               `protobuf:"bytes,8,opt,name=obtain_network_decline_amount,json=obtainNetworkDeclineAmount,proto3" json:"obtain_network_decline_amount,omitempty"`
	ReturnApprovalCount        int64                `protobuf:"varint,9,opt,name=return_approval_count,json=returnApprovalCount,proto3" json:"return_approval_count,omitempty"`
	ReturnApprovalAmount       string               `protobuf:"bytes,10,opt,name=return_approval_amount,json=returnApprovalAmount,proto3" json:"return_approval_amount,omitempty"`
	ReturnDeclineCount         int64                `protobuf:"varint,11,opt,name=return_decline_count,json=returnDeclineCount,proto3" json:"return_decline_count,omitempty"`
	ReturnDeclineAmount        string               `protobuf:"bytes,12,opt,name=return_decline_amount,json=returnDeclineAmount,proto3" json:"return_decline_amount,omitempty"`
	ReturnNetworkDeclineCount  int64                `protobuf:"varint,13,opt,name=return_network_decline_count,json=returnNetworkDeclineCount,proto3" json:"return_network_decline_count,omitempty"`
	ReturnNetworkDeclineAmount string               `protobuf:"bytes,14,opt,name=return_network_decline_amount,json=returnNetworkDeclineAmount,proto3" json:"return_network_decline_amount,omitempty"`
}

func (x *CountAmountItem) Reset() {
	*x = CountAmountItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAmountItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAmountItem) ProtoMessage() {}

func (x *CountAmountItem) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAmountItem.ProtoReflect.Descriptor instead.
func (*CountAmountItem) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *CountAmountItem) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CountAmountItem) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *CountAmountItem) GetObtainApprovalCount() int64 {
	if x != nil {
		return x.ObtainApprovalCount
	}
	return 0
}

func (x *CountAmountItem) GetObtainApprovalAmount() string {
	if x != nil {
		return x.ObtainApprovalAmount
	}
	return ""
}

func (x *CountAmountItem) GetObtainDeclineCount() int64 {
	if x != nil {
		return x.ObtainDeclineCount
	}
	return 0
}

func (x *CountAmountItem) GetObtainDeclineAmount() string {
	if x != nil {
		return x.ObtainDeclineAmount
	}
	return ""
}

func (x *CountAmountItem) GetObtainNetworkDeclineCount() int64 {
	if x != nil {
		return x.ObtainNetworkDeclineCount
	}
	return 0
}

func (x *CountAmountItem) GetObtainNetworkDeclineAmount() string {
	if x != nil {
		return x.ObtainNetworkDeclineAmount
	}
	return ""
}

func (x *CountAmountItem) GetReturnApprovalCount() int64 {
	if x != nil {
		return x.ReturnApprovalCount
	}
	return 0
}

func (x *CountAmountItem) GetReturnApprovalAmount() string {
	if x != nil {
		return x.ReturnApprovalAmount
	}
	return ""
}

func (x *CountAmountItem) GetReturnDeclineCount() int64 {
	if x != nil {
		return x.ReturnDeclineCount
	}
	return 0
}

func (x *CountAmountItem) GetReturnDeclineAmount() string {
	if x != nil {
		return x.ReturnDeclineAmount
	}
	return ""
}

func (x *CountAmountItem) GetReturnNetworkDeclineCount() int64 {
	if x != nil {
		return x.ReturnNetworkDeclineCount
	}
	return 0
}

func (x *CountAmountItem) GetReturnNetworkDeclineAmount() string {
	if x != nil {
		return x.ReturnNetworkDeclineAmount
	}
	return ""
}

type SearchTransactionDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           SearchTransactionDataResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.transaction.v1.SearchTransactionDataResponse_Status" json:"status,omitempty"`
	Error            *v1.Error                            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Cid              string                               `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	CountAmountItems []*CountAmountItem                   `protobuf:"bytes,4,rep,name=count_amount_items,json=countAmountItems,proto3" json:"count_amount_items,omitempty"`
}

func (x *SearchTransactionDataResponse) Reset() {
	*x = SearchTransactionDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTransactionDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTransactionDataResponse) ProtoMessage() {}

func (x *SearchTransactionDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTransactionDataResponse.ProtoReflect.Descriptor instead.
func (*SearchTransactionDataResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *SearchTransactionDataResponse) GetStatus() SearchTransactionDataResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchTransactionDataResponse_STATUS_UNSPECIFIED
}

func (x *SearchTransactionDataResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchTransactionDataResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *SearchTransactionDataResponse) GetCountAmountItems() []*CountAmountItem {
	if x != nil {
		return x.CountAmountItems
	}
	return nil
}

type SearchTransactionGeographyDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start of data range inclusive
	DateFrom *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// end of data range exclusive
	DateTo *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
	// optional
	IntervalType IntervalType `protobuf:"varint,3,opt,name=interval_type,json=intervalType,proto3,enum=mica.serviceprovider.transaction.v1.IntervalType" json:"interval_type,omitempty"`
	// the number of records to return
	// optional
	TopN int64 `protobuf:"varint,4,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	// optional
	TransactionType TransactionType `protobuf:"varint,5,opt,name=transaction_type,json=transactionType,proto3,enum=mica.serviceprovider.transaction.v1.TransactionType" json:"transaction_type,omitempty"`
	// optional
	Currency currencyv1.Currency `protobuf:"varint,6,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// optional
	OrganizationKey string `protobuf:"bytes,7,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	// optional
	StoreKey string `protobuf:"bytes,8,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// optional
	Region regionv1.Region `protobuf:"varint,9,opt,name=region,proto3,enum=micashared.common.enums.region.v1.Region" json:"region,omitempty"`
	// optional
	PostalCode string `protobuf:"bytes,10,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// minimum amount inclusive - optional
	MinAmount string `protobuf:"bytes,11,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// maximum amount exclusive - optional
	MaxAmount string `protobuf:"bytes,12,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
}

func (x *SearchTransactionGeographyDataRequest) Reset() {
	*x = SearchTransactionGeographyDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTransactionGeographyDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTransactionGeographyDataRequest) ProtoMessage() {}

func (x *SearchTransactionGeographyDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTransactionGeographyDataRequest.ProtoReflect.Descriptor instead.
func (*SearchTransactionGeographyDataRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *SearchTransactionGeographyDataRequest) GetDateFrom() *timestamp.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *SearchTransactionGeographyDataRequest) GetDateTo() *timestamp.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

func (x *SearchTransactionGeographyDataRequest) GetIntervalType() IntervalType {
	if x != nil {
		return x.IntervalType
	}
	return IntervalType_INTERVAL_TYPE_UNSPECIFIED
}

func (x *SearchTransactionGeographyDataRequest) GetTopN() int64 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *SearchTransactionGeographyDataRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *SearchTransactionGeographyDataRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *SearchTransactionGeographyDataRequest) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *SearchTransactionGeographyDataRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *SearchTransactionGeographyDataRequest) GetRegion() regionv1.Region {
	if x != nil {
		return x.Region
	}
	return regionv1.Region(0)
}

func (x *SearchTransactionGeographyDataRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *SearchTransactionGeographyDataRequest) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *SearchTransactionGeographyDataRequest) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

type SearchTransactionGeographyDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude         float64            `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude        float64            `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	CountAmountItems []*CountAmountItem `protobuf:"bytes,3,rep,name=count_amount_items,json=countAmountItems,proto3" json:"count_amount_items,omitempty"`
}

func (x *SearchTransactionGeographyDataItem) Reset() {
	*x = SearchTransactionGeographyDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTransactionGeographyDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTransactionGeographyDataItem) ProtoMessage() {}

func (x *SearchTransactionGeographyDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTransactionGeographyDataItem.ProtoReflect.Descriptor instead.
func (*SearchTransactionGeographyDataItem) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *SearchTransactionGeographyDataItem) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *SearchTransactionGeographyDataItem) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *SearchTransactionGeographyDataItem) GetCountAmountItems() []*CountAmountItem {
	if x != nil {
		return x.CountAmountItems
	}
	return nil
}

type SearchTransactionGeographyDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SearchTransactionGeographyDataResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Cid    string                                        `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Items  []*SearchTransactionGeographyDataItem         `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SearchTransactionGeographyDataResponse) Reset() {
	*x = SearchTransactionGeographyDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTransactionGeographyDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTransactionGeographyDataResponse) ProtoMessage() {}

func (x *SearchTransactionGeographyDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTransactionGeographyDataResponse.ProtoReflect.Descriptor instead.
func (*SearchTransactionGeographyDataResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *SearchTransactionGeographyDataResponse) GetStatus() SearchTransactionGeographyDataResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchTransactionGeographyDataResponse_STATUS_UNSPECIFIED
}

func (x *SearchTransactionGeographyDataResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchTransactionGeographyDataResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *SearchTransactionGeographyDataResponse) GetItems() []*SearchTransactionGeographyDataItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type SearchTransactionPartnerDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start of data range inclusive
	DateFrom *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// end of data range exclusive
	DateTo *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
	// optional
	IntervalType IntervalType `protobuf:"varint,3,opt,name=interval_type,json=intervalType,proto3,enum=mica.serviceprovider.transaction.v1.IntervalType" json:"interval_type,omitempty"`
	// the number of records to return
	// optional
	TopN int64 `protobuf:"varint,4,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	// optional
	TransactionType TransactionType `protobuf:"varint,5,opt,name=transaction_type,json=transactionType,proto3,enum=mica.serviceprovider.transaction.v1.TransactionType" json:"transaction_type,omitempty"`
	// optional
	Currency currencyv1.Currency `protobuf:"varint,6,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// optional
	OrganizationKey string `protobuf:"bytes,7,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	// optional
	StoreKey string `protobuf:"bytes,8,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// minimum amount inclusive - optional
	MinAmount string `protobuf:"bytes,9,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// maximum amount exclusive - optional
	MaxAmount string `protobuf:"bytes,10,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
}

func (x *SearchTransactionPartnerDataRequest) Reset() {
	*x = SearchTransactionPartnerDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTransactionPartnerDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTransactionPartnerDataRequest) ProtoMessage() {}

func (x *SearchTransactionPartnerDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTransactionPartnerDataRequest.ProtoReflect.Descriptor instead.
func (*SearchTransactionPartnerDataRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *SearchTransactionPartnerDataRequest) GetDateFrom() *timestamp.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *SearchTransactionPartnerDataRequest) GetDateTo() *timestamp.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

func (x *SearchTransactionPartnerDataRequest) GetIntervalType() IntervalType {
	if x != nil {
		return x.IntervalType
	}
	return IntervalType_INTERVAL_TYPE_UNSPECIFIED
}

func (x *SearchTransactionPartnerDataRequest) GetTopN() int64 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *SearchTransactionPartnerDataRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *SearchTransactionPartnerDataRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *SearchTransactionPartnerDataRequest) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *SearchTransactionPartnerDataRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *SearchTransactionPartnerDataRequest) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *SearchTransactionPartnerDataRequest) GetMaxAmount() string {
	if x != nil {
		return x.MaxAmount
	}
	return ""
}

type SearchTransactionPartnerDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerKey      string           `protobuf:"bytes,1,opt,name=partner_key,json=partnerKey,proto3" json:"partner_key,omitempty"`
	PartnerName     string           `protobuf:"bytes,2,opt,name=partner_name,json=partnerName,proto3" json:"partner_name,omitempty"`
	CountAmountItem *CountAmountItem `protobuf:"bytes,3,opt,name=count_amount_item,json=countAmountItem,proto3" json:"count_amount_item,omitempty"`
}

func (x *SearchTransactionPartnerDataItem) Reset() {
	*x = SearchTransactionPartnerDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTransactionPartnerDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTransactionPartnerDataItem) ProtoMessage() {}

func (x *SearchTransactionPartnerDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTransactionPartnerDataItem.ProtoReflect.Descriptor instead.
func (*SearchTransactionPartnerDataItem) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *SearchTransactionPartnerDataItem) GetPartnerKey() string {
	if x != nil {
		return x.PartnerKey
	}
	return ""
}

func (x *SearchTransactionPartnerDataItem) GetPartnerName() string {
	if x != nil {
		return x.PartnerName
	}
	return ""
}

func (x *SearchTransactionPartnerDataItem) GetCountAmountItem() *CountAmountItem {
	if x != nil {
		return x.CountAmountItem
	}
	return nil
}

type SearchTransactionPartnerDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SearchTransactionPartnerDataResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Cid    string                                      `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Items  []*SearchTransactionPartnerDataItem         `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SearchTransactionPartnerDataResponse) Reset() {
	*x = SearchTransactionPartnerDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTransactionPartnerDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTransactionPartnerDataResponse) ProtoMessage() {}

func (x *SearchTransactionPartnerDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTransactionPartnerDataResponse.ProtoReflect.Descriptor instead.
func (*SearchTransactionPartnerDataResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *SearchTransactionPartnerDataResponse) GetStatus() SearchTransactionPartnerDataResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchTransactionPartnerDataResponse_STATUS_UNSPECIFIED
}

func (x *SearchTransactionPartnerDataResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchTransactionPartnerDataResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *SearchTransactionPartnerDataResponse) GetItems() []*SearchTransactionPartnerDataItem {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_mica_serviceprovider_transaction_v1_transaction_proto protoreflect.FileDescriptor

var file_mica_serviceprovider_transaction_v1_transaction_proto_rawDesc = []byte{
	0x0a, 0x35, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x04, 0x0a,
	0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x56, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12, 0x5f, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x32, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb4, 0x06, 0x0a,
	0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d,
	0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x62, 0x0a,
	0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xaa, 0x05, 0x0a, 0x25, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x12, 0x56, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x5f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12, 0x5f,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x10, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x26,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xc4,
	0x04, 0x0a, 0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x12, 0x56, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x70,
	0x4e, 0x12, 0x5f, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a,
	0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32,
	0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xfa, 0x02, 0x0a, 0x24,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xd9, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x3c, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x55,
	0x54, 0x45, 0x10, 0x3d, 0x2a, 0xa3, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x42, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x43, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04,
	0x12, 0x2b, 0x0a, 0x27, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x2b, 0x0a,
	0x27, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x42, 0x65, 0x0a, 0x26, 0x69, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x22, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43,
	0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescOnce sync.Once
	file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescData = file_mica_serviceprovider_transaction_v1_transaction_proto_rawDesc
)

func file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescGZIP() []byte {
	file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescOnce.Do(func() {
		file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescData)
	})
	return file_mica_serviceprovider_transaction_v1_transaction_proto_rawDescData
}

var file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mica_serviceprovider_transaction_v1_transaction_proto_goTypes = []interface{}{
	(IntervalType)(0),                                  // 0: mica.serviceprovider.transaction.v1.IntervalType
	(TransactionType)(0),                               // 1: mica.serviceprovider.transaction.v1.TransactionType
	(SearchTransactionDataResponse_Status)(0),          // 2: mica.serviceprovider.transaction.v1.SearchTransactionDataResponse.Status
	(SearchTransactionGeographyDataResponse_Status)(0), // 3: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataResponse.Status
	(SearchTransactionPartnerDataResponse_Status)(0),   // 4: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataResponse.Status
	(*SearchTransactionDataRequest)(nil),               // 5: mica.serviceprovider.transaction.v1.SearchTransactionDataRequest
	(*CountAmountItem)(nil),                            // 6: mica.serviceprovider.transaction.v1.CountAmountItem
	(*SearchTransactionDataResponse)(nil),              // 7: mica.serviceprovider.transaction.v1.SearchTransactionDataResponse
	(*SearchTransactionGeographyDataRequest)(nil),      // 8: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataRequest
	(*SearchTransactionGeographyDataItem)(nil),         // 9: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataItem
	(*SearchTransactionGeographyDataResponse)(nil),     // 10: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataResponse
	(*SearchTransactionPartnerDataRequest)(nil),        // 11: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataRequest
	(*SearchTransactionPartnerDataItem)(nil),           // 12: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataItem
	(*SearchTransactionPartnerDataResponse)(nil),       // 13: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataResponse
	(*timestamp.Timestamp)(nil),                        // 14: google.protobuf.Timestamp
	(currencyv1.Currency)(0),                           // 15: micashared.common.enums.currency.v1.Currency
	(*v1.Error)(nil),                                   // 16: micashared.common.v1.Error
	(regionv1.Region)(0),                               // 17: micashared.common.enums.region.v1.Region
}
var file_mica_serviceprovider_transaction_v1_transaction_proto_depIdxs = []int32{
	14, // 0: mica.serviceprovider.transaction.v1.SearchTransactionDataRequest.date_from:type_name -> google.protobuf.Timestamp
	14, // 1: mica.serviceprovider.transaction.v1.SearchTransactionDataRequest.date_to:type_name -> google.protobuf.Timestamp
	0,  // 2: mica.serviceprovider.transaction.v1.SearchTransactionDataRequest.interval_type:type_name -> mica.serviceprovider.transaction.v1.IntervalType
	1,  // 3: mica.serviceprovider.transaction.v1.SearchTransactionDataRequest.transaction_type:type_name -> mica.serviceprovider.transaction.v1.TransactionType
	15, // 4: mica.serviceprovider.transaction.v1.SearchTransactionDataRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	14, // 5: mica.serviceprovider.transaction.v1.CountAmountItem.date:type_name -> google.protobuf.Timestamp
	15, // 6: mica.serviceprovider.transaction.v1.CountAmountItem.currency:type_name -> micashared.common.enums.currency.v1.Currency
	2,  // 7: mica.serviceprovider.transaction.v1.SearchTransactionDataResponse.status:type_name -> mica.serviceprovider.transaction.v1.SearchTransactionDataResponse.Status
	16, // 8: mica.serviceprovider.transaction.v1.SearchTransactionDataResponse.error:type_name -> micashared.common.v1.Error
	6,  // 9: mica.serviceprovider.transaction.v1.SearchTransactionDataResponse.count_amount_items:type_name -> mica.serviceprovider.transaction.v1.CountAmountItem
	14, // 10: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataRequest.date_from:type_name -> google.protobuf.Timestamp
	14, // 11: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataRequest.date_to:type_name -> google.protobuf.Timestamp
	0,  // 12: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataRequest.interval_type:type_name -> mica.serviceprovider.transaction.v1.IntervalType
	1,  // 13: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataRequest.transaction_type:type_name -> mica.serviceprovider.transaction.v1.TransactionType
	15, // 14: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	17, // 15: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataRequest.region:type_name -> micashared.common.enums.region.v1.Region
	6,  // 16: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataItem.count_amount_items:type_name -> mica.serviceprovider.transaction.v1.CountAmountItem
	3,  // 17: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataResponse.status:type_name -> mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataResponse.Status
	16, // 18: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataResponse.error:type_name -> micashared.common.v1.Error
	9,  // 19: mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataResponse.items:type_name -> mica.serviceprovider.transaction.v1.SearchTransactionGeographyDataItem
	14, // 20: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataRequest.date_from:type_name -> google.protobuf.Timestamp
	14, // 21: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataRequest.date_to:type_name -> google.protobuf.Timestamp
	0,  // 22: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataRequest.interval_type:type_name -> mica.serviceprovider.transaction.v1.IntervalType
	1,  // 23: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataRequest.transaction_type:type_name -> mica.serviceprovider.transaction.v1.TransactionType
	15, // 24: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	6,  // 25: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataItem.count_amount_item:type_name -> mica.serviceprovider.transaction.v1.CountAmountItem
	4,  // 26: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataResponse.status:type_name -> mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataResponse.Status
	16, // 27: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataResponse.error:type_name -> micashared.common.v1.Error
	12, // 28: mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataResponse.items:type_name -> mica.serviceprovider.transaction.v1.SearchTransactionPartnerDataItem
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_mica_serviceprovider_transaction_v1_transaction_proto_init() }
func file_mica_serviceprovider_transaction_v1_transaction_proto_init() {
	if File_mica_serviceprovider_transaction_v1_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTransactionDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAmountItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTransactionDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTransactionGeographyDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTransactionGeographyDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTransactionGeographyDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTransactionPartnerDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTransactionPartnerDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTransactionPartnerDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_serviceprovider_transaction_v1_transaction_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_serviceprovider_transaction_v1_transaction_proto_goTypes,
		DependencyIndexes: file_mica_serviceprovider_transaction_v1_transaction_proto_depIdxs,
		EnumInfos:         file_mica_serviceprovider_transaction_v1_transaction_proto_enumTypes,
		MessageInfos:      file_mica_serviceprovider_transaction_v1_transaction_proto_msgTypes,
	}.Build()
	File_mica_serviceprovider_transaction_v1_transaction_proto = out.File
	file_mica_serviceprovider_transaction_v1_transaction_proto_rawDesc = nil
	file_mica_serviceprovider_transaction_v1_transaction_proto_goTypes = nil
	file_mica_serviceprovider_transaction_v1_transaction_proto_depIdxs = nil
}
