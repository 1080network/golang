// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mica/serviceprovider/discount/v1/discount.proto

package discountv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	currencyv1 "micashared/common/enums/currencyv1"

	discounttypev1 "micashared/common/enums/discounttypev1"

	discountv1 "mica/discount/discountv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = currencyv1.Currency(0)

	_ = discounttypev1.DiscountType(0)

	_ = discountv1.DiscountStatus(0)
)

// Validate checks the field values on ServiceProviderUserDiscount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceProviderUserDiscount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceProviderUserDiscount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceProviderUserDiscountMultiError, or nil if none found.
func (m *ServiceProviderUserDiscount) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceProviderUserDiscount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDiscountKey()); l < 30 || l > 50 {
		err := ServiceProviderUserDiscountValidationError{
			field:  "DiscountKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHeadline()) > 100 {
		err := ServiceProviderUserDiscountValidationError{
			field:  "Headline",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSummary()) > 300 {
		err := ServiceProviderUserDiscountValidationError{
			field:  "Summary",
			reason: "value length must be at most 300 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiptDescription()) > 200 {
		err := ServiceProviderUserDiscountValidationError{
			field:  "ReceiptDescription",
			reason: "value length must be at most 200 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Type

	if t := m.GetValidTo(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ServiceProviderUserDiscountValidationError{
				field:  "ValidTo",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := ServiceProviderUserDiscountValidationError{
					field:  "ValidTo",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	// no validation rules for Currency

	// no validation rules for ThumbnailUrl

	switch v := m.DiscountAmount.(type) {
	case *ServiceProviderUserDiscount_MonetaryAmount:
		if v == nil {
			err := ServiceProviderUserDiscountValidationError{
				field:  "DiscountAmount",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMonetaryAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceProviderUserDiscountValidationError{
						field:  "MonetaryAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceProviderUserDiscountValidationError{
						field:  "MonetaryAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMonetaryAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceProviderUserDiscountValidationError{
					field:  "MonetaryAmount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServiceProviderUserDiscount_PercentageAmount:
		if v == nil {
			err := ServiceProviderUserDiscountValidationError{
				field:  "DiscountAmount",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPercentageAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceProviderUserDiscountValidationError{
						field:  "PercentageAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceProviderUserDiscountValidationError{
						field:  "PercentageAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPercentageAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceProviderUserDiscountValidationError{
					field:  "PercentageAmount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServiceProviderUserDiscountMultiError(errors)
	}

	return nil
}

// ServiceProviderUserDiscountMultiError is an error wrapping multiple
// validation errors returned by ServiceProviderUserDiscount.ValidateAll() if
// the designated constraints aren't met.
type ServiceProviderUserDiscountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceProviderUserDiscountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceProviderUserDiscountMultiError) AllErrors() []error { return m }

// ServiceProviderUserDiscountValidationError is the validation error returned
// by ServiceProviderUserDiscount.Validate if the designated constraints
// aren't met.
type ServiceProviderUserDiscountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceProviderUserDiscountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceProviderUserDiscountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceProviderUserDiscountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceProviderUserDiscountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceProviderUserDiscountValidationError) ErrorName() string {
	return "ServiceProviderUserDiscountValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceProviderUserDiscountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceProviderUserDiscount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceProviderUserDiscountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceProviderUserDiscountValidationError{}

// Validate checks the field values on SearchUserDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserDiscountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserDiscountRequestMultiError, or nil if none found.
func (m *SearchUserDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserDiscountRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserDiscountRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserDiscountRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Criteria.(type) {
	case *SearchUserDiscountRequest_ServiceProviderUserKey:
		if v == nil {
			err := SearchUserDiscountRequestValidationError{
				field:  "Criteria",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetServiceProviderUserKey()); l < 30 || l > 50 {
			err := SearchUserDiscountRequestValidationError{
				field:  "ServiceProviderUserKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *SearchUserDiscountRequest_ServiceProviderUserRef:
		if v == nil {
			err := SearchUserDiscountRequestValidationError{
				field:  "Criteria",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ServiceProviderUserRef
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SearchUserDiscountRequestMultiError(errors)
	}

	return nil
}

// SearchUserDiscountRequestMultiError is an error wrapping multiple validation
// errors returned by SearchUserDiscountRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchUserDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserDiscountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserDiscountRequestMultiError) AllErrors() []error { return m }

// SearchUserDiscountRequestValidationError is the validation error returned by
// SearchUserDiscountRequest.Validate if the designated constraints aren't met.
type SearchUserDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserDiscountRequestValidationError) ErrorName() string {
	return "SearchUserDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserDiscountRequestValidationError{}

// Validate checks the field values on SearchUserDiscountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserDiscountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserDiscountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserDiscountResponseMultiError, or nil if none found.
func (m *SearchUserDiscountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserDiscountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserDiscountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUserDiscounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserDiscountResponseValidationError{
						field:  fmt.Sprintf("UserDiscounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserDiscountResponseValidationError{
						field:  fmt.Sprintf("UserDiscounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserDiscountResponseValidationError{
					field:  fmt.Sprintf("UserDiscounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserDiscountResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserDiscountResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserDiscountResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchUserDiscountResponseMultiError(errors)
	}

	return nil
}

// SearchUserDiscountResponseMultiError is an error wrapping multiple
// validation errors returned by SearchUserDiscountResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchUserDiscountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserDiscountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserDiscountResponseMultiError) AllErrors() []error { return m }

// SearchUserDiscountResponseValidationError is the validation error returned
// by SearchUserDiscountResponse.Validate if the designated constraints aren't met.
type SearchUserDiscountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserDiscountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserDiscountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserDiscountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserDiscountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserDiscountResponseValidationError) ErrorName() string {
	return "SearchUserDiscountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserDiscountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserDiscountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserDiscountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserDiscountResponseValidationError{}
