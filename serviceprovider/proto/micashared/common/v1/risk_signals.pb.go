// Copyright (c) 2023 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v6.30.2
// source: micashared/common/v1/risk_signals.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperatingSystem int32

const (
	OperatingSystem_OPERATING_SYSTEM_UNSPECIFIED OperatingSystem = 0
	OperatingSystem_OPERATING_SYSTEM_OTHER       OperatingSystem = 1
	OperatingSystem_OPERATING_SYSTEM_ANDROID     OperatingSystem = 2
	OperatingSystem_OPERATING_SYSTEM_IOS         OperatingSystem = 3
	OperatingSystem_OPERATING_SYSTEM_WINDOWS     OperatingSystem = 4
	OperatingSystem_OPERATING_SYSTEM_LINUX       OperatingSystem = 5
	OperatingSystem_OPERATING_SYSTEM_MACOS       OperatingSystem = 6
	OperatingSystem_OPERATING_SYSTEM_CHROMEOS    OperatingSystem = 7
)

// Enum value maps for OperatingSystem.
var (
	OperatingSystem_name = map[int32]string{
		0: "OPERATING_SYSTEM_UNSPECIFIED",
		1: "OPERATING_SYSTEM_OTHER",
		2: "OPERATING_SYSTEM_ANDROID",
		3: "OPERATING_SYSTEM_IOS",
		4: "OPERATING_SYSTEM_WINDOWS",
		5: "OPERATING_SYSTEM_LINUX",
		6: "OPERATING_SYSTEM_MACOS",
		7: "OPERATING_SYSTEM_CHROMEOS",
	}
	OperatingSystem_value = map[string]int32{
		"OPERATING_SYSTEM_UNSPECIFIED": 0,
		"OPERATING_SYSTEM_OTHER":       1,
		"OPERATING_SYSTEM_ANDROID":     2,
		"OPERATING_SYSTEM_IOS":         3,
		"OPERATING_SYSTEM_WINDOWS":     4,
		"OPERATING_SYSTEM_LINUX":       5,
		"OPERATING_SYSTEM_MACOS":       6,
		"OPERATING_SYSTEM_CHROMEOS":    7,
	}
)

func (x OperatingSystem) Enum() *OperatingSystem {
	p := new(OperatingSystem)
	*p = x
	return p
}

func (x OperatingSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_risk_signals_proto_enumTypes[0].Descriptor()
}

func (OperatingSystem) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_risk_signals_proto_enumTypes[0]
}

func (x OperatingSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingSystem.Descriptor instead.
func (OperatingSystem) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_risk_signals_proto_rawDescGZIP(), []int{0}
}

type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNSPECIFIED DeviceType = 0
	DeviceType_DEVICE_TYPE_OTHER       DeviceType = 1
	DeviceType_DEVICE_TYPE_TABLET      DeviceType = 2
	DeviceType_DEVICE_TYPE_TERMINAL    DeviceType = 3
	DeviceType_DEVICE_TYPE_SMARTPHONE  DeviceType = 4
	DeviceType_DEVICE_TYPE_COMPUTER    DeviceType = 5
	DeviceType_DEVICE_TYPE_WEARABLE    DeviceType = 6
	DeviceType_DEVICE_TYPE_BROWSER     DeviceType = 7
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_UNSPECIFIED",
		1: "DEVICE_TYPE_OTHER",
		2: "DEVICE_TYPE_TABLET",
		3: "DEVICE_TYPE_TERMINAL",
		4: "DEVICE_TYPE_SMARTPHONE",
		5: "DEVICE_TYPE_COMPUTER",
		6: "DEVICE_TYPE_WEARABLE",
		7: "DEVICE_TYPE_BROWSER",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNSPECIFIED": 0,
		"DEVICE_TYPE_OTHER":       1,
		"DEVICE_TYPE_TABLET":      2,
		"DEVICE_TYPE_TERMINAL":    3,
		"DEVICE_TYPE_SMARTPHONE":  4,
		"DEVICE_TYPE_COMPUTER":    5,
		"DEVICE_TYPE_WEARABLE":    6,
		"DEVICE_TYPE_BROWSER":     7,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_risk_signals_proto_enumTypes[1].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_risk_signals_proto_enumTypes[1]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_risk_signals_proto_rawDescGZIP(), []int{1}
}

type AuthenticationType int32

const (
	AuthenticationType_AUTHENTICATION_TYPE_UNSPECIFIED      AuthenticationType = 0
	AuthenticationType_AUTHENTICATION_TYPE_OTHER            AuthenticationType = 1
	AuthenticationType_AUTHENTICATION_TYPE_NONE             AuthenticationType = 2
	AuthenticationType_AUTHENTICATION_TYPE_PIN              AuthenticationType = 3
	AuthenticationType_AUTHENTICATION_TYPE_CREDENTIAL       AuthenticationType = 4
	AuthenticationType_AUTHENTICATION_TYPE_BIOMETRIC_WEAK   AuthenticationType = 5
	AuthenticationType_AUTHENTICATION_TYPE_BIOMETRIC_STRONG AuthenticationType = 6
	AuthenticationType_AUTHENTICATION_TYPE_CERTIFICATE      AuthenticationType = 7
	AuthenticationType_AUTHENTICATION_TYPE_MFA_WEAK         AuthenticationType = 8
	AuthenticationType_AUTHENTICATION_TYPE_MFA_STRONG       AuthenticationType = 9
)

// Enum value maps for AuthenticationType.
var (
	AuthenticationType_name = map[int32]string{
		0: "AUTHENTICATION_TYPE_UNSPECIFIED",
		1: "AUTHENTICATION_TYPE_OTHER",
		2: "AUTHENTICATION_TYPE_NONE",
		3: "AUTHENTICATION_TYPE_PIN",
		4: "AUTHENTICATION_TYPE_CREDENTIAL",
		5: "AUTHENTICATION_TYPE_BIOMETRIC_WEAK",
		6: "AUTHENTICATION_TYPE_BIOMETRIC_STRONG",
		7: "AUTHENTICATION_TYPE_CERTIFICATE",
		8: "AUTHENTICATION_TYPE_MFA_WEAK",
		9: "AUTHENTICATION_TYPE_MFA_STRONG",
	}
	AuthenticationType_value = map[string]int32{
		"AUTHENTICATION_TYPE_UNSPECIFIED":      0,
		"AUTHENTICATION_TYPE_OTHER":            1,
		"AUTHENTICATION_TYPE_NONE":             2,
		"AUTHENTICATION_TYPE_PIN":              3,
		"AUTHENTICATION_TYPE_CREDENTIAL":       4,
		"AUTHENTICATION_TYPE_BIOMETRIC_WEAK":   5,
		"AUTHENTICATION_TYPE_BIOMETRIC_STRONG": 6,
		"AUTHENTICATION_TYPE_CERTIFICATE":      7,
		"AUTHENTICATION_TYPE_MFA_WEAK":         8,
		"AUTHENTICATION_TYPE_MFA_STRONG":       9,
	}
)

func (x AuthenticationType) Enum() *AuthenticationType {
	p := new(AuthenticationType)
	*p = x
	return p
}

func (x AuthenticationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationType) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_risk_signals_proto_enumTypes[2].Descriptor()
}

func (AuthenticationType) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_risk_signals_proto_enumTypes[2]
}

func (x AuthenticationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationType.Descriptor instead.
func (AuthenticationType) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_risk_signals_proto_rawDescGZIP(), []int{2}
}

type UserType int32

const (
	UserType_USER_TYPE_UNSPECIFIED     UserType = 0
	UserType_USER_TYPE_OTHER           UserType = 1
	UserType_USER_TYPE_PERSON          UserType = 2
	UserType_USER_TYPE_SERVICE_ACCOUNT UserType = 3
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "USER_TYPE_UNSPECIFIED",
		1: "USER_TYPE_OTHER",
		2: "USER_TYPE_PERSON",
		3: "USER_TYPE_SERVICE_ACCOUNT",
	}
	UserType_value = map[string]int32{
		"USER_TYPE_UNSPECIFIED":     0,
		"USER_TYPE_OTHER":           1,
		"USER_TYPE_PERSON":          2,
		"USER_TYPE_SERVICE_ACCOUNT": 3,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_risk_signals_proto_enumTypes[3].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_risk_signals_proto_enumTypes[3]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_risk_signals_proto_rawDescGZIP(), []int{3}
}

type DeviceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType DeviceType `protobuf:"varint,1,opt,name=device_type,json=deviceType,proto3,enum=micashared.common.v1.DeviceType" json:"device_type,omitempty"`
	// The device_os identifies the operating system of the device where the transaction originates
	DeviceOs OperatingSystem `protobuf:"varint,2,opt,name=device_os,json=deviceOs,proto3,enum=micashared.common.v1.OperatingSystem" json:"device_os,omitempty"`
	// The device_name identifes either a model or the name of the transaction originating devide, for example PAX A920Pro terminal, etc
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// The device_idenfifier represents a unique identifier for the device, this can be terminal id or the serial number or any other available identifier, etc
	DeviceIdentifier string `protobuf:"bytes,4,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	// The device_user_agent identifies the user agent used to make a request from a device to the backend, this could be a browser user agent or the client used to submit the request etc
	DeviceUserAgent string `protobuf:"bytes,5,opt,name=device_user_agent,json=deviceUserAgent,proto3" json:"device_user_agent,omitempty"`
	// The ip_address represents the ip address of the remote device sending the transaction
	IpAddress string `protobuf:"bytes,6,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *DeviceIdentifier) Reset() {
	*x = DeviceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_risk_signals_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIdentifier) ProtoMessage() {}

func (x *DeviceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_risk_signals_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIdentifier.ProtoReflect.Descriptor instead.
func (*DeviceIdentifier) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_risk_signals_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceIdentifier) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_UNSPECIFIED
}

func (x *DeviceIdentifier) GetDeviceOs() OperatingSystem {
	if x != nil {
		return x.DeviceOs
	}
	return OperatingSystem_OPERATING_SYSTEM_UNSPECIFIED
}

func (x *DeviceIdentifier) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceIdentifier) GetDeviceIdentifier() string {
	if x != nil {
		return x.DeviceIdentifier
	}
	return ""
}

func (x *DeviceIdentifier) GetDeviceUserAgent() string {
	if x != nil {
		return x.DeviceUserAgent
	}
	return ""
}

func (x *DeviceIdentifier) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type DeviceUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserType UserType `protobuf:"varint,1,opt,name=user_type,json=userType,proto3,enum=micashared.common.v1.UserType" json:"user_type,omitempty"`
	// The user_identifier consistently identifies a user. This can be a clerk id, etc. Avoid usernames or any operable credential
	UserIdentifier string `protobuf:"bytes,2,opt,name=user_identifier,json=userIdentifier,proto3" json:"user_identifier,omitempty"`
	// The user_authentication captures how the user was authenticated into the device, all factors can be represented
	UserAuthentication []AuthenticationType `protobuf:"varint,3,rep,packed,name=user_authentication,json=userAuthentication,proto3,enum=micashared.common.v1.AuthenticationType" json:"user_authentication,omitempty"`
}

func (x *DeviceUser) Reset() {
	*x = DeviceUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_risk_signals_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUser) ProtoMessage() {}

func (x *DeviceUser) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_risk_signals_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUser.ProtoReflect.Descriptor instead.
func (*DeviceUser) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_risk_signals_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceUser) GetUserType() UserType {
	if x != nil {
		return x.UserType
	}
	return UserType_USER_TYPE_UNSPECIFIED
}

func (x *DeviceUser) GetUserIdentifier() string {
	if x != nil {
		return x.UserIdentifier
	}
	return ""
}

func (x *DeviceUser) GetUserAuthentication() []AuthenticationType {
	if x != nil {
		return x.UserAuthentication
	}
	return nil
}

// Origin is a tuple of a actor/user on a device in the path of the transaction
type Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceData *DeviceIdentifier `protobuf:"bytes,1,opt,name=device_data,json=deviceData,proto3" json:"device_data,omitempty"`
	UserData   *DeviceUser       `protobuf:"bytes,2,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (x *Origin) Reset() {
	*x = Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_risk_signals_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_risk_signals_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_risk_signals_proto_rawDescGZIP(), []int{2}
}

func (x *Origin) GetDeviceData() *DeviceIdentifier {
	if x != nil {
		return x.DeviceData
	}
	return nil
}

func (x *Origin) GetUserData() *DeviceUser {
	if x != nil {
		return x.UserData
	}
	return nil
}

type RiskSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origins []*Origin `protobuf:"bytes,1,rep,name=origins,proto3" json:"origins,omitempty"`
}

func (x *RiskSignal) Reset() {
	*x = RiskSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_risk_signals_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskSignal) ProtoMessage() {}

func (x *RiskSignal) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_risk_signals_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskSignal.ProtoReflect.Descriptor instead.
func (*RiskSignal) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_risk_signals_proto_rawDescGZIP(), []int{3}
}

func (x *RiskSignal) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

var File_micashared_common_v1_risk_signals_proto protoreflect.FileDescriptor

var file_micashared_common_v1_risk_signals_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22,
	0xb2, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x47, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x2a, 0xfc, 0x01,
	0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x53, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x43, 0x4f, 0x53, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x4f, 0x53, 0x10, 0x07, 0x2a, 0xdb, 0x01, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xf4, 0x02, 0x0a, 0x12, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x10, 0x03,
	0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x54,
	0x52, 0x4f, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x10, 0x08, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x10,
	0x09, 0x2a, 0x6f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x03, 0x42, 0x51, 0x0a, 0x17, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x52,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a,
	0x1d, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02,
	0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_micashared_common_v1_risk_signals_proto_rawDescOnce sync.Once
	file_micashared_common_v1_risk_signals_proto_rawDescData = file_micashared_common_v1_risk_signals_proto_rawDesc
)

func file_micashared_common_v1_risk_signals_proto_rawDescGZIP() []byte {
	file_micashared_common_v1_risk_signals_proto_rawDescOnce.Do(func() {
		file_micashared_common_v1_risk_signals_proto_rawDescData = protoimpl.X.CompressGZIP(file_micashared_common_v1_risk_signals_proto_rawDescData)
	})
	return file_micashared_common_v1_risk_signals_proto_rawDescData
}

var file_micashared_common_v1_risk_signals_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_micashared_common_v1_risk_signals_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_micashared_common_v1_risk_signals_proto_goTypes = []interface{}{
	(OperatingSystem)(0),     // 0: micashared.common.v1.OperatingSystem
	(DeviceType)(0),          // 1: micashared.common.v1.DeviceType
	(AuthenticationType)(0),  // 2: micashared.common.v1.AuthenticationType
	(UserType)(0),            // 3: micashared.common.v1.UserType
	(*DeviceIdentifier)(nil), // 4: micashared.common.v1.DeviceIdentifier
	(*DeviceUser)(nil),       // 5: micashared.common.v1.DeviceUser
	(*Origin)(nil),           // 6: micashared.common.v1.Origin
	(*RiskSignal)(nil),       // 7: micashared.common.v1.RiskSignal
}
var file_micashared_common_v1_risk_signals_proto_depIdxs = []int32{
	1, // 0: micashared.common.v1.DeviceIdentifier.device_type:type_name -> micashared.common.v1.DeviceType
	0, // 1: micashared.common.v1.DeviceIdentifier.device_os:type_name -> micashared.common.v1.OperatingSystem
	3, // 2: micashared.common.v1.DeviceUser.user_type:type_name -> micashared.common.v1.UserType
	2, // 3: micashared.common.v1.DeviceUser.user_authentication:type_name -> micashared.common.v1.AuthenticationType
	4, // 4: micashared.common.v1.Origin.device_data:type_name -> micashared.common.v1.DeviceIdentifier
	5, // 5: micashared.common.v1.Origin.user_data:type_name -> micashared.common.v1.DeviceUser
	6, // 6: micashared.common.v1.RiskSignal.origins:type_name -> micashared.common.v1.Origin
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_micashared_common_v1_risk_signals_proto_init() }
func file_micashared_common_v1_risk_signals_proto_init() {
	if File_micashared_common_v1_risk_signals_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_micashared_common_v1_risk_signals_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_risk_signals_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_risk_signals_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_risk_signals_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_micashared_common_v1_risk_signals_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_micashared_common_v1_risk_signals_proto_goTypes,
		DependencyIndexes: file_micashared_common_v1_risk_signals_proto_depIdxs,
		EnumInfos:         file_micashared_common_v1_risk_signals_proto_enumTypes,
		MessageInfos:      file_micashared_common_v1_risk_signals_proto_msgTypes,
	}.Build()
	File_micashared_common_v1_risk_signals_proto = out.File
	file_micashared_common_v1_risk_signals_proto_rawDesc = nil
	file_micashared_common_v1_risk_signals_proto_goTypes = nil
	file_micashared_common_v1_risk_signals_proto_depIdxs = nil
}
