// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: micashared/common/v1/console_user.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SingleSignOnConsoleUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleSignOnConsoleUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleSignOnConsoleUser with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleSignOnConsoleUserMultiError, or nil if none found.
func (m *SingleSignOnConsoleUser) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleSignOnConsoleUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrincipalReference

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleSignOnConsoleUserValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleSignOnConsoleUserValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleSignOnConsoleUserValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleSignOnConsoleUserValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleSignOnConsoleUserValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleSignOnConsoleUserValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enabled

	if len(errors) > 0 {
		return SingleSignOnConsoleUserMultiError(errors)
	}

	return nil
}

// SingleSignOnConsoleUserMultiError is an error wrapping multiple validation
// errors returned by SingleSignOnConsoleUser.ValidateAll() if the designated
// constraints aren't met.
type SingleSignOnConsoleUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleSignOnConsoleUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleSignOnConsoleUserMultiError) AllErrors() []error { return m }

// SingleSignOnConsoleUserValidationError is the validation error returned by
// SingleSignOnConsoleUser.Validate if the designated constraints aren't met.
type SingleSignOnConsoleUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleSignOnConsoleUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleSignOnConsoleUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleSignOnConsoleUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleSignOnConsoleUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleSignOnConsoleUserValidationError) ErrorName() string {
	return "SingleSignOnConsoleUserValidationError"
}

// Error satisfies the builtin error interface
func (e SingleSignOnConsoleUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleSignOnConsoleUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleSignOnConsoleUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleSignOnConsoleUserValidationError{}

// Validate checks the field values on EmailActivationChannel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailActivationChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailActivationChannel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailActivationChannelMultiError, or nil if none found.
func (m *EmailActivationChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailActivationChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmailAddress

	if len(errors) > 0 {
		return EmailActivationChannelMultiError(errors)
	}

	return nil
}

// EmailActivationChannelMultiError is an error wrapping multiple validation
// errors returned by EmailActivationChannel.ValidateAll() if the designated
// constraints aren't met.
type EmailActivationChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailActivationChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailActivationChannelMultiError) AllErrors() []error { return m }

// EmailActivationChannelValidationError is the validation error returned by
// EmailActivationChannel.Validate if the designated constraints aren't met.
type EmailActivationChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailActivationChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailActivationChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailActivationChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailActivationChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailActivationChannelValidationError) ErrorName() string {
	return "EmailActivationChannelValidationError"
}

// Error satisfies the builtin error interface
func (e EmailActivationChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailActivationChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailActivationChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailActivationChannelValidationError{}

// Validate checks the field values on CreateSingleSignOnConsoleUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateSingleSignOnConsoleUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSingleSignOnConsoleUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateSingleSignOnConsoleUserRequestMultiError, or nil if none found.
func (m *CreateSingleSignOnConsoleUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSingleSignOnConsoleUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrincipalReference

	switch v := m.ActivationChannel.(type) {
	case *CreateSingleSignOnConsoleUserRequest_EmailActivationChannel:
		if v == nil {
			err := CreateSingleSignOnConsoleUserRequestValidationError{
				field:  "ActivationChannel",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEmailActivationChannel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSingleSignOnConsoleUserRequestValidationError{
						field:  "EmailActivationChannel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSingleSignOnConsoleUserRequestValidationError{
						field:  "EmailActivationChannel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEmailActivationChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSingleSignOnConsoleUserRequestValidationError{
					field:  "EmailActivationChannel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateSingleSignOnConsoleUserRequestMultiError(errors)
	}

	return nil
}

// CreateSingleSignOnConsoleUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateSingleSignOnConsoleUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSingleSignOnConsoleUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSingleSignOnConsoleUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSingleSignOnConsoleUserRequestMultiError) AllErrors() []error { return m }

// CreateSingleSignOnConsoleUserRequestValidationError is the validation error
// returned by CreateSingleSignOnConsoleUserRequest.Validate if the designated
// constraints aren't met.
type CreateSingleSignOnConsoleUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSingleSignOnConsoleUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSingleSignOnConsoleUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSingleSignOnConsoleUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSingleSignOnConsoleUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSingleSignOnConsoleUserRequestValidationError) ErrorName() string {
	return "CreateSingleSignOnConsoleUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSingleSignOnConsoleUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSingleSignOnConsoleUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSingleSignOnConsoleUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSingleSignOnConsoleUserRequestValidationError{}

// Validate checks the field values on CreateSingleSignOnConsoleUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateSingleSignOnConsoleUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSingleSignOnConsoleUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateSingleSignOnConsoleUserResponseMultiError, or nil if none found.
func (m *CreateSingleSignOnConsoleUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSingleSignOnConsoleUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSingleSignOnConsoleUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSingleSignOnConsoleUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSingleSignOnConsoleUserResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSingleSignOnUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSingleSignOnConsoleUserResponseValidationError{
					field:  "SingleSignOnUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSingleSignOnConsoleUserResponseValidationError{
					field:  "SingleSignOnUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSignOnUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSingleSignOnConsoleUserResponseValidationError{
				field:  "SingleSignOnUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OneTimeAccessCode

	if len(errors) > 0 {
		return CreateSingleSignOnConsoleUserResponseMultiError(errors)
	}

	return nil
}

// CreateSingleSignOnConsoleUserResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateSingleSignOnConsoleUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSingleSignOnConsoleUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSingleSignOnConsoleUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSingleSignOnConsoleUserResponseMultiError) AllErrors() []error { return m }

// CreateSingleSignOnConsoleUserResponseValidationError is the validation error
// returned by CreateSingleSignOnConsoleUserResponse.Validate if the
// designated constraints aren't met.
type CreateSingleSignOnConsoleUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSingleSignOnConsoleUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSingleSignOnConsoleUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSingleSignOnConsoleUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSingleSignOnConsoleUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSingleSignOnConsoleUserResponseValidationError) ErrorName() string {
	return "CreateSingleSignOnConsoleUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSingleSignOnConsoleUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSingleSignOnConsoleUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSingleSignOnConsoleUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSingleSignOnConsoleUserResponseValidationError{}

// Validate checks the field values on GetSingleSignOnConsoleUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSingleSignOnConsoleUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingleSignOnConsoleUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSingleSignOnConsoleUserRequestMultiError, or nil if none found.
func (m *GetSingleSignOnConsoleUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingleSignOnConsoleUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrincipalReference

	if len(errors) > 0 {
		return GetSingleSignOnConsoleUserRequestMultiError(errors)
	}

	return nil
}

// GetSingleSignOnConsoleUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSingleSignOnConsoleUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSingleSignOnConsoleUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingleSignOnConsoleUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingleSignOnConsoleUserRequestMultiError) AllErrors() []error { return m }

// GetSingleSignOnConsoleUserRequestValidationError is the validation error
// returned by GetSingleSignOnConsoleUserRequest.Validate if the designated
// constraints aren't met.
type GetSingleSignOnConsoleUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingleSignOnConsoleUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingleSignOnConsoleUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingleSignOnConsoleUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingleSignOnConsoleUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingleSignOnConsoleUserRequestValidationError) ErrorName() string {
	return "GetSingleSignOnConsoleUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingleSignOnConsoleUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingleSignOnConsoleUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingleSignOnConsoleUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingleSignOnConsoleUserRequestValidationError{}

// Validate checks the field values on GetSingleSignOnConsoleUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSingleSignOnConsoleUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingleSignOnConsoleUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSingleSignOnConsoleUserResponseMultiError, or nil if none found.
func (m *GetSingleSignOnConsoleUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingleSignOnConsoleUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSingleSignOnConsoleUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSingleSignOnConsoleUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSingleSignOnConsoleUserResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSingleSignOnUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSingleSignOnConsoleUserResponseValidationError{
					field:  "SingleSignOnUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSingleSignOnConsoleUserResponseValidationError{
					field:  "SingleSignOnUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSignOnUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSingleSignOnConsoleUserResponseValidationError{
				field:  "SingleSignOnUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSingleSignOnConsoleUserResponseMultiError(errors)
	}

	return nil
}

// GetSingleSignOnConsoleUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetSingleSignOnConsoleUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSingleSignOnConsoleUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingleSignOnConsoleUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingleSignOnConsoleUserResponseMultiError) AllErrors() []error { return m }

// GetSingleSignOnConsoleUserResponseValidationError is the validation error
// returned by GetSingleSignOnConsoleUserResponse.Validate if the designated
// constraints aren't met.
type GetSingleSignOnConsoleUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingleSignOnConsoleUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingleSignOnConsoleUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingleSignOnConsoleUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingleSignOnConsoleUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingleSignOnConsoleUserResponseValidationError) ErrorName() string {
	return "GetSingleSignOnConsoleUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingleSignOnConsoleUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingleSignOnConsoleUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingleSignOnConsoleUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingleSignOnConsoleUserResponseValidationError{}

// Validate checks the field values on UpdateSingleSignOnConsoleUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateSingleSignOnConsoleUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSingleSignOnConsoleUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateSingleSignOnConsoleUserRequestMultiError, or nil if none found.
func (m *UpdateSingleSignOnConsoleUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSingleSignOnConsoleUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrincipalReference

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateSingleSignOnConsoleUserRequestMultiError(errors)
	}

	return nil
}

// UpdateSingleSignOnConsoleUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateSingleSignOnConsoleUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSingleSignOnConsoleUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSingleSignOnConsoleUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSingleSignOnConsoleUserRequestMultiError) AllErrors() []error { return m }

// UpdateSingleSignOnConsoleUserRequestValidationError is the validation error
// returned by UpdateSingleSignOnConsoleUserRequest.Validate if the designated
// constraints aren't met.
type UpdateSingleSignOnConsoleUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSingleSignOnConsoleUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSingleSignOnConsoleUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSingleSignOnConsoleUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSingleSignOnConsoleUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSingleSignOnConsoleUserRequestValidationError) ErrorName() string {
	return "UpdateSingleSignOnConsoleUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSingleSignOnConsoleUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSingleSignOnConsoleUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSingleSignOnConsoleUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSingleSignOnConsoleUserRequestValidationError{}

// Validate checks the field values on UpdateSingleSignOnConsoleUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateSingleSignOnConsoleUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSingleSignOnConsoleUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateSingleSignOnConsoleUserResponseMultiError, or nil if none found.
func (m *UpdateSingleSignOnConsoleUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSingleSignOnConsoleUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSingleSignOnConsoleUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSingleSignOnConsoleUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSingleSignOnConsoleUserResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSingleSignOnUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSingleSignOnConsoleUserResponseValidationError{
					field:  "SingleSignOnUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSingleSignOnConsoleUserResponseValidationError{
					field:  "SingleSignOnUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSignOnUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSingleSignOnConsoleUserResponseValidationError{
				field:  "SingleSignOnUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSingleSignOnConsoleUserResponseMultiError(errors)
	}

	return nil
}

// UpdateSingleSignOnConsoleUserResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateSingleSignOnConsoleUserResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSingleSignOnConsoleUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSingleSignOnConsoleUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSingleSignOnConsoleUserResponseMultiError) AllErrors() []error { return m }

// UpdateSingleSignOnConsoleUserResponseValidationError is the validation error
// returned by UpdateSingleSignOnConsoleUserResponse.Validate if the
// designated constraints aren't met.
type UpdateSingleSignOnConsoleUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSingleSignOnConsoleUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSingleSignOnConsoleUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSingleSignOnConsoleUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSingleSignOnConsoleUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSingleSignOnConsoleUserResponseValidationError) ErrorName() string {
	return "UpdateSingleSignOnConsoleUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSingleSignOnConsoleUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSingleSignOnConsoleUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSingleSignOnConsoleUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSingleSignOnConsoleUserResponseValidationError{}

// Validate checks the field values on SearchSingleSignOnConsoleUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchSingleSignOnConsoleUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSingleSignOnConsoleUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchSingleSignOnConsoleUserRequestMultiError, or nil if none found.
func (m *SearchSingleSignOnConsoleUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSingleSignOnConsoleUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SearchSingleSignOnConsoleUserRequestMultiError(errors)
	}

	return nil
}

// SearchSingleSignOnConsoleUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// SearchSingleSignOnConsoleUserRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchSingleSignOnConsoleUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSingleSignOnConsoleUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSingleSignOnConsoleUserRequestMultiError) AllErrors() []error { return m }

// SearchSingleSignOnConsoleUserRequestValidationError is the validation error
// returned by SearchSingleSignOnConsoleUserRequest.Validate if the designated
// constraints aren't met.
type SearchSingleSignOnConsoleUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSingleSignOnConsoleUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSingleSignOnConsoleUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSingleSignOnConsoleUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSingleSignOnConsoleUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSingleSignOnConsoleUserRequestValidationError) ErrorName() string {
	return "SearchSingleSignOnConsoleUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSingleSignOnConsoleUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSingleSignOnConsoleUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSingleSignOnConsoleUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSingleSignOnConsoleUserRequestValidationError{}

// Validate checks the field values on SearchSingleSignOnConsoleUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchSingleSignOnConsoleUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSingleSignOnConsoleUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchSingleSignOnConsoleUserResponseMultiError, or nil if none found.
func (m *SearchSingleSignOnConsoleUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSingleSignOnConsoleUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSingleSignOnConsoleUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSingleSignOnConsoleUserResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSingleSignOnConsoleUserResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSingleSignOnUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchSingleSignOnConsoleUserResponseValidationError{
						field:  fmt.Sprintf("SingleSignOnUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchSingleSignOnConsoleUserResponseValidationError{
						field:  fmt.Sprintf("SingleSignOnUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchSingleSignOnConsoleUserResponseValidationError{
					field:  fmt.Sprintf("SingleSignOnUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchSingleSignOnConsoleUserResponseMultiError(errors)
	}

	return nil
}

// SearchSingleSignOnConsoleUserResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchSingleSignOnConsoleUserResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchSingleSignOnConsoleUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSingleSignOnConsoleUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSingleSignOnConsoleUserResponseMultiError) AllErrors() []error { return m }

// SearchSingleSignOnConsoleUserResponseValidationError is the validation error
// returned by SearchSingleSignOnConsoleUserResponse.Validate if the
// designated constraints aren't met.
type SearchSingleSignOnConsoleUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSingleSignOnConsoleUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSingleSignOnConsoleUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSingleSignOnConsoleUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSingleSignOnConsoleUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSingleSignOnConsoleUserResponseValidationError) ErrorName() string {
	return "SearchSingleSignOnConsoleUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSingleSignOnConsoleUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSingleSignOnConsoleUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSingleSignOnConsoleUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSingleSignOnConsoleUserResponseValidationError{}
