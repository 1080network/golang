// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/external_client.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExternalClientSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExternalClientSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalClientSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalClientSettingsMultiError, or nil if none found.
func (m *ExternalClientSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalClientSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVersion() < 0 {
		err := ExternalClientSettingsValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExternalClientSettingsValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExternalClientSettingsValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExternalClientSettingsValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExternalClientSettingsValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExternalClientSettingsValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExternalClientSettingsValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetCallbackAddress()); l < 3 || l > 200 {
		err := ExternalClientSettingsValidationError{
			field:  "CallbackAddress",
			reason: "value length must be between 3 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClientAuthenticationSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExternalClientSettingsValidationError{
					field:  "ClientAuthenticationSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExternalClientSettingsValidationError{
					field:  "ClientAuthenticationSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientAuthenticationSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExternalClientSettingsValidationError{
				field:  "ClientAuthenticationSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExternalClientSettingsMultiError(errors)
	}

	return nil
}

// ExternalClientSettingsMultiError is an error wrapping multiple validation
// errors returned by ExternalClientSettings.ValidateAll() if the designated
// constraints aren't met.
type ExternalClientSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalClientSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalClientSettingsMultiError) AllErrors() []error { return m }

// ExternalClientSettingsValidationError is the validation error returned by
// ExternalClientSettings.Validate if the designated constraints aren't met.
type ExternalClientSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalClientSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalClientSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalClientSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalClientSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalClientSettingsValidationError) ErrorName() string {
	return "ExternalClientSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalClientSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalClientSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalClientSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalClientSettingsValidationError{}

// Validate checks the field values on ClientAuthenticationSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientAuthenticationSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientAuthenticationSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientAuthenticationSettingsMultiError, or nil if none found.
func (m *ClientAuthenticationSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientAuthenticationSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentAuthenticationType

	if len(errors) > 0 {
		return ClientAuthenticationSettingsMultiError(errors)
	}

	return nil
}

// ClientAuthenticationSettingsMultiError is an error wrapping multiple
// validation errors returned by ClientAuthenticationSettings.ValidateAll() if
// the designated constraints aren't met.
type ClientAuthenticationSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientAuthenticationSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientAuthenticationSettingsMultiError) AllErrors() []error { return m }

// ClientAuthenticationSettingsValidationError is the validation error returned
// by ClientAuthenticationSettings.Validate if the designated constraints
// aren't met.
type ClientAuthenticationSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientAuthenticationSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientAuthenticationSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientAuthenticationSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientAuthenticationSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientAuthenticationSettingsValidationError) ErrorName() string {
	return "ClientAuthenticationSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e ClientAuthenticationSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientAuthenticationSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientAuthenticationSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientAuthenticationSettingsValidationError{}

// Validate checks the field values on GetExternalClientSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetExternalClientSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExternalClientSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetExternalClientSettingsRequestMultiError, or nil if none found.
func (m *GetExternalClientSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExternalClientSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetExternalClientSettingsRequestMultiError(errors)
	}

	return nil
}

// GetExternalClientSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetExternalClientSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExternalClientSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExternalClientSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExternalClientSettingsRequestMultiError) AllErrors() []error { return m }

// GetExternalClientSettingsRequestValidationError is the validation error
// returned by GetExternalClientSettingsRequest.Validate if the designated
// constraints aren't met.
type GetExternalClientSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExternalClientSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExternalClientSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExternalClientSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExternalClientSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExternalClientSettingsRequestValidationError) ErrorName() string {
	return "GetExternalClientSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExternalClientSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExternalClientSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExternalClientSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExternalClientSettingsRequestValidationError{}

// Validate checks the field values on GetExternalClientSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetExternalClientSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExternalClientSettingsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetExternalClientSettingsResponseMultiError, or nil if none found.
func (m *GetExternalClientSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExternalClientSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExternalClientSettingsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExternalClientSettingsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExternalClientSettingsResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExternalClientSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExternalClientSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExternalClientSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetExternalClientSettingsResponseMultiError(errors)
	}

	return nil
}

// GetExternalClientSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetExternalClientSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExternalClientSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExternalClientSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExternalClientSettingsResponseMultiError) AllErrors() []error { return m }

// GetExternalClientSettingsResponseValidationError is the validation error
// returned by GetExternalClientSettingsResponse.Validate if the designated
// constraints aren't met.
type GetExternalClientSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExternalClientSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExternalClientSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExternalClientSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExternalClientSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExternalClientSettingsResponseValidationError) ErrorName() string {
	return "GetExternalClientSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExternalClientSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExternalClientSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExternalClientSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExternalClientSettingsResponseValidationError{}

// Validate checks the field values on
// UpdateExternalClientCallBackAddressRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateExternalClientCallBackAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateExternalClientCallBackAddressRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateExternalClientCallBackAddressRequestMultiError, or nil if none found.
func (m *UpdateExternalClientCallBackAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExternalClientCallBackAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVersion() < 0 {
		err := UpdateExternalClientCallBackAddressRequestValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCallbackAddress()); l < 3 || l > 200 {
		err := UpdateExternalClientCallBackAddressRequestValidationError{
			field:  "CallbackAddress",
			reason: "value length must be between 3 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateExternalClientCallBackAddressRequestMultiError(errors)
	}

	return nil
}

// UpdateExternalClientCallBackAddressRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateExternalClientCallBackAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateExternalClientCallBackAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExternalClientCallBackAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExternalClientCallBackAddressRequestMultiError) AllErrors() []error { return m }

// UpdateExternalClientCallBackAddressRequestValidationError is the validation
// error returned by UpdateExternalClientCallBackAddressRequest.Validate if
// the designated constraints aren't met.
type UpdateExternalClientCallBackAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExternalClientCallBackAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExternalClientCallBackAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExternalClientCallBackAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExternalClientCallBackAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExternalClientCallBackAddressRequestValidationError) ErrorName() string {
	return "UpdateExternalClientCallBackAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExternalClientCallBackAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExternalClientCallBackAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExternalClientCallBackAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExternalClientCallBackAddressRequestValidationError{}

// Validate checks the field values on
// UpdateExternalClientCallBackAddressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateExternalClientCallBackAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateExternalClientCallBackAddressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateExternalClientCallBackAddressResponseMultiError, or nil if none found.
func (m *UpdateExternalClientCallBackAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExternalClientCallBackAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExternalClientCallBackAddressResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExternalClientCallBackAddressResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExternalClientCallBackAddressResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVersion() < 0 {
		err := UpdateExternalClientCallBackAddressResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateExternalClientCallBackAddressResponseMultiError(errors)
	}

	return nil
}

// UpdateExternalClientCallBackAddressResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateExternalClientCallBackAddressResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateExternalClientCallBackAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExternalClientCallBackAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExternalClientCallBackAddressResponseMultiError) AllErrors() []error { return m }

// UpdateExternalClientCallBackAddressResponseValidationError is the validation
// error returned by UpdateExternalClientCallBackAddressResponse.Validate if
// the designated constraints aren't met.
type UpdateExternalClientCallBackAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExternalClientCallBackAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExternalClientCallBackAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExternalClientCallBackAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExternalClientCallBackAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExternalClientCallBackAddressResponseValidationError) ErrorName() string {
	return "UpdateExternalClientCallBackAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExternalClientCallBackAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExternalClientCallBackAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExternalClientCallBackAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExternalClientCallBackAddressResponseValidationError{}

// Validate checks the field values on
// UpdateExternalClientAuthenticationTypeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateExternalClientAuthenticationTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateExternalClientAuthenticationTypeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateExternalClientAuthenticationTypeRequestMultiError, or nil if none found.
func (m *UpdateExternalClientAuthenticationTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExternalClientAuthenticationTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVersion() < 0 {
		err := UpdateExternalClientAuthenticationTypeRequestValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateExternalClientAuthenticationTypeRequest_AuthenticationType_NotInLookup[m.GetAuthenticationType()]; ok {
		err := UpdateExternalClientAuthenticationTypeRequestValidationError{
			field:  "AuthenticationType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateExternalClientAuthenticationTypeRequestMultiError(errors)
	}

	return nil
}

// UpdateExternalClientAuthenticationTypeRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateExternalClientAuthenticationTypeRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateExternalClientAuthenticationTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExternalClientAuthenticationTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExternalClientAuthenticationTypeRequestMultiError) AllErrors() []error { return m }

// UpdateExternalClientAuthenticationTypeRequestValidationError is the
// validation error returned by
// UpdateExternalClientAuthenticationTypeRequest.Validate if the designated
// constraints aren't met.
type UpdateExternalClientAuthenticationTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExternalClientAuthenticationTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExternalClientAuthenticationTypeRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateExternalClientAuthenticationTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExternalClientAuthenticationTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExternalClientAuthenticationTypeRequestValidationError) ErrorName() string {
	return "UpdateExternalClientAuthenticationTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExternalClientAuthenticationTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExternalClientAuthenticationTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExternalClientAuthenticationTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExternalClientAuthenticationTypeRequestValidationError{}

var _UpdateExternalClientAuthenticationTypeRequest_AuthenticationType_NotInLookup = map[ClientAuthenticationType]struct{}{
	0: {},
}

// Validate checks the field values on
// UpdateExternalClientAuthenticationTypeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateExternalClientAuthenticationTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateExternalClientAuthenticationTypeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdateExternalClientAuthenticationTypeResponseMultiError, or nil if none found.
func (m *UpdateExternalClientAuthenticationTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExternalClientAuthenticationTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExternalClientAuthenticationTypeResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExternalClientAuthenticationTypeResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExternalClientAuthenticationTypeResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVersion() < 0 {
		err := UpdateExternalClientAuthenticationTypeResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateExternalClientAuthenticationTypeResponseMultiError(errors)
	}

	return nil
}

// UpdateExternalClientAuthenticationTypeResponseMultiError is an error
// wrapping multiple validation errors returned by
// UpdateExternalClientAuthenticationTypeResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateExternalClientAuthenticationTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExternalClientAuthenticationTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExternalClientAuthenticationTypeResponseMultiError) AllErrors() []error { return m }

// UpdateExternalClientAuthenticationTypeResponseValidationError is the
// validation error returned by
// UpdateExternalClientAuthenticationTypeResponse.Validate if the designated
// constraints aren't met.
type UpdateExternalClientAuthenticationTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExternalClientAuthenticationTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExternalClientAuthenticationTypeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateExternalClientAuthenticationTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExternalClientAuthenticationTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExternalClientAuthenticationTypeResponseValidationError) ErrorName() string {
	return "UpdateExternalClientAuthenticationTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExternalClientAuthenticationTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExternalClientAuthenticationTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExternalClientAuthenticationTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExternalClientAuthenticationTypeResponseValidationError{}
