// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: serviceprovider/value/v1/value.proto

package valuev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	approvaltypev1 "mica/proto/common/enums/approvaltypev1"

	channelv1 "mica/proto/common/enums/channelv1"

	currencyv1 "mica/proto/common/enums/currencyv1"

	organizationcategoryv1 "mica/proto/common/enums/organizationcategoryv1"

	valueoperationtypev1 "mica/proto/common/enums/valueoperationtypev1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = approvaltypev1.ApprovalType(0)

	_ = channelv1.Channel(0)

	_ = currencyv1.Currency(0)

	_ = organizationcategoryv1.OrganizationCategory(0)

	_ = valueoperationtypev1.ValueOperationType(0)
)

// Validate checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ValueMultiError, or nil if none found.
func (m *Value) ValidateAll() error {
	return m.validate(true)
}

func (m *Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTransactionKey()); l < 30 || l > 50 {
		err := ValueValidationError{
			field:  "TransactionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValueValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValueValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValueValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValueValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValueValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValueValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperationType

	if utf8.RuneCountInString(m.GetServiceProviderInstrumentKey()) > 50 {
		err := ValueValidationError{
			field:  "ServiceProviderInstrumentKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceProviderInstrumentRef

	// no validation rules for Channel

	// no validation rules for Currency

	if l := utf8.RuneCountInString(m.GetOrganizationKey()); l < 30 || l > 50 {
		err := ValueValidationError{
			field:  "OrganizationKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrganizationName

	if all {
		switch v := interface{}(m.GetOrganizationAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValueValidationError{
					field:  "OrganizationAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValueValidationError{
					field:  "OrganizationAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValueValidationError{
				field:  "OrganizationAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Category

	if l := utf8.RuneCountInString(m.GetStoreKey()); l < 30 || l > 50 {
		err := ValueValidationError{
			field:  "StoreKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StoreNumber

	if all {
		switch v := interface{}(m.GetStoreAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValueValidationError{
					field:  "StoreAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValueValidationError{
					field:  "StoreAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoreAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValueValidationError{
				field:  "StoreAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClerkIdentifier

	// no validation rules for TotalAmount

	// no validation rules for DiscountAmount

	// no validation rules for IneligibleAmount

	// no validation rules for RequestedAmount

	// no validation rules for OrderNumber

	if len(errors) > 0 {
		return ValueMultiError(errors)
	}

	return nil
}

// ValueMultiError is an error wrapping multiple validation errors returned by
// Value.ValidateAll() if the designated constraints aren't met.
type ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueMultiError) AllErrors() []error { return m }

// ValueValidationError is the validation error returned by Value.Validate if
// the designated constraints aren't met.
type ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueValidationError) ErrorName() string { return "ValueValidationError" }

// Error satisfies the builtin error interface
func (e ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueValidationError{}

// Validate checks the field values on ValueRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ValueRequestMultiError, or
// nil if none found.
func (m *ValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTransactionKey()); l < 30 || l > 50 {
		err := ValueRequestValidationError{
			field:  "TransactionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceProviderInstrumentKey()) > 50 {
		err := ValueRequestValidationError{
			field:  "ServiceProviderInstrumentKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceProviderInstrumentRef

	// no validation rules for Channel

	// no validation rules for Currency

	if l := utf8.RuneCountInString(m.GetOrganizationKey()); l < 30 || l > 50 {
		err := ValueRequestValidationError{
			field:  "OrganizationKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrganizationName

	if all {
		switch v := interface{}(m.GetOrganizationAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValueRequestValidationError{
					field:  "OrganizationAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValueRequestValidationError{
					field:  "OrganizationAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValueRequestValidationError{
				field:  "OrganizationAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Category

	if l := utf8.RuneCountInString(m.GetStoreKey()); l < 30 || l > 50 {
		err := ValueRequestValidationError{
			field:  "StoreKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StoreNumber

	if all {
		switch v := interface{}(m.GetStoreAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValueRequestValidationError{
					field:  "StoreAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValueRequestValidationError{
					field:  "StoreAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoreAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValueRequestValidationError{
				field:  "StoreAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClerkIdentifier

	// no validation rules for TotalAmount

	// no validation rules for DiscountAmount

	// no validation rules for IneligibleAmount

	// no validation rules for RequestedAmount

	// no validation rules for OrderNumber

	if len(errors) > 0 {
		return ValueRequestMultiError(errors)
	}

	return nil
}

// ValueRequestMultiError is an error wrapping multiple validation errors
// returned by ValueRequest.ValidateAll() if the designated constraints aren't met.
type ValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueRequestMultiError) AllErrors() []error { return m }

// ValueRequestValidationError is the validation error returned by
// ValueRequest.Validate if the designated constraints aren't met.
type ValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueRequestValidationError) ErrorName() string { return "ValueRequestValidationError" }

// Error satisfies the builtin error interface
func (e ValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueRequestValidationError{}

// Validate checks the field values on ObtainValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObtainValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObtainValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObtainValueRequestMultiError, or nil if none found.
func (m *ObtainValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ObtainValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApprovalType

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObtainValueRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObtainValueRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObtainValueRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObtainValueRequestMultiError(errors)
	}

	return nil
}

// ObtainValueRequestMultiError is an error wrapping multiple validation errors
// returned by ObtainValueRequest.ValidateAll() if the designated constraints
// aren't met.
type ObtainValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObtainValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObtainValueRequestMultiError) AllErrors() []error { return m }

// ObtainValueRequestValidationError is the validation error returned by
// ObtainValueRequest.Validate if the designated constraints aren't met.
type ObtainValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObtainValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObtainValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObtainValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObtainValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObtainValueRequestValidationError) ErrorName() string {
	return "ObtainValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObtainValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObtainValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObtainValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObtainValueRequestValidationError{}

// Validate checks the field values on ObtainValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObtainValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObtainValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObtainValueResponseMultiError, or nil if none found.
func (m *ObtainValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ObtainValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObtainValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObtainValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObtainValueResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransactionRef

	// no validation rules for ApprovedAmount

	if len(errors) > 0 {
		return ObtainValueResponseMultiError(errors)
	}

	return nil
}

// ObtainValueResponseMultiError is an error wrapping multiple validation
// errors returned by ObtainValueResponse.ValidateAll() if the designated
// constraints aren't met.
type ObtainValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObtainValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObtainValueResponseMultiError) AllErrors() []error { return m }

// ObtainValueResponseValidationError is the validation error returned by
// ObtainValueResponse.Validate if the designated constraints aren't met.
type ObtainValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObtainValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObtainValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObtainValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObtainValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObtainValueResponseValidationError) ErrorName() string {
	return "ObtainValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObtainValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObtainValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObtainValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObtainValueResponseValidationError{}

// Validate checks the field values on ReturnValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnValueRequestMultiError, or nil if none found.
func (m *ReturnValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReturnValueRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReturnValueRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReturnValueRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReturnValueRequestMultiError(errors)
	}

	return nil
}

// ReturnValueRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnValueRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnValueRequestMultiError) AllErrors() []error { return m }

// ReturnValueRequestValidationError is the validation error returned by
// ReturnValueRequest.Validate if the designated constraints aren't met.
type ReturnValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnValueRequestValidationError) ErrorName() string {
	return "ReturnValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnValueRequestValidationError{}

// Validate checks the field values on ReturnValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnValueResponseMultiError, or nil if none found.
func (m *ReturnValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReturnValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReturnValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReturnValueResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransactionRef

	// no validation rules for ApprovedAmount

	if len(errors) > 0 {
		return ReturnValueResponseMultiError(errors)
	}

	return nil
}

// ReturnValueResponseMultiError is an error wrapping multiple validation
// errors returned by ReturnValueResponse.ValidateAll() if the designated
// constraints aren't met.
type ReturnValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnValueResponseMultiError) AllErrors() []error { return m }

// ReturnValueResponseValidationError is the validation error returned by
// ReturnValueResponse.Validate if the designated constraints aren't met.
type ReturnValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnValueResponseValidationError) ErrorName() string {
	return "ReturnValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnValueResponseValidationError{}

// Validate checks the field values on From with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *From) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on From with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FromMultiError, or nil if none found.
func (m *From) ValidateAll() error {
	return m.validate(true)
}

func (m *From) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentToken

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for ServiceProviderName

	if len(errors) > 0 {
		return FromMultiError(errors)
	}

	return nil
}

// FromMultiError is an error wrapping multiple validation errors returned by
// From.ValidateAll() if the designated constraints aren't met.
type FromMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FromMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FromMultiError) AllErrors() []error { return m }

// FromValidationError is the validation error returned by From.Validate if the
// designated constraints aren't met.
type FromValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FromValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FromValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FromValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FromValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FromValidationError) ErrorName() string { return "FromValidationError" }

// Error satisfies the builtin error interface
func (e FromValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFrom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FromValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FromValidationError{}

// Validate checks the field values on ReceiveValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceiveValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveValueRequestMultiError, or nil if none found.
func (m *ReceiveValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetToServiceProviderInstrumentKey()); l < 30 || l > 50 {
		err := ReceiveValueRequestValidationError{
			field:  "ToServiceProviderInstrumentKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ToServiceProviderInstrumentRef

	// no validation rules for Currency

	// no validation rules for Amount

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiveValueRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiveValueRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiveValueRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceiveValueRequestMultiError(errors)
	}

	return nil
}

// ReceiveValueRequestMultiError is an error wrapping multiple validation
// errors returned by ReceiveValueRequest.ValidateAll() if the designated
// constraints aren't met.
type ReceiveValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveValueRequestMultiError) AllErrors() []error { return m }

// ReceiveValueRequestValidationError is the validation error returned by
// ReceiveValueRequest.Validate if the designated constraints aren't met.
type ReceiveValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveValueRequestValidationError) ErrorName() string {
	return "ReceiveValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveValueRequestValidationError{}

// Validate checks the field values on ReceiveValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceiveValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveValueResponseMultiError, or nil if none found.
func (m *ReceiveValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiveValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiveValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiveValueResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransactionRef

	if len(errors) > 0 {
		return ReceiveValueResponseMultiError(errors)
	}

	return nil
}

// ReceiveValueResponseMultiError is an error wrapping multiple validation
// errors returned by ReceiveValueResponse.ValidateAll() if the designated
// constraints aren't met.
type ReceiveValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveValueResponseMultiError) AllErrors() []error { return m }

// ReceiveValueResponseValidationError is the validation error returned by
// ReceiveValueResponse.Validate if the designated constraints aren't met.
type ReceiveValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveValueResponseValidationError) ErrorName() string {
	return "ReceiveValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveValueResponseValidationError{}

// Validate checks the field values on GetValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetValueRequestMultiError, or nil if none found.
func (m *GetValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Identifier.(type) {

	case *GetValueRequest_TransactionKey:
		// no validation rules for TransactionKey

	case *GetValueRequest_PartnerTransactionRef:
		// no validation rules for PartnerTransactionRef

	}

	if len(errors) > 0 {
		return GetValueRequestMultiError(errors)
	}

	return nil
}

// GetValueRequestMultiError is an error wrapping multiple validation errors
// returned by GetValueRequest.ValidateAll() if the designated constraints
// aren't met.
type GetValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetValueRequestMultiError) AllErrors() []error { return m }

// GetValueRequestValidationError is the validation error returned by
// GetValueRequest.Validate if the designated constraints aren't met.
type GetValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetValueRequestValidationError) ErrorName() string { return "GetValueRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetValueRequestValidationError{}

// Validate checks the field values on GetValueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetValueResponseMultiError, or nil if none found.
func (m *GetValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetValueResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetValueResponseMultiError(errors)
	}

	return nil
}

// GetValueResponseMultiError is an error wrapping multiple validation errors
// returned by GetValueResponse.ValidateAll() if the designated constraints
// aren't met.
type GetValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetValueResponseMultiError) AllErrors() []error { return m }

// GetValueResponseValidationError is the validation error returned by
// GetValueResponse.Validate if the designated constraints aren't met.
type GetValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetValueResponseValidationError) ErrorName() string { return "GetValueResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetValueResponseValidationError{}

// Validate checks the field values on SearchValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchValueRequestMultiError, or nil if none found.
func (m *SearchValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTransactionKey()); l < 30 || l > 50 {
		err := SearchValueRequestValidationError{
			field:  "TransactionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceProviderPaymentToken

	// no validation rules for ServiceProviderInstrumentRef

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchValueRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchValueRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchValueRequestValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchValueRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchValueRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchValueRequestValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchValueRequestMultiError(errors)
	}

	return nil
}

// SearchValueRequestMultiError is an error wrapping multiple validation errors
// returned by SearchValueRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchValueRequestMultiError) AllErrors() []error { return m }

// SearchValueRequestValidationError is the validation error returned by
// SearchValueRequest.Validate if the designated constraints aren't met.
type SearchValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchValueRequestValidationError) ErrorName() string {
	return "SearchValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchValueRequestValidationError{}

// Validate checks the field values on SearchValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchValueResponseMultiError, or nil if none found.
func (m *SearchValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchValueResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchValueResponseValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchValueResponseValidationError{
						field:  fmt.Sprintf("Value[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchValueResponseValidationError{
					field:  fmt.Sprintf("Value[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchValueResponseMultiError(errors)
	}

	return nil
}

// SearchValueResponseMultiError is an error wrapping multiple validation
// errors returned by SearchValueResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchValueResponseMultiError) AllErrors() []error { return m }

// SearchValueResponseValidationError is the validation error returned by
// SearchValueResponse.Validate if the designated constraints aren't met.
type SearchValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchValueResponseValidationError) ErrorName() string {
	return "SearchValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchValueResponseValidationError{}

// Validate checks the field values on SendValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendValueRequestMultiError, or nil if none found.
func (m *SendValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetFromServiceProviderUserKey()); l < 30 || l > 50 {
		err := SendValueRequestValidationError{
			field:  "FromServiceProviderUserKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFromServiceProviderInstrumentKey()); l < 30 || l > 50 {
		err := SendValueRequestValidationError{
			field:  "FromServiceProviderInstrumentKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetToPaymentToken()); l < 30 || l > 50 {
		err := SendValueRequestValidationError{
			field:  "ToPaymentToken",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Currency

	// no validation rules for Amount

	if len(errors) > 0 {
		return SendValueRequestMultiError(errors)
	}

	return nil
}

// SendValueRequestMultiError is an error wrapping multiple validation errors
// returned by SendValueRequest.ValidateAll() if the designated constraints
// aren't met.
type SendValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendValueRequestMultiError) AllErrors() []error { return m }

// SendValueRequestValidationError is the validation error returned by
// SendValueRequest.Validate if the designated constraints aren't met.
type SendValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendValueRequestValidationError) ErrorName() string { return "SendValueRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendValueRequestValidationError{}

// Validate checks the field values on SendValueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendValueResponseMultiError, or nil if none found.
func (m *SendValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendValueResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransactionKey

	if len(errors) > 0 {
		return SendValueResponseMultiError(errors)
	}

	return nil
}

// SendValueResponseMultiError is an error wrapping multiple validation errors
// returned by SendValueResponse.ValidateAll() if the designated constraints
// aren't met.
type SendValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendValueResponseMultiError) AllErrors() []error { return m }

// SendValueResponseValidationError is the validation error returned by
// SendValueResponse.Validate if the designated constraints aren't met.
type SendValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendValueResponseValidationError) ErrorName() string {
	return "SendValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendValueResponseValidationError{}
