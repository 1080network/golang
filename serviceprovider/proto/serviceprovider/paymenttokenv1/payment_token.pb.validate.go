// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: serviceprovider/paymenttoken/v1/payment_token.proto

package paymenttokenv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceProviderPaymentToken with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceProviderPaymentToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceProviderPaymentToken with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceProviderPaymentTokenMultiError, or nil if none found.
func (m *ServiceProviderPaymentToken) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceProviderPaymentToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceProviderUserKey

	// no validation rules for ServiceProviderUserRef

	// no validation rules for ServiceProviderInstrumentKey

	// no validation rules for ServiceProviderInstrumentRef

	if all {
		switch v := interface{}(m.GetPaymentToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceProviderPaymentTokenValidationError{
					field:  "PaymentToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceProviderPaymentTokenValidationError{
					field:  "PaymentToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceProviderPaymentTokenValidationError{
				field:  "PaymentToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceProviderPaymentTokenMultiError(errors)
	}

	return nil
}

// ServiceProviderPaymentTokenMultiError is an error wrapping multiple
// validation errors returned by ServiceProviderPaymentToken.ValidateAll() if
// the designated constraints aren't met.
type ServiceProviderPaymentTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceProviderPaymentTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceProviderPaymentTokenMultiError) AllErrors() []error { return m }

// ServiceProviderPaymentTokenValidationError is the validation error returned
// by ServiceProviderPaymentToken.Validate if the designated constraints
// aren't met.
type ServiceProviderPaymentTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceProviderPaymentTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceProviderPaymentTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceProviderPaymentTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceProviderPaymentTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceProviderPaymentTokenValidationError) ErrorName() string {
	return "ServiceProviderPaymentTokenValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceProviderPaymentTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceProviderPaymentToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceProviderPaymentTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceProviderPaymentTokenValidationError{}

// Validate checks the field values on
// ProvisionServiceProviderPaymentTokenRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProvisionServiceProviderPaymentTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ProvisionServiceProviderPaymentTokenRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ProvisionServiceProviderPaymentTokenRequestMultiError, or nil if none found.
func (m *ProvisionServiceProviderPaymentTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionServiceProviderPaymentTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Criteria.(type) {

	case *ProvisionServiceProviderPaymentTokenRequest_ServiceProviderInstrumentKey:
		// no validation rules for ServiceProviderInstrumentKey

	case *ProvisionServiceProviderPaymentTokenRequest_ServiceProviderInstrumentRef:
		// no validation rules for ServiceProviderInstrumentRef

	}

	if len(errors) > 0 {
		return ProvisionServiceProviderPaymentTokenRequestMultiError(errors)
	}

	return nil
}

// ProvisionServiceProviderPaymentTokenRequestMultiError is an error wrapping
// multiple validation errors returned by
// ProvisionServiceProviderPaymentTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type ProvisionServiceProviderPaymentTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionServiceProviderPaymentTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionServiceProviderPaymentTokenRequestMultiError) AllErrors() []error { return m }

// ProvisionServiceProviderPaymentTokenRequestValidationError is the validation
// error returned by ProvisionServiceProviderPaymentTokenRequest.Validate if
// the designated constraints aren't met.
type ProvisionServiceProviderPaymentTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionServiceProviderPaymentTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionServiceProviderPaymentTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionServiceProviderPaymentTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionServiceProviderPaymentTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionServiceProviderPaymentTokenRequestValidationError) ErrorName() string {
	return "ProvisionServiceProviderPaymentTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionServiceProviderPaymentTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionServiceProviderPaymentTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionServiceProviderPaymentTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionServiceProviderPaymentTokenRequestValidationError{}

// Validate checks the field values on
// ProvisionServiceProviderPaymentTokenResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProvisionServiceProviderPaymentTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ProvisionServiceProviderPaymentTokenResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ProvisionServiceProviderPaymentTokenResponseMultiError, or nil if none found.
func (m *ProvisionServiceProviderPaymentTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionServiceProviderPaymentTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvisionServiceProviderPaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvisionServiceProviderPaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvisionServiceProviderPaymentTokenResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ServiceProviderPaymentToken

	if len(errors) > 0 {
		return ProvisionServiceProviderPaymentTokenResponseMultiError(errors)
	}

	return nil
}

// ProvisionServiceProviderPaymentTokenResponseMultiError is an error wrapping
// multiple validation errors returned by
// ProvisionServiceProviderPaymentTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type ProvisionServiceProviderPaymentTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionServiceProviderPaymentTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionServiceProviderPaymentTokenResponseMultiError) AllErrors() []error { return m }

// ProvisionServiceProviderPaymentTokenResponseValidationError is the
// validation error returned by
// ProvisionServiceProviderPaymentTokenResponse.Validate if the designated
// constraints aren't met.
type ProvisionServiceProviderPaymentTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionServiceProviderPaymentTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionServiceProviderPaymentTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionServiceProviderPaymentTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionServiceProviderPaymentTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionServiceProviderPaymentTokenResponseValidationError) ErrorName() string {
	return "ProvisionServiceProviderPaymentTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionServiceProviderPaymentTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionServiceProviderPaymentTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionServiceProviderPaymentTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionServiceProviderPaymentTokenResponseValidationError{}

// Validate checks the field values on RemoveServiceProviderPaymentTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveServiceProviderPaymentTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveServiceProviderPaymentTokenRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RemoveServiceProviderPaymentTokenRequestMultiError, or nil if none found.
func (m *RemoveServiceProviderPaymentTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServiceProviderPaymentTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Criteria.(type) {

	case *RemoveServiceProviderPaymentTokenRequest_ServiceProviderInstrumentKey:
		// no validation rules for ServiceProviderInstrumentKey

	case *RemoveServiceProviderPaymentTokenRequest_ServiceProviderInstrumentRef:
		// no validation rules for ServiceProviderInstrumentRef

	case *RemoveServiceProviderPaymentTokenRequest_ServiceProviderPaymentToken:
		// no validation rules for ServiceProviderPaymentToken

	}

	if len(errors) > 0 {
		return RemoveServiceProviderPaymentTokenRequestMultiError(errors)
	}

	return nil
}

// RemoveServiceProviderPaymentTokenRequestMultiError is an error wrapping
// multiple validation errors returned by
// RemoveServiceProviderPaymentTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveServiceProviderPaymentTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServiceProviderPaymentTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServiceProviderPaymentTokenRequestMultiError) AllErrors() []error { return m }

// RemoveServiceProviderPaymentTokenRequestValidationError is the validation
// error returned by RemoveServiceProviderPaymentTokenRequest.Validate if the
// designated constraints aren't met.
type RemoveServiceProviderPaymentTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceProviderPaymentTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceProviderPaymentTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceProviderPaymentTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceProviderPaymentTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceProviderPaymentTokenRequestValidationError) ErrorName() string {
	return "RemoveServiceProviderPaymentTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceProviderPaymentTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceProviderPaymentTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceProviderPaymentTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceProviderPaymentTokenRequestValidationError{}

// Validate checks the field values on
// RemoveServiceProviderPaymentTokenResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveServiceProviderPaymentTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveServiceProviderPaymentTokenResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RemoveServiceProviderPaymentTokenResponseMultiError, or nil if none found.
func (m *RemoveServiceProviderPaymentTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServiceProviderPaymentTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveServiceProviderPaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveServiceProviderPaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveServiceProviderPaymentTokenResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveServiceProviderPaymentTokenResponseMultiError(errors)
	}

	return nil
}

// RemoveServiceProviderPaymentTokenResponseMultiError is an error wrapping
// multiple validation errors returned by
// RemoveServiceProviderPaymentTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveServiceProviderPaymentTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServiceProviderPaymentTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServiceProviderPaymentTokenResponseMultiError) AllErrors() []error { return m }

// RemoveServiceProviderPaymentTokenResponseValidationError is the validation
// error returned by RemoveServiceProviderPaymentTokenResponse.Validate if the
// designated constraints aren't met.
type RemoveServiceProviderPaymentTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceProviderPaymentTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceProviderPaymentTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceProviderPaymentTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceProviderPaymentTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceProviderPaymentTokenResponseValidationError) ErrorName() string {
	return "RemoveServiceProviderPaymentTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceProviderPaymentTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceProviderPaymentTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceProviderPaymentTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceProviderPaymentTokenResponseValidationError{}

// Validate checks the field values on SearchServiceProviderPaymentTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchServiceProviderPaymentTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchServiceProviderPaymentTokenRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchServiceProviderPaymentTokenRequestMultiError, or nil if none found.
func (m *SearchServiceProviderPaymentTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchServiceProviderPaymentTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceProviderUserKey

	// no validation rules for ServiceProviderInstrumentKey

	if len(errors) > 0 {
		return SearchServiceProviderPaymentTokenRequestMultiError(errors)
	}

	return nil
}

// SearchServiceProviderPaymentTokenRequestMultiError is an error wrapping
// multiple validation errors returned by
// SearchServiceProviderPaymentTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchServiceProviderPaymentTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchServiceProviderPaymentTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchServiceProviderPaymentTokenRequestMultiError) AllErrors() []error { return m }

// SearchServiceProviderPaymentTokenRequestValidationError is the validation
// error returned by SearchServiceProviderPaymentTokenRequest.Validate if the
// designated constraints aren't met.
type SearchServiceProviderPaymentTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchServiceProviderPaymentTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchServiceProviderPaymentTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchServiceProviderPaymentTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchServiceProviderPaymentTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchServiceProviderPaymentTokenRequestValidationError) ErrorName() string {
	return "SearchServiceProviderPaymentTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchServiceProviderPaymentTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchServiceProviderPaymentTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchServiceProviderPaymentTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchServiceProviderPaymentTokenRequestValidationError{}

// Validate checks the field values on
// SearchServiceProviderPaymentTokenResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchServiceProviderPaymentTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchServiceProviderPaymentTokenResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchServiceProviderPaymentTokenResponseMultiError, or nil if none found.
func (m *SearchServiceProviderPaymentTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchServiceProviderPaymentTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchServiceProviderPaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchServiceProviderPaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchServiceProviderPaymentTokenResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetServiceProviderPaymentTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchServiceProviderPaymentTokenResponseValidationError{
						field:  fmt.Sprintf("ServiceProviderPaymentTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchServiceProviderPaymentTokenResponseValidationError{
						field:  fmt.Sprintf("ServiceProviderPaymentTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchServiceProviderPaymentTokenResponseValidationError{
					field:  fmt.Sprintf("ServiceProviderPaymentTokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchServiceProviderPaymentTokenResponseMultiError(errors)
	}

	return nil
}

// SearchServiceProviderPaymentTokenResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchServiceProviderPaymentTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchServiceProviderPaymentTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchServiceProviderPaymentTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchServiceProviderPaymentTokenResponseMultiError) AllErrors() []error { return m }

// SearchServiceProviderPaymentTokenResponseValidationError is the validation
// error returned by SearchServiceProviderPaymentTokenResponse.Validate if the
// designated constraints aren't met.
type SearchServiceProviderPaymentTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchServiceProviderPaymentTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchServiceProviderPaymentTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchServiceProviderPaymentTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchServiceProviderPaymentTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchServiceProviderPaymentTokenResponseValidationError) ErrorName() string {
	return "SearchServiceProviderPaymentTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchServiceProviderPaymentTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchServiceProviderPaymentTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchServiceProviderPaymentTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchServiceProviderPaymentTokenResponseValidationError{}
