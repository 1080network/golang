// Copyright (c) 2022 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.8
// source: serviceprovider/instrument/v1/instrument.proto

package instrumentv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	currencyv1 "github.com/1080network/golang/serviceprovider/proto/common/enums/currencyv1"
	instrumenttypev1 "github.com/1080network/golang/serviceprovider/proto/common/enums/instrumenttypev1"
	v1 "github.com/1080network/golang/serviceprovider/proto/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterInstrumentResponse_Status int32

const (
	RegisterInstrumentResponse_STATUS_UNSPECIFIED RegisterInstrumentResponse_Status = 0
	RegisterInstrumentResponse_STATUS_SUCCESS     RegisterInstrumentResponse_Status = 1
	RegisterInstrumentResponse_STATUS_ERROR       RegisterInstrumentResponse_Status = 2
	RegisterInstrumentResponse_STATUS_DUPLICATE   RegisterInstrumentResponse_Status = 3
)

// Enum value maps for RegisterInstrumentResponse_Status.
var (
	RegisterInstrumentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_DUPLICATE",
	}
	RegisterInstrumentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_DUPLICATE":   3,
	}
)

func (x RegisterInstrumentResponse_Status) Enum() *RegisterInstrumentResponse_Status {
	p := new(RegisterInstrumentResponse_Status)
	*p = x
	return p
}

func (x RegisterInstrumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterInstrumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceprovider_instrument_v1_instrument_proto_enumTypes[0].Descriptor()
}

func (RegisterInstrumentResponse_Status) Type() protoreflect.EnumType {
	return &file_serviceprovider_instrument_v1_instrument_proto_enumTypes[0]
}

func (x RegisterInstrumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterInstrumentResponse_Status.Descriptor instead.
func (RegisterInstrumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{2, 0}
}

type GetInstrumentResponse_Status int32

const (
	GetInstrumentResponse_STATUS_UNSPECIFIED GetInstrumentResponse_Status = 0
	GetInstrumentResponse_STATUS_SUCCESS     GetInstrumentResponse_Status = 1
	GetInstrumentResponse_STATUS_ERROR       GetInstrumentResponse_Status = 2
	GetInstrumentResponse_STATUS_NOT_FOUND   GetInstrumentResponse_Status = 3
)

// Enum value maps for GetInstrumentResponse_Status.
var (
	GetInstrumentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	GetInstrumentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x GetInstrumentResponse_Status) Enum() *GetInstrumentResponse_Status {
	p := new(GetInstrumentResponse_Status)
	*p = x
	return p
}

func (x GetInstrumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetInstrumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceprovider_instrument_v1_instrument_proto_enumTypes[1].Descriptor()
}

func (GetInstrumentResponse_Status) Type() protoreflect.EnumType {
	return &file_serviceprovider_instrument_v1_instrument_proto_enumTypes[1]
}

func (x GetInstrumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetInstrumentResponse_Status.Descriptor instead.
func (GetInstrumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{5, 0}
}

type RemoveInstrumentResponse_Status int32

const (
	RemoveInstrumentResponse_STATUS_UNSPECIFIED RemoveInstrumentResponse_Status = 0
	RemoveInstrumentResponse_STATUS_SUCCESS     RemoveInstrumentResponse_Status = 1
	RemoveInstrumentResponse_STATUS_ERROR       RemoveInstrumentResponse_Status = 2
	RemoveInstrumentResponse_STATUS_NOT_FOUND   RemoveInstrumentResponse_Status = 3
)

// Enum value maps for RemoveInstrumentResponse_Status.
var (
	RemoveInstrumentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	RemoveInstrumentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x RemoveInstrumentResponse_Status) Enum() *RemoveInstrumentResponse_Status {
	p := new(RemoveInstrumentResponse_Status)
	*p = x
	return p
}

func (x RemoveInstrumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveInstrumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceprovider_instrument_v1_instrument_proto_enumTypes[2].Descriptor()
}

func (RemoveInstrumentResponse_Status) Type() protoreflect.EnumType {
	return &file_serviceprovider_instrument_v1_instrument_proto_enumTypes[2]
}

func (x RemoveInstrumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveInstrumentResponse_Status.Descriptor instead.
func (RemoveInstrumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{7, 0}
}

type SearchInstrumentResponse_Status int32

const (
	SearchInstrumentResponse_STATUS_UNSPECIFIED SearchInstrumentResponse_Status = 0
	SearchInstrumentResponse_STATUS_SUCCESS     SearchInstrumentResponse_Status = 1
	SearchInstrumentResponse_STATUS_ERROR       SearchInstrumentResponse_Status = 2
	SearchInstrumentResponse_STATUS_NOT_FOUND   SearchInstrumentResponse_Status = 3
)

// Enum value maps for SearchInstrumentResponse_Status.
var (
	SearchInstrumentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	SearchInstrumentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x SearchInstrumentResponse_Status) Enum() *SearchInstrumentResponse_Status {
	p := new(SearchInstrumentResponse_Status)
	*p = x
	return p
}

func (x SearchInstrumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchInstrumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceprovider_instrument_v1_instrument_proto_enumTypes[3].Descriptor()
}

func (SearchInstrumentResponse_Status) Type() protoreflect.EnumType {
	return &file_serviceprovider_instrument_v1_instrument_proto_enumTypes[3]
}

func (x SearchInstrumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchInstrumentResponse_Status.Descriptor instead.
func (SearchInstrumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{9, 0}
}

type SetPINResponse_Status int32

const (
	SetPINResponse_STATUS_UNSPECIFIED SetPINResponse_Status = 0
	SetPINResponse_STATUS_SUCCESS     SetPINResponse_Status = 1
	SetPINResponse_STATUS_ERROR       SetPINResponse_Status = 2
	SetPINResponse_STATUS_NOT_FOUND   SetPINResponse_Status = 3
)

// Enum value maps for SetPINResponse_Status.
var (
	SetPINResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	SetPINResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x SetPINResponse_Status) Enum() *SetPINResponse_Status {
	p := new(SetPINResponse_Status)
	*p = x
	return p
}

func (x SetPINResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetPINResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceprovider_instrument_v1_instrument_proto_enumTypes[4].Descriptor()
}

func (SetPINResponse_Status) Type() protoreflect.EnumType {
	return &file_serviceprovider_instrument_v1_instrument_proto_enumTypes[4]
}

func (x SetPINResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetPINResponse_Status.Descriptor instead.
func (SetPINResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{11, 0}
}

type ResetPINResponse_Status int32

const (
	ResetPINResponse_STATUS_UNSPECIFIED ResetPINResponse_Status = 0
	ResetPINResponse_STATUS_SUCCESS     ResetPINResponse_Status = 1
	ResetPINResponse_STATUS_ERROR       ResetPINResponse_Status = 2
	ResetPINResponse_STATUS_NOT_FOUND   ResetPINResponse_Status = 3
)

// Enum value maps for ResetPINResponse_Status.
var (
	ResetPINResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	ResetPINResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x ResetPINResponse_Status) Enum() *ResetPINResponse_Status {
	p := new(ResetPINResponse_Status)
	*p = x
	return p
}

func (x ResetPINResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResetPINResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceprovider_instrument_v1_instrument_proto_enumTypes[5].Descriptor()
}

func (ResetPINResponse_Status) Type() protoreflect.EnumType {
	return &file_serviceprovider_instrument_v1_instrument_proto_enumTypes[5]
}

func (x ResetPINResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResetPINResponse_Status.Descriptor instead.
func (ResetPINResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{13, 0}
}

type RemovePINResponse_Status int32

const (
	RemovePINResponse_STATUS_UNSPECIFIED RemovePINResponse_Status = 0
	RemovePINResponse_STATUS_SUCCESS     RemovePINResponse_Status = 1
	RemovePINResponse_STATUS_ERROR       RemovePINResponse_Status = 2
	RemovePINResponse_STATUS_NOT_FOUND   RemovePINResponse_Status = 3
)

// Enum value maps for RemovePINResponse_Status.
var (
	RemovePINResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	RemovePINResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x RemovePINResponse_Status) Enum() *RemovePINResponse_Status {
	p := new(RemovePINResponse_Status)
	*p = x
	return p
}

func (x RemovePINResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemovePINResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceprovider_instrument_v1_instrument_proto_enumTypes[6].Descriptor()
}

func (RemovePINResponse_Status) Type() protoreflect.EnumType {
	return &file_serviceprovider_instrument_v1_instrument_proto_enumTypes[6]
}

func (x RemovePINResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemovePINResponse_Status.Descriptor instead.
func (RemovePINResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{15, 0}
}

type RetrieveTransactionResponse_Status int32

const (
	RetrieveTransactionResponse_STATUS_UNSPECIFIED          RetrieveTransactionResponse_Status = 0
	RetrieveTransactionResponse_STATUS_SUCCESS              RetrieveTransactionResponse_Status = 1
	RetrieveTransactionResponse_STATUS_ERROR                RetrieveTransactionResponse_Status = 2
	RetrieveTransactionResponse_STATUS_INSTRUMENT_NOT_FOUND RetrieveTransactionResponse_Status = 3
)

// Enum value maps for RetrieveTransactionResponse_Status.
var (
	RetrieveTransactionResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_INSTRUMENT_NOT_FOUND",
	}
	RetrieveTransactionResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":          0,
		"STATUS_SUCCESS":              1,
		"STATUS_ERROR":                2,
		"STATUS_INSTRUMENT_NOT_FOUND": 3,
	}
)

func (x RetrieveTransactionResponse_Status) Enum() *RetrieveTransactionResponse_Status {
	p := new(RetrieveTransactionResponse_Status)
	*p = x
	return p
}

func (x RetrieveTransactionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetrieveTransactionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceprovider_instrument_v1_instrument_proto_enumTypes[7].Descriptor()
}

func (RetrieveTransactionResponse_Status) Type() protoreflect.EnumType {
	return &file_serviceprovider_instrument_v1_instrument_proto_enumTypes[7]
}

func (x RetrieveTransactionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetrieveTransactionResponse_Status.Descriptor instead.
func (RetrieveTransactionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{17, 0}
}

type RegisterInstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	// Primary key on the external system.
	ServiceProviderInstrumentRef string                          `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	InstrumentType               instrumenttypev1.InstrumentType `protobuf:"varint,3,opt,name=instrument_type,json=instrumentType,proto3,enum=common.enums.instrumenttype.v1.InstrumentType" json:"instrument_type,omitempty"`
	// The 3-letter currency code defined in ISO 4217.
	Currency currencyv1.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Last 4 digits of this instrument.
	LastFour string `protobuf:"bytes,5,opt,name=last_four,json=lastFour,proto3" json:"last_four,omitempty"`
	// List of previous settled transactions
	SettledTransactions []*Transaction `protobuf:"bytes,6,rep,name=settled_transactions,json=settledTransactions,proto3" json:"settled_transactions,omitempty"`
}

func (x *RegisterInstrumentRequest) Reset() {
	*x = RegisterInstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstrumentRequest) ProtoMessage() {}

func (x *RegisterInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstrumentRequest.ProtoReflect.Descriptor instead.
func (*RegisterInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterInstrumentRequest) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *RegisterInstrumentRequest) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *RegisterInstrumentRequest) GetInstrumentType() instrumenttypev1.InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return instrumenttypev1.InstrumentType(0)
}

func (x *RegisterInstrumentRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *RegisterInstrumentRequest) GetLastFour() string {
	if x != nil {
		return x.LastFour
	}
	return ""
}

func (x *RegisterInstrumentRequest) GetSettledTransactions() []*Transaction {
	if x != nil {
		return x.SettledTransactions
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	Amount           string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	OrganizationName string `protobuf:"bytes,3,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Transaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transaction) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

type RegisterInstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RegisterInstrumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=serviceprovider.instrument.v1.RegisterInstrumentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,3,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	Version                      int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RegisterInstrumentResponse) Reset() {
	*x = RegisterInstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstrumentResponse) ProtoMessage() {}

func (x *RegisterInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstrumentResponse.ProtoReflect.Descriptor instead.
func (*RegisterInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterInstrumentResponse) GetStatus() RegisterInstrumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return RegisterInstrumentResponse_STATUS_UNSPECIFIED
}

func (x *RegisterInstrumentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RegisterInstrumentResponse) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *RegisterInstrumentResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetInstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criteria:
	//	*GetInstrumentRequest_ServiceProviderInstrumentKey
	//	*GetInstrumentRequest_ServiceProviderInstrumentRef
	Criteria isGetInstrumentRequest_Criteria `protobuf_oneof:"criteria"`
}

func (x *GetInstrumentRequest) Reset() {
	*x = GetInstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstrumentRequest) ProtoMessage() {}

func (x *GetInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{3}
}

func (m *GetInstrumentRequest) GetCriteria() isGetInstrumentRequest_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *GetInstrumentRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetCriteria().(*GetInstrumentRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *GetInstrumentRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetCriteria().(*GetInstrumentRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

type isGetInstrumentRequest_Criteria interface {
	isGetInstrumentRequest_Criteria()
}

type GetInstrumentRequest_ServiceProviderInstrumentKey struct {
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

type GetInstrumentRequest_ServiceProviderInstrumentRef struct {
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

func (*GetInstrumentRequest_ServiceProviderInstrumentKey) isGetInstrumentRequest_Criteria() {}

func (*GetInstrumentRequest_ServiceProviderInstrumentRef) isGetInstrumentRequest_Criteria() {}

type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The primary key that represents this instrument at Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	// version of the user record, used for optimistic locking
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Date that the Store was created at Mica.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// Date that the Store was last updated at Mica.
	Updated *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,5,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// The key that represents this user.
	ServiceProviderUserKey string `protobuf:"bytes,6,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	// Primary key on the external system.
	ServiceProviderUserRef string                          `protobuf:"bytes,7,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3" json:"service_provider_user_ref,omitempty"`
	InstrumentType         instrumenttypev1.InstrumentType `protobuf:"varint,8,opt,name=instrument_type,json=instrumentType,proto3,enum=common.enums.instrumenttype.v1.InstrumentType" json:"instrument_type,omitempty"`
	// The 3-letter currency code defined in ISO 4217.
	Currency currencyv1.Currency `protobuf:"varint,9,opt,name=currency,proto3,enum=common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Last for characters of this instrument.
	LastFour string `protobuf:"bytes,10,opt,name=last_four,json=lastFour,proto3" json:"last_four,omitempty"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{4}
}

func (x *Instrument) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *Instrument) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Instrument) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Instrument) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Instrument) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *Instrument) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *Instrument) GetServiceProviderUserRef() string {
	if x != nil {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *Instrument) GetInstrumentType() instrumenttypev1.InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return instrumenttypev1.InstrumentType(0)
}

func (x *Instrument) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *Instrument) GetLastFour() string {
	if x != nil {
		return x.LastFour
	}
	return ""
}

type GetInstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GetInstrumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=serviceprovider.instrument.v1.GetInstrumentResponse_Status" json:"status,omitempty"`
	Error      *v1.Error                    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Instrument *Instrument                  `protobuf:"bytes,3,opt,name=instrument,proto3" json:"instrument,omitempty"`
}

func (x *GetInstrumentResponse) Reset() {
	*x = GetInstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstrumentResponse) ProtoMessage() {}

func (x *GetInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstrumentResponse.ProtoReflect.Descriptor instead.
func (*GetInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{5}
}

func (x *GetInstrumentResponse) GetStatus() GetInstrumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetInstrumentResponse_STATUS_UNSPECIFIED
}

func (x *GetInstrumentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetInstrumentResponse) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

type RemoveInstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criteria:
	//	*RemoveInstrumentRequest_ServiceProviderInstrumentKey
	//	*RemoveInstrumentRequest_ServiceProviderInstrumentRef
	Criteria isRemoveInstrumentRequest_Criteria `protobuf_oneof:"criteria"`
}

func (x *RemoveInstrumentRequest) Reset() {
	*x = RemoveInstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInstrumentRequest) ProtoMessage() {}

func (x *RemoveInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInstrumentRequest.ProtoReflect.Descriptor instead.
func (*RemoveInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{6}
}

func (m *RemoveInstrumentRequest) GetCriteria() isRemoveInstrumentRequest_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *RemoveInstrumentRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetCriteria().(*RemoveInstrumentRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *RemoveInstrumentRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetCriteria().(*RemoveInstrumentRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

type isRemoveInstrumentRequest_Criteria interface {
	isRemoveInstrumentRequest_Criteria()
}

type RemoveInstrumentRequest_ServiceProviderInstrumentKey struct {
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

type RemoveInstrumentRequest_ServiceProviderInstrumentRef struct {
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

func (*RemoveInstrumentRequest_ServiceProviderInstrumentKey) isRemoveInstrumentRequest_Criteria() {}

func (*RemoveInstrumentRequest_ServiceProviderInstrumentRef) isRemoveInstrumentRequest_Criteria() {}

type RemoveInstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemoveInstrumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=serviceprovider.instrument.v1.RemoveInstrumentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RemoveInstrumentResponse) Reset() {
	*x = RemoveInstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInstrumentResponse) ProtoMessage() {}

func (x *RemoveInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInstrumentResponse.ProtoReflect.Descriptor instead.
func (*RemoveInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveInstrumentResponse) GetStatus() RemoveInstrumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemoveInstrumentResponse_STATUS_UNSPECIFIED
}

func (x *RemoveInstrumentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SearchInstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criteria:
	//	*SearchInstrumentRequest_ServiceProviderUserKey
	Criteria isSearchInstrumentRequest_Criteria `protobuf_oneof:"criteria"`
}

func (x *SearchInstrumentRequest) Reset() {
	*x = SearchInstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstrumentRequest) ProtoMessage() {}

func (x *SearchInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstrumentRequest.ProtoReflect.Descriptor instead.
func (*SearchInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{8}
}

func (m *SearchInstrumentRequest) GetCriteria() isSearchInstrumentRequest_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *SearchInstrumentRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetCriteria().(*SearchInstrumentRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

type isSearchInstrumentRequest_Criteria interface {
	isSearchInstrumentRequest_Criteria()
}

type SearchInstrumentRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

func (*SearchInstrumentRequest_ServiceProviderUserKey) isSearchInstrumentRequest_Criteria() {}

type SearchInstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SearchInstrumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=serviceprovider.instrument.v1.SearchInstrumentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// List of instruments that matched the search criteria.
	Instruments []*Instrument `protobuf:"bytes,3,rep,name=instruments,proto3" json:"instruments,omitempty"`
}

func (x *SearchInstrumentResponse) Reset() {
	*x = SearchInstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstrumentResponse) ProtoMessage() {}

func (x *SearchInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstrumentResponse.ProtoReflect.Descriptor instead.
func (*SearchInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{9}
}

func (x *SearchInstrumentResponse) GetStatus() SearchInstrumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchInstrumentResponse_STATUS_UNSPECIFIED
}

func (x *SearchInstrumentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchInstrumentResponse) GetInstruments() []*Instrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type SetPINRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criteria:
	//	*SetPINRequest_ServiceProviderInstrumentKey
	//	*SetPINRequest_ServiceProviderInstrumentRef
	Criteria isSetPINRequest_Criteria `protobuf_oneof:"criteria"`
	Pin      string                   `protobuf:"bytes,3,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *SetPINRequest) Reset() {
	*x = SetPINRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPINRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPINRequest) ProtoMessage() {}

func (x *SetPINRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPINRequest.ProtoReflect.Descriptor instead.
func (*SetPINRequest) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{10}
}

func (m *SetPINRequest) GetCriteria() isSetPINRequest_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *SetPINRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetCriteria().(*SetPINRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *SetPINRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetCriteria().(*SetPINRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *SetPINRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type isSetPINRequest_Criteria interface {
	isSetPINRequest_Criteria()
}

type SetPINRequest_ServiceProviderInstrumentKey struct {
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

type SetPINRequest_ServiceProviderInstrumentRef struct {
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

func (*SetPINRequest_ServiceProviderInstrumentKey) isSetPINRequest_Criteria() {}

func (*SetPINRequest_ServiceProviderInstrumentRef) isSetPINRequest_Criteria() {}

type SetPINResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SetPINResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=serviceprovider.instrument.v1.SetPINResponse_Status" json:"status,omitempty"`
	Error  *v1.Error             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetPINResponse) Reset() {
	*x = SetPINResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPINResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPINResponse) ProtoMessage() {}

func (x *SetPINResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPINResponse.ProtoReflect.Descriptor instead.
func (*SetPINResponse) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{11}
}

func (x *SetPINResponse) GetStatus() SetPINResponse_Status {
	if x != nil {
		return x.Status
	}
	return SetPINResponse_STATUS_UNSPECIFIED
}

func (x *SetPINResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ResetPINRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criteria:
	//	*ResetPINRequest_ServiceProviderInstrumentKey
	//	*ResetPINRequest_ServiceProviderInstrumentRef
	Criteria isResetPINRequest_Criteria `protobuf_oneof:"criteria"`
	OldPin   string                     `protobuf:"bytes,3,opt,name=old_pin,json=oldPin,proto3" json:"old_pin,omitempty"`
	NewPin   string                     `protobuf:"bytes,4,opt,name=new_pin,json=newPin,proto3" json:"new_pin,omitempty"`
}

func (x *ResetPINRequest) Reset() {
	*x = ResetPINRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPINRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPINRequest) ProtoMessage() {}

func (x *ResetPINRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPINRequest.ProtoReflect.Descriptor instead.
func (*ResetPINRequest) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{12}
}

func (m *ResetPINRequest) GetCriteria() isResetPINRequest_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *ResetPINRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetCriteria().(*ResetPINRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *ResetPINRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetCriteria().(*ResetPINRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *ResetPINRequest) GetOldPin() string {
	if x != nil {
		return x.OldPin
	}
	return ""
}

func (x *ResetPINRequest) GetNewPin() string {
	if x != nil {
		return x.NewPin
	}
	return ""
}

type isResetPINRequest_Criteria interface {
	isResetPINRequest_Criteria()
}

type ResetPINRequest_ServiceProviderInstrumentKey struct {
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

type ResetPINRequest_ServiceProviderInstrumentRef struct {
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

func (*ResetPINRequest_ServiceProviderInstrumentKey) isResetPINRequest_Criteria() {}

func (*ResetPINRequest_ServiceProviderInstrumentRef) isResetPINRequest_Criteria() {}

type ResetPINResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ResetPINResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=serviceprovider.instrument.v1.ResetPINResponse_Status" json:"status,omitempty"`
	Error  *v1.Error               `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResetPINResponse) Reset() {
	*x = ResetPINResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPINResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPINResponse) ProtoMessage() {}

func (x *ResetPINResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPINResponse.ProtoReflect.Descriptor instead.
func (*ResetPINResponse) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{13}
}

func (x *ResetPINResponse) GetStatus() ResetPINResponse_Status {
	if x != nil {
		return x.Status
	}
	return ResetPINResponse_STATUS_UNSPECIFIED
}

func (x *ResetPINResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RemovePINRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criteria:
	//	*RemovePINRequest_ServiceProviderInstrumentKey
	//	*RemovePINRequest_ServiceProviderInstrumentRef
	Criteria isRemovePINRequest_Criteria `protobuf_oneof:"criteria"`
}

func (x *RemovePINRequest) Reset() {
	*x = RemovePINRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePINRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePINRequest) ProtoMessage() {}

func (x *RemovePINRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePINRequest.ProtoReflect.Descriptor instead.
func (*RemovePINRequest) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{14}
}

func (m *RemovePINRequest) GetCriteria() isRemovePINRequest_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *RemovePINRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetCriteria().(*RemovePINRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *RemovePINRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetCriteria().(*RemovePINRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

type isRemovePINRequest_Criteria interface {
	isRemovePINRequest_Criteria()
}

type RemovePINRequest_ServiceProviderInstrumentKey struct {
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

type RemovePINRequest_ServiceProviderInstrumentRef struct {
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

func (*RemovePINRequest_ServiceProviderInstrumentKey) isRemovePINRequest_Criteria() {}

func (*RemovePINRequest_ServiceProviderInstrumentRef) isRemovePINRequest_Criteria() {}

type RemovePINResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemovePINResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=serviceprovider.instrument.v1.RemovePINResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RemovePINResponse) Reset() {
	*x = RemovePINResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePINResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePINResponse) ProtoMessage() {}

func (x *RemovePINResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePINResponse.ProtoReflect.Descriptor instead.
func (*RemovePINResponse) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{15}
}

func (x *RemovePINResponse) GetStatus() RemovePINResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemovePINResponse_STATUS_UNSPECIFIED
}

func (x *RemovePINResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RetrieveTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// Transactions that occurred after this date (inclusive).
	DateFrom *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// Transactions that occurred before this date (exclusive).
	DateTo *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
}

func (x *RetrieveTransactionRequest) Reset() {
	*x = RetrieveTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTransactionRequest) ProtoMessage() {}

func (x *RetrieveTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTransactionRequest.ProtoReflect.Descriptor instead.
func (*RetrieveTransactionRequest) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{16}
}

func (x *RetrieveTransactionRequest) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *RetrieveTransactionRequest) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *RetrieveTransactionRequest) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

type RetrieveTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RetrieveTransactionResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=serviceprovider.instrument.v1.RetrieveTransactionResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// List of instruments that matched the search criteria.
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *RetrieveTransactionResponse) Reset() {
	*x = RetrieveTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTransactionResponse) ProtoMessage() {}

func (x *RetrieveTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceprovider_instrument_v1_instrument_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTransactionResponse.ProtoReflect.Descriptor instead.
func (*RetrieveTransactionResponse) Descriptor() ([]byte, []int) {
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{17}
}

func (x *RetrieveTransactionResponse) GetStatus() RetrieveTransactionResponse_Status {
	if x != nil {
		return x.Status
	}
	return RetrieveTransactionResponse_STATUS_UNSPECIFIED
}

func (x *RetrieveTransactionResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RetrieveTransactionResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

var File_serviceprovider_instrument_v1_instrument_proto protoreflect.FileDescriptor

var file_serviceprovider_instrument_v1_instrument_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbd, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x57, 0x0a, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72,
	0x12, 0x5d, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x1a, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x1f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52,
	0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e,
	0x18, 0x32, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x47, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0xe2, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x1e, 0x18, 0x32, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x57, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x22, 0xbd, 0x02, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5c,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xc2, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x1f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x22, 0xf8, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x6d, 0x0a, 0x17,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42,
	0x0a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0xc5, 0x02, 0x0a, 0x18,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x03, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x1f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x1f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48,
	0x00, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x47, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x50, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0xe8, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x03, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x49, 0x4e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x1f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22,
	0xea, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x49, 0x4e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xd1, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x22, 0xd9, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x41, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x42, 0x68, 0x0a, 0x25,
	0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x27, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0xa2,
	0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_serviceprovider_instrument_v1_instrument_proto_rawDescOnce sync.Once
	file_serviceprovider_instrument_v1_instrument_proto_rawDescData = file_serviceprovider_instrument_v1_instrument_proto_rawDesc
)

func file_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP() []byte {
	file_serviceprovider_instrument_v1_instrument_proto_rawDescOnce.Do(func() {
		file_serviceprovider_instrument_v1_instrument_proto_rawDescData = protoimpl.X.CompressGZIP(file_serviceprovider_instrument_v1_instrument_proto_rawDescData)
	})
	return file_serviceprovider_instrument_v1_instrument_proto_rawDescData
}

var file_serviceprovider_instrument_v1_instrument_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_serviceprovider_instrument_v1_instrument_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_serviceprovider_instrument_v1_instrument_proto_goTypes = []interface{}{
	(RegisterInstrumentResponse_Status)(0),  // 0: serviceprovider.instrument.v1.RegisterInstrumentResponse.Status
	(GetInstrumentResponse_Status)(0),       // 1: serviceprovider.instrument.v1.GetInstrumentResponse.Status
	(RemoveInstrumentResponse_Status)(0),    // 2: serviceprovider.instrument.v1.RemoveInstrumentResponse.Status
	(SearchInstrumentResponse_Status)(0),    // 3: serviceprovider.instrument.v1.SearchInstrumentResponse.Status
	(SetPINResponse_Status)(0),              // 4: serviceprovider.instrument.v1.SetPINResponse.Status
	(ResetPINResponse_Status)(0),            // 5: serviceprovider.instrument.v1.ResetPINResponse.Status
	(RemovePINResponse_Status)(0),           // 6: serviceprovider.instrument.v1.RemovePINResponse.Status
	(RetrieveTransactionResponse_Status)(0), // 7: serviceprovider.instrument.v1.RetrieveTransactionResponse.Status
	(*RegisterInstrumentRequest)(nil),       // 8: serviceprovider.instrument.v1.RegisterInstrumentRequest
	(*Transaction)(nil),                     // 9: serviceprovider.instrument.v1.Transaction
	(*RegisterInstrumentResponse)(nil),      // 10: serviceprovider.instrument.v1.RegisterInstrumentResponse
	(*GetInstrumentRequest)(nil),            // 11: serviceprovider.instrument.v1.GetInstrumentRequest
	(*Instrument)(nil),                      // 12: serviceprovider.instrument.v1.Instrument
	(*GetInstrumentResponse)(nil),           // 13: serviceprovider.instrument.v1.GetInstrumentResponse
	(*RemoveInstrumentRequest)(nil),         // 14: serviceprovider.instrument.v1.RemoveInstrumentRequest
	(*RemoveInstrumentResponse)(nil),        // 15: serviceprovider.instrument.v1.RemoveInstrumentResponse
	(*SearchInstrumentRequest)(nil),         // 16: serviceprovider.instrument.v1.SearchInstrumentRequest
	(*SearchInstrumentResponse)(nil),        // 17: serviceprovider.instrument.v1.SearchInstrumentResponse
	(*SetPINRequest)(nil),                   // 18: serviceprovider.instrument.v1.SetPINRequest
	(*SetPINResponse)(nil),                  // 19: serviceprovider.instrument.v1.SetPINResponse
	(*ResetPINRequest)(nil),                 // 20: serviceprovider.instrument.v1.ResetPINRequest
	(*ResetPINResponse)(nil),                // 21: serviceprovider.instrument.v1.ResetPINResponse
	(*RemovePINRequest)(nil),                // 22: serviceprovider.instrument.v1.RemovePINRequest
	(*RemovePINResponse)(nil),               // 23: serviceprovider.instrument.v1.RemovePINResponse
	(*RetrieveTransactionRequest)(nil),      // 24: serviceprovider.instrument.v1.RetrieveTransactionRequest
	(*RetrieveTransactionResponse)(nil),     // 25: serviceprovider.instrument.v1.RetrieveTransactionResponse
	(instrumenttypev1.InstrumentType)(0),    // 26: common.enums.instrumenttype.v1.InstrumentType
	(currencyv1.Currency)(0),                // 27: common.enums.currency.v1.Currency
	(*timestamppb.Timestamp)(nil),           // 28: google.protobuf.Timestamp
	(*v1.Error)(nil),                        // 29: common.v1.Error
}
var file_serviceprovider_instrument_v1_instrument_proto_depIdxs = []int32{
	26, // 0: serviceprovider.instrument.v1.RegisterInstrumentRequest.instrument_type:type_name -> common.enums.instrumenttype.v1.InstrumentType
	27, // 1: serviceprovider.instrument.v1.RegisterInstrumentRequest.currency:type_name -> common.enums.currency.v1.Currency
	9,  // 2: serviceprovider.instrument.v1.RegisterInstrumentRequest.settled_transactions:type_name -> serviceprovider.instrument.v1.Transaction
	28, // 3: serviceprovider.instrument.v1.Transaction.created:type_name -> google.protobuf.Timestamp
	0,  // 4: serviceprovider.instrument.v1.RegisterInstrumentResponse.status:type_name -> serviceprovider.instrument.v1.RegisterInstrumentResponse.Status
	29, // 5: serviceprovider.instrument.v1.RegisterInstrumentResponse.error:type_name -> common.v1.Error
	28, // 6: serviceprovider.instrument.v1.Instrument.created:type_name -> google.protobuf.Timestamp
	28, // 7: serviceprovider.instrument.v1.Instrument.updated:type_name -> google.protobuf.Timestamp
	26, // 8: serviceprovider.instrument.v1.Instrument.instrument_type:type_name -> common.enums.instrumenttype.v1.InstrumentType
	27, // 9: serviceprovider.instrument.v1.Instrument.currency:type_name -> common.enums.currency.v1.Currency
	1,  // 10: serviceprovider.instrument.v1.GetInstrumentResponse.status:type_name -> serviceprovider.instrument.v1.GetInstrumentResponse.Status
	29, // 11: serviceprovider.instrument.v1.GetInstrumentResponse.error:type_name -> common.v1.Error
	12, // 12: serviceprovider.instrument.v1.GetInstrumentResponse.instrument:type_name -> serviceprovider.instrument.v1.Instrument
	2,  // 13: serviceprovider.instrument.v1.RemoveInstrumentResponse.status:type_name -> serviceprovider.instrument.v1.RemoveInstrumentResponse.Status
	29, // 14: serviceprovider.instrument.v1.RemoveInstrumentResponse.error:type_name -> common.v1.Error
	3,  // 15: serviceprovider.instrument.v1.SearchInstrumentResponse.status:type_name -> serviceprovider.instrument.v1.SearchInstrumentResponse.Status
	29, // 16: serviceprovider.instrument.v1.SearchInstrumentResponse.error:type_name -> common.v1.Error
	12, // 17: serviceprovider.instrument.v1.SearchInstrumentResponse.instruments:type_name -> serviceprovider.instrument.v1.Instrument
	4,  // 18: serviceprovider.instrument.v1.SetPINResponse.status:type_name -> serviceprovider.instrument.v1.SetPINResponse.Status
	29, // 19: serviceprovider.instrument.v1.SetPINResponse.error:type_name -> common.v1.Error
	5,  // 20: serviceprovider.instrument.v1.ResetPINResponse.status:type_name -> serviceprovider.instrument.v1.ResetPINResponse.Status
	29, // 21: serviceprovider.instrument.v1.ResetPINResponse.error:type_name -> common.v1.Error
	6,  // 22: serviceprovider.instrument.v1.RemovePINResponse.status:type_name -> serviceprovider.instrument.v1.RemovePINResponse.Status
	29, // 23: serviceprovider.instrument.v1.RemovePINResponse.error:type_name -> common.v1.Error
	28, // 24: serviceprovider.instrument.v1.RetrieveTransactionRequest.date_from:type_name -> google.protobuf.Timestamp
	28, // 25: serviceprovider.instrument.v1.RetrieveTransactionRequest.date_to:type_name -> google.protobuf.Timestamp
	7,  // 26: serviceprovider.instrument.v1.RetrieveTransactionResponse.status:type_name -> serviceprovider.instrument.v1.RetrieveTransactionResponse.Status
	29, // 27: serviceprovider.instrument.v1.RetrieveTransactionResponse.error:type_name -> common.v1.Error
	9,  // 28: serviceprovider.instrument.v1.RetrieveTransactionResponse.transactions:type_name -> serviceprovider.instrument.v1.Transaction
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_serviceprovider_instrument_v1_instrument_proto_init() }
func file_serviceprovider_instrument_v1_instrument_proto_init() {
	if File_serviceprovider_instrument_v1_instrument_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPINRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPINResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPINRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPINResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePINRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePINResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceprovider_instrument_v1_instrument_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_serviceprovider_instrument_v1_instrument_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetInstrumentRequest_ServiceProviderInstrumentKey)(nil),
		(*GetInstrumentRequest_ServiceProviderInstrumentRef)(nil),
	}
	file_serviceprovider_instrument_v1_instrument_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RemoveInstrumentRequest_ServiceProviderInstrumentKey)(nil),
		(*RemoveInstrumentRequest_ServiceProviderInstrumentRef)(nil),
	}
	file_serviceprovider_instrument_v1_instrument_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SearchInstrumentRequest_ServiceProviderUserKey)(nil),
	}
	file_serviceprovider_instrument_v1_instrument_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SetPINRequest_ServiceProviderInstrumentKey)(nil),
		(*SetPINRequest_ServiceProviderInstrumentRef)(nil),
	}
	file_serviceprovider_instrument_v1_instrument_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ResetPINRequest_ServiceProviderInstrumentKey)(nil),
		(*ResetPINRequest_ServiceProviderInstrumentRef)(nil),
	}
	file_serviceprovider_instrument_v1_instrument_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*RemovePINRequest_ServiceProviderInstrumentKey)(nil),
		(*RemovePINRequest_ServiceProviderInstrumentRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_serviceprovider_instrument_v1_instrument_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_serviceprovider_instrument_v1_instrument_proto_goTypes,
		DependencyIndexes: file_serviceprovider_instrument_v1_instrument_proto_depIdxs,
		EnumInfos:         file_serviceprovider_instrument_v1_instrument_proto_enumTypes,
		MessageInfos:      file_serviceprovider_instrument_v1_instrument_proto_msgTypes,
	}.Build()
	File_serviceprovider_instrument_v1_instrument_proto = out.File
	file_serviceprovider_instrument_v1_instrument_proto_rawDesc = nil
	file_serviceprovider_instrument_v1_instrument_proto_goTypes = nil
	file_serviceprovider_instrument_v1_instrument_proto_depIdxs = nil
}
