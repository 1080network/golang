// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: serviceprovider/service/v1/service_provider_to_mica_service.proto

package servicev1

import (
	context "context"
	pingv1 "github.com/1080network/golang/serviceprovider/proto/common/pingv1"
	v1 "github.com/1080network/golang/serviceprovider/proto/common/v1"
	instrumentv1 "github.com/1080network/golang/serviceprovider/proto/serviceprovider/instrumentv1"
	paymenttokenv1 "github.com/1080network/golang/serviceprovider/proto/serviceprovider/paymenttokenv1"
	serviceproviderv1 "github.com/1080network/golang/serviceprovider/proto/serviceprovider/serviceproviderv1"
	transactionv1 "github.com/1080network/golang/serviceprovider/proto/serviceprovider/transactionv1"
	userv1 "github.com/1080network/golang/serviceprovider/proto/serviceprovider/userv1"
	valuev1 "github.com/1080network/golang/serviceprovider/proto/serviceprovider/valuev1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceProviderToMicaServiceClient is the client API for ServiceProviderToMicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProviderToMicaServiceClient interface {
	// Retrieves the details of the SP at mica.
	GetServiceProvider(ctx context.Context, in *serviceproviderv1.GetServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.GetServiceProviderResponse, error)
	// Called when the Service Provider wants to register one of their users for mica. Note that this does only the user and not the instrument (account).
	RegisterUser(ctx context.Context, in *userv1.RegisterUserRequest, opts ...grpc.CallOption) (*userv1.RegisterUserResponse, error)
	// Retrieve a user based on it's key.
	GetUser(ctx context.Context, in *userv1.GetUserRequest, opts ...grpc.CallOption) (*userv1.GetUserResponse, error)
	// Update the User demographic data held at mica.
	UpdateUser(ctx context.Context, in *userv1.UpdateUserRequest, opts ...grpc.CallOption) (*userv1.UpdateUserResponse, error)
	// Remove a User from mica. Typically called when a User ends their relationship with the SP.
	RemoveUser(ctx context.Context, in *userv1.RemoveUserRequest, opts ...grpc.CallOption) (*userv1.RemoveUserResponse, error)
	// Searches for Users held at mica..
	SearchUser(ctx context.Context, in *userv1.SearchUserRequest, opts ...grpc.CallOption) (*userv1.SearchUserResponse, error)
	// Called to register a Users instrument (account) for use at mica. This requires a user to already have been registered.
	RegisterInstrument(ctx context.Context, in *instrumentv1.RegisterInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RegisterInstrumentResponse, error)
	// Retrieve an instrument based on it's key.
	GetInstrument(ctx context.Context, in *instrumentv1.GetInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentResponse, error)
	// Remove an instrument (and any SP or Partner Payment Tokens) from mica. This renders any existing Payment Tokens as inoperative.
	RemoveInstrument(ctx context.Context, in *instrumentv1.RemoveInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentResponse, error)
	// Like GetInstrument, can be used to retrieve Instruments based on the criteria in the request.
	SearchInstrument(ctx context.Context, in *instrumentv1.SearchInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentResponse, error)
	SetPIN(ctx context.Context, in *instrumentv1.SetPINRequest, opts ...grpc.CallOption) (*instrumentv1.SetPINResponse, error)
	ResetPIN(ctx context.Context, in *instrumentv1.ResetPINRequest, opts ...grpc.CallOption) (*instrumentv1.ResetPINResponse, error)
	RemovePIN(ctx context.Context, in *instrumentv1.RemovePINRequest, opts ...grpc.CallOption) (*instrumentv1.RemovePINResponse, error)
	// Used to create a payment token that can be given to the SP's users in order to transact at Partners (merhants) that support mica.
	ProvisionServiceProviderPaymentToken(ctx context.Context, in *paymenttokenv1.ProvisionServiceProviderPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ProvisionServiceProviderPaymentTokenResponse, error)
	// Used to remove an existing Payment Token from mica rendering it inoperable.
	RemoveServiceProviderPaymentToken(ctx context.Context, in *paymenttokenv1.RemoveServiceProviderPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemoveServiceProviderPaymentTokenResponse, error)
	// Searches for Payment Tokens by criteria.
	SearchServiceProviderPaymentToken(ctx context.Context, in *paymenttokenv1.SearchServiceProviderPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchServiceProviderPaymentTokenResponse, error)
	SendValue(ctx context.Context, in *valuev1.SendValueRequest, opts ...grpc.CallOption) (*valuev1.SendValueResponse, error)
	SearchTransactionData(ctx context.Context, in *transactionv1.SearchTransactionDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionDataResponse, error)
	SearchTransactionGeographyData(ctx context.Context, in *transactionv1.SearchTransactionGeographyDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionGeographyDataResponse, error)
	SearchTransactionPartnerData(ctx context.Context, in *transactionv1.SearchTransactionPartnerDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionPartnerDataResponse, error)
	// Retrieve a transaction based on it's key.
	GetReceipt(ctx context.Context, in *v1.GetReceiptRequest, opts ...grpc.CallOption) (*v1.GetReceiptResponse, error)
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
}

type serviceProviderToMicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProviderToMicaServiceClient(cc grpc.ClientConnInterface) ServiceProviderToMicaServiceClient {
	return &serviceProviderToMicaServiceClient{cc}
}

func (c *serviceProviderToMicaServiceClient) GetServiceProvider(ctx context.Context, in *serviceproviderv1.GetServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.GetServiceProviderResponse, error) {
	out := new(serviceproviderv1.GetServiceProviderResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/GetServiceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RegisterUser(ctx context.Context, in *userv1.RegisterUserRequest, opts ...grpc.CallOption) (*userv1.RegisterUserResponse, error) {
	out := new(userv1.RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) GetUser(ctx context.Context, in *userv1.GetUserRequest, opts ...grpc.CallOption) (*userv1.GetUserResponse, error) {
	out := new(userv1.GetUserResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) UpdateUser(ctx context.Context, in *userv1.UpdateUserRequest, opts ...grpc.CallOption) (*userv1.UpdateUserResponse, error) {
	out := new(userv1.UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RemoveUser(ctx context.Context, in *userv1.RemoveUserRequest, opts ...grpc.CallOption) (*userv1.RemoveUserResponse, error) {
	out := new(userv1.RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchUser(ctx context.Context, in *userv1.SearchUserRequest, opts ...grpc.CallOption) (*userv1.SearchUserResponse, error) {
	out := new(userv1.SearchUserResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RegisterInstrument(ctx context.Context, in *instrumentv1.RegisterInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RegisterInstrumentResponse, error) {
	out := new(instrumentv1.RegisterInstrumentResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/RegisterInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) GetInstrument(ctx context.Context, in *instrumentv1.GetInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentResponse, error) {
	out := new(instrumentv1.GetInstrumentResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/GetInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RemoveInstrument(ctx context.Context, in *instrumentv1.RemoveInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentResponse, error) {
	out := new(instrumentv1.RemoveInstrumentResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/RemoveInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchInstrument(ctx context.Context, in *instrumentv1.SearchInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentResponse, error) {
	out := new(instrumentv1.SearchInstrumentResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SetPIN(ctx context.Context, in *instrumentv1.SetPINRequest, opts ...grpc.CallOption) (*instrumentv1.SetPINResponse, error) {
	out := new(instrumentv1.SetPINResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/SetPIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) ResetPIN(ctx context.Context, in *instrumentv1.ResetPINRequest, opts ...grpc.CallOption) (*instrumentv1.ResetPINResponse, error) {
	out := new(instrumentv1.ResetPINResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/ResetPIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RemovePIN(ctx context.Context, in *instrumentv1.RemovePINRequest, opts ...grpc.CallOption) (*instrumentv1.RemovePINResponse, error) {
	out := new(instrumentv1.RemovePINResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/RemovePIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) ProvisionServiceProviderPaymentToken(ctx context.Context, in *paymenttokenv1.ProvisionServiceProviderPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ProvisionServiceProviderPaymentTokenResponse, error) {
	out := new(paymenttokenv1.ProvisionServiceProviderPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/ProvisionServiceProviderPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) RemoveServiceProviderPaymentToken(ctx context.Context, in *paymenttokenv1.RemoveServiceProviderPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemoveServiceProviderPaymentTokenResponse, error) {
	out := new(paymenttokenv1.RemoveServiceProviderPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/RemoveServiceProviderPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchServiceProviderPaymentToken(ctx context.Context, in *paymenttokenv1.SearchServiceProviderPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchServiceProviderPaymentTokenResponse, error) {
	out := new(paymenttokenv1.SearchServiceProviderPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchServiceProviderPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SendValue(ctx context.Context, in *valuev1.SendValueRequest, opts ...grpc.CallOption) (*valuev1.SendValueResponse, error) {
	out := new(valuev1.SendValueResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/SendValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchTransactionData(ctx context.Context, in *transactionv1.SearchTransactionDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionDataResponse, error) {
	out := new(transactionv1.SearchTransactionDataResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchTransactionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchTransactionGeographyData(ctx context.Context, in *transactionv1.SearchTransactionGeographyDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionGeographyDataResponse, error) {
	out := new(transactionv1.SearchTransactionGeographyDataResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchTransactionGeographyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) SearchTransactionPartnerData(ctx context.Context, in *transactionv1.SearchTransactionPartnerDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionPartnerDataResponse, error) {
	out := new(transactionv1.SearchTransactionPartnerDataResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchTransactionPartnerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) GetReceipt(ctx context.Context, in *v1.GetReceiptRequest, opts ...grpc.CallOption) (*v1.GetReceiptResponse, error) {
	out := new(v1.GetReceiptResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/GetReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderToMicaServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, "/serviceprovider.service.v1.ServiceProviderToMicaService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProviderToMicaServiceServer is the server API for ServiceProviderToMicaService service.
// All implementations must embed UnimplementedServiceProviderToMicaServiceServer
// for forward compatibility
type ServiceProviderToMicaServiceServer interface {
	// Retrieves the details of the SP at mica.
	GetServiceProvider(context.Context, *serviceproviderv1.GetServiceProviderRequest) (*serviceproviderv1.GetServiceProviderResponse, error)
	// Called when the Service Provider wants to register one of their users for mica. Note that this does only the user and not the instrument (account).
	RegisterUser(context.Context, *userv1.RegisterUserRequest) (*userv1.RegisterUserResponse, error)
	// Retrieve a user based on it's key.
	GetUser(context.Context, *userv1.GetUserRequest) (*userv1.GetUserResponse, error)
	// Update the User demographic data held at mica.
	UpdateUser(context.Context, *userv1.UpdateUserRequest) (*userv1.UpdateUserResponse, error)
	// Remove a User from mica. Typically called when a User ends their relationship with the SP.
	RemoveUser(context.Context, *userv1.RemoveUserRequest) (*userv1.RemoveUserResponse, error)
	// Searches for Users held at mica..
	SearchUser(context.Context, *userv1.SearchUserRequest) (*userv1.SearchUserResponse, error)
	// Called to register a Users instrument (account) for use at mica. This requires a user to already have been registered.
	RegisterInstrument(context.Context, *instrumentv1.RegisterInstrumentRequest) (*instrumentv1.RegisterInstrumentResponse, error)
	// Retrieve an instrument based on it's key.
	GetInstrument(context.Context, *instrumentv1.GetInstrumentRequest) (*instrumentv1.GetInstrumentResponse, error)
	// Remove an instrument (and any SP or Partner Payment Tokens) from mica. This renders any existing Payment Tokens as inoperative.
	RemoveInstrument(context.Context, *instrumentv1.RemoveInstrumentRequest) (*instrumentv1.RemoveInstrumentResponse, error)
	// Like GetInstrument, can be used to retrieve Instruments based on the criteria in the request.
	SearchInstrument(context.Context, *instrumentv1.SearchInstrumentRequest) (*instrumentv1.SearchInstrumentResponse, error)
	SetPIN(context.Context, *instrumentv1.SetPINRequest) (*instrumentv1.SetPINResponse, error)
	ResetPIN(context.Context, *instrumentv1.ResetPINRequest) (*instrumentv1.ResetPINResponse, error)
	RemovePIN(context.Context, *instrumentv1.RemovePINRequest) (*instrumentv1.RemovePINResponse, error)
	// Used to create a payment token that can be given to the SP's users in order to transact at Partners (merhants) that support mica.
	ProvisionServiceProviderPaymentToken(context.Context, *paymenttokenv1.ProvisionServiceProviderPaymentTokenRequest) (*paymenttokenv1.ProvisionServiceProviderPaymentTokenResponse, error)
	// Used to remove an existing Payment Token from mica rendering it inoperable.
	RemoveServiceProviderPaymentToken(context.Context, *paymenttokenv1.RemoveServiceProviderPaymentTokenRequest) (*paymenttokenv1.RemoveServiceProviderPaymentTokenResponse, error)
	// Searches for Payment Tokens by criteria.
	SearchServiceProviderPaymentToken(context.Context, *paymenttokenv1.SearchServiceProviderPaymentTokenRequest) (*paymenttokenv1.SearchServiceProviderPaymentTokenResponse, error)
	SendValue(context.Context, *valuev1.SendValueRequest) (*valuev1.SendValueResponse, error)
	SearchTransactionData(context.Context, *transactionv1.SearchTransactionDataRequest) (*transactionv1.SearchTransactionDataResponse, error)
	SearchTransactionGeographyData(context.Context, *transactionv1.SearchTransactionGeographyDataRequest) (*transactionv1.SearchTransactionGeographyDataResponse, error)
	SearchTransactionPartnerData(context.Context, *transactionv1.SearchTransactionPartnerDataRequest) (*transactionv1.SearchTransactionPartnerDataResponse, error)
	// Retrieve a transaction based on it's key.
	GetReceipt(context.Context, *v1.GetReceiptRequest) (*v1.GetReceiptResponse, error)
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
	mustEmbedUnimplementedServiceProviderToMicaServiceServer()
}

// UnimplementedServiceProviderToMicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProviderToMicaServiceServer struct {
}

func (UnimplementedServiceProviderToMicaServiceServer) GetServiceProvider(context.Context, *serviceproviderv1.GetServiceProviderRequest) (*serviceproviderv1.GetServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceProvider not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RegisterUser(context.Context, *userv1.RegisterUserRequest) (*userv1.RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) GetUser(context.Context, *userv1.GetUserRequest) (*userv1.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) UpdateUser(context.Context, *userv1.UpdateUserRequest) (*userv1.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RemoveUser(context.Context, *userv1.RemoveUserRequest) (*userv1.RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchUser(context.Context, *userv1.SearchUserRequest) (*userv1.SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RegisterInstrument(context.Context, *instrumentv1.RegisterInstrumentRequest) (*instrumentv1.RegisterInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInstrument not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) GetInstrument(context.Context, *instrumentv1.GetInstrumentRequest) (*instrumentv1.GetInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrument not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RemoveInstrument(context.Context, *instrumentv1.RemoveInstrumentRequest) (*instrumentv1.RemoveInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstrument not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchInstrument(context.Context, *instrumentv1.SearchInstrumentRequest) (*instrumentv1.SearchInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInstrument not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SetPIN(context.Context, *instrumentv1.SetPINRequest) (*instrumentv1.SetPINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPIN not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) ResetPIN(context.Context, *instrumentv1.ResetPINRequest) (*instrumentv1.ResetPINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPIN not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RemovePIN(context.Context, *instrumentv1.RemovePINRequest) (*instrumentv1.RemovePINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePIN not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) ProvisionServiceProviderPaymentToken(context.Context, *paymenttokenv1.ProvisionServiceProviderPaymentTokenRequest) (*paymenttokenv1.ProvisionServiceProviderPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionServiceProviderPaymentToken not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) RemoveServiceProviderPaymentToken(context.Context, *paymenttokenv1.RemoveServiceProviderPaymentTokenRequest) (*paymenttokenv1.RemoveServiceProviderPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServiceProviderPaymentToken not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchServiceProviderPaymentToken(context.Context, *paymenttokenv1.SearchServiceProviderPaymentTokenRequest) (*paymenttokenv1.SearchServiceProviderPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServiceProviderPaymentToken not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SendValue(context.Context, *valuev1.SendValueRequest) (*valuev1.SendValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValue not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchTransactionData(context.Context, *transactionv1.SearchTransactionDataRequest) (*transactionv1.SearchTransactionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransactionData not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchTransactionGeographyData(context.Context, *transactionv1.SearchTransactionGeographyDataRequest) (*transactionv1.SearchTransactionGeographyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransactionGeographyData not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) SearchTransactionPartnerData(context.Context, *transactionv1.SearchTransactionPartnerDataRequest) (*transactionv1.SearchTransactionPartnerDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransactionPartnerData not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) GetReceipt(context.Context, *v1.GetReceiptRequest) (*v1.GetReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServiceProviderToMicaServiceServer) mustEmbedUnimplementedServiceProviderToMicaServiceServer() {
}

// UnsafeServiceProviderToMicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProviderToMicaServiceServer will
// result in compilation errors.
type UnsafeServiceProviderToMicaServiceServer interface {
	mustEmbedUnimplementedServiceProviderToMicaServiceServer()
}

func RegisterServiceProviderToMicaServiceServer(s grpc.ServiceRegistrar, srv ServiceProviderToMicaServiceServer) {
	s.RegisterService(&ServiceProviderToMicaService_ServiceDesc, srv)
}

func _ServiceProviderToMicaService_GetServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceproviderv1.GetServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/GetServiceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetServiceProvider(ctx, req.(*serviceproviderv1.GetServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RegisterUser(ctx, req.(*userv1.RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetUser(ctx, req.(*userv1.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).UpdateUser(ctx, req.(*userv1.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RemoveUser(ctx, req.(*userv1.RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchUser(ctx, req.(*userv1.SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RegisterInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RegisterInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RegisterInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/RegisterInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RegisterInstrument(ctx, req.(*instrumentv1.RegisterInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_GetInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.GetInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/GetInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetInstrument(ctx, req.(*instrumentv1.GetInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RemoveInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RemoveInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RemoveInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/RemoveInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RemoveInstrument(ctx, req.(*instrumentv1.RemoveInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.SearchInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchInstrument(ctx, req.(*instrumentv1.SearchInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SetPIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.SetPINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SetPIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/SetPIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SetPIN(ctx, req.(*instrumentv1.SetPINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_ResetPIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.ResetPINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).ResetPIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/ResetPIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).ResetPIN(ctx, req.(*instrumentv1.ResetPINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RemovePIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RemovePINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RemovePIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/RemovePIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RemovePIN(ctx, req.(*instrumentv1.RemovePINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_ProvisionServiceProviderPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.ProvisionServiceProviderPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).ProvisionServiceProviderPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/ProvisionServiceProviderPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).ProvisionServiceProviderPaymentToken(ctx, req.(*paymenttokenv1.ProvisionServiceProviderPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_RemoveServiceProviderPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.RemoveServiceProviderPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).RemoveServiceProviderPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/RemoveServiceProviderPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).RemoveServiceProviderPaymentToken(ctx, req.(*paymenttokenv1.RemoveServiceProviderPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchServiceProviderPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.SearchServiceProviderPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchServiceProviderPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchServiceProviderPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchServiceProviderPaymentToken(ctx, req.(*paymenttokenv1.SearchServiceProviderPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SendValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.SendValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SendValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/SendValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SendValue(ctx, req.(*valuev1.SendValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchTransactionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transactionv1.SearchTransactionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchTransactionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchTransactionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchTransactionData(ctx, req.(*transactionv1.SearchTransactionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchTransactionGeographyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transactionv1.SearchTransactionGeographyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchTransactionGeographyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchTransactionGeographyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchTransactionGeographyData(ctx, req.(*transactionv1.SearchTransactionGeographyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_SearchTransactionPartnerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transactionv1.SearchTransactionPartnerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).SearchTransactionPartnerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/SearchTransactionPartnerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).SearchTransactionPartnerData(ctx, req.(*transactionv1.SearchTransactionPartnerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/GetReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).GetReceipt(ctx, req.(*v1.GetReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderToMicaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderToMicaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceprovider.service.v1.ServiceProviderToMicaService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderToMicaServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProviderToMicaService_ServiceDesc is the grpc.ServiceDesc for ServiceProviderToMicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProviderToMicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serviceprovider.service.v1.ServiceProviderToMicaService",
	HandlerType: (*ServiceProviderToMicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceProvider",
			Handler:    _ServiceProviderToMicaService_GetServiceProvider_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _ServiceProviderToMicaService_RegisterUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ServiceProviderToMicaService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ServiceProviderToMicaService_UpdateUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _ServiceProviderToMicaService_RemoveUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _ServiceProviderToMicaService_SearchUser_Handler,
		},
		{
			MethodName: "RegisterInstrument",
			Handler:    _ServiceProviderToMicaService_RegisterInstrument_Handler,
		},
		{
			MethodName: "GetInstrument",
			Handler:    _ServiceProviderToMicaService_GetInstrument_Handler,
		},
		{
			MethodName: "RemoveInstrument",
			Handler:    _ServiceProviderToMicaService_RemoveInstrument_Handler,
		},
		{
			MethodName: "SearchInstrument",
			Handler:    _ServiceProviderToMicaService_SearchInstrument_Handler,
		},
		{
			MethodName: "SetPIN",
			Handler:    _ServiceProviderToMicaService_SetPIN_Handler,
		},
		{
			MethodName: "ResetPIN",
			Handler:    _ServiceProviderToMicaService_ResetPIN_Handler,
		},
		{
			MethodName: "RemovePIN",
			Handler:    _ServiceProviderToMicaService_RemovePIN_Handler,
		},
		{
			MethodName: "ProvisionServiceProviderPaymentToken",
			Handler:    _ServiceProviderToMicaService_ProvisionServiceProviderPaymentToken_Handler,
		},
		{
			MethodName: "RemoveServiceProviderPaymentToken",
			Handler:    _ServiceProviderToMicaService_RemoveServiceProviderPaymentToken_Handler,
		},
		{
			MethodName: "SearchServiceProviderPaymentToken",
			Handler:    _ServiceProviderToMicaService_SearchServiceProviderPaymentToken_Handler,
		},
		{
			MethodName: "SendValue",
			Handler:    _ServiceProviderToMicaService_SendValue_Handler,
		},
		{
			MethodName: "SearchTransactionData",
			Handler:    _ServiceProviderToMicaService_SearchTransactionData_Handler,
		},
		{
			MethodName: "SearchTransactionGeographyData",
			Handler:    _ServiceProviderToMicaService_SearchTransactionGeographyData_Handler,
		},
		{
			MethodName: "SearchTransactionPartnerData",
			Handler:    _ServiceProviderToMicaService_SearchTransactionPartnerData_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _ServiceProviderToMicaService_GetReceipt_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ServiceProviderToMicaService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serviceprovider/service/v1/service_provider_to_mica_service.proto",
}
