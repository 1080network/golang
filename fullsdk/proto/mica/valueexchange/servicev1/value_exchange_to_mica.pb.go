// Copyright (c) 2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.28.3
// source: mica/valueexchange/service/v1/value_exchange_to_mica.proto

package servicev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	accountv1 "github.com/1080network/golang/fullsdk/proto/mica/valueexchange/accountv1"
	providerv1 "github.com/1080network/golang/fullsdk/proto/mica/valueexchange/providerv1"
	pingv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/pingv1"
	v1 "github.com/1080network/golang/fullsdk/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetValueExchangeProviderResponse_Status int32

const (
	GetValueExchangeProviderResponse_STATUS_UNSPECIFIED GetValueExchangeProviderResponse_Status = 0
	GetValueExchangeProviderResponse_STATUS_SUCCESS     GetValueExchangeProviderResponse_Status = 1
	GetValueExchangeProviderResponse_STATUS_NOT_FOUND   GetValueExchangeProviderResponse_Status = 2
	GetValueExchangeProviderResponse_STATUS_ERROR       GetValueExchangeProviderResponse_Status = 3
)

// Enum value maps for GetValueExchangeProviderResponse_Status.
var (
	GetValueExchangeProviderResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
		3: "STATUS_ERROR",
	}
	GetValueExchangeProviderResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
		"STATUS_ERROR":       3,
	}
)

func (x GetValueExchangeProviderResponse_Status) Enum() *GetValueExchangeProviderResponse_Status {
	p := new(GetValueExchangeProviderResponse_Status)
	*p = x
	return p
}

func (x GetValueExchangeProviderResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetValueExchangeProviderResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[0].Descriptor()
}

func (GetValueExchangeProviderResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[0]
}

func (x GetValueExchangeProviderResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetValueExchangeProviderResponse_Status.Descriptor instead.
func (GetValueExchangeProviderResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{1, 0}
}

type RegisterAccountResponse_Status int32

const (
	RegisterAccountResponse_STATUS_UNSPECIFIED RegisterAccountResponse_Status = 0
	RegisterAccountResponse_STATUS_SUCCESS     RegisterAccountResponse_Status = 1
	RegisterAccountResponse_STATUS_DUPLICATE   RegisterAccountResponse_Status = 2
	RegisterAccountResponse_STATUS_ERROR       RegisterAccountResponse_Status = 3
)

// Enum value maps for RegisterAccountResponse_Status.
var (
	RegisterAccountResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_DUPLICATE",
		3: "STATUS_ERROR",
	}
	RegisterAccountResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_DUPLICATE":   2,
		"STATUS_ERROR":       3,
	}
)

func (x RegisterAccountResponse_Status) Enum() *RegisterAccountResponse_Status {
	p := new(RegisterAccountResponse_Status)
	*p = x
	return p
}

func (x RegisterAccountResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterAccountResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[1].Descriptor()
}

func (RegisterAccountResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[1]
}

func (x RegisterAccountResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterAccountResponse_Status.Descriptor instead.
func (RegisterAccountResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{3, 0}
}

type GetAccountResponse_Status int32

const (
	GetAccountResponse_STATUS_UNSPECIFIED GetAccountResponse_Status = 0
	GetAccountResponse_STATUS_SUCCESS     GetAccountResponse_Status = 1
	GetAccountResponse_STATUS_NOT_FOUND   GetAccountResponse_Status = 2
	GetAccountResponse_STATUS_ERROR       GetAccountResponse_Status = 3
)

// Enum value maps for GetAccountResponse_Status.
var (
	GetAccountResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
		3: "STATUS_ERROR",
	}
	GetAccountResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
		"STATUS_ERROR":       3,
	}
)

func (x GetAccountResponse_Status) Enum() *GetAccountResponse_Status {
	p := new(GetAccountResponse_Status)
	*p = x
	return p
}

func (x GetAccountResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetAccountResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[2].Descriptor()
}

func (GetAccountResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[2]
}

func (x GetAccountResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetAccountResponse_Status.Descriptor instead.
func (GetAccountResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{5, 0}
}

type UpdateBalanceResponse_Status int32

const (
	UpdateBalanceResponse_STATUS_UNSPECIFIED      UpdateBalanceResponse_Status = 0
	UpdateBalanceResponse_STATUS_SUCCESS          UpdateBalanceResponse_Status = 1
	UpdateBalanceResponse_STATUS_NOT_FOUND        UpdateBalanceResponse_Status = 2
	UpdateBalanceResponse_STATUS_VERSION_MISMATCH UpdateBalanceResponse_Status = 3
	UpdateBalanceResponse_STATUS_ERROR            UpdateBalanceResponse_Status = 4
)

// Enum value maps for UpdateBalanceResponse_Status.
var (
	UpdateBalanceResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
		3: "STATUS_VERSION_MISMATCH",
		4: "STATUS_ERROR",
	}
	UpdateBalanceResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":      0,
		"STATUS_SUCCESS":          1,
		"STATUS_NOT_FOUND":        2,
		"STATUS_VERSION_MISMATCH": 3,
		"STATUS_ERROR":            4,
	}
)

func (x UpdateBalanceResponse_Status) Enum() *UpdateBalanceResponse_Status {
	p := new(UpdateBalanceResponse_Status)
	*p = x
	return p
}

func (x UpdateBalanceResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateBalanceResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[3].Descriptor()
}

func (UpdateBalanceResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[3]
}

func (x UpdateBalanceResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateBalanceResponse_Status.Descriptor instead.
func (UpdateBalanceResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{7, 0}
}

type ProvisionAccountLinkingCodeResponse_Status int32

const (
	ProvisionAccountLinkingCodeResponse_STATUS_UNSPECIFIED       ProvisionAccountLinkingCodeResponse_Status = 0
	ProvisionAccountLinkingCodeResponse_STATUS_SUCCESS           ProvisionAccountLinkingCodeResponse_Status = 1
	ProvisionAccountLinkingCodeResponse_STATUS_ACCOUNT_NOT_FOUND ProvisionAccountLinkingCodeResponse_Status = 2
)

// Enum value maps for ProvisionAccountLinkingCodeResponse_Status.
var (
	ProvisionAccountLinkingCodeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ACCOUNT_NOT_FOUND",
	}
	ProvisionAccountLinkingCodeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":       0,
		"STATUS_SUCCESS":           1,
		"STATUS_ACCOUNT_NOT_FOUND": 2,
	}
)

func (x ProvisionAccountLinkingCodeResponse_Status) Enum() *ProvisionAccountLinkingCodeResponse_Status {
	p := new(ProvisionAccountLinkingCodeResponse_Status)
	*p = x
	return p
}

func (x ProvisionAccountLinkingCodeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisionAccountLinkingCodeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[4].Descriptor()
}

func (ProvisionAccountLinkingCodeResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes[4]
}

func (x ProvisionAccountLinkingCodeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisionAccountLinkingCodeResponse_Status.Descriptor instead.
func (ProvisionAccountLinkingCodeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{9, 0}
}

type GetValueExchangeProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *GetValueExchangeProviderRequest) Reset() {
	*x = GetValueExchangeProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueExchangeProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueExchangeProviderRequest) ProtoMessage() {}

func (x *GetValueExchangeProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueExchangeProviderRequest.ProtoReflect.Descriptor instead.
func (*GetValueExchangeProviderRequest) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{0}
}

func (x *GetValueExchangeProviderRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type GetValueExchangeProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   GetValueExchangeProviderResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.valueexchange.service.v1.GetValueExchangeProviderResponse_Status" json:"status,omitempty"`
	Error    *v1.Error                               `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Provider *providerv1.ValueExchangeProvider       `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *GetValueExchangeProviderResponse) Reset() {
	*x = GetValueExchangeProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueExchangeProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueExchangeProviderResponse) ProtoMessage() {}

func (x *GetValueExchangeProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueExchangeProviderResponse.ProtoReflect.Descriptor instead.
func (*GetValueExchangeProviderResponse) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{1}
}

func (x *GetValueExchangeProviderResponse) GetStatus() GetValueExchangeProviderResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetValueExchangeProviderResponse_STATUS_UNSPECIFIED
}

func (x *GetValueExchangeProviderResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetValueExchangeProviderResponse) GetProvider() *providerv1.ValueExchangeProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type RegisterAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant     string `protobuf:"bytes,8,opt,name=tenant,proto3" json:"tenant,omitempty"`
	AccountRef string `protobuf:"bytes,1,opt,name=account_ref,json=accountRef,proto3" json:"account_ref,omitempty"`
	// a user friendly displayable name for the account, it can be the last X digits, etc
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// URN that represents the FIAT urn:value:fiat:usd
	AccountCurrency string `protobuf:"bytes,3,opt,name=account_currency,json=accountCurrency,proto3" json:"account_currency,omitempty"`
	// initial balance available for purchases
	InitialAvailableBalance         string `protobuf:"bytes,4,opt,name=initial_available_balance,json=initialAvailableBalance,proto3" json:"initial_available_balance,omitempty"`
	ReceiptDescription              string `protobuf:"bytes,5,opt,name=receipt_description,json=receiptDescription,proto3" json:"receipt_description,omitempty"`
	InitialValueProviderBalanceUnit string `protobuf:"bytes,7,opt,name=initial_value_provider_balance_unit,json=initialValueProviderBalanceUnit,proto3" json:"initial_value_provider_balance_unit,omitempty"`
	InitialValueProviderBalance     string `protobuf:"bytes,6,opt,name=initial_value_provider_balance,json=initialValueProviderBalance,proto3" json:"initial_value_provider_balance,omitempty"`
}

func (x *RegisterAccountRequest) Reset() {
	*x = RegisterAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAccountRequest) ProtoMessage() {}

func (x *RegisterAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAccountRequest.ProtoReflect.Descriptor instead.
func (*RegisterAccountRequest) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterAccountRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *RegisterAccountRequest) GetAccountRef() string {
	if x != nil {
		return x.AccountRef
	}
	return ""
}

func (x *RegisterAccountRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RegisterAccountRequest) GetAccountCurrency() string {
	if x != nil {
		return x.AccountCurrency
	}
	return ""
}

func (x *RegisterAccountRequest) GetInitialAvailableBalance() string {
	if x != nil {
		return x.InitialAvailableBalance
	}
	return ""
}

func (x *RegisterAccountRequest) GetReceiptDescription() string {
	if x != nil {
		return x.ReceiptDescription
	}
	return ""
}

func (x *RegisterAccountRequest) GetInitialValueProviderBalanceUnit() string {
	if x != nil {
		return x.InitialValueProviderBalanceUnit
	}
	return ""
}

func (x *RegisterAccountRequest) GetInitialValueProviderBalance() string {
	if x != nil {
		return x.InitialValueProviderBalance
	}
	return ""
}

type RegisterAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  RegisterAccountResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.valueexchange.service.v1.RegisterAccountResponse_Status" json:"status,omitempty"`
	Error   *v1.Error                      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Account *accountv1.Account             `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *RegisterAccountResponse) Reset() {
	*x = RegisterAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAccountResponse) ProtoMessage() {}

func (x *RegisterAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAccountResponse.ProtoReflect.Descriptor instead.
func (*RegisterAccountResponse) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterAccountResponse) GetStatus() RegisterAccountResponse_Status {
	if x != nil {
		return x.Status
	}
	return RegisterAccountResponse_STATUS_UNSPECIFIED
}

func (x *RegisterAccountResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RegisterAccountResponse) GetAccount() *accountv1.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Types that are assignable to AccountIdentifier:
	//
	//	*GetAccountRequest_AccountKey
	//	*GetAccountRequest_AccountRef
	AccountIdentifier isGetAccountRequest_AccountIdentifier `protobuf_oneof:"account_identifier"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{4}
}

func (x *GetAccountRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (m *GetAccountRequest) GetAccountIdentifier() isGetAccountRequest_AccountIdentifier {
	if m != nil {
		return m.AccountIdentifier
	}
	return nil
}

func (x *GetAccountRequest) GetAccountKey() string {
	if x, ok := x.GetAccountIdentifier().(*GetAccountRequest_AccountKey); ok {
		return x.AccountKey
	}
	return ""
}

func (x *GetAccountRequest) GetAccountRef() string {
	if x, ok := x.GetAccountIdentifier().(*GetAccountRequest_AccountRef); ok {
		return x.AccountRef
	}
	return ""
}

type isGetAccountRequest_AccountIdentifier interface {
	isGetAccountRequest_AccountIdentifier()
}

type GetAccountRequest_AccountKey struct {
	// The key representing this user in Mica.
	AccountKey string `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3,oneof"`
}

type GetAccountRequest_AccountRef struct {
	AccountRef string `protobuf:"bytes,2,opt,name=account_ref,json=accountRef,proto3,oneof"`
}

func (*GetAccountRequest_AccountKey) isGetAccountRequest_AccountIdentifier() {}

func (*GetAccountRequest_AccountRef) isGetAccountRequest_AccountIdentifier() {}

type GetAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  GetAccountResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.valueexchange.service.v1.GetAccountResponse_Status" json:"status,omitempty"`
	Error   *v1.Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Account *accountv1.Account        `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{5}
}

func (x *GetAccountResponse) GetStatus() GetAccountResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetAccountResponse_STATUS_UNSPECIFIED
}

func (x *GetAccountResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAccountResponse) GetAccount() *accountv1.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type UpdateBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Types that are assignable to AccountIdentifier:
	//
	//	*UpdateBalanceRequest_AccountKey
	//	*UpdateBalanceRequest_AccountRef
	AccountIdentifier isUpdateBalanceRequest_AccountIdentifier `protobuf_oneof:"account_identifier"`
	// the version of the account
	Version int64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// the new balance available
	NewAvailableBalance string `protobuf:"bytes,4,opt,name=new_available_balance,json=newAvailableBalance,proto3" json:"new_available_balance,omitempty"`
	// the new value provider balance in points, currency, bitcoin, whatever
	NewValueProviderBalance string `protobuf:"bytes,5,opt,name=new_value_provider_balance,json=newValueProviderBalance,proto3" json:"new_value_provider_balance,omitempty"`
}

func (x *UpdateBalanceRequest) Reset() {
	*x = UpdateBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceRequest) ProtoMessage() {}

func (x *UpdateBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateBalanceRequest) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateBalanceRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (m *UpdateBalanceRequest) GetAccountIdentifier() isUpdateBalanceRequest_AccountIdentifier {
	if m != nil {
		return m.AccountIdentifier
	}
	return nil
}

func (x *UpdateBalanceRequest) GetAccountKey() string {
	if x, ok := x.GetAccountIdentifier().(*UpdateBalanceRequest_AccountKey); ok {
		return x.AccountKey
	}
	return ""
}

func (x *UpdateBalanceRequest) GetAccountRef() string {
	if x, ok := x.GetAccountIdentifier().(*UpdateBalanceRequest_AccountRef); ok {
		return x.AccountRef
	}
	return ""
}

func (x *UpdateBalanceRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UpdateBalanceRequest) GetNewAvailableBalance() string {
	if x != nil {
		return x.NewAvailableBalance
	}
	return ""
}

func (x *UpdateBalanceRequest) GetNewValueProviderBalance() string {
	if x != nil {
		return x.NewValueProviderBalance
	}
	return ""
}

type isUpdateBalanceRequest_AccountIdentifier interface {
	isUpdateBalanceRequest_AccountIdentifier()
}

type UpdateBalanceRequest_AccountKey struct {
	// The key representing this user in Mica.
	AccountKey string `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3,oneof"`
}

type UpdateBalanceRequest_AccountRef struct {
	AccountRef string `protobuf:"bytes,2,opt,name=account_ref,json=accountRef,proto3,oneof"`
}

func (*UpdateBalanceRequest_AccountKey) isUpdateBalanceRequest_AccountIdentifier() {}

func (*UpdateBalanceRequest_AccountRef) isUpdateBalanceRequest_AccountIdentifier() {}

type UpdateBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  UpdateBalanceResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.valueexchange.service.v1.UpdateBalanceResponse_Status" json:"status,omitempty"`
	Error   *v1.Error                    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Account *accountv1.Account           `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *UpdateBalanceResponse) Reset() {
	*x = UpdateBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceResponse) ProtoMessage() {}

func (x *UpdateBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceResponse.ProtoReflect.Descriptor instead.
func (*UpdateBalanceResponse) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateBalanceResponse) GetStatus() UpdateBalanceResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateBalanceResponse_STATUS_UNSPECIFIED
}

func (x *UpdateBalanceResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateBalanceResponse) GetAccount() *accountv1.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type ProvisionAccountLinkingCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Types that are assignable to AccountIdentifier:
	//
	//	*ProvisionAccountLinkingCodeRequest_AccountRef
	//	*ProvisionAccountLinkingCodeRequest_AccountKey
	AccountIdentifier isProvisionAccountLinkingCodeRequest_AccountIdentifier `protobuf_oneof:"account_identifier"`
	// if there is any information to exchange at linking time this is when it gets passed to the network which will forward
	// to the merchant/acquiring side when the linking has been created
	Claims *v1.InstrumentLinkClaims `protobuf:"bytes,3,opt,name=claims,proto3" json:"claims,omitempty"`
}

func (x *ProvisionAccountLinkingCodeRequest) Reset() {
	*x = ProvisionAccountLinkingCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionAccountLinkingCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionAccountLinkingCodeRequest) ProtoMessage() {}

func (x *ProvisionAccountLinkingCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionAccountLinkingCodeRequest.ProtoReflect.Descriptor instead.
func (*ProvisionAccountLinkingCodeRequest) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{8}
}

func (x *ProvisionAccountLinkingCodeRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (m *ProvisionAccountLinkingCodeRequest) GetAccountIdentifier() isProvisionAccountLinkingCodeRequest_AccountIdentifier {
	if m != nil {
		return m.AccountIdentifier
	}
	return nil
}

func (x *ProvisionAccountLinkingCodeRequest) GetAccountRef() string {
	if x, ok := x.GetAccountIdentifier().(*ProvisionAccountLinkingCodeRequest_AccountRef); ok {
		return x.AccountRef
	}
	return ""
}

func (x *ProvisionAccountLinkingCodeRequest) GetAccountKey() string {
	if x, ok := x.GetAccountIdentifier().(*ProvisionAccountLinkingCodeRequest_AccountKey); ok {
		return x.AccountKey
	}
	return ""
}

func (x *ProvisionAccountLinkingCodeRequest) GetClaims() *v1.InstrumentLinkClaims {
	if x != nil {
		return x.Claims
	}
	return nil
}

type isProvisionAccountLinkingCodeRequest_AccountIdentifier interface {
	isProvisionAccountLinkingCodeRequest_AccountIdentifier()
}

type ProvisionAccountLinkingCodeRequest_AccountRef struct {
	// this is the id in the service provider for the instrument (account, etc) that will be used to transact.
	AccountRef string `protobuf:"bytes,1,opt,name=account_ref,json=accountRef,proto3,oneof"`
}

type ProvisionAccountLinkingCodeRequest_AccountKey struct {
	AccountKey string `protobuf:"bytes,2,opt,name=account_key,json=accountKey,proto3,oneof"`
}

func (*ProvisionAccountLinkingCodeRequest_AccountRef) isProvisionAccountLinkingCodeRequest_AccountIdentifier() {
}

func (*ProvisionAccountLinkingCodeRequest_AccountKey) isProvisionAccountLinkingCodeRequest_AccountIdentifier() {
}

type ProvisionAccountLinkingCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ProvisionAccountLinkingCodeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.valueexchange.service.v1.ProvisionAccountLinkingCodeResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// this is the code that the service provider can display or send to the user to enter on any prompt asking for it
	LinkingCode string `protobuf:"bytes,3,opt,name=linking_code,json=linkingCode,proto3" json:"linking_code,omitempty"`
}

func (x *ProvisionAccountLinkingCodeResponse) Reset() {
	*x = ProvisionAccountLinkingCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionAccountLinkingCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionAccountLinkingCodeResponse) ProtoMessage() {}

func (x *ProvisionAccountLinkingCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionAccountLinkingCodeResponse.ProtoReflect.Descriptor instead.
func (*ProvisionAccountLinkingCodeResponse) Descriptor() ([]byte, []int) {
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP(), []int{9}
}

func (x *ProvisionAccountLinkingCodeResponse) GetStatus() ProvisionAccountLinkingCodeResponse_Status {
	if x != nil {
		return x.Status
	}
	return ProvisionAccountLinkingCodeResponse_STATUS_UNSPECIFIED
}

func (x *ProvisionAccountLinkingCodeResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProvisionAccountLinkingCodeResponse) GetLinkingCode() string {
	if x != nil {
		return x.LinkingCode
	}
	return ""
}

var File_mica_valueexchange_service_v1_value_exchange_to_mica_proto protoreflect.FileDescriptor

var file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x69, 0x63, 0x61,
	0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x5c, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xba, 0x03, 0x0a, 0x16,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x2a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x13, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x90,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x42, 0x14, 0x0a, 0x12, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xb9, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x9e, 0x02,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6e,
	0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xdc,
	0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x40, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x79, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x22, 0xea, 0x01,
	0x0a, 0x22, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x42,
	0x19, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xb2, 0x02, 0x0a, 0x23, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x32,
	0xa0, 0x07, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9d,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x50, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x12,
	0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x68, 0x0a, 0x20, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x1f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x1c, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescOnce sync.Once
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescData = file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDesc
)

func file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescGZIP() []byte {
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescOnce.Do(func() {
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescData)
	})
	return file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDescData
}

var file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_goTypes = []interface{}{
	(GetValueExchangeProviderResponse_Status)(0),    // 0: mica.valueexchange.service.v1.GetValueExchangeProviderResponse.Status
	(RegisterAccountResponse_Status)(0),             // 1: mica.valueexchange.service.v1.RegisterAccountResponse.Status
	(GetAccountResponse_Status)(0),                  // 2: mica.valueexchange.service.v1.GetAccountResponse.Status
	(UpdateBalanceResponse_Status)(0),               // 3: mica.valueexchange.service.v1.UpdateBalanceResponse.Status
	(ProvisionAccountLinkingCodeResponse_Status)(0), // 4: mica.valueexchange.service.v1.ProvisionAccountLinkingCodeResponse.Status
	(*GetValueExchangeProviderRequest)(nil),         // 5: mica.valueexchange.service.v1.GetValueExchangeProviderRequest
	(*GetValueExchangeProviderResponse)(nil),        // 6: mica.valueexchange.service.v1.GetValueExchangeProviderResponse
	(*RegisterAccountRequest)(nil),                  // 7: mica.valueexchange.service.v1.RegisterAccountRequest
	(*RegisterAccountResponse)(nil),                 // 8: mica.valueexchange.service.v1.RegisterAccountResponse
	(*GetAccountRequest)(nil),                       // 9: mica.valueexchange.service.v1.GetAccountRequest
	(*GetAccountResponse)(nil),                      // 10: mica.valueexchange.service.v1.GetAccountResponse
	(*UpdateBalanceRequest)(nil),                    // 11: mica.valueexchange.service.v1.UpdateBalanceRequest
	(*UpdateBalanceResponse)(nil),                   // 12: mica.valueexchange.service.v1.UpdateBalanceResponse
	(*ProvisionAccountLinkingCodeRequest)(nil),      // 13: mica.valueexchange.service.v1.ProvisionAccountLinkingCodeRequest
	(*ProvisionAccountLinkingCodeResponse)(nil),     // 14: mica.valueexchange.service.v1.ProvisionAccountLinkingCodeResponse
	(*v1.Error)(nil),                                // 15: micashared.common.v1.Error
	(*providerv1.ValueExchangeProvider)(nil),        // 16: mica.valueexchange.provider.v1.ValueExchangeProvider
	(*accountv1.Account)(nil),                       // 17: mica.valueexchange.account.v1.Account
	(*v1.InstrumentLinkClaims)(nil),                 // 18: micashared.common.v1.InstrumentLinkClaims
	(*pingv1.PingRequest)(nil),                      // 19: micashared.common.ping.v1.PingRequest
	(*pingv1.PingResponse)(nil),                     // 20: micashared.common.ping.v1.PingResponse
}
var file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_depIdxs = []int32{
	0,  // 0: mica.valueexchange.service.v1.GetValueExchangeProviderResponse.status:type_name -> mica.valueexchange.service.v1.GetValueExchangeProviderResponse.Status
	15, // 1: mica.valueexchange.service.v1.GetValueExchangeProviderResponse.error:type_name -> micashared.common.v1.Error
	16, // 2: mica.valueexchange.service.v1.GetValueExchangeProviderResponse.provider:type_name -> mica.valueexchange.provider.v1.ValueExchangeProvider
	1,  // 3: mica.valueexchange.service.v1.RegisterAccountResponse.status:type_name -> mica.valueexchange.service.v1.RegisterAccountResponse.Status
	15, // 4: mica.valueexchange.service.v1.RegisterAccountResponse.error:type_name -> micashared.common.v1.Error
	17, // 5: mica.valueexchange.service.v1.RegisterAccountResponse.account:type_name -> mica.valueexchange.account.v1.Account
	2,  // 6: mica.valueexchange.service.v1.GetAccountResponse.status:type_name -> mica.valueexchange.service.v1.GetAccountResponse.Status
	15, // 7: mica.valueexchange.service.v1.GetAccountResponse.error:type_name -> micashared.common.v1.Error
	17, // 8: mica.valueexchange.service.v1.GetAccountResponse.account:type_name -> mica.valueexchange.account.v1.Account
	3,  // 9: mica.valueexchange.service.v1.UpdateBalanceResponse.status:type_name -> mica.valueexchange.service.v1.UpdateBalanceResponse.Status
	15, // 10: mica.valueexchange.service.v1.UpdateBalanceResponse.error:type_name -> micashared.common.v1.Error
	17, // 11: mica.valueexchange.service.v1.UpdateBalanceResponse.account:type_name -> mica.valueexchange.account.v1.Account
	18, // 12: mica.valueexchange.service.v1.ProvisionAccountLinkingCodeRequest.claims:type_name -> micashared.common.v1.InstrumentLinkClaims
	4,  // 13: mica.valueexchange.service.v1.ProvisionAccountLinkingCodeResponse.status:type_name -> mica.valueexchange.service.v1.ProvisionAccountLinkingCodeResponse.Status
	15, // 14: mica.valueexchange.service.v1.ProvisionAccountLinkingCodeResponse.error:type_name -> micashared.common.v1.Error
	5,  // 15: mica.valueexchange.service.v1.ValueProviderToMicaService.GetValueExchangeProvider:input_type -> mica.valueexchange.service.v1.GetValueExchangeProviderRequest
	7,  // 16: mica.valueexchange.service.v1.ValueProviderToMicaService.RegisterAccount:input_type -> mica.valueexchange.service.v1.RegisterAccountRequest
	9,  // 17: mica.valueexchange.service.v1.ValueProviderToMicaService.GetAccount:input_type -> mica.valueexchange.service.v1.GetAccountRequest
	11, // 18: mica.valueexchange.service.v1.ValueProviderToMicaService.UpdateBalance:input_type -> mica.valueexchange.service.v1.UpdateBalanceRequest
	13, // 19: mica.valueexchange.service.v1.ValueProviderToMicaService.ProvisionAccountLinkingCode:input_type -> mica.valueexchange.service.v1.ProvisionAccountLinkingCodeRequest
	19, // 20: mica.valueexchange.service.v1.ValueProviderToMicaService.Ping:input_type -> micashared.common.ping.v1.PingRequest
	19, // 21: mica.valueexchange.service.v1.ValueProviderToMicaService.PingWithRoundTrip:input_type -> micashared.common.ping.v1.PingRequest
	6,  // 22: mica.valueexchange.service.v1.ValueProviderToMicaService.GetValueExchangeProvider:output_type -> mica.valueexchange.service.v1.GetValueExchangeProviderResponse
	8,  // 23: mica.valueexchange.service.v1.ValueProviderToMicaService.RegisterAccount:output_type -> mica.valueexchange.service.v1.RegisterAccountResponse
	10, // 24: mica.valueexchange.service.v1.ValueProviderToMicaService.GetAccount:output_type -> mica.valueexchange.service.v1.GetAccountResponse
	12, // 25: mica.valueexchange.service.v1.ValueProviderToMicaService.UpdateBalance:output_type -> mica.valueexchange.service.v1.UpdateBalanceResponse
	14, // 26: mica.valueexchange.service.v1.ValueProviderToMicaService.ProvisionAccountLinkingCode:output_type -> mica.valueexchange.service.v1.ProvisionAccountLinkingCodeResponse
	20, // 27: mica.valueexchange.service.v1.ValueProviderToMicaService.Ping:output_type -> micashared.common.ping.v1.PingResponse
	20, // 28: mica.valueexchange.service.v1.ValueProviderToMicaService.PingWithRoundTrip:output_type -> micashared.common.ping.v1.PingResponse
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_init() }
func file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_init() {
	if File_mica_valueexchange_service_v1_value_exchange_to_mica_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueExchangeProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueExchangeProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionAccountLinkingCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionAccountLinkingCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GetAccountRequest_AccountKey)(nil),
		(*GetAccountRequest_AccountRef)(nil),
	}
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*UpdateBalanceRequest_AccountKey)(nil),
		(*UpdateBalanceRequest_AccountRef)(nil),
	}
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ProvisionAccountLinkingCodeRequest_AccountRef)(nil),
		(*ProvisionAccountLinkingCodeRequest_AccountKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_goTypes,
		DependencyIndexes: file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_depIdxs,
		EnumInfos:         file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_enumTypes,
		MessageInfos:      file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_msgTypes,
	}.Build()
	File_mica_valueexchange_service_v1_value_exchange_to_mica_proto = out.File
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_rawDesc = nil
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_goTypes = nil
	file_mica_valueexchange_service_v1_value_exchange_to_mica_proto_depIdxs = nil
}
