// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.28.3
// source: mica/serviceprovider/service/v1/service_provider_to_mica_wip_service.proto

package servicev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	currencyv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/currencyv1"
	instrumenttypev1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/instrumenttypev1"
	v1 "github.com/1080network/golang/fullsdk/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VisibilityStatus int32

const (
	VisibilityStatus_VISIBILITY_STATUS_UNSPECIFIED  VisibilityStatus = 0
	VisibilityStatus_VISIBILITY_STATUS_DISCOVERABLE VisibilityStatus = 1
	VisibilityStatus_VISIBILITY_STATUS_HIDDEN       VisibilityStatus = 2
)

// Enum value maps for VisibilityStatus.
var (
	VisibilityStatus_name = map[int32]string{
		0: "VISIBILITY_STATUS_UNSPECIFIED",
		1: "VISIBILITY_STATUS_DISCOVERABLE",
		2: "VISIBILITY_STATUS_HIDDEN",
	}
	VisibilityStatus_value = map[string]int32{
		"VISIBILITY_STATUS_UNSPECIFIED":  0,
		"VISIBILITY_STATUS_DISCOVERABLE": 1,
		"VISIBILITY_STATUS_HIDDEN":       2,
	}
)

func (x VisibilityStatus) Enum() *VisibilityStatus {
	p := new(VisibilityStatus)
	*p = x
	return p
}

func (x VisibilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisibilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[0].Descriptor()
}

func (VisibilityStatus) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[0]
}

func (x VisibilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisibilityStatus.Descriptor instead.
func (VisibilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{0}
}

type SetVisibilityStatusResponse_Status int32

const (
	SetVisibilityStatusResponse_STATUS_UNSPECIFIED SetVisibilityStatusResponse_Status = 0
	SetVisibilityStatusResponse_STATUS_SUCCESS     SetVisibilityStatusResponse_Status = 1
	SetVisibilityStatusResponse_STATUS_ERROR       SetVisibilityStatusResponse_Status = 2
	SetVisibilityStatusResponse_STATUS_NOT_FOUND   SetVisibilityStatusResponse_Status = 3
)

// Enum value maps for SetVisibilityStatusResponse_Status.
var (
	SetVisibilityStatusResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	SetVisibilityStatusResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x SetVisibilityStatusResponse_Status) Enum() *SetVisibilityStatusResponse_Status {
	p := new(SetVisibilityStatusResponse_Status)
	*p = x
	return p
}

func (x SetVisibilityStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetVisibilityStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[1].Descriptor()
}

func (SetVisibilityStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[1]
}

func (x SetVisibilityStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetVisibilityStatusResponse_Status.Descriptor instead.
func (SetVisibilityStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{1, 0}
}

type DiscoverUserResponse_Status int32

const (
	DiscoverUserResponse_STATUS_UNSPECIFIED DiscoverUserResponse_Status = 0
	DiscoverUserResponse_STATUS_SUCCESS     DiscoverUserResponse_Status = 1
	DiscoverUserResponse_STATUS_ERROR       DiscoverUserResponse_Status = 2
)

// Enum value maps for DiscoverUserResponse_Status.
var (
	DiscoverUserResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	DiscoverUserResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x DiscoverUserResponse_Status) Enum() *DiscoverUserResponse_Status {
	p := new(DiscoverUserResponse_Status)
	*p = x
	return p
}

func (x DiscoverUserResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoverUserResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[2].Descriptor()
}

func (DiscoverUserResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[2]
}

func (x DiscoverUserResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoverUserResponse_Status.Descriptor instead.
func (DiscoverUserResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetServiceProviderUUEKResponse_Status int32

const (
	GetServiceProviderUUEKResponse_STATUS_UNSPECIFIED          GetServiceProviderUUEKResponse_Status = 0
	GetServiceProviderUUEKResponse_STATUS_SUCCESS              GetServiceProviderUUEKResponse_Status = 1
	GetServiceProviderUUEKResponse_STATUS_ERROR                GetServiceProviderUUEKResponse_Status = 2
	GetServiceProviderUUEKResponse_STATUS_INSTRUMENT_NOT_FOUND GetServiceProviderUUEKResponse_Status = 3
)

// Enum value maps for GetServiceProviderUUEKResponse_Status.
var (
	GetServiceProviderUUEKResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_INSTRUMENT_NOT_FOUND",
	}
	GetServiceProviderUUEKResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":          0,
		"STATUS_SUCCESS":              1,
		"STATUS_ERROR":                2,
		"STATUS_INSTRUMENT_NOT_FOUND": 3,
	}
)

func (x GetServiceProviderUUEKResponse_Status) Enum() *GetServiceProviderUUEKResponse_Status {
	p := new(GetServiceProviderUUEKResponse_Status)
	*p = x
	return p
}

func (x GetServiceProviderUUEKResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetServiceProviderUUEKResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[3].Descriptor()
}

func (GetServiceProviderUUEKResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[3]
}

func (x GetServiceProviderUUEKResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetServiceProviderUUEKResponse_Status.Descriptor instead.
func (GetServiceProviderUUEKResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{5, 0}
}

type SetPINResponse_Status int32

const (
	SetPINResponse_STATUS_UNSPECIFIED     SetPINResponse_Status = 0
	SetPINResponse_STATUS_SUCCESS         SetPINResponse_Status = 1
	SetPINResponse_STATUS_ERROR           SetPINResponse_Status = 2
	SetPINResponse_STATUS_NOT_FOUND       SetPINResponse_Status = 3
	SetPINResponse_STATUS_PIN_ALREADY_SET SetPINResponse_Status = 4
)

// Enum value maps for SetPINResponse_Status.
var (
	SetPINResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_PIN_ALREADY_SET",
	}
	SetPINResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":     0,
		"STATUS_SUCCESS":         1,
		"STATUS_ERROR":           2,
		"STATUS_NOT_FOUND":       3,
		"STATUS_PIN_ALREADY_SET": 4,
	}
)

func (x SetPINResponse_Status) Enum() *SetPINResponse_Status {
	p := new(SetPINResponse_Status)
	*p = x
	return p
}

func (x SetPINResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetPINResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[4].Descriptor()
}

func (SetPINResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[4]
}

func (x SetPINResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetPINResponse_Status.Descriptor instead.
func (SetPINResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{7, 0}
}

type ValidatePINResponse_Status int32

const (
	ValidatePINResponse_STATUS_UNSPECIFIED  ValidatePINResponse_Status = 0
	ValidatePINResponse_STATUS_SUCCESS      ValidatePINResponse_Status = 1
	ValidatePINResponse_STATUS_ERROR        ValidatePINResponse_Status = 2
	ValidatePINResponse_STATUS_NOT_FOUND    ValidatePINResponse_Status = 3
	ValidatePINResponse_STATUS_PIN_MISMATCH ValidatePINResponse_Status = 4
	ValidatePINResponse_STATUS_PIN_LOCKED   ValidatePINResponse_Status = 5
)

// Enum value maps for ValidatePINResponse_Status.
var (
	ValidatePINResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_PIN_MISMATCH",
		5: "STATUS_PIN_LOCKED",
	}
	ValidatePINResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":  0,
		"STATUS_SUCCESS":      1,
		"STATUS_ERROR":        2,
		"STATUS_NOT_FOUND":    3,
		"STATUS_PIN_MISMATCH": 4,
		"STATUS_PIN_LOCKED":   5,
	}
)

func (x ValidatePINResponse_Status) Enum() *ValidatePINResponse_Status {
	p := new(ValidatePINResponse_Status)
	*p = x
	return p
}

func (x ValidatePINResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatePINResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[5].Descriptor()
}

func (ValidatePINResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[5]
}

func (x ValidatePINResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatePINResponse_Status.Descriptor instead.
func (ValidatePINResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{9, 0}
}

type ResetPINResponse_Status int32

const (
	ResetPINResponse_STATUS_UNSPECIFIED  ResetPINResponse_Status = 0
	ResetPINResponse_STATUS_SUCCESS      ResetPINResponse_Status = 1
	ResetPINResponse_STATUS_ERROR        ResetPINResponse_Status = 2
	ResetPINResponse_STATUS_NOT_FOUND    ResetPINResponse_Status = 3
	ResetPINResponse_STATUS_PIN_MISMATCH ResetPINResponse_Status = 4
)

// Enum value maps for ResetPINResponse_Status.
var (
	ResetPINResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_PIN_MISMATCH",
	}
	ResetPINResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":  0,
		"STATUS_SUCCESS":      1,
		"STATUS_ERROR":        2,
		"STATUS_NOT_FOUND":    3,
		"STATUS_PIN_MISMATCH": 4,
	}
)

func (x ResetPINResponse_Status) Enum() *ResetPINResponse_Status {
	p := new(ResetPINResponse_Status)
	*p = x
	return p
}

func (x ResetPINResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResetPINResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[6].Descriptor()
}

func (ResetPINResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[6]
}

func (x ResetPINResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResetPINResponse_Status.Descriptor instead.
func (ResetPINResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{11, 0}
}

type RemovePINResponse_Status int32

const (
	RemovePINResponse_STATUS_UNSPECIFIED RemovePINResponse_Status = 0
	RemovePINResponse_STATUS_SUCCESS     RemovePINResponse_Status = 1
	RemovePINResponse_STATUS_ERROR       RemovePINResponse_Status = 2
	RemovePINResponse_STATUS_NOT_FOUND   RemovePINResponse_Status = 3
)

// Enum value maps for RemovePINResponse_Status.
var (
	RemovePINResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	RemovePINResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x RemovePINResponse_Status) Enum() *RemovePINResponse_Status {
	p := new(RemovePINResponse_Status)
	*p = x
	return p
}

func (x RemovePINResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemovePINResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[7].Descriptor()
}

func (RemovePINResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[7]
}

func (x RemovePINResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemovePINResponse_Status.Descriptor instead.
func (RemovePINResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{13, 0}
}

type GetLinkedAccountBalanceResponse_Status int32

const (
	GetLinkedAccountBalanceResponse_STATUS_UNSPECIFIED GetLinkedAccountBalanceResponse_Status = 0
	GetLinkedAccountBalanceResponse_STATUS_SUCCESS     GetLinkedAccountBalanceResponse_Status = 1
	GetLinkedAccountBalanceResponse_STATUS_NOT_FOUND   GetLinkedAccountBalanceResponse_Status = 2
)

// Enum value maps for GetLinkedAccountBalanceResponse_Status.
var (
	GetLinkedAccountBalanceResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
	}
	GetLinkedAccountBalanceResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
	}
)

func (x GetLinkedAccountBalanceResponse_Status) Enum() *GetLinkedAccountBalanceResponse_Status {
	p := new(GetLinkedAccountBalanceResponse_Status)
	*p = x
	return p
}

func (x GetLinkedAccountBalanceResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLinkedAccountBalanceResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[8].Descriptor()
}

func (GetLinkedAccountBalanceResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[8]
}

func (x GetLinkedAccountBalanceResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLinkedAccountBalanceResponse_Status.Descriptor instead.
func (GetLinkedAccountBalanceResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{16, 0}
}

type UpdateAccountEnableForPurchaseResponse_Status int32

const (
	UpdateAccountEnableForPurchaseResponse_STATUS_UNSPECIFIED UpdateAccountEnableForPurchaseResponse_Status = 0
	UpdateAccountEnableForPurchaseResponse_STATUS_SUCCESS     UpdateAccountEnableForPurchaseResponse_Status = 1
	UpdateAccountEnableForPurchaseResponse_STATUS_NOT_FOUND   UpdateAccountEnableForPurchaseResponse_Status = 2
	UpdateAccountEnableForPurchaseResponse_STATUS_ERROR       UpdateAccountEnableForPurchaseResponse_Status = 3
)

// Enum value maps for UpdateAccountEnableForPurchaseResponse_Status.
var (
	UpdateAccountEnableForPurchaseResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
		3: "STATUS_ERROR",
	}
	UpdateAccountEnableForPurchaseResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
		"STATUS_ERROR":       3,
	}
)

func (x UpdateAccountEnableForPurchaseResponse_Status) Enum() *UpdateAccountEnableForPurchaseResponse_Status {
	p := new(UpdateAccountEnableForPurchaseResponse_Status)
	*p = x
	return p
}

func (x UpdateAccountEnableForPurchaseResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateAccountEnableForPurchaseResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[9].Descriptor()
}

func (UpdateAccountEnableForPurchaseResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes[9]
}

func (x UpdateAccountEnableForPurchaseResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateAccountEnableForPurchaseResponse_Status.Descriptor instead.
func (UpdateAccountEnableForPurchaseResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{18, 0}
}

type SetVisibilityStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceProviderUserKey       string           `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	ServiceProviderInstrumentKey string           `protobuf:"bytes,3,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	VisibilityStatus             VisibilityStatus `protobuf:"varint,7,opt,name=visibility_status,json=visibilityStatus,proto3,enum=mica.serviceprovider.service.v1.VisibilityStatus" json:"visibility_status,omitempty"`
}

func (x *SetVisibilityStatusRequest) Reset() {
	*x = SetVisibilityStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVisibilityStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVisibilityStatusRequest) ProtoMessage() {}

func (x *SetVisibilityStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVisibilityStatusRequest.ProtoReflect.Descriptor instead.
func (*SetVisibilityStatusRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{0}
}

func (x *SetVisibilityStatusRequest) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *SetVisibilityStatusRequest) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *SetVisibilityStatusRequest) GetVisibilityStatus() VisibilityStatus {
	if x != nil {
		return x.VisibilityStatus
	}
	return VisibilityStatus_VISIBILITY_STATUS_UNSPECIFIED
}

type SetVisibilityStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SetVisibilityStatusResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.SetVisibilityStatusResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetVisibilityStatusResponse) Reset() {
	*x = SetVisibilityStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVisibilityStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVisibilityStatusResponse) ProtoMessage() {}

func (x *SetVisibilityStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVisibilityStatusResponse.ProtoReflect.Descriptor instead.
func (*SetVisibilityStatusResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{1}
}

func (x *SetVisibilityStatusResponse) GetStatus() SetVisibilityStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return SetVisibilityStatusResponse_STATUS_UNSPECIFIED
}

func (x *SetVisibilityStatusResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type DiscoverUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDemographic *v1.UserDemographic `protobuf:"bytes,2,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
	Pagination      *v1.Pagination      `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DiscoverUserRequest) Reset() {
	*x = DiscoverUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverUserRequest) ProtoMessage() {}

func (x *DiscoverUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverUserRequest.ProtoReflect.Descriptor instead.
func (*DiscoverUserRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{2}
}

func (x *DiscoverUserRequest) GetUserDemographic() *v1.UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

func (x *DiscoverUserRequest) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DiscoverUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     DiscoverUserResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.DiscoverUserResponse_Status" json:"status,omitempty"`
	Error      *v1.Error                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Users      []*User                     `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	Pagination *v1.Pagination              `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DiscoverUserResponse) Reset() {
	*x = DiscoverUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverUserResponse) ProtoMessage() {}

func (x *DiscoverUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverUserResponse.ProtoReflect.Descriptor instead.
func (*DiscoverUserResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{3}
}

func (x *DiscoverUserResponse) GetStatus() DiscoverUserResponse_Status {
	if x != nil {
		return x.Status
	}
	return DiscoverUserResponse_STATUS_UNSPECIFIED
}

func (x *DiscoverUserResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DiscoverUserResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *DiscoverUserResponse) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetServiceProviderUUEKRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuek string `protobuf:"bytes,4,opt,name=uuek,proto3" json:"uuek,omitempty"`
}

func (x *GetServiceProviderUUEKRequest) Reset() {
	*x = GetServiceProviderUUEKRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderUUEKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderUUEKRequest) ProtoMessage() {}

func (x *GetServiceProviderUUEKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderUUEKRequest.ProtoReflect.Descriptor instead.
func (*GetServiceProviderUUEKRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetServiceProviderUUEKRequest) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

type GetServiceProviderUUEKResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          GetServiceProviderUUEKResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse_Status" json:"status,omitempty"`
	Error           *v1.Error                             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	UserDemographic *v1.UserDemographic                   `protobuf:"bytes,3,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
}

func (x *GetServiceProviderUUEKResponse) Reset() {
	*x = GetServiceProviderUUEKResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProviderUUEKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProviderUUEKResponse) ProtoMessage() {}

func (x *GetServiceProviderUUEKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProviderUUEKResponse.ProtoReflect.Descriptor instead.
func (*GetServiceProviderUUEKResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetServiceProviderUUEKResponse) GetStatus() GetServiceProviderUUEKResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetServiceProviderUUEKResponse_STATUS_UNSPECIFIED
}

func (x *GetServiceProviderUUEKResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetServiceProviderUUEKResponse) GetUserDemographic() *v1.UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

type SetPINRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*SetPINRequest_ServiceProviderUserKey
	//	*SetPINRequest_ServiceProviderUserRef
	UserIdentifier isSetPINRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
	Pin            string                         `protobuf:"bytes,3,opt,name=pin,proto3" json:"pin,omitempty"` // @gotags: mask:"security"
}

func (x *SetPINRequest) Reset() {
	*x = SetPINRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPINRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPINRequest) ProtoMessage() {}

func (x *SetPINRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPINRequest.ProtoReflect.Descriptor instead.
func (*SetPINRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{6}
}

func (m *SetPINRequest) GetUserIdentifier() isSetPINRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *SetPINRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*SetPINRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *SetPINRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*SetPINRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *SetPINRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type isSetPINRequest_UserIdentifier interface {
	isSetPINRequest_UserIdentifier()
}

type SetPINRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type SetPINRequest_ServiceProviderUserRef struct {
	// Primary key on the external system.
	ServiceProviderUserRef string `protobuf:"bytes,2,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*SetPINRequest_ServiceProviderUserKey) isSetPINRequest_UserIdentifier() {}

func (*SetPINRequest_ServiceProviderUserRef) isSetPINRequest_UserIdentifier() {}

type SetPINResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SetPINResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.SetPINResponse_Status" json:"status,omitempty"`
	Error  *v1.Error             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetPINResponse) Reset() {
	*x = SetPINResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPINResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPINResponse) ProtoMessage() {}

func (x *SetPINResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPINResponse.ProtoReflect.Descriptor instead.
func (*SetPINResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{7}
}

func (x *SetPINResponse) GetStatus() SetPINResponse_Status {
	if x != nil {
		return x.Status
	}
	return SetPINResponse_STATUS_UNSPECIFIED
}

func (x *SetPINResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ValidatePINRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*ValidatePINRequest_ServiceProviderUserKey
	//	*ValidatePINRequest_ServiceProviderUserRef
	UserIdentifier isValidatePINRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
	Pin            string                              `protobuf:"bytes,3,opt,name=pin,proto3" json:"pin,omitempty"` // @gotags: mask:"security"
}

func (x *ValidatePINRequest) Reset() {
	*x = ValidatePINRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePINRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePINRequest) ProtoMessage() {}

func (x *ValidatePINRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePINRequest.ProtoReflect.Descriptor instead.
func (*ValidatePINRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{8}
}

func (m *ValidatePINRequest) GetUserIdentifier() isValidatePINRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *ValidatePINRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*ValidatePINRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *ValidatePINRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*ValidatePINRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *ValidatePINRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type isValidatePINRequest_UserIdentifier interface {
	isValidatePINRequest_UserIdentifier()
}

type ValidatePINRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type ValidatePINRequest_ServiceProviderUserRef struct {
	// Primary key on the external system.
	ServiceProviderUserRef string `protobuf:"bytes,2,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*ValidatePINRequest_ServiceProviderUserKey) isValidatePINRequest_UserIdentifier() {}

func (*ValidatePINRequest_ServiceProviderUserRef) isValidatePINRequest_UserIdentifier() {}

type ValidatePINResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ValidatePINResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.ValidatePINResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ValidatePINResponse) Reset() {
	*x = ValidatePINResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePINResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePINResponse) ProtoMessage() {}

func (x *ValidatePINResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePINResponse.ProtoReflect.Descriptor instead.
func (*ValidatePINResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{9}
}

func (x *ValidatePINResponse) GetStatus() ValidatePINResponse_Status {
	if x != nil {
		return x.Status
	}
	return ValidatePINResponse_STATUS_UNSPECIFIED
}

func (x *ValidatePINResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ResetPINRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*ResetPINRequest_ServiceProviderUserKey
	//	*ResetPINRequest_ServiceProviderUserRef
	UserIdentifier isResetPINRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
	OldPin         string                           `protobuf:"bytes,3,opt,name=old_pin,json=oldPin,proto3" json:"old_pin,omitempty"` // @gotags: mask:"security"
	NewPin         string                           `protobuf:"bytes,4,opt,name=new_pin,json=newPin,proto3" json:"new_pin,omitempty"` // @gotags: mask:"security"
}

func (x *ResetPINRequest) Reset() {
	*x = ResetPINRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPINRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPINRequest) ProtoMessage() {}

func (x *ResetPINRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPINRequest.ProtoReflect.Descriptor instead.
func (*ResetPINRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{10}
}

func (m *ResetPINRequest) GetUserIdentifier() isResetPINRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *ResetPINRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*ResetPINRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *ResetPINRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*ResetPINRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *ResetPINRequest) GetOldPin() string {
	if x != nil {
		return x.OldPin
	}
	return ""
}

func (x *ResetPINRequest) GetNewPin() string {
	if x != nil {
		return x.NewPin
	}
	return ""
}

type isResetPINRequest_UserIdentifier interface {
	isResetPINRequest_UserIdentifier()
}

type ResetPINRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type ResetPINRequest_ServiceProviderUserRef struct {
	// Primary key on the external system.
	ServiceProviderUserRef string `protobuf:"bytes,2,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*ResetPINRequest_ServiceProviderUserKey) isResetPINRequest_UserIdentifier() {}

func (*ResetPINRequest_ServiceProviderUserRef) isResetPINRequest_UserIdentifier() {}

type ResetPINResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ResetPINResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.ResetPINResponse_Status" json:"status,omitempty"`
	Error  *v1.Error               `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResetPINResponse) Reset() {
	*x = ResetPINResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPINResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPINResponse) ProtoMessage() {}

func (x *ResetPINResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPINResponse.ProtoReflect.Descriptor instead.
func (*ResetPINResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{11}
}

func (x *ResetPINResponse) GetStatus() ResetPINResponse_Status {
	if x != nil {
		return x.Status
	}
	return ResetPINResponse_STATUS_UNSPECIFIED
}

func (x *ResetPINResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RemovePINRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*RemovePINRequest_ServiceProviderUserKey
	//	*RemovePINRequest_ServiceProviderUserRef
	UserIdentifier isRemovePINRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
}

func (x *RemovePINRequest) Reset() {
	*x = RemovePINRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePINRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePINRequest) ProtoMessage() {}

func (x *RemovePINRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePINRequest.ProtoReflect.Descriptor instead.
func (*RemovePINRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{12}
}

func (m *RemovePINRequest) GetUserIdentifier() isRemovePINRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *RemovePINRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*RemovePINRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *RemovePINRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*RemovePINRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

type isRemovePINRequest_UserIdentifier interface {
	isRemovePINRequest_UserIdentifier()
}

type RemovePINRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type RemovePINRequest_ServiceProviderUserRef struct {
	// Primary key on the external system.
	ServiceProviderUserRef string `protobuf:"bytes,2,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*RemovePINRequest_ServiceProviderUserKey) isRemovePINRequest_UserIdentifier() {}

func (*RemovePINRequest_ServiceProviderUserRef) isRemovePINRequest_UserIdentifier() {}

type RemovePINResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemovePINResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.RemovePINResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RemovePINResponse) Reset() {
	*x = RemovePINResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePINResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePINResponse) ProtoMessage() {}

func (x *RemovePINResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePINResponse.ProtoReflect.Descriptor instead.
func (*RemovePINResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{13}
}

func (x *RemovePINResponse) GetStatus() RemovePINResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemovePINResponse_STATUS_UNSPECIFIED
}

func (x *RemovePINResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceProviderUserKey string                          `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	UserDemographic        *v1.UserDemographic             `protobuf:"bytes,2,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
	ServiceProviderName    string                          `protobuf:"bytes,3,opt,name=service_provider_name,json=serviceProviderName,proto3" json:"service_provider_name,omitempty"`
	InstrumentType         instrumenttypev1.InstrumentType `protobuf:"varint,4,opt,name=instrument_type,json=instrumentType,proto3,enum=micashared.common.enums.instrumenttype.v1.InstrumentType" json:"instrument_type,omitempty"`
	// The 3-letter currency code defined in ISO 4217.
	Currency currencyv1.Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Last 4 digits of this instrument.
	Nickname string `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Uuek     string `protobuf:"bytes,7,opt,name=uuek,proto3" json:"uuek,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{14}
}

func (x *User) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *User) GetUserDemographic() *v1.UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

func (x *User) GetServiceProviderName() string {
	if x != nil {
		return x.ServiceProviderName
	}
	return ""
}

func (x *User) GetInstrumentType() instrumenttypev1.InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return instrumenttypev1.InstrumentType(0)
}

func (x *User) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

type GetLinkedAccountBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkKey string `protobuf:"bytes,1,opt,name=link_key,json=linkKey,proto3" json:"link_key,omitempty"`
}

func (x *GetLinkedAccountBalanceRequest) Reset() {
	*x = GetLinkedAccountBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinkedAccountBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkedAccountBalanceRequest) ProtoMessage() {}

func (x *GetLinkedAccountBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkedAccountBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetLinkedAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetLinkedAccountBalanceRequest) GetLinkKey() string {
	if x != nil {
		return x.LinkKey
	}
	return ""
}

type GetLinkedAccountBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetLinkedAccountBalanceResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.GetLinkedAccountBalanceResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// URN that represents the FIAT urn:value:fiat:usd
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// the amount of money available in a given currency for purchases
	AvailableBalance string `protobuf:"bytes,4,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	// The unit of the value_provider_balance. Provided for reference only.
	ValueProviderBalanceUnit string `protobuf:"bytes,5,opt,name=value_provider_balance_unit,json=valueProviderBalanceUnit,proto3" json:"value_provider_balance_unit,omitempty"`
	// the amount of value, in given unit, held for this account by the provider. Provided for reference only.
	ValueProviderBalance  string `protobuf:"bytes,6,opt,name=value_provider_balance,json=valueProviderBalance,proto3" json:"value_provider_balance,omitempty"`
	EnableForPurchaseFlag bool   `protobuf:"varint,7,opt,name=enable_for_purchase_flag,json=enableForPurchaseFlag,proto3" json:"enable_for_purchase_flag,omitempty"`
}

func (x *GetLinkedAccountBalanceResponse) Reset() {
	*x = GetLinkedAccountBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinkedAccountBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkedAccountBalanceResponse) ProtoMessage() {}

func (x *GetLinkedAccountBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkedAccountBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetLinkedAccountBalanceResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetLinkedAccountBalanceResponse) GetStatus() GetLinkedAccountBalanceResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetLinkedAccountBalanceResponse_STATUS_UNSPECIFIED
}

func (x *GetLinkedAccountBalanceResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLinkedAccountBalanceResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetLinkedAccountBalanceResponse) GetAvailableBalance() string {
	if x != nil {
		return x.AvailableBalance
	}
	return ""
}

func (x *GetLinkedAccountBalanceResponse) GetValueProviderBalanceUnit() string {
	if x != nil {
		return x.ValueProviderBalanceUnit
	}
	return ""
}

func (x *GetLinkedAccountBalanceResponse) GetValueProviderBalance() string {
	if x != nil {
		return x.ValueProviderBalance
	}
	return ""
}

func (x *GetLinkedAccountBalanceResponse) GetEnableForPurchaseFlag() bool {
	if x != nil {
		return x.EnableForPurchaseFlag
	}
	return false
}

type UpdateAccountEnableForPurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkKey               string `protobuf:"bytes,1,opt,name=link_key,json=linkKey,proto3" json:"link_key,omitempty"`
	EnableForPurchaseFlag bool   `protobuf:"varint,2,opt,name=enable_for_purchase_flag,json=enableForPurchaseFlag,proto3" json:"enable_for_purchase_flag,omitempty"`
}

func (x *UpdateAccountEnableForPurchaseRequest) Reset() {
	*x = UpdateAccountEnableForPurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountEnableForPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountEnableForPurchaseRequest) ProtoMessage() {}

func (x *UpdateAccountEnableForPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountEnableForPurchaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountEnableForPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateAccountEnableForPurchaseRequest) GetLinkKey() string {
	if x != nil {
		return x.LinkKey
	}
	return ""
}

func (x *UpdateAccountEnableForPurchaseRequest) GetEnableForPurchaseFlag() bool {
	if x != nil {
		return x.EnableForPurchaseFlag
	}
	return false
}

type UpdateAccountEnableForPurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UpdateAccountEnableForPurchaseResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateAccountEnableForPurchaseResponse) Reset() {
	*x = UpdateAccountEnableForPurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountEnableForPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountEnableForPurchaseResponse) ProtoMessage() {}

func (x *UpdateAccountEnableForPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountEnableForPurchaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateAccountEnableForPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateAccountEnableForPurchaseResponse) GetStatus() UpdateAccountEnableForPurchaseResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateAccountEnableForPurchaseResponse_STATUS_UNSPECIFIED
}

func (x *UpdateAccountEnableForPurchaseResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto protoreflect.FileDescriptor

var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x61, 0x5f, 0x77, 0x69, 0x70, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x32, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3f, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e,
	0x18, 0x32, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x1f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x11,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x02, 0x0a,
	0x1b, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22,
	0x33, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x65, 0x6b, 0x22, 0xee, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0x67, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x49, 0x4e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x16, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x42, 0x16, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x8d, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x78, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x49,
	0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x22,
	0xcc, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x49, 0x4e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x44,
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x42, 0x16, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xac,
	0x02, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x49, 0x4e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8c,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x22, 0xe9, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48,
	0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x50, 0x69,
	0x6e, 0x42, 0x16, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x75, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x5f,
	0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x22, 0xb8, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x16, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22,
	0xb1, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x50,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x65, 0x6b, 0x22, 0x3b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x4b, 0x65, 0x79,
	0x22, 0xf8, 0x03, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x7b, 0x0a, 0x25, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x4b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xa1, 0x02, 0x0a, 0x26, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x10,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x1d, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x53, 0x49, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x49, 0x44,
	0x44, 0x45, 0x4e, 0x10, 0x02, 0x32, 0xfc, 0x09, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x57,
	0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45, 0x4b, 0x12, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x55, 0x45,
	0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x06, 0x53,
	0x65, 0x74, 0x50, 0x49, 0x4e, 0x12, 0x2e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x49, 0x4e, 0x12, 0x33, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x49, 0x4e,
	0x12, 0x30, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x49, 0x4e, 0x12, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x49, 0x4e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb3,
	0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x71, 0x0a, 0x22, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x24, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x4d, 0x69, 0x63,
	0x61, 0x57, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x1e, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31,
	0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescOnce sync.Once
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescData = file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDesc
)

func file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescGZIP() []byte {
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescOnce.Do(func() {
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescData)
	})
	return file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDescData
}

var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_goTypes = []interface{}{
	(VisibilityStatus)(0),                              // 0: mica.serviceprovider.service.v1.VisibilityStatus
	(SetVisibilityStatusResponse_Status)(0),            // 1: mica.serviceprovider.service.v1.SetVisibilityStatusResponse.Status
	(DiscoverUserResponse_Status)(0),                   // 2: mica.serviceprovider.service.v1.DiscoverUserResponse.Status
	(GetServiceProviderUUEKResponse_Status)(0),         // 3: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.Status
	(SetPINResponse_Status)(0),                         // 4: mica.serviceprovider.service.v1.SetPINResponse.Status
	(ValidatePINResponse_Status)(0),                    // 5: mica.serviceprovider.service.v1.ValidatePINResponse.Status
	(ResetPINResponse_Status)(0),                       // 6: mica.serviceprovider.service.v1.ResetPINResponse.Status
	(RemovePINResponse_Status)(0),                      // 7: mica.serviceprovider.service.v1.RemovePINResponse.Status
	(GetLinkedAccountBalanceResponse_Status)(0),        // 8: mica.serviceprovider.service.v1.GetLinkedAccountBalanceResponse.Status
	(UpdateAccountEnableForPurchaseResponse_Status)(0), // 9: mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseResponse.Status
	(*SetVisibilityStatusRequest)(nil),                 // 10: mica.serviceprovider.service.v1.SetVisibilityStatusRequest
	(*SetVisibilityStatusResponse)(nil),                // 11: mica.serviceprovider.service.v1.SetVisibilityStatusResponse
	(*DiscoverUserRequest)(nil),                        // 12: mica.serviceprovider.service.v1.DiscoverUserRequest
	(*DiscoverUserResponse)(nil),                       // 13: mica.serviceprovider.service.v1.DiscoverUserResponse
	(*GetServiceProviderUUEKRequest)(nil),              // 14: mica.serviceprovider.service.v1.GetServiceProviderUUEKRequest
	(*GetServiceProviderUUEKResponse)(nil),             // 15: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse
	(*SetPINRequest)(nil),                              // 16: mica.serviceprovider.service.v1.SetPINRequest
	(*SetPINResponse)(nil),                             // 17: mica.serviceprovider.service.v1.SetPINResponse
	(*ValidatePINRequest)(nil),                         // 18: mica.serviceprovider.service.v1.ValidatePINRequest
	(*ValidatePINResponse)(nil),                        // 19: mica.serviceprovider.service.v1.ValidatePINResponse
	(*ResetPINRequest)(nil),                            // 20: mica.serviceprovider.service.v1.ResetPINRequest
	(*ResetPINResponse)(nil),                           // 21: mica.serviceprovider.service.v1.ResetPINResponse
	(*RemovePINRequest)(nil),                           // 22: mica.serviceprovider.service.v1.RemovePINRequest
	(*RemovePINResponse)(nil),                          // 23: mica.serviceprovider.service.v1.RemovePINResponse
	(*User)(nil),                                       // 24: mica.serviceprovider.service.v1.User
	(*GetLinkedAccountBalanceRequest)(nil),             // 25: mica.serviceprovider.service.v1.GetLinkedAccountBalanceRequest
	(*GetLinkedAccountBalanceResponse)(nil),            // 26: mica.serviceprovider.service.v1.GetLinkedAccountBalanceResponse
	(*UpdateAccountEnableForPurchaseRequest)(nil),      // 27: mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseRequest
	(*UpdateAccountEnableForPurchaseResponse)(nil),     // 28: mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseResponse
	(*v1.Error)(nil),                                   // 29: micashared.common.v1.Error
	(*v1.UserDemographic)(nil),                         // 30: micashared.common.v1.UserDemographic
	(*v1.Pagination)(nil),                              // 31: micashared.common.v1.Pagination
	(instrumenttypev1.InstrumentType)(0),               // 32: micashared.common.enums.instrumenttype.v1.InstrumentType
	(currencyv1.Currency)(0),                           // 33: micashared.common.enums.currency.v1.Currency
}
var file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_depIdxs = []int32{
	0,  // 0: mica.serviceprovider.service.v1.SetVisibilityStatusRequest.visibility_status:type_name -> mica.serviceprovider.service.v1.VisibilityStatus
	1,  // 1: mica.serviceprovider.service.v1.SetVisibilityStatusResponse.status:type_name -> mica.serviceprovider.service.v1.SetVisibilityStatusResponse.Status
	29, // 2: mica.serviceprovider.service.v1.SetVisibilityStatusResponse.error:type_name -> micashared.common.v1.Error
	30, // 3: mica.serviceprovider.service.v1.DiscoverUserRequest.user_demographic:type_name -> micashared.common.v1.UserDemographic
	31, // 4: mica.serviceprovider.service.v1.DiscoverUserRequest.pagination:type_name -> micashared.common.v1.Pagination
	2,  // 5: mica.serviceprovider.service.v1.DiscoverUserResponse.status:type_name -> mica.serviceprovider.service.v1.DiscoverUserResponse.Status
	29, // 6: mica.serviceprovider.service.v1.DiscoverUserResponse.error:type_name -> micashared.common.v1.Error
	24, // 7: mica.serviceprovider.service.v1.DiscoverUserResponse.users:type_name -> mica.serviceprovider.service.v1.User
	31, // 8: mica.serviceprovider.service.v1.DiscoverUserResponse.pagination:type_name -> micashared.common.v1.Pagination
	3,  // 9: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.status:type_name -> mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.Status
	29, // 10: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.error:type_name -> micashared.common.v1.Error
	30, // 11: mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse.user_demographic:type_name -> micashared.common.v1.UserDemographic
	4,  // 12: mica.serviceprovider.service.v1.SetPINResponse.status:type_name -> mica.serviceprovider.service.v1.SetPINResponse.Status
	29, // 13: mica.serviceprovider.service.v1.SetPINResponse.error:type_name -> micashared.common.v1.Error
	5,  // 14: mica.serviceprovider.service.v1.ValidatePINResponse.status:type_name -> mica.serviceprovider.service.v1.ValidatePINResponse.Status
	29, // 15: mica.serviceprovider.service.v1.ValidatePINResponse.error:type_name -> micashared.common.v1.Error
	6,  // 16: mica.serviceprovider.service.v1.ResetPINResponse.status:type_name -> mica.serviceprovider.service.v1.ResetPINResponse.Status
	29, // 17: mica.serviceprovider.service.v1.ResetPINResponse.error:type_name -> micashared.common.v1.Error
	7,  // 18: mica.serviceprovider.service.v1.RemovePINResponse.status:type_name -> mica.serviceprovider.service.v1.RemovePINResponse.Status
	29, // 19: mica.serviceprovider.service.v1.RemovePINResponse.error:type_name -> micashared.common.v1.Error
	30, // 20: mica.serviceprovider.service.v1.User.user_demographic:type_name -> micashared.common.v1.UserDemographic
	32, // 21: mica.serviceprovider.service.v1.User.instrument_type:type_name -> micashared.common.enums.instrumenttype.v1.InstrumentType
	33, // 22: mica.serviceprovider.service.v1.User.currency:type_name -> micashared.common.enums.currency.v1.Currency
	8,  // 23: mica.serviceprovider.service.v1.GetLinkedAccountBalanceResponse.status:type_name -> mica.serviceprovider.service.v1.GetLinkedAccountBalanceResponse.Status
	29, // 24: mica.serviceprovider.service.v1.GetLinkedAccountBalanceResponse.error:type_name -> micashared.common.v1.Error
	9,  // 25: mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseResponse.status:type_name -> mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseResponse.Status
	29, // 26: mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseResponse.error:type_name -> micashared.common.v1.Error
	10, // 27: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.SetVisibilityStatus:input_type -> mica.serviceprovider.service.v1.SetVisibilityStatusRequest
	12, // 28: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.DiscoverUser:input_type -> mica.serviceprovider.service.v1.DiscoverUserRequest
	14, // 29: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.GetServiceProviderUUEK:input_type -> mica.serviceprovider.service.v1.GetServiceProviderUUEKRequest
	16, // 30: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.SetPIN:input_type -> mica.serviceprovider.service.v1.SetPINRequest
	18, // 31: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.ValidatePIN:input_type -> mica.serviceprovider.service.v1.ValidatePINRequest
	20, // 32: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.ResetPIN:input_type -> mica.serviceprovider.service.v1.ResetPINRequest
	22, // 33: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.RemovePIN:input_type -> mica.serviceprovider.service.v1.RemovePINRequest
	25, // 34: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.GetLinkedAccountBalance:input_type -> mica.serviceprovider.service.v1.GetLinkedAccountBalanceRequest
	27, // 35: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.UpdateAccountEnableForPurchase:input_type -> mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseRequest
	11, // 36: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.SetVisibilityStatus:output_type -> mica.serviceprovider.service.v1.SetVisibilityStatusResponse
	13, // 37: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.DiscoverUser:output_type -> mica.serviceprovider.service.v1.DiscoverUserResponse
	15, // 38: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.GetServiceProviderUUEK:output_type -> mica.serviceprovider.service.v1.GetServiceProviderUUEKResponse
	17, // 39: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.SetPIN:output_type -> mica.serviceprovider.service.v1.SetPINResponse
	19, // 40: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.ValidatePIN:output_type -> mica.serviceprovider.service.v1.ValidatePINResponse
	21, // 41: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.ResetPIN:output_type -> mica.serviceprovider.service.v1.ResetPINResponse
	23, // 42: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.RemovePIN:output_type -> mica.serviceprovider.service.v1.RemovePINResponse
	26, // 43: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.GetLinkedAccountBalance:output_type -> mica.serviceprovider.service.v1.GetLinkedAccountBalanceResponse
	28, // 44: mica.serviceprovider.service.v1.ServiceProviderToMicaWIPService.UpdateAccountEnableForPurchase:output_type -> mica.serviceprovider.service.v1.UpdateAccountEnableForPurchaseResponse
	36, // [36:45] is the sub-list for method output_type
	27, // [27:36] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_init() }
func file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_init() {
	if File_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVisibilityStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVisibilityStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderUUEKRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProviderUUEKResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPINRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPINResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePINRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePINResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPINRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPINResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePINRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePINResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinkedAccountBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinkedAccountBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountEnableForPurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountEnableForPurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SetPINRequest_ServiceProviderUserKey)(nil),
		(*SetPINRequest_ServiceProviderUserRef)(nil),
	}
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ValidatePINRequest_ServiceProviderUserKey)(nil),
		(*ValidatePINRequest_ServiceProviderUserRef)(nil),
	}
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ResetPINRequest_ServiceProviderUserKey)(nil),
		(*ResetPINRequest_ServiceProviderUserRef)(nil),
	}
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RemovePINRequest_ServiceProviderUserKey)(nil),
		(*RemovePINRequest_ServiceProviderUserRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_goTypes,
		DependencyIndexes: file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_depIdxs,
		EnumInfos:         file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_enumTypes,
		MessageInfos:      file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_msgTypes,
	}.Build()
	File_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto = out.File
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_rawDesc = nil
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_goTypes = nil
	file_mica_serviceprovider_service_v1_service_provider_to_mica_wip_service_proto_depIdxs = nil
}
