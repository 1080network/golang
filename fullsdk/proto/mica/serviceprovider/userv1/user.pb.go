// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v6.30.2
// source: mica/serviceprovider/user/v1/user.proto

package userv1

import (
	agebandv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/agebandv1"
	countryv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/countryv1"
	regionv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/regionv1"
	v1 "github.com/1080network/golang/fullsdk/proto/micashared/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterUserResponse_Status int32

const (
	RegisterUserResponse_STATUS_UNSPECIFIED RegisterUserResponse_Status = 0
	RegisterUserResponse_STATUS_SUCCESS     RegisterUserResponse_Status = 1
	RegisterUserResponse_STATUS_ERROR       RegisterUserResponse_Status = 2
	RegisterUserResponse_STATUS_DUPLICATE   RegisterUserResponse_Status = 3
)

// Enum value maps for RegisterUserResponse_Status.
var (
	RegisterUserResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_DUPLICATE",
	}
	RegisterUserResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_DUPLICATE":   3,
	}
)

func (x RegisterUserResponse_Status) Enum() *RegisterUserResponse_Status {
	p := new(RegisterUserResponse_Status)
	*p = x
	return p
}

func (x RegisterUserResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterUserResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_user_v1_user_proto_enumTypes[0].Descriptor()
}

func (RegisterUserResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_user_v1_user_proto_enumTypes[0]
}

func (x RegisterUserResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterUserResponse_Status.Descriptor instead.
func (RegisterUserResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{4, 0}
}

type UpdateUserResponse_Status int32

const (
	UpdateUserResponse_STATUS_UNSPECIFIED      UpdateUserResponse_Status = 0
	UpdateUserResponse_STATUS_SUCCESS          UpdateUserResponse_Status = 1
	UpdateUserResponse_STATUS_ERROR            UpdateUserResponse_Status = 2
	UpdateUserResponse_STATUS_NOT_FOUND        UpdateUserResponse_Status = 3
	UpdateUserResponse_STATUS_VERSION_MISMATCH UpdateUserResponse_Status = 4
)

// Enum value maps for UpdateUserResponse_Status.
var (
	UpdateUserResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_VERSION_MISMATCH",
	}
	UpdateUserResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":      0,
		"STATUS_SUCCESS":          1,
		"STATUS_ERROR":            2,
		"STATUS_NOT_FOUND":        3,
		"STATUS_VERSION_MISMATCH": 4,
	}
)

func (x UpdateUserResponse_Status) Enum() *UpdateUserResponse_Status {
	p := new(UpdateUserResponse_Status)
	*p = x
	return p
}

func (x UpdateUserResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateUserResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_user_v1_user_proto_enumTypes[1].Descriptor()
}

func (UpdateUserResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_user_v1_user_proto_enumTypes[1]
}

func (x UpdateUserResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateUserResponse_Status.Descriptor instead.
func (UpdateUserResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{6, 0}
}

type RemoveUserResponse_Status int32

const (
	RemoveUserResponse_STATUS_UNSPECIFIED RemoveUserResponse_Status = 0
	RemoveUserResponse_STATUS_SUCCESS     RemoveUserResponse_Status = 1
	RemoveUserResponse_STATUS_ERROR       RemoveUserResponse_Status = 2
	RemoveUserResponse_STATUS_NOT_FOUND   RemoveUserResponse_Status = 3
)

// Enum value maps for RemoveUserResponse_Status.
var (
	RemoveUserResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	RemoveUserResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x RemoveUserResponse_Status) Enum() *RemoveUserResponse_Status {
	p := new(RemoveUserResponse_Status)
	*p = x
	return p
}

func (x RemoveUserResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveUserResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_user_v1_user_proto_enumTypes[2].Descriptor()
}

func (RemoveUserResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_user_v1_user_proto_enumTypes[2]
}

func (x RemoveUserResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveUserResponse_Status.Descriptor instead.
func (RemoveUserResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{8, 0}
}

type GetUserResponse_Status int32

const (
	GetUserResponse_STATUS_UNSPECIFIED GetUserResponse_Status = 0
	GetUserResponse_STATUS_SUCCESS     GetUserResponse_Status = 1
	GetUserResponse_STATUS_ERROR       GetUserResponse_Status = 2
	GetUserResponse_STATUS_NOT_FOUND   GetUserResponse_Status = 3
)

// Enum value maps for GetUserResponse_Status.
var (
	GetUserResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	GetUserResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x GetUserResponse_Status) Enum() *GetUserResponse_Status {
	p := new(GetUserResponse_Status)
	*p = x
	return p
}

func (x GetUserResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_user_v1_user_proto_enumTypes[3].Descriptor()
}

func (GetUserResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_user_v1_user_proto_enumTypes[3]
}

func (x GetUserResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserResponse_Status.Descriptor instead.
func (GetUserResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{10, 0}
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this would be state in the US (ISO 3166-2:US), prefecture in Japan (ISO 3166-2:JP) or
	// territory in Australia (ISO 3166-2:AU)
	//
	// Deprecated: Marked as deprecated in mica/serviceprovider/user/v1/user.proto.
	Region     regionv1.Region `protobuf:"varint,3,opt,name=region,proto3,enum=micashared.common.enums.region.v1.Region" json:"region,omitempty"`
	RegionCode string          `protobuf:"bytes,6,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// postal code, in the US this would be zip code
	PostalCode string `protobuf:"bytes,4,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// https://en.wikipedia.org/wiki/ISO_3166-2
	//
	// Deprecated: Marked as deprecated in mica/serviceprovider/user/v1/user.proto.
	Country     countryv1.Country `protobuf:"varint,5,opt,name=country,proto3,enum=micashared.common.enums.country.v1.Country" json:"country,omitempty"`
	CountryCode string            `protobuf:"bytes,7,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in mica/serviceprovider/user/v1/user.proto.
func (x *Address) GetRegion() regionv1.Region {
	if x != nil {
		return x.Region
	}
	return regionv1.Region(0)
}

func (x *Address) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

// Deprecated: Marked as deprecated in mica/serviceprovider/user/v1/user.proto.
func (x *Address) GetCountry() countryv1.Country {
	if x != nil {
		return x.Country
	}
	return countryv1.Country(0)
}

func (x *Address) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type UserDemographic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The street address of the user.
	Address *Address `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// The age band of the user.
	AgeBand agebandv1.AgeBand `protobuf:"varint,7,opt,name=age_band,json=ageBand,proto3,enum=micashared.common.enums.ageband.v1.AgeBand" json:"age_band,omitempty"`
	// E.164 format.
	//
	// Deprecated: Marked as deprecated in mica/serviceprovider/user/v1/user.proto.
	Phone string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"` // @gotags: mask:"pii"
}

func (x *UserDemographic) Reset() {
	*x = UserDemographic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDemographic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDemographic) ProtoMessage() {}

func (x *UserDemographic) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDemographic.ProtoReflect.Descriptor instead.
func (*UserDemographic) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *UserDemographic) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UserDemographic) GetAgeBand() agebandv1.AgeBand {
	if x != nil {
		return x.AgeBand
	}
	return agebandv1.AgeBand(0)
}

// Deprecated: Marked as deprecated in mica/serviceprovider/user/v1/user.proto.
func (x *UserDemographic) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the user record, used for optimistic locking
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Date that the Store was created at Mica.
	Created *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// Date that the Store was last updated at Mica.
	Updated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated,proto3" json:"updated,omitempty"`
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,4,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	// Primary key on the external system.
	ServiceProviderUserRef string           `protobuf:"bytes,5,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3" json:"service_provider_user_ref,omitempty"`
	UserDemographic        *UserDemographic `protobuf:"bytes,6,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *User) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *User) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *User) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *User) GetServiceProviderUserRef() string {
	if x != nil {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *User) GetUserDemographic() *UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

type RegisterUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary key on the external system.
	ServiceProviderUserRef string           `protobuf:"bytes,8,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3" json:"service_provider_user_ref,omitempty"`
	UserDemographic        *UserDemographic `protobuf:"bytes,1,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
}

func (x *RegisterUserRequest) Reset() {
	*x = RegisterUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserRequest) ProtoMessage() {}

func (x *RegisterUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserRequest.ProtoReflect.Descriptor instead.
func (*RegisterUserRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterUserRequest) GetServiceProviderUserRef() string {
	if x != nil {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *RegisterUserRequest) GetUserDemographic() *UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

type RegisterUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RegisterUserResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.user.v1.RegisterUserResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,3,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	Version                int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RegisterUserResponse) Reset() {
	*x = RegisterUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserResponse) ProtoMessage() {}

func (x *RegisterUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserResponse.ProtoReflect.Descriptor instead.
func (*RegisterUserResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterUserResponse) GetStatus() RegisterUserResponse_Status {
	if x != nil {
		return x.Status
	}
	return RegisterUserResponse_STATUS_UNSPECIFIED
}

func (x *RegisterUserResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RegisterUserResponse) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *RegisterUserResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*UpdateUserRequest_ServiceProviderUserKey
	//	*UpdateUserRequest_ServiceProviderUserRef
	UserIdentifier  isUpdateUserRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
	Version         int64                              `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	UserDemographic *UserDemographic                   `protobuf:"bytes,3,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{5}
}

func (m *UpdateUserRequest) GetUserIdentifier() isUpdateUserRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *UpdateUserRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*UpdateUserRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *UpdateUserRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*UpdateUserRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *UpdateUserRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UpdateUserRequest) GetUserDemographic() *UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

type isUpdateUserRequest_UserIdentifier interface {
	isUpdateUserRequest_UserIdentifier()
}

type UpdateUserRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,5,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type UpdateUserRequest_ServiceProviderUserRef struct {
	ServiceProviderUserRef string `protobuf:"bytes,4,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*UpdateUserRequest_ServiceProviderUserKey) isUpdateUserRequest_UserIdentifier() {}

func (*UpdateUserRequest_ServiceProviderUserRef) isUpdateUserRequest_UserIdentifier() {}

type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  UpdateUserResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.user.v1.UpdateUserResponse_Status" json:"status,omitempty"`
	Error   *v1.Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Version int64                     `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateUserResponse) GetStatus() UpdateUserResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateUserResponse_STATUS_UNSPECIFIED
}

func (x *UpdateUserResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateUserResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type RemoveUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*RemoveUserRequest_ServiceProviderUserKey
	//	*RemoveUserRequest_ServiceProviderUserRef
	UserIdentifier isRemoveUserRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
}

func (x *RemoveUserRequest) Reset() {
	*x = RemoveUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserRequest) ProtoMessage() {}

func (x *RemoveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{7}
}

func (m *RemoveUserRequest) GetUserIdentifier() isRemoveUserRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *RemoveUserRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*RemoveUserRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *RemoveUserRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*RemoveUserRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

type isRemoveUserRequest_UserIdentifier interface {
	isRemoveUserRequest_UserIdentifier()
}

type RemoveUserRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,3,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type RemoveUserRequest_ServiceProviderUserRef struct {
	ServiceProviderUserRef string `protobuf:"bytes,2,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*RemoveUserRequest_ServiceProviderUserKey) isRemoveUserRequest_UserIdentifier() {}

func (*RemoveUserRequest_ServiceProviderUserRef) isRemoveUserRequest_UserIdentifier() {}

type RemoveUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemoveUserResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.user.v1.RemoveUserResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RemoveUserResponse) Reset() {
	*x = RemoveUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserResponse) ProtoMessage() {}

func (x *RemoveUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveUserResponse) GetStatus() RemoveUserResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemoveUserResponse_STATUS_UNSPECIFIED
}

func (x *RemoveUserResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*GetUserRequest_ServiceProviderUserKey
	//	*GetUserRequest_ServiceProviderUserRef
	UserIdentifier isGetUserRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{9}
}

func (m *GetUserRequest) GetUserIdentifier() isGetUserRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *GetUserRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*GetUserRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *GetUserRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*GetUserRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

type isGetUserRequest_UserIdentifier interface {
	isGetUserRequest_UserIdentifier()
}

type GetUserRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,3,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type GetUserRequest_ServiceProviderUserRef struct {
	ServiceProviderUserRef string `protobuf:"bytes,2,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*GetUserRequest_ServiceProviderUserKey) isGetUserRequest_UserIdentifier() {}

func (*GetUserRequest_ServiceProviderUserRef) isGetUserRequest_UserIdentifier() {}

type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetUserResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.user.v1.GetUserResponse_Status" json:"status,omitempty"`
	Error  *v1.Error              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	User   *User                  `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_user_v1_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserResponse) GetStatus() GetUserResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetUserResponse_STATUS_UNSPECIFIED
}

func (x *GetUserResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

var File_mica_serviceprovider_user_v1_user_proto protoreflect.FileDescriptor

var file_mica_serviceprovider_user_v1_user_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x61, 0x67, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x02,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd0, 0x01,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61,
	0x67, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x42, 0x61, 0x6e,
	0x64, 0x52, 0x07, 0x61, 0x67, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x19, 0x72, 0x17,
	0x32, 0x15, 0x5e, 0x24, 0x7c, 0x5e, 0x5c, 0x2b, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5c, 0x64, 0x7b,
	0x31, 0x30, 0x2c, 0x31, 0x34, 0x7d, 0x24, 0x18, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0xf0, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x16, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x58, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x58, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0xda, 0x02, 0x0a, 0x14, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x22, 0xac, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x42, 0x11, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xad, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x04, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x11, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x22, 0xf6, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x11, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x22, 0xa8, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x5c,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x42, 0x50, 0x0a, 0x1f,
	0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x1b, 0x6d, 0x69, 0x63, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_serviceprovider_user_v1_user_proto_rawDescOnce sync.Once
	file_mica_serviceprovider_user_v1_user_proto_rawDescData = file_mica_serviceprovider_user_v1_user_proto_rawDesc
)

func file_mica_serviceprovider_user_v1_user_proto_rawDescGZIP() []byte {
	file_mica_serviceprovider_user_v1_user_proto_rawDescOnce.Do(func() {
		file_mica_serviceprovider_user_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_serviceprovider_user_v1_user_proto_rawDescData)
	})
	return file_mica_serviceprovider_user_v1_user_proto_rawDescData
}

var file_mica_serviceprovider_user_v1_user_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mica_serviceprovider_user_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_mica_serviceprovider_user_v1_user_proto_goTypes = []interface{}{
	(RegisterUserResponse_Status)(0), // 0: mica.serviceprovider.user.v1.RegisterUserResponse.Status
	(UpdateUserResponse_Status)(0),   // 1: mica.serviceprovider.user.v1.UpdateUserResponse.Status
	(RemoveUserResponse_Status)(0),   // 2: mica.serviceprovider.user.v1.RemoveUserResponse.Status
	(GetUserResponse_Status)(0),      // 3: mica.serviceprovider.user.v1.GetUserResponse.Status
	(*Address)(nil),                  // 4: mica.serviceprovider.user.v1.Address
	(*UserDemographic)(nil),          // 5: mica.serviceprovider.user.v1.UserDemographic
	(*User)(nil),                     // 6: mica.serviceprovider.user.v1.User
	(*RegisterUserRequest)(nil),      // 7: mica.serviceprovider.user.v1.RegisterUserRequest
	(*RegisterUserResponse)(nil),     // 8: mica.serviceprovider.user.v1.RegisterUserResponse
	(*UpdateUserRequest)(nil),        // 9: mica.serviceprovider.user.v1.UpdateUserRequest
	(*UpdateUserResponse)(nil),       // 10: mica.serviceprovider.user.v1.UpdateUserResponse
	(*RemoveUserRequest)(nil),        // 11: mica.serviceprovider.user.v1.RemoveUserRequest
	(*RemoveUserResponse)(nil),       // 12: mica.serviceprovider.user.v1.RemoveUserResponse
	(*GetUserRequest)(nil),           // 13: mica.serviceprovider.user.v1.GetUserRequest
	(*GetUserResponse)(nil),          // 14: mica.serviceprovider.user.v1.GetUserResponse
	(regionv1.Region)(0),             // 15: micashared.common.enums.region.v1.Region
	(countryv1.Country)(0),           // 16: micashared.common.enums.country.v1.Country
	(agebandv1.AgeBand)(0),           // 17: micashared.common.enums.ageband.v1.AgeBand
	(*timestamppb.Timestamp)(nil),    // 18: google.protobuf.Timestamp
	(*v1.Error)(nil),                 // 19: micashared.common.v1.Error
}
var file_mica_serviceprovider_user_v1_user_proto_depIdxs = []int32{
	15, // 0: mica.serviceprovider.user.v1.Address.region:type_name -> micashared.common.enums.region.v1.Region
	16, // 1: mica.serviceprovider.user.v1.Address.country:type_name -> micashared.common.enums.country.v1.Country
	4,  // 2: mica.serviceprovider.user.v1.UserDemographic.address:type_name -> mica.serviceprovider.user.v1.Address
	17, // 3: mica.serviceprovider.user.v1.UserDemographic.age_band:type_name -> micashared.common.enums.ageband.v1.AgeBand
	18, // 4: mica.serviceprovider.user.v1.User.created:type_name -> google.protobuf.Timestamp
	18, // 5: mica.serviceprovider.user.v1.User.updated:type_name -> google.protobuf.Timestamp
	5,  // 6: mica.serviceprovider.user.v1.User.user_demographic:type_name -> mica.serviceprovider.user.v1.UserDemographic
	5,  // 7: mica.serviceprovider.user.v1.RegisterUserRequest.user_demographic:type_name -> mica.serviceprovider.user.v1.UserDemographic
	0,  // 8: mica.serviceprovider.user.v1.RegisterUserResponse.status:type_name -> mica.serviceprovider.user.v1.RegisterUserResponse.Status
	19, // 9: mica.serviceprovider.user.v1.RegisterUserResponse.error:type_name -> micashared.common.v1.Error
	5,  // 10: mica.serviceprovider.user.v1.UpdateUserRequest.user_demographic:type_name -> mica.serviceprovider.user.v1.UserDemographic
	1,  // 11: mica.serviceprovider.user.v1.UpdateUserResponse.status:type_name -> mica.serviceprovider.user.v1.UpdateUserResponse.Status
	19, // 12: mica.serviceprovider.user.v1.UpdateUserResponse.error:type_name -> micashared.common.v1.Error
	2,  // 13: mica.serviceprovider.user.v1.RemoveUserResponse.status:type_name -> mica.serviceprovider.user.v1.RemoveUserResponse.Status
	19, // 14: mica.serviceprovider.user.v1.RemoveUserResponse.error:type_name -> micashared.common.v1.Error
	3,  // 15: mica.serviceprovider.user.v1.GetUserResponse.status:type_name -> mica.serviceprovider.user.v1.GetUserResponse.Status
	19, // 16: mica.serviceprovider.user.v1.GetUserResponse.error:type_name -> micashared.common.v1.Error
	6,  // 17: mica.serviceprovider.user.v1.GetUserResponse.user:type_name -> mica.serviceprovider.user.v1.User
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_mica_serviceprovider_user_v1_user_proto_init() }
func file_mica_serviceprovider_user_v1_user_proto_init() {
	if File_mica_serviceprovider_user_v1_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDemographic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_user_v1_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_serviceprovider_user_v1_user_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UpdateUserRequest_ServiceProviderUserKey)(nil),
		(*UpdateUserRequest_ServiceProviderUserRef)(nil),
	}
	file_mica_serviceprovider_user_v1_user_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RemoveUserRequest_ServiceProviderUserKey)(nil),
		(*RemoveUserRequest_ServiceProviderUserRef)(nil),
	}
	file_mica_serviceprovider_user_v1_user_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*GetUserRequest_ServiceProviderUserKey)(nil),
		(*GetUserRequest_ServiceProviderUserRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_serviceprovider_user_v1_user_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_serviceprovider_user_v1_user_proto_goTypes,
		DependencyIndexes: file_mica_serviceprovider_user_v1_user_proto_depIdxs,
		EnumInfos:         file_mica_serviceprovider_user_v1_user_proto_enumTypes,
		MessageInfos:      file_mica_serviceprovider_user_v1_user_proto_msgTypes,
	}.Build()
	File_mica_serviceprovider_user_v1_user_proto = out.File
	file_mica_serviceprovider_user_v1_user_proto_rawDesc = nil
	file_mica_serviceprovider_user_v1_user_proto_goTypes = nil
	file_mica_serviceprovider_user_v1_user_proto_depIdxs = nil
}
