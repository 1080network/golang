// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

syntax = "proto3";

package mica.serviceprovider.user.v1;

import "google/protobuf/timestamp.proto";
import "micashared/common/enums/ageband/v1/age_band.proto";
import "micashared/common/enums/country/v1/country.proto";
import "micashared/common/enums/region/v1/region.proto";
import "micashared/common/v1/error.proto";
import "validate/validate.proto";

option go_package = "mica/serviceprovider/userv1";
option java_outer_classname = "UserProto";
option java_package = "io.mica.serviceprovider.user.v1";
option objc_class_prefix = "MICA";

message Address {
  // this would be state in the US (ISO 3166-2:US), prefecture in Japan (ISO 3166-2:JP) or
  // territory in Australia (ISO 3166-2:AU)
  micashared.common.enums.region.v1.Region region = 3 [deprecated = true];
  string region_code = 6 [(validate.rules).string = {max_len: 3}];

  // postal code, in the US this would be zip code
  string postal_code = 4;

  // https://en.wikipedia.org/wiki/ISO_3166-2
  micashared.common.enums.country.v1.Country country = 5 [deprecated = true];
  string country_code = 7 [(validate.rules).string.max_len = 2];
}

message UserDemographic {
  // The street address of the user.
  Address address = 4;

  // The age band of the user.
  micashared.common.enums.ageband.v1.AgeBand age_band = 7;

  // E.164 format.
  string phone = 6 [(validate.rules).string.pattern = "^$|^\\+[1-9]\\d{10,14}$", deprecated = true]; // @gotags: mask:"pii"
}

message User {
  // version of the user record, used for optimistic locking
  int64 version = 1;

  // Date that the Store was created at Mica.
  google.protobuf.Timestamp created = 2;

  // Date that the Store was last updated at Mica.
  google.protobuf.Timestamp updated = 3;

  // The key representing this user in Mica.
  string service_provider_user_key = 4 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  // Primary key on the external system.
  string service_provider_user_ref = 5 [(validate.rules).string.max_len = 100];

  UserDemographic user_demographic = 6;
}

// to Mica

message RegisterUserRequest {
  // Primary key on the external system.
  string service_provider_user_ref = 8 [(validate.rules).string.max_len = 100];

  UserDemographic user_demographic = 1;
}

message RegisterUserResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_DUPLICATE = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  // The key representing this user in Mica.
  string service_provider_user_key = 3 [(validate.rules).string = {
    min_len: 30,
    max_len: 50
  }];

  int64 version = 4;
}

message UpdateUserRequest {
  reserved 1;

  oneof user_identifier {
    // The key representing this user in Mica.
    string service_provider_user_key = 5 [(validate.rules).string = {max_len: 50}];

    string service_provider_user_ref = 4 [(validate.rules).string = {max_len: 100}];
  }

  int64 version = 2;

  UserDemographic user_demographic = 3;
}

message UpdateUserResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
    STATUS_VERSION_MISMATCH = 4;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  int64 version = 3;
}

message RemoveUserRequest {
  reserved 1;

  oneof user_identifier {
    // The key representing this user in Mica.
    string service_provider_user_key = 3 [(validate.rules).string = {max_len: 50}];

    string service_provider_user_ref = 2 [(validate.rules).string = {max_len: 100}];
  }
}

message RemoveUserResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;
}

message GetUserRequest {
  reserved 1;

  oneof user_identifier {
    // The key representing this user in Mica.
    string service_provider_user_key = 3 [(validate.rules).string = {max_len: 50}];

    string service_provider_user_ref = 2 [(validate.rules).string = {max_len: 100}];
  }
}

message GetUserResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR = 2;
    STATUS_NOT_FOUND = 3;
  }
  Status status = 1;

  micashared.common.v1.Error error = 2;

  User user = 3;
}
