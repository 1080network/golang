// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: mica/serviceprovider/instrument/v1/instrument.proto

package instrumentv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	currencyv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/currencyv1"
	instrumenttypev1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/instrumenttypev1"
	v1 "github.com/1080network/golang/fullsdk/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterInstrumentResponse_Status int32

const (
	RegisterInstrumentResponse_STATUS_UNSPECIFIED RegisterInstrumentResponse_Status = 0
	RegisterInstrumentResponse_STATUS_SUCCESS     RegisterInstrumentResponse_Status = 1
	RegisterInstrumentResponse_STATUS_ERROR       RegisterInstrumentResponse_Status = 2
	RegisterInstrumentResponse_STATUS_DUPLICATE   RegisterInstrumentResponse_Status = 3
	RegisterInstrumentResponse_STATUS_NOT_FOUND   RegisterInstrumentResponse_Status = 4
)

// Enum value maps for RegisterInstrumentResponse_Status.
var (
	RegisterInstrumentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_DUPLICATE",
		4: "STATUS_NOT_FOUND",
	}
	RegisterInstrumentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_DUPLICATE":   3,
		"STATUS_NOT_FOUND":   4,
	}
)

func (x RegisterInstrumentResponse_Status) Enum() *RegisterInstrumentResponse_Status {
	p := new(RegisterInstrumentResponse_Status)
	*p = x
	return p
}

func (x RegisterInstrumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterInstrumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[0].Descriptor()
}

func (RegisterInstrumentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[0]
}

func (x RegisterInstrumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterInstrumentResponse_Status.Descriptor instead.
func (RegisterInstrumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{2, 0}
}

type GetInstrumentResponse_Status int32

const (
	GetInstrumentResponse_STATUS_UNSPECIFIED GetInstrumentResponse_Status = 0
	GetInstrumentResponse_STATUS_SUCCESS     GetInstrumentResponse_Status = 1
	GetInstrumentResponse_STATUS_ERROR       GetInstrumentResponse_Status = 2
	GetInstrumentResponse_STATUS_NOT_FOUND   GetInstrumentResponse_Status = 3
)

// Enum value maps for GetInstrumentResponse_Status.
var (
	GetInstrumentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	GetInstrumentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x GetInstrumentResponse_Status) Enum() *GetInstrumentResponse_Status {
	p := new(GetInstrumentResponse_Status)
	*p = x
	return p
}

func (x GetInstrumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetInstrumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[1].Descriptor()
}

func (GetInstrumentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[1]
}

func (x GetInstrumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetInstrumentResponse_Status.Descriptor instead.
func (GetInstrumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{5, 0}
}

type RemoveInstrumentResponse_Status int32

const (
	RemoveInstrumentResponse_STATUS_UNSPECIFIED RemoveInstrumentResponse_Status = 0
	RemoveInstrumentResponse_STATUS_SUCCESS     RemoveInstrumentResponse_Status = 1
	RemoveInstrumentResponse_STATUS_ERROR       RemoveInstrumentResponse_Status = 2
	RemoveInstrumentResponse_STATUS_NOT_FOUND   RemoveInstrumentResponse_Status = 3
)

// Enum value maps for RemoveInstrumentResponse_Status.
var (
	RemoveInstrumentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	RemoveInstrumentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x RemoveInstrumentResponse_Status) Enum() *RemoveInstrumentResponse_Status {
	p := new(RemoveInstrumentResponse_Status)
	*p = x
	return p
}

func (x RemoveInstrumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveInstrumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[2].Descriptor()
}

func (RemoveInstrumentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[2]
}

func (x RemoveInstrumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveInstrumentResponse_Status.Descriptor instead.
func (RemoveInstrumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{7, 0}
}

type SearchInstrumentResponse_Status int32

const (
	SearchInstrumentResponse_STATUS_UNSPECIFIED SearchInstrumentResponse_Status = 0
	SearchInstrumentResponse_STATUS_SUCCESS     SearchInstrumentResponse_Status = 1
	SearchInstrumentResponse_STATUS_ERROR       SearchInstrumentResponse_Status = 2
	SearchInstrumentResponse_STATUS_NOT_FOUND   SearchInstrumentResponse_Status = 3
)

// Enum value maps for SearchInstrumentResponse_Status.
var (
	SearchInstrumentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	SearchInstrumentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x SearchInstrumentResponse_Status) Enum() *SearchInstrumentResponse_Status {
	p := new(SearchInstrumentResponse_Status)
	*p = x
	return p
}

func (x SearchInstrumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchInstrumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[3].Descriptor()
}

func (SearchInstrumentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[3]
}

func (x SearchInstrumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchInstrumentResponse_Status.Descriptor instead.
func (SearchInstrumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{9, 0}
}

type RetrieveTransactionResponse_Status int32

const (
	RetrieveTransactionResponse_STATUS_UNSPECIFIED          RetrieveTransactionResponse_Status = 0
	RetrieveTransactionResponse_STATUS_SUCCESS              RetrieveTransactionResponse_Status = 1
	RetrieveTransactionResponse_STATUS_ERROR                RetrieveTransactionResponse_Status = 2
	RetrieveTransactionResponse_STATUS_INSTRUMENT_NOT_FOUND RetrieveTransactionResponse_Status = 3
)

// Enum value maps for RetrieveTransactionResponse_Status.
var (
	RetrieveTransactionResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_INSTRUMENT_NOT_FOUND",
	}
	RetrieveTransactionResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":          0,
		"STATUS_SUCCESS":              1,
		"STATUS_ERROR":                2,
		"STATUS_INSTRUMENT_NOT_FOUND": 3,
	}
)

func (x RetrieveTransactionResponse_Status) Enum() *RetrieveTransactionResponse_Status {
	p := new(RetrieveTransactionResponse_Status)
	*p = x
	return p
}

func (x RetrieveTransactionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetrieveTransactionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[4].Descriptor()
}

func (RetrieveTransactionResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[4]
}

func (x RetrieveTransactionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetrieveTransactionResponse_Status.Descriptor instead.
func (RetrieveTransactionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{11, 0}
}

type ProvisionInstrumentLinkingCodeResponse_Status int32

const (
	ProvisionInstrumentLinkingCodeResponse_STATUS_UNSPECIFIED          ProvisionInstrumentLinkingCodeResponse_Status = 0
	ProvisionInstrumentLinkingCodeResponse_STATUS_SUCCESS              ProvisionInstrumentLinkingCodeResponse_Status = 1
	ProvisionInstrumentLinkingCodeResponse_STATUS_ERROR                ProvisionInstrumentLinkingCodeResponse_Status = 2
	ProvisionInstrumentLinkingCodeResponse_STATUS_INSTRUMENT_NOT_FOUND ProvisionInstrumentLinkingCodeResponse_Status = 3
	ProvisionInstrumentLinkingCodeResponse_STATUS_USER_NOT_FOUND       ProvisionInstrumentLinkingCodeResponse_Status = 4
)

// Enum value maps for ProvisionInstrumentLinkingCodeResponse_Status.
var (
	ProvisionInstrumentLinkingCodeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_INSTRUMENT_NOT_FOUND",
		4: "STATUS_USER_NOT_FOUND",
	}
	ProvisionInstrumentLinkingCodeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":          0,
		"STATUS_SUCCESS":              1,
		"STATUS_ERROR":                2,
		"STATUS_INSTRUMENT_NOT_FOUND": 3,
		"STATUS_USER_NOT_FOUND":       4,
	}
)

func (x ProvisionInstrumentLinkingCodeResponse_Status) Enum() *ProvisionInstrumentLinkingCodeResponse_Status {
	p := new(ProvisionInstrumentLinkingCodeResponse_Status)
	*p = x
	return p
}

func (x ProvisionInstrumentLinkingCodeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisionInstrumentLinkingCodeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[5].Descriptor()
}

func (ProvisionInstrumentLinkingCodeResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[5]
}

func (x ProvisionInstrumentLinkingCodeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisionInstrumentLinkingCodeResponse_Status.Descriptor instead.
func (ProvisionInstrumentLinkingCodeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{13, 0}
}

type CompleteLinkingWithCodeResponse_Status int32

const (
	CompleteLinkingWithCodeResponse_STATUS_UNSPECIFIED CompleteLinkingWithCodeResponse_Status = 0
	CompleteLinkingWithCodeResponse_STATUS_SUCCESS     CompleteLinkingWithCodeResponse_Status = 1
	// the link source is in a different network and therefore not compatible
	CompleteLinkingWithCodeResponse_STATUS_INVALID_NETWORK CompleteLinkingWithCodeResponse_Status = 2
	// the source account or instrument for this link is not supported
	CompleteLinkingWithCodeResponse_STATUS_UNSUPPORTED_LINK_SOURCE CompleteLinkingWithCodeResponse_Status = 3
	// the specified user does not exist
	CompleteLinkingWithCodeResponse_STATUS_USER_NOT_FOUND CompleteLinkingWithCodeResponse_Status = 4
	// the specified instrument does not exist
	CompleteLinkingWithCodeResponse_STATUS_INSTRUMENT_NOT_FOUND CompleteLinkingWithCodeResponse_Status = 5
	// the provided code is incorrect
	CompleteLinkingWithCodeResponse_STATUS_INVALID_CODE CompleteLinkingWithCodeResponse_Status = 6
)

// Enum value maps for CompleteLinkingWithCodeResponse_Status.
var (
	CompleteLinkingWithCodeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_INVALID_NETWORK",
		3: "STATUS_UNSUPPORTED_LINK_SOURCE",
		4: "STATUS_USER_NOT_FOUND",
		5: "STATUS_INSTRUMENT_NOT_FOUND",
		6: "STATUS_INVALID_CODE",
	}
	CompleteLinkingWithCodeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":             0,
		"STATUS_SUCCESS":                 1,
		"STATUS_INVALID_NETWORK":         2,
		"STATUS_UNSUPPORTED_LINK_SOURCE": 3,
		"STATUS_USER_NOT_FOUND":          4,
		"STATUS_INSTRUMENT_NOT_FOUND":    5,
		"STATUS_INVALID_CODE":            6,
	}
)

func (x CompleteLinkingWithCodeResponse_Status) Enum() *CompleteLinkingWithCodeResponse_Status {
	p := new(CompleteLinkingWithCodeResponse_Status)
	*p = x
	return p
}

func (x CompleteLinkingWithCodeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompleteLinkingWithCodeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[6].Descriptor()
}

func (CompleteLinkingWithCodeResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[6]
}

func (x CompleteLinkingWithCodeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompleteLinkingWithCodeResponse_Status.Descriptor instead.
func (CompleteLinkingWithCodeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{15, 0}
}

type GetInstrumentLinkResponse_Status int32

const (
	GetInstrumentLinkResponse_STATUS_UNSPECIFIED    GetInstrumentLinkResponse_Status = 0
	GetInstrumentLinkResponse_STATUS_SUCCESS        GetInstrumentLinkResponse_Status = 1
	GetInstrumentLinkResponse_STATUS_LINK_NOT_FOUND GetInstrumentLinkResponse_Status = 2
)

// Enum value maps for GetInstrumentLinkResponse_Status.
var (
	GetInstrumentLinkResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_LINK_NOT_FOUND",
	}
	GetInstrumentLinkResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_SUCCESS":        1,
		"STATUS_LINK_NOT_FOUND": 2,
	}
)

func (x GetInstrumentLinkResponse_Status) Enum() *GetInstrumentLinkResponse_Status {
	p := new(GetInstrumentLinkResponse_Status)
	*p = x
	return p
}

func (x GetInstrumentLinkResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetInstrumentLinkResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[7].Descriptor()
}

func (GetInstrumentLinkResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[7]
}

func (x GetInstrumentLinkResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetInstrumentLinkResponse_Status.Descriptor instead.
func (GetInstrumentLinkResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{17, 0}
}

type SearchInstrumentLinksResponse_Status int32

const (
	SearchInstrumentLinksResponse_STATUS_UNSPECIFIED SearchInstrumentLinksResponse_Status = 0
	SearchInstrumentLinksResponse_STATUS_SUCCESS     SearchInstrumentLinksResponse_Status = 1
	SearchInstrumentLinksResponse_STATUS_NOT_FOUND   SearchInstrumentLinksResponse_Status = 2
)

// Enum value maps for SearchInstrumentLinksResponse_Status.
var (
	SearchInstrumentLinksResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
	}
	SearchInstrumentLinksResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
	}
)

func (x SearchInstrumentLinksResponse_Status) Enum() *SearchInstrumentLinksResponse_Status {
	p := new(SearchInstrumentLinksResponse_Status)
	*p = x
	return p
}

func (x SearchInstrumentLinksResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchInstrumentLinksResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[8].Descriptor()
}

func (SearchInstrumentLinksResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[8]
}

func (x SearchInstrumentLinksResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchInstrumentLinksResponse_Status.Descriptor instead.
func (SearchInstrumentLinksResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{19, 0}
}

type RemoveInstrumentLinkResponse_Status int32

const (
	RemoveInstrumentLinkResponse_STATUS_UNSPECIFIED RemoveInstrumentLinkResponse_Status = 0
	RemoveInstrumentLinkResponse_STATUS_SUCCESS     RemoveInstrumentLinkResponse_Status = 1
	RemoveInstrumentLinkResponse_STATUS_NOT_FOUND   RemoveInstrumentLinkResponse_Status = 2
	RemoveInstrumentLinkResponse_STATUS_LINK_IN_USE RemoveInstrumentLinkResponse_Status = 3
)

// Enum value maps for RemoveInstrumentLinkResponse_Status.
var (
	RemoveInstrumentLinkResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
		3: "STATUS_LINK_IN_USE",
	}
	RemoveInstrumentLinkResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
		"STATUS_LINK_IN_USE": 3,
	}
)

func (x RemoveInstrumentLinkResponse_Status) Enum() *RemoveInstrumentLinkResponse_Status {
	p := new(RemoveInstrumentLinkResponse_Status)
	*p = x
	return p
}

func (x RemoveInstrumentLinkResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveInstrumentLinkResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[9].Descriptor()
}

func (RemoveInstrumentLinkResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[9]
}

func (x RemoveInstrumentLinkResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveInstrumentLinkResponse_Status.Descriptor instead.
func (RemoveInstrumentLinkResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{21, 0}
}

type GetRecurringPaymentResponse_Status int32

const (
	GetRecurringPaymentResponse_STATUS_UNSPECIFIED GetRecurringPaymentResponse_Status = 0
	GetRecurringPaymentResponse_STATUS_SUCCESS     GetRecurringPaymentResponse_Status = 1
	GetRecurringPaymentResponse_STATUS_NOT_FOUND   GetRecurringPaymentResponse_Status = 2
)

// Enum value maps for GetRecurringPaymentResponse_Status.
var (
	GetRecurringPaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
	}
	GetRecurringPaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
	}
)

func (x GetRecurringPaymentResponse_Status) Enum() *GetRecurringPaymentResponse_Status {
	p := new(GetRecurringPaymentResponse_Status)
	*p = x
	return p
}

func (x GetRecurringPaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRecurringPaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[10].Descriptor()
}

func (GetRecurringPaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[10]
}

func (x GetRecurringPaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetRecurringPaymentResponse_Status.Descriptor instead.
func (GetRecurringPaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{25, 0}
}

type CancelRecurringPaymentResponse_Status int32

const (
	CancelRecurringPaymentResponse_STATUS_UNSPECIFIED CancelRecurringPaymentResponse_Status = 0
	CancelRecurringPaymentResponse_STATUS_SUCCESS     CancelRecurringPaymentResponse_Status = 1
	CancelRecurringPaymentResponse_STATUS_NOT_FOUND   CancelRecurringPaymentResponse_Status = 2
)

// Enum value maps for CancelRecurringPaymentResponse_Status.
var (
	CancelRecurringPaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
	}
	CancelRecurringPaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
	}
)

func (x CancelRecurringPaymentResponse_Status) Enum() *CancelRecurringPaymentResponse_Status {
	p := new(CancelRecurringPaymentResponse_Status)
	*p = x
	return p
}

func (x CancelRecurringPaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelRecurringPaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[11].Descriptor()
}

func (CancelRecurringPaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[11]
}

func (x CancelRecurringPaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelRecurringPaymentResponse_Status.Descriptor instead.
func (CancelRecurringPaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{27, 0}
}

type SearchRecurringPaymentsResponse_Status int32

const (
	SearchRecurringPaymentsResponse_STATUS_UNSPECIFIED SearchRecurringPaymentsResponse_Status = 0
	SearchRecurringPaymentsResponse_STATUS_SUCCESS     SearchRecurringPaymentsResponse_Status = 1
	SearchRecurringPaymentsResponse_STATUS_NOT_FOUND   SearchRecurringPaymentsResponse_Status = 2
)

// Enum value maps for SearchRecurringPaymentsResponse_Status.
var (
	SearchRecurringPaymentsResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
	}
	SearchRecurringPaymentsResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
	}
)

func (x SearchRecurringPaymentsResponse_Status) Enum() *SearchRecurringPaymentsResponse_Status {
	p := new(SearchRecurringPaymentsResponse_Status)
	*p = x
	return p
}

func (x SearchRecurringPaymentsResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchRecurringPaymentsResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[12].Descriptor()
}

func (SearchRecurringPaymentsResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes[12]
}

func (x SearchRecurringPaymentsResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchRecurringPaymentsResponse_Status.Descriptor instead.
func (SearchRecurringPaymentsResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{29, 0}
}

type RegisterInstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in mica/serviceprovider/instrument/v1/instrument.proto.
	ObsoleteServiceProviderUserKey string `protobuf:"bytes,1,opt,name=obsolete_service_provider_user_key,json=obsoleteServiceProviderUserKey,proto3" json:"obsolete_service_provider_user_key,omitempty"`
	// Types that are assignable to UserIdentifier:
	//
	//	*RegisterInstrumentRequest_ServiceProviderUserKey
	//	*RegisterInstrumentRequest_ServiceProviderUserRef
	UserIdentifier isRegisterInstrumentRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
	// Primary key on the external system.
	ServiceProviderInstrumentRef string                          `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	InstrumentType               instrumenttypev1.InstrumentType `protobuf:"varint,3,opt,name=instrument_type,json=instrumentType,proto3,enum=micashared.common.enums.instrumenttype.v1.InstrumentType" json:"instrument_type,omitempty"`
	// The 3-letter currency code defined in ISO 4217.
	Currency currencyv1.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Last 4 digits of this instrument.
	Nickname string `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *RegisterInstrumentRequest) Reset() {
	*x = RegisterInstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstrumentRequest) ProtoMessage() {}

func (x *RegisterInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstrumentRequest.ProtoReflect.Descriptor instead.
func (*RegisterInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in mica/serviceprovider/instrument/v1/instrument.proto.
func (x *RegisterInstrumentRequest) GetObsoleteServiceProviderUserKey() string {
	if x != nil {
		return x.ObsoleteServiceProviderUserKey
	}
	return ""
}

func (m *RegisterInstrumentRequest) GetUserIdentifier() isRegisterInstrumentRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *RegisterInstrumentRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*RegisterInstrumentRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *RegisterInstrumentRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*RegisterInstrumentRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *RegisterInstrumentRequest) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *RegisterInstrumentRequest) GetInstrumentType() instrumenttypev1.InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return instrumenttypev1.InstrumentType(0)
}

func (x *RegisterInstrumentRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *RegisterInstrumentRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type isRegisterInstrumentRequest_UserIdentifier interface {
	isRegisterInstrumentRequest_UserIdentifier()
}

type RegisterInstrumentRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,7,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type RegisterInstrumentRequest_ServiceProviderUserRef struct {
	ServiceProviderUserRef string `protobuf:"bytes,6,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*RegisterInstrumentRequest_ServiceProviderUserKey) isRegisterInstrumentRequest_UserIdentifier() {
}

func (*RegisterInstrumentRequest_ServiceProviderUserRef) isRegisterInstrumentRequest_UserIdentifier() {
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	Amount           string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	OrganizationName string `protobuf:"bytes,3,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Transaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transaction) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

type RegisterInstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RegisterInstrumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.RegisterInstrumentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,3,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	Version                      int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RegisterInstrumentResponse) Reset() {
	*x = RegisterInstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstrumentResponse) ProtoMessage() {}

func (x *RegisterInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstrumentResponse.ProtoReflect.Descriptor instead.
func (*RegisterInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterInstrumentResponse) GetStatus() RegisterInstrumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return RegisterInstrumentResponse_STATUS_UNSPECIFIED
}

func (x *RegisterInstrumentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RegisterInstrumentResponse) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *RegisterInstrumentResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetInstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to InstrumentIdentifier:
	//
	//	*GetInstrumentRequest_ServiceProviderInstrumentKey
	//	*GetInstrumentRequest_ServiceProviderInstrumentRef
	InstrumentIdentifier isGetInstrumentRequest_InstrumentIdentifier `protobuf_oneof:"instrument_identifier"`
}

func (x *GetInstrumentRequest) Reset() {
	*x = GetInstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstrumentRequest) ProtoMessage() {}

func (x *GetInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{3}
}

func (m *GetInstrumentRequest) GetInstrumentIdentifier() isGetInstrumentRequest_InstrumentIdentifier {
	if m != nil {
		return m.InstrumentIdentifier
	}
	return nil
}

func (x *GetInstrumentRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetInstrumentIdentifier().(*GetInstrumentRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *GetInstrumentRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetInstrumentIdentifier().(*GetInstrumentRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

type isGetInstrumentRequest_InstrumentIdentifier interface {
	isGetInstrumentRequest_InstrumentIdentifier()
}

type GetInstrumentRequest_ServiceProviderInstrumentKey struct {
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

type GetInstrumentRequest_ServiceProviderInstrumentRef struct {
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

func (*GetInstrumentRequest_ServiceProviderInstrumentKey) isGetInstrumentRequest_InstrumentIdentifier() {
}

func (*GetInstrumentRequest_ServiceProviderInstrumentRef) isGetInstrumentRequest_InstrumentIdentifier() {
}

type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The primary key that represents this instrument at Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	// version of the user record, used for optimistic locking.
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Date that the Store was created at Mica.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// Date that the Store was last updated at Mica.
	Updated *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,5,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// The key that represents this user.
	ServiceProviderUserKey string `protobuf:"bytes,6,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	// Primary key on the external system.
	ServiceProviderUserRef string                          `protobuf:"bytes,7,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3" json:"service_provider_user_ref,omitempty"`
	InstrumentType         instrumenttypev1.InstrumentType `protobuf:"varint,8,opt,name=instrument_type,json=instrumentType,proto3,enum=micashared.common.enums.instrumenttype.v1.InstrumentType" json:"instrument_type,omitempty"`
	// The 3-letter currency code defined in ISO 4217.
	Currency currencyv1.Currency `protobuf:"varint,9,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Last for characters of this instrument.
	Nickname string `protobuf:"bytes,10,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{4}
}

func (x *Instrument) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *Instrument) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Instrument) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Instrument) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Instrument) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *Instrument) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *Instrument) GetServiceProviderUserRef() string {
	if x != nil {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *Instrument) GetInstrumentType() instrumenttypev1.InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return instrumenttypev1.InstrumentType(0)
}

func (x *Instrument) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *Instrument) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type GetInstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     GetInstrumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.GetInstrumentResponse_Status" json:"status,omitempty"`
	Error      *v1.Error                    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Instrument *Instrument                  `protobuf:"bytes,3,opt,name=instrument,proto3" json:"instrument,omitempty"`
}

func (x *GetInstrumentResponse) Reset() {
	*x = GetInstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstrumentResponse) ProtoMessage() {}

func (x *GetInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstrumentResponse.ProtoReflect.Descriptor instead.
func (*GetInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{5}
}

func (x *GetInstrumentResponse) GetStatus() GetInstrumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetInstrumentResponse_STATUS_UNSPECIFIED
}

func (x *GetInstrumentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetInstrumentResponse) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

type RemoveInstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to InstrumentIdentifier:
	//
	//	*RemoveInstrumentRequest_ServiceProviderInstrumentKey
	//	*RemoveInstrumentRequest_ServiceProviderInstrumentRef
	InstrumentIdentifier isRemoveInstrumentRequest_InstrumentIdentifier `protobuf_oneof:"instrument_identifier"`
}

func (x *RemoveInstrumentRequest) Reset() {
	*x = RemoveInstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInstrumentRequest) ProtoMessage() {}

func (x *RemoveInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInstrumentRequest.ProtoReflect.Descriptor instead.
func (*RemoveInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{6}
}

func (m *RemoveInstrumentRequest) GetInstrumentIdentifier() isRemoveInstrumentRequest_InstrumentIdentifier {
	if m != nil {
		return m.InstrumentIdentifier
	}
	return nil
}

func (x *RemoveInstrumentRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetInstrumentIdentifier().(*RemoveInstrumentRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *RemoveInstrumentRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetInstrumentIdentifier().(*RemoveInstrumentRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

type isRemoveInstrumentRequest_InstrumentIdentifier interface {
	isRemoveInstrumentRequest_InstrumentIdentifier()
}

type RemoveInstrumentRequest_ServiceProviderInstrumentKey struct {
	// The key representing this instrument in Mica.
	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

type RemoveInstrumentRequest_ServiceProviderInstrumentRef struct {
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

func (*RemoveInstrumentRequest_ServiceProviderInstrumentKey) isRemoveInstrumentRequest_InstrumentIdentifier() {
}

func (*RemoveInstrumentRequest_ServiceProviderInstrumentRef) isRemoveInstrumentRequest_InstrumentIdentifier() {
}

type RemoveInstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemoveInstrumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.RemoveInstrumentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RemoveInstrumentResponse) Reset() {
	*x = RemoveInstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInstrumentResponse) ProtoMessage() {}

func (x *RemoveInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInstrumentResponse.ProtoReflect.Descriptor instead.
func (*RemoveInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveInstrumentResponse) GetStatus() RemoveInstrumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemoveInstrumentResponse_STATUS_UNSPECIFIED
}

func (x *RemoveInstrumentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SearchInstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criteria:
	//
	//	*SearchInstrumentRequest_ServiceProviderUserKey
	//	*SearchInstrumentRequest_ServiceProviderUserRef
	Criteria isSearchInstrumentRequest_Criteria `protobuf_oneof:"criteria"`
}

func (x *SearchInstrumentRequest) Reset() {
	*x = SearchInstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstrumentRequest) ProtoMessage() {}

func (x *SearchInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstrumentRequest.ProtoReflect.Descriptor instead.
func (*SearchInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{8}
}

func (m *SearchInstrumentRequest) GetCriteria() isSearchInstrumentRequest_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *SearchInstrumentRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetCriteria().(*SearchInstrumentRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *SearchInstrumentRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetCriteria().(*SearchInstrumentRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

type isSearchInstrumentRequest_Criteria interface {
	isSearchInstrumentRequest_Criteria()
}

type SearchInstrumentRequest_ServiceProviderUserKey struct {
	// The key representing this user in Mica.
	ServiceProviderUserKey string `protobuf:"bytes,1,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

type SearchInstrumentRequest_ServiceProviderUserRef struct {
	ServiceProviderUserRef string `protobuf:"bytes,2,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

func (*SearchInstrumentRequest_ServiceProviderUserKey) isSearchInstrumentRequest_Criteria() {}

func (*SearchInstrumentRequest_ServiceProviderUserRef) isSearchInstrumentRequest_Criteria() {}

type SearchInstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SearchInstrumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.SearchInstrumentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// List of instruments that matched the search criteria.
	Instruments []*Instrument `protobuf:"bytes,3,rep,name=instruments,proto3" json:"instruments,omitempty"`
}

func (x *SearchInstrumentResponse) Reset() {
	*x = SearchInstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstrumentResponse) ProtoMessage() {}

func (x *SearchInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstrumentResponse.ProtoReflect.Descriptor instead.
func (*SearchInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{9}
}

func (x *SearchInstrumentResponse) GetStatus() SearchInstrumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchInstrumentResponse_STATUS_UNSPECIFIED
}

func (x *SearchInstrumentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchInstrumentResponse) GetInstruments() []*Instrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type RetrieveTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	// Primary key on the external system.
	ServiceProviderInstrumentRef string `protobuf:"bytes,2,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// Transactions that occurred after this date (inclusive).
	DateFrom *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// Transactions that occurred before this date (exclusive).
	DateTo *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
}

func (x *RetrieveTransactionRequest) Reset() {
	*x = RetrieveTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTransactionRequest) ProtoMessage() {}

func (x *RetrieveTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTransactionRequest.ProtoReflect.Descriptor instead.
func (*RetrieveTransactionRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{10}
}

func (x *RetrieveTransactionRequest) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *RetrieveTransactionRequest) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *RetrieveTransactionRequest) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *RetrieveTransactionRequest) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

type RetrieveTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RetrieveTransactionResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.RetrieveTransactionResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// List of instruments that matched the search criteria.
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *RetrieveTransactionResponse) Reset() {
	*x = RetrieveTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTransactionResponse) ProtoMessage() {}

func (x *RetrieveTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTransactionResponse.ProtoReflect.Descriptor instead.
func (*RetrieveTransactionResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{11}
}

func (x *RetrieveTransactionResponse) GetStatus() RetrieveTransactionResponse_Status {
	if x != nil {
		return x.Status
	}
	return RetrieveTransactionResponse_STATUS_UNSPECIFIED
}

func (x *RetrieveTransactionResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RetrieveTransactionResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type ProvisionInstrumentLinkingCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserIdentifier:
	//
	//	*ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserRef
	//	*ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserKey
	UserIdentifier isProvisionInstrumentLinkingCodeRequest_UserIdentifier `protobuf_oneof:"user_identifier"`
	// Types that are assignable to InstrumentIdentifier:
	//
	//	*ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentRef
	//	*ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentKey
	InstrumentIdentifier isProvisionInstrumentLinkingCodeRequest_InstrumentIdentifier `protobuf_oneof:"instrument_identifier"`
	// if there is any information to exchange at linking time this is when it gets passed to the network which will forward
	// to the merchant/acquiring side when the linking has been created
	Claims       *v1.InstrumentLinkClaims `protobuf:"bytes,5,opt,name=claims,proto3" json:"claims,omitempty"`
	UsageProfile *LinkUsageProfile        `protobuf:"bytes,6,opt,name=usage_profile,json=usageProfile,proto3" json:"usage_profile,omitempty"`
}

func (x *ProvisionInstrumentLinkingCodeRequest) Reset() {
	*x = ProvisionInstrumentLinkingCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionInstrumentLinkingCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionInstrumentLinkingCodeRequest) ProtoMessage() {}

func (x *ProvisionInstrumentLinkingCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionInstrumentLinkingCodeRequest.ProtoReflect.Descriptor instead.
func (*ProvisionInstrumentLinkingCodeRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{12}
}

func (m *ProvisionInstrumentLinkingCodeRequest) GetUserIdentifier() isProvisionInstrumentLinkingCodeRequest_UserIdentifier {
	if m != nil {
		return m.UserIdentifier
	}
	return nil
}

func (x *ProvisionInstrumentLinkingCodeRequest) GetServiceProviderUserRef() string {
	if x, ok := x.GetUserIdentifier().(*ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserRef); ok {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *ProvisionInstrumentLinkingCodeRequest) GetServiceProviderUserKey() string {
	if x, ok := x.GetUserIdentifier().(*ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserKey); ok {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (m *ProvisionInstrumentLinkingCodeRequest) GetInstrumentIdentifier() isProvisionInstrumentLinkingCodeRequest_InstrumentIdentifier {
	if m != nil {
		return m.InstrumentIdentifier
	}
	return nil
}

func (x *ProvisionInstrumentLinkingCodeRequest) GetServiceProviderInstrumentRef() string {
	if x, ok := x.GetInstrumentIdentifier().(*ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentRef); ok {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *ProvisionInstrumentLinkingCodeRequest) GetServiceProviderInstrumentKey() string {
	if x, ok := x.GetInstrumentIdentifier().(*ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentKey); ok {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *ProvisionInstrumentLinkingCodeRequest) GetClaims() *v1.InstrumentLinkClaims {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *ProvisionInstrumentLinkingCodeRequest) GetUsageProfile() *LinkUsageProfile {
	if x != nil {
		return x.UsageProfile
	}
	return nil
}

type isProvisionInstrumentLinkingCodeRequest_UserIdentifier interface {
	isProvisionInstrumentLinkingCodeRequest_UserIdentifier()
}

type ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserRef struct {
	// this is the id in the service provider for the user that is requesting an enrollment
	ServiceProviderUserRef string `protobuf:"bytes,1,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3,oneof"`
}

type ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserKey struct {
	ServiceProviderUserKey string `protobuf:"bytes,2,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3,oneof"`
}

func (*ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserRef) isProvisionInstrumentLinkingCodeRequest_UserIdentifier() {
}

func (*ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserKey) isProvisionInstrumentLinkingCodeRequest_UserIdentifier() {
}

type isProvisionInstrumentLinkingCodeRequest_InstrumentIdentifier interface {
	isProvisionInstrumentLinkingCodeRequest_InstrumentIdentifier()
}

type ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentRef struct {
	// this is the id in the service provider for the instrument (account, etc) that will be used to transact.
	ServiceProviderInstrumentRef string `protobuf:"bytes,3,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3,oneof"`
}

type ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentKey struct {
	ServiceProviderInstrumentKey string `protobuf:"bytes,4,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3,oneof"`
}

func (*ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentRef) isProvisionInstrumentLinkingCodeRequest_InstrumentIdentifier() {
}

func (*ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentKey) isProvisionInstrumentLinkingCodeRequest_InstrumentIdentifier() {
}

type ProvisionInstrumentLinkingCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ProvisionInstrumentLinkingCodeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// this is the code that the service provider can display or send to the user to enter on any prompt asking for it
	LinkingCode string `protobuf:"bytes,3,opt,name=linking_code,json=linkingCode,proto3" json:"linking_code,omitempty"`
}

func (x *ProvisionInstrumentLinkingCodeResponse) Reset() {
	*x = ProvisionInstrumentLinkingCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionInstrumentLinkingCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionInstrumentLinkingCodeResponse) ProtoMessage() {}

func (x *ProvisionInstrumentLinkingCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionInstrumentLinkingCodeResponse.ProtoReflect.Descriptor instead.
func (*ProvisionInstrumentLinkingCodeResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{13}
}

func (x *ProvisionInstrumentLinkingCodeResponse) GetStatus() ProvisionInstrumentLinkingCodeResponse_Status {
	if x != nil {
		return x.Status
	}
	return ProvisionInstrumentLinkingCodeResponse_STATUS_UNSPECIFIED
}

func (x *ProvisionInstrumentLinkingCodeResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProvisionInstrumentLinkingCodeResponse) GetLinkingCode() string {
	if x != nil {
		return x.LinkingCode
	}
	return ""
}

type CompleteLinkingWithCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String code supplied by the end user
	LinkingCode string `protobuf:"bytes,1,opt,name=linking_code,json=linkingCode,proto3" json:"linking_code,omitempty"`
	// Types that are assignable to ToUser:
	//
	//	*CompleteLinkingWithCodeRequest_UserRef
	//	*CompleteLinkingWithCodeRequest_UserKey
	ToUser isCompleteLinkingWithCodeRequest_ToUser `protobuf_oneof:"to_user"`
	// Types that are assignable to ToInstrument:
	//
	//	*CompleteLinkingWithCodeRequest_InstrumentRef
	//	*CompleteLinkingWithCodeRequest_InstrumentKey
	ToInstrument isCompleteLinkingWithCodeRequest_ToInstrument `protobuf_oneof:"to_instrument"`
}

func (x *CompleteLinkingWithCodeRequest) Reset() {
	*x = CompleteLinkingWithCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteLinkingWithCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteLinkingWithCodeRequest) ProtoMessage() {}

func (x *CompleteLinkingWithCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteLinkingWithCodeRequest.ProtoReflect.Descriptor instead.
func (*CompleteLinkingWithCodeRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{14}
}

func (x *CompleteLinkingWithCodeRequest) GetLinkingCode() string {
	if x != nil {
		return x.LinkingCode
	}
	return ""
}

func (m *CompleteLinkingWithCodeRequest) GetToUser() isCompleteLinkingWithCodeRequest_ToUser {
	if m != nil {
		return m.ToUser
	}
	return nil
}

func (x *CompleteLinkingWithCodeRequest) GetUserRef() string {
	if x, ok := x.GetToUser().(*CompleteLinkingWithCodeRequest_UserRef); ok {
		return x.UserRef
	}
	return ""
}

func (x *CompleteLinkingWithCodeRequest) GetUserKey() string {
	if x, ok := x.GetToUser().(*CompleteLinkingWithCodeRequest_UserKey); ok {
		return x.UserKey
	}
	return ""
}

func (m *CompleteLinkingWithCodeRequest) GetToInstrument() isCompleteLinkingWithCodeRequest_ToInstrument {
	if m != nil {
		return m.ToInstrument
	}
	return nil
}

func (x *CompleteLinkingWithCodeRequest) GetInstrumentRef() string {
	if x, ok := x.GetToInstrument().(*CompleteLinkingWithCodeRequest_InstrumentRef); ok {
		return x.InstrumentRef
	}
	return ""
}

func (x *CompleteLinkingWithCodeRequest) GetInstrumentKey() string {
	if x, ok := x.GetToInstrument().(*CompleteLinkingWithCodeRequest_InstrumentKey); ok {
		return x.InstrumentKey
	}
	return ""
}

type isCompleteLinkingWithCodeRequest_ToUser interface {
	isCompleteLinkingWithCodeRequest_ToUser()
}

type CompleteLinkingWithCodeRequest_UserRef struct {
	// this is the id in the service provider for the user that is requesting an enrollment
	UserRef string `protobuf:"bytes,2,opt,name=user_ref,json=userRef,proto3,oneof"`
}

type CompleteLinkingWithCodeRequest_UserKey struct {
	UserKey string `protobuf:"bytes,3,opt,name=user_key,json=userKey,proto3,oneof"`
}

func (*CompleteLinkingWithCodeRequest_UserRef) isCompleteLinkingWithCodeRequest_ToUser() {}

func (*CompleteLinkingWithCodeRequest_UserKey) isCompleteLinkingWithCodeRequest_ToUser() {}

type isCompleteLinkingWithCodeRequest_ToInstrument interface {
	isCompleteLinkingWithCodeRequest_ToInstrument()
}

type CompleteLinkingWithCodeRequest_InstrumentRef struct {
	// this is the id in the service provider for the user that is requesting an enrollment
	InstrumentRef string `protobuf:"bytes,4,opt,name=instrument_ref,json=instrumentRef,proto3,oneof"`
}

type CompleteLinkingWithCodeRequest_InstrumentKey struct {
	InstrumentKey string `protobuf:"bytes,5,opt,name=instrument_key,json=instrumentKey,proto3,oneof"`
}

func (*CompleteLinkingWithCodeRequest_InstrumentRef) isCompleteLinkingWithCodeRequest_ToInstrument() {
}

func (*CompleteLinkingWithCodeRequest_InstrumentKey) isCompleteLinkingWithCodeRequest_ToInstrument() {
}

type CompleteLinkingWithCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         CompleteLinkingWithCodeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	InstrumentLink *InstrumentLink                        `protobuf:"bytes,3,opt,name=instrument_link,json=instrumentLink,proto3" json:"instrument_link,omitempty"`
	// Any claims that are associated with the link as provided by the Service Provider
	Claims *v1.InstrumentLinkClaims `protobuf:"bytes,4,opt,name=claims,proto3" json:"claims,omitempty"`
}

func (x *CompleteLinkingWithCodeResponse) Reset() {
	*x = CompleteLinkingWithCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteLinkingWithCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteLinkingWithCodeResponse) ProtoMessage() {}

func (x *CompleteLinkingWithCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteLinkingWithCodeResponse.ProtoReflect.Descriptor instead.
func (*CompleteLinkingWithCodeResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{15}
}

func (x *CompleteLinkingWithCodeResponse) GetStatus() CompleteLinkingWithCodeResponse_Status {
	if x != nil {
		return x.Status
	}
	return CompleteLinkingWithCodeResponse_STATUS_UNSPECIFIED
}

func (x *CompleteLinkingWithCodeResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CompleteLinkingWithCodeResponse) GetInstrumentLink() *InstrumentLink {
	if x != nil {
		return x.InstrumentLink
	}
	return nil
}

func (x *CompleteLinkingWithCodeResponse) GetClaims() *v1.InstrumentLinkClaims {
	if x != nil {
		return x.Claims
	}
	return nil
}

type GetInstrumentLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkKey string `protobuf:"bytes,1,opt,name=link_key,json=linkKey,proto3" json:"link_key,omitempty"`
}

func (x *GetInstrumentLinkRequest) Reset() {
	*x = GetInstrumentLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstrumentLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstrumentLinkRequest) ProtoMessage() {}

func (x *GetInstrumentLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstrumentLinkRequest.ProtoReflect.Descriptor instead.
func (*GetInstrumentLinkRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{16}
}

func (x *GetInstrumentLinkRequest) GetLinkKey() string {
	if x != nil {
		return x.LinkKey
	}
	return ""
}

type GetInstrumentLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         GetInstrumentLinkResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.GetInstrumentLinkResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	InstrumentLink *InstrumentLink                  `protobuf:"bytes,3,opt,name=instrument_link,json=instrumentLink,proto3" json:"instrument_link,omitempty"`
}

func (x *GetInstrumentLinkResponse) Reset() {
	*x = GetInstrumentLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstrumentLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstrumentLinkResponse) ProtoMessage() {}

func (x *GetInstrumentLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstrumentLinkResponse.ProtoReflect.Descriptor instead.
func (*GetInstrumentLinkResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{17}
}

func (x *GetInstrumentLinkResponse) GetStatus() GetInstrumentLinkResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetInstrumentLinkResponse_STATUS_UNSPECIFIED
}

func (x *GetInstrumentLinkResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetInstrumentLinkResponse) GetInstrumentLink() *InstrumentLink {
	if x != nil {
		return x.InstrumentLink
	}
	return nil
}

// This message allows to search links by user, by instrument, setting both operates as a "AND" operator
type SearchInstrumentLinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ByUser:
	//
	//	*SearchInstrumentLinksRequest_UserRef
	//	*SearchInstrumentLinksRequest_UserKey
	ByUser isSearchInstrumentLinksRequest_ByUser `protobuf_oneof:"by_user"`
	// Types that are assignable to ByInstrument:
	//
	//	*SearchInstrumentLinksRequest_InstrumentRef
	//	*SearchInstrumentLinksRequest_InstrumentKey
	ByInstrument isSearchInstrumentLinksRequest_ByInstrument `protobuf_oneof:"by_instrument"`
}

func (x *SearchInstrumentLinksRequest) Reset() {
	*x = SearchInstrumentLinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstrumentLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstrumentLinksRequest) ProtoMessage() {}

func (x *SearchInstrumentLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstrumentLinksRequest.ProtoReflect.Descriptor instead.
func (*SearchInstrumentLinksRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{18}
}

func (m *SearchInstrumentLinksRequest) GetByUser() isSearchInstrumentLinksRequest_ByUser {
	if m != nil {
		return m.ByUser
	}
	return nil
}

func (x *SearchInstrumentLinksRequest) GetUserRef() string {
	if x, ok := x.GetByUser().(*SearchInstrumentLinksRequest_UserRef); ok {
		return x.UserRef
	}
	return ""
}

func (x *SearchInstrumentLinksRequest) GetUserKey() string {
	if x, ok := x.GetByUser().(*SearchInstrumentLinksRequest_UserKey); ok {
		return x.UserKey
	}
	return ""
}

func (m *SearchInstrumentLinksRequest) GetByInstrument() isSearchInstrumentLinksRequest_ByInstrument {
	if m != nil {
		return m.ByInstrument
	}
	return nil
}

func (x *SearchInstrumentLinksRequest) GetInstrumentRef() string {
	if x, ok := x.GetByInstrument().(*SearchInstrumentLinksRequest_InstrumentRef); ok {
		return x.InstrumentRef
	}
	return ""
}

func (x *SearchInstrumentLinksRequest) GetInstrumentKey() string {
	if x, ok := x.GetByInstrument().(*SearchInstrumentLinksRequest_InstrumentKey); ok {
		return x.InstrumentKey
	}
	return ""
}

type isSearchInstrumentLinksRequest_ByUser interface {
	isSearchInstrumentLinksRequest_ByUser()
}

type SearchInstrumentLinksRequest_UserRef struct {
	// this is the id in the service provider for the user that is requesting an enrollment
	UserRef string `protobuf:"bytes,1,opt,name=user_ref,json=userRef,proto3,oneof"`
}

type SearchInstrumentLinksRequest_UserKey struct {
	UserKey string `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3,oneof"`
}

func (*SearchInstrumentLinksRequest_UserRef) isSearchInstrumentLinksRequest_ByUser() {}

func (*SearchInstrumentLinksRequest_UserKey) isSearchInstrumentLinksRequest_ByUser() {}

type isSearchInstrumentLinksRequest_ByInstrument interface {
	isSearchInstrumentLinksRequest_ByInstrument()
}

type SearchInstrumentLinksRequest_InstrumentRef struct {
	// this is the id in the service provider for the user that is requesting an enrollment
	InstrumentRef string `protobuf:"bytes,3,opt,name=instrument_ref,json=instrumentRef,proto3,oneof"`
}

type SearchInstrumentLinksRequest_InstrumentKey struct {
	InstrumentKey string `protobuf:"bytes,4,opt,name=instrument_key,json=instrumentKey,proto3,oneof"`
}

func (*SearchInstrumentLinksRequest_InstrumentRef) isSearchInstrumentLinksRequest_ByInstrument() {}

func (*SearchInstrumentLinksRequest_InstrumentKey) isSearchInstrumentLinksRequest_ByInstrument() {}

type SearchInstrumentLinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          SearchInstrumentLinksResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.SearchInstrumentLinksResponse_Status" json:"status,omitempty"`
	Error           *v1.Error                            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	InstrumentLinks []*InstrumentLink                    `protobuf:"bytes,3,rep,name=instrument_links,json=instrumentLinks,proto3" json:"instrument_links,omitempty"`
}

func (x *SearchInstrumentLinksResponse) Reset() {
	*x = SearchInstrumentLinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstrumentLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstrumentLinksResponse) ProtoMessage() {}

func (x *SearchInstrumentLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstrumentLinksResponse.ProtoReflect.Descriptor instead.
func (*SearchInstrumentLinksResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{19}
}

func (x *SearchInstrumentLinksResponse) GetStatus() SearchInstrumentLinksResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchInstrumentLinksResponse_STATUS_UNSPECIFIED
}

func (x *SearchInstrumentLinksResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchInstrumentLinksResponse) GetInstrumentLinks() []*InstrumentLink {
	if x != nil {
		return x.InstrumentLinks
	}
	return nil
}

type RemoveInstrumentLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkKey string `protobuf:"bytes,1,opt,name=link_key,json=linkKey,proto3" json:"link_key,omitempty"`
}

func (x *RemoveInstrumentLinkRequest) Reset() {
	*x = RemoveInstrumentLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInstrumentLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInstrumentLinkRequest) ProtoMessage() {}

func (x *RemoveInstrumentLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInstrumentLinkRequest.ProtoReflect.Descriptor instead.
func (*RemoveInstrumentLinkRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveInstrumentLinkRequest) GetLinkKey() string {
	if x != nil {
		return x.LinkKey
	}
	return ""
}

type RemoveInstrumentLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemoveInstrumentLinkResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.RemoveInstrumentLinkResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RemoveInstrumentLinkResponse) Reset() {
	*x = RemoveInstrumentLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInstrumentLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInstrumentLinkResponse) ProtoMessage() {}

func (x *RemoveInstrumentLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInstrumentLinkResponse.ProtoReflect.Descriptor instead.
func (*RemoveInstrumentLinkResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{21}
}

func (x *RemoveInstrumentLinkResponse) GetStatus() RemoveInstrumentLinkResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemoveInstrumentLinkResponse_STATUS_UNSPECIFIED
}

func (x *RemoveInstrumentLinkResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type LinkUsageProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForOneTimeUse bool `protobuf:"varint,1,opt,name=for_one_time_use,json=forOneTimeUse,proto3" json:"for_one_time_use,omitempty"`
}

func (x *LinkUsageProfile) Reset() {
	*x = LinkUsageProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkUsageProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkUsageProfile) ProtoMessage() {}

func (x *LinkUsageProfile) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkUsageProfile.ProtoReflect.Descriptor instead.
func (*LinkUsageProfile) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{22}
}

func (x *LinkUsageProfile) GetForOneTimeUse() bool {
	if x != nil {
		return x.ForOneTimeUse
	}
	return false
}

type InstrumentLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The primary key that represents this link at Mica.
	LinkKey string `protobuf:"bytes,1,opt,name=link_key,json=linkKey,proto3" json:"link_key,omitempty"`
	// version of the link record, used for optimistic locking.
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Date that the Store was created at Mica.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// Date that the Store was last updated at Mica.
	Updated                      *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	ServiceProviderUserKey       string                   `protobuf:"bytes,5,opt,name=service_provider_user_key,json=serviceProviderUserKey,proto3" json:"service_provider_user_key,omitempty"`
	ServiceProviderUserRef       string                   `protobuf:"bytes,6,opt,name=service_provider_user_ref,json=serviceProviderUserRef,proto3" json:"service_provider_user_ref,omitempty"`
	ServiceProviderInstrumentRef string                   `protobuf:"bytes,7,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	ServiceProviderInstrumentKey string                   `protobuf:"bytes,8,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	OrganizationName             string                   `protobuf:"bytes,9,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	OrganizationIconUrl          string                   `protobuf:"bytes,10,opt,name=organization_icon_url,json=organizationIconUrl,proto3" json:"organization_icon_url,omitempty"`
	LinkedInstrumentData         *v1.LinkedInstrumentData `protobuf:"bytes,11,opt,name=linked_instrument_data,json=linkedInstrumentData,proto3" json:"linked_instrument_data,omitempty"`
}

func (x *InstrumentLink) Reset() {
	*x = InstrumentLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentLink) ProtoMessage() {}

func (x *InstrumentLink) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentLink.ProtoReflect.Descriptor instead.
func (*InstrumentLink) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{23}
}

func (x *InstrumentLink) GetLinkKey() string {
	if x != nil {
		return x.LinkKey
	}
	return ""
}

func (x *InstrumentLink) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *InstrumentLink) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *InstrumentLink) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *InstrumentLink) GetServiceProviderUserKey() string {
	if x != nil {
		return x.ServiceProviderUserKey
	}
	return ""
}

func (x *InstrumentLink) GetServiceProviderUserRef() string {
	if x != nil {
		return x.ServiceProviderUserRef
	}
	return ""
}

func (x *InstrumentLink) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *InstrumentLink) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *InstrumentLink) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *InstrumentLink) GetOrganizationIconUrl() string {
	if x != nil {
		return x.OrganizationIconUrl
	}
	return ""
}

func (x *InstrumentLink) GetLinkedInstrumentData() *v1.LinkedInstrumentData {
	if x != nil {
		return x.LinkedInstrumentData
	}
	return nil
}

type GetRecurringPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey string `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
}

func (x *GetRecurringPaymentRequest) Reset() {
	*x = GetRecurringPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPaymentRequest) ProtoMessage() {}

func (x *GetRecurringPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPaymentRequest.ProtoReflect.Descriptor instead.
func (*GetRecurringPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{24}
}

func (x *GetRecurringPaymentRequest) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

type GetRecurringPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           GetRecurringPaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.GetRecurringPaymentResponse_Status" json:"status,omitempty"`
	Error            *v1.Error                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RecurringPayment *v1.RecurringPayment               `protobuf:"bytes,3,opt,name=recurring_payment,json=recurringPayment,proto3" json:"recurring_payment,omitempty"`
}

func (x *GetRecurringPaymentResponse) Reset() {
	*x = GetRecurringPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPaymentResponse) ProtoMessage() {}

func (x *GetRecurringPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPaymentResponse.ProtoReflect.Descriptor instead.
func (*GetRecurringPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{25}
}

func (x *GetRecurringPaymentResponse) GetStatus() GetRecurringPaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetRecurringPaymentResponse_STATUS_UNSPECIFIED
}

func (x *GetRecurringPaymentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetRecurringPaymentResponse) GetRecurringPayment() *v1.RecurringPayment {
	if x != nil {
		return x.RecurringPayment
	}
	return nil
}

type CancelRecurringPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey string `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
}

func (x *CancelRecurringPaymentRequest) Reset() {
	*x = CancelRecurringPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRecurringPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRecurringPaymentRequest) ProtoMessage() {}

func (x *CancelRecurringPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRecurringPaymentRequest.ProtoReflect.Descriptor instead.
func (*CancelRecurringPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{26}
}

func (x *CancelRecurringPaymentRequest) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

type CancelRecurringPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CancelRecurringPaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.CancelRecurringPaymentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CancelRecurringPaymentResponse) Reset() {
	*x = CancelRecurringPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRecurringPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRecurringPaymentResponse) ProtoMessage() {}

func (x *CancelRecurringPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRecurringPaymentResponse.ProtoReflect.Descriptor instead.
func (*CancelRecurringPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{27}
}

func (x *CancelRecurringPaymentResponse) GetStatus() CancelRecurringPaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return CancelRecurringPaymentResponse_STATUS_UNSPECIFIED
}

func (x *CancelRecurringPaymentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SearchRecurringPaymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ByUser:
	//
	//	*SearchRecurringPaymentsRequest_UserRef
	//	*SearchRecurringPaymentsRequest_UserKey
	ByUser isSearchRecurringPaymentsRequest_ByUser `protobuf_oneof:"by_user"`
	// Types that are assignable to ByInstrument:
	//
	//	*SearchRecurringPaymentsRequest_InstrumentRef
	//	*SearchRecurringPaymentsRequest_InstrumentKey
	ByInstrument isSearchRecurringPaymentsRequest_ByInstrument `protobuf_oneof:"by_instrument"`
}

func (x *SearchRecurringPaymentsRequest) Reset() {
	*x = SearchRecurringPaymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecurringPaymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecurringPaymentsRequest) ProtoMessage() {}

func (x *SearchRecurringPaymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecurringPaymentsRequest.ProtoReflect.Descriptor instead.
func (*SearchRecurringPaymentsRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{28}
}

func (m *SearchRecurringPaymentsRequest) GetByUser() isSearchRecurringPaymentsRequest_ByUser {
	if m != nil {
		return m.ByUser
	}
	return nil
}

func (x *SearchRecurringPaymentsRequest) GetUserRef() string {
	if x, ok := x.GetByUser().(*SearchRecurringPaymentsRequest_UserRef); ok {
		return x.UserRef
	}
	return ""
}

func (x *SearchRecurringPaymentsRequest) GetUserKey() string {
	if x, ok := x.GetByUser().(*SearchRecurringPaymentsRequest_UserKey); ok {
		return x.UserKey
	}
	return ""
}

func (m *SearchRecurringPaymentsRequest) GetByInstrument() isSearchRecurringPaymentsRequest_ByInstrument {
	if m != nil {
		return m.ByInstrument
	}
	return nil
}

func (x *SearchRecurringPaymentsRequest) GetInstrumentRef() string {
	if x, ok := x.GetByInstrument().(*SearchRecurringPaymentsRequest_InstrumentRef); ok {
		return x.InstrumentRef
	}
	return ""
}

func (x *SearchRecurringPaymentsRequest) GetInstrumentKey() string {
	if x, ok := x.GetByInstrument().(*SearchRecurringPaymentsRequest_InstrumentKey); ok {
		return x.InstrumentKey
	}
	return ""
}

type isSearchRecurringPaymentsRequest_ByUser interface {
	isSearchRecurringPaymentsRequest_ByUser()
}

type SearchRecurringPaymentsRequest_UserRef struct {
	// this is the id in the service provider for the user that is requesting an enrollment
	UserRef string `protobuf:"bytes,1,opt,name=user_ref,json=userRef,proto3,oneof"`
}

type SearchRecurringPaymentsRequest_UserKey struct {
	UserKey string `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3,oneof"`
}

func (*SearchRecurringPaymentsRequest_UserRef) isSearchRecurringPaymentsRequest_ByUser() {}

func (*SearchRecurringPaymentsRequest_UserKey) isSearchRecurringPaymentsRequest_ByUser() {}

type isSearchRecurringPaymentsRequest_ByInstrument interface {
	isSearchRecurringPaymentsRequest_ByInstrument()
}

type SearchRecurringPaymentsRequest_InstrumentRef struct {
	// this is the id in the service provider for the user that is requesting an enrollment
	InstrumentRef string `protobuf:"bytes,3,opt,name=instrument_ref,json=instrumentRef,proto3,oneof"`
}

type SearchRecurringPaymentsRequest_InstrumentKey struct {
	InstrumentKey string `protobuf:"bytes,4,opt,name=instrument_key,json=instrumentKey,proto3,oneof"`
}

func (*SearchRecurringPaymentsRequest_InstrumentRef) isSearchRecurringPaymentsRequest_ByInstrument() {
}

func (*SearchRecurringPaymentsRequest_InstrumentKey) isSearchRecurringPaymentsRequest_ByInstrument() {
}

type SearchRecurringPaymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            SearchRecurringPaymentsResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.instrument.v1.SearchRecurringPaymentsResponse_Status" json:"status,omitempty"`
	Error             *v1.Error                              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RecurringPayments []*v1.RecurringPayment                 `protobuf:"bytes,3,rep,name=recurring_payments,json=recurringPayments,proto3" json:"recurring_payments,omitempty"`
}

func (x *SearchRecurringPaymentsResponse) Reset() {
	*x = SearchRecurringPaymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecurringPaymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecurringPaymentsResponse) ProtoMessage() {}

func (x *SearchRecurringPaymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecurringPaymentsResponse.ProtoReflect.Descriptor instead.
func (*SearchRecurringPaymentsResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP(), []int{29}
}

func (x *SearchRecurringPaymentsResponse) GetStatus() SearchRecurringPaymentsResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchRecurringPaymentsResponse_STATUS_UNSPECIFIED
}

func (x *SearchRecurringPaymentsResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchRecurringPaymentsResponse) GetRecurringPayments() []*v1.RecurringPayment {
	if x != nil {
		return x.RecurringPayments
	}
	return nil
}

var File_mica_serviceprovider_instrument_v1_instrument_proto protoreflect.FileDescriptor

var file_mica_serviceprovider_instrument_v1_instrument_proto_rawDesc = []byte{
	0x0a, 0x33, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xac, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x55, 0x0a, 0x22, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x32, 0x18, 0x01, 0x52, 0x1e, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x32, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x4e, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x12, 0x62, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x88, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x1a,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x1f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32,
	0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x22, 0xda, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x1f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x42, 0x1c, 0x0a, 0x15, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x89, 0x05, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x1c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x4e, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x16,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x62, 0x0a, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xdd, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x1f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x42, 0x1c, 0x0a, 0x15,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x18, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xb1, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x42, 0x0a, 0x0a,
	0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0xda, 0x02, 0x0a, 0x18, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xa1, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x1f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x37, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0xee, 0x02, 0x0a, 0x1b, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x53, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x67, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xb0, 0x04, 0x0a, 0x25,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x46, 0x0a, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x01, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x52, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x01, 0x52, 0x1c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x59, 0x0a,
	0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x42, 0x1c, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xee,
	0x02, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x22,
	0x93, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64,
	0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x32, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x6f, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa5, 0x04, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x5b, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a,
	0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x22, 0xc9, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x06, 0x22, 0x35, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e,
	0x6b, 0x4b, 0x65, 0x79, 0x22, 0xda, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x22, 0x4f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x22, 0xee, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x12, 0x32, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x22, 0x38, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x4b, 0x65, 0x79, 0x22, 0x96,
	0x02, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x47, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x62, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x03, 0x22, 0x3b, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x66,
	0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x22, 0xf8, 0x04, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x4b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x45,
	0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x60, 0x0a,
	0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x5b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xd1, 0x02, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x53, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02,
	0x22, 0x5e, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x13, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x22, 0x82, 0x02, 0x0a, 0x1e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xf0, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x26,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x32, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x62, 0x79, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x1f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x62, 0x0a, 0x25, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42,
	0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x21, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescOnce sync.Once
	file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescData = file_mica_serviceprovider_instrument_v1_instrument_proto_rawDesc
)

func file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescGZIP() []byte {
	file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescOnce.Do(func() {
		file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescData)
	})
	return file_mica_serviceprovider_instrument_v1_instrument_proto_rawDescData
}

var file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_mica_serviceprovider_instrument_v1_instrument_proto_goTypes = []interface{}{
	(RegisterInstrumentResponse_Status)(0),             // 0: mica.serviceprovider.instrument.v1.RegisterInstrumentResponse.Status
	(GetInstrumentResponse_Status)(0),                  // 1: mica.serviceprovider.instrument.v1.GetInstrumentResponse.Status
	(RemoveInstrumentResponse_Status)(0),               // 2: mica.serviceprovider.instrument.v1.RemoveInstrumentResponse.Status
	(SearchInstrumentResponse_Status)(0),               // 3: mica.serviceprovider.instrument.v1.SearchInstrumentResponse.Status
	(RetrieveTransactionResponse_Status)(0),            // 4: mica.serviceprovider.instrument.v1.RetrieveTransactionResponse.Status
	(ProvisionInstrumentLinkingCodeResponse_Status)(0), // 5: mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeResponse.Status
	(CompleteLinkingWithCodeResponse_Status)(0),        // 6: mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeResponse.Status
	(GetInstrumentLinkResponse_Status)(0),              // 7: mica.serviceprovider.instrument.v1.GetInstrumentLinkResponse.Status
	(SearchInstrumentLinksResponse_Status)(0),          // 8: mica.serviceprovider.instrument.v1.SearchInstrumentLinksResponse.Status
	(RemoveInstrumentLinkResponse_Status)(0),           // 9: mica.serviceprovider.instrument.v1.RemoveInstrumentLinkResponse.Status
	(GetRecurringPaymentResponse_Status)(0),            // 10: mica.serviceprovider.instrument.v1.GetRecurringPaymentResponse.Status
	(CancelRecurringPaymentResponse_Status)(0),         // 11: mica.serviceprovider.instrument.v1.CancelRecurringPaymentResponse.Status
	(SearchRecurringPaymentsResponse_Status)(0),        // 12: mica.serviceprovider.instrument.v1.SearchRecurringPaymentsResponse.Status
	(*RegisterInstrumentRequest)(nil),                  // 13: mica.serviceprovider.instrument.v1.RegisterInstrumentRequest
	(*Transaction)(nil),                                // 14: mica.serviceprovider.instrument.v1.Transaction
	(*RegisterInstrumentResponse)(nil),                 // 15: mica.serviceprovider.instrument.v1.RegisterInstrumentResponse
	(*GetInstrumentRequest)(nil),                       // 16: mica.serviceprovider.instrument.v1.GetInstrumentRequest
	(*Instrument)(nil),                                 // 17: mica.serviceprovider.instrument.v1.Instrument
	(*GetInstrumentResponse)(nil),                      // 18: mica.serviceprovider.instrument.v1.GetInstrumentResponse
	(*RemoveInstrumentRequest)(nil),                    // 19: mica.serviceprovider.instrument.v1.RemoveInstrumentRequest
	(*RemoveInstrumentResponse)(nil),                   // 20: mica.serviceprovider.instrument.v1.RemoveInstrumentResponse
	(*SearchInstrumentRequest)(nil),                    // 21: mica.serviceprovider.instrument.v1.SearchInstrumentRequest
	(*SearchInstrumentResponse)(nil),                   // 22: mica.serviceprovider.instrument.v1.SearchInstrumentResponse
	(*RetrieveTransactionRequest)(nil),                 // 23: mica.serviceprovider.instrument.v1.RetrieveTransactionRequest
	(*RetrieveTransactionResponse)(nil),                // 24: mica.serviceprovider.instrument.v1.RetrieveTransactionResponse
	(*ProvisionInstrumentLinkingCodeRequest)(nil),      // 25: mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeRequest
	(*ProvisionInstrumentLinkingCodeResponse)(nil),     // 26: mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeResponse
	(*CompleteLinkingWithCodeRequest)(nil),             // 27: mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeRequest
	(*CompleteLinkingWithCodeResponse)(nil),            // 28: mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeResponse
	(*GetInstrumentLinkRequest)(nil),                   // 29: mica.serviceprovider.instrument.v1.GetInstrumentLinkRequest
	(*GetInstrumentLinkResponse)(nil),                  // 30: mica.serviceprovider.instrument.v1.GetInstrumentLinkResponse
	(*SearchInstrumentLinksRequest)(nil),               // 31: mica.serviceprovider.instrument.v1.SearchInstrumentLinksRequest
	(*SearchInstrumentLinksResponse)(nil),              // 32: mica.serviceprovider.instrument.v1.SearchInstrumentLinksResponse
	(*RemoveInstrumentLinkRequest)(nil),                // 33: mica.serviceprovider.instrument.v1.RemoveInstrumentLinkRequest
	(*RemoveInstrumentLinkResponse)(nil),               // 34: mica.serviceprovider.instrument.v1.RemoveInstrumentLinkResponse
	(*LinkUsageProfile)(nil),                           // 35: mica.serviceprovider.instrument.v1.LinkUsageProfile
	(*InstrumentLink)(nil),                             // 36: mica.serviceprovider.instrument.v1.InstrumentLink
	(*GetRecurringPaymentRequest)(nil),                 // 37: mica.serviceprovider.instrument.v1.GetRecurringPaymentRequest
	(*GetRecurringPaymentResponse)(nil),                // 38: mica.serviceprovider.instrument.v1.GetRecurringPaymentResponse
	(*CancelRecurringPaymentRequest)(nil),              // 39: mica.serviceprovider.instrument.v1.CancelRecurringPaymentRequest
	(*CancelRecurringPaymentResponse)(nil),             // 40: mica.serviceprovider.instrument.v1.CancelRecurringPaymentResponse
	(*SearchRecurringPaymentsRequest)(nil),             // 41: mica.serviceprovider.instrument.v1.SearchRecurringPaymentsRequest
	(*SearchRecurringPaymentsResponse)(nil),            // 42: mica.serviceprovider.instrument.v1.SearchRecurringPaymentsResponse
	(instrumenttypev1.InstrumentType)(0),               // 43: micashared.common.enums.instrumenttype.v1.InstrumentType
	(currencyv1.Currency)(0),                           // 44: micashared.common.enums.currency.v1.Currency
	(*timestamppb.Timestamp)(nil),                      // 45: google.protobuf.Timestamp
	(*v1.Error)(nil),                                   // 46: micashared.common.v1.Error
	(*v1.InstrumentLinkClaims)(nil),                    // 47: micashared.common.v1.InstrumentLinkClaims
	(*v1.LinkedInstrumentData)(nil),                    // 48: micashared.common.v1.LinkedInstrumentData
	(*v1.RecurringPayment)(nil),                        // 49: micashared.common.v1.RecurringPayment
}
var file_mica_serviceprovider_instrument_v1_instrument_proto_depIdxs = []int32{
	43, // 0: mica.serviceprovider.instrument.v1.RegisterInstrumentRequest.instrument_type:type_name -> micashared.common.enums.instrumenttype.v1.InstrumentType
	44, // 1: mica.serviceprovider.instrument.v1.RegisterInstrumentRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	45, // 2: mica.serviceprovider.instrument.v1.Transaction.created:type_name -> google.protobuf.Timestamp
	0,  // 3: mica.serviceprovider.instrument.v1.RegisterInstrumentResponse.status:type_name -> mica.serviceprovider.instrument.v1.RegisterInstrumentResponse.Status
	46, // 4: mica.serviceprovider.instrument.v1.RegisterInstrumentResponse.error:type_name -> micashared.common.v1.Error
	45, // 5: mica.serviceprovider.instrument.v1.Instrument.created:type_name -> google.protobuf.Timestamp
	45, // 6: mica.serviceprovider.instrument.v1.Instrument.updated:type_name -> google.protobuf.Timestamp
	43, // 7: mica.serviceprovider.instrument.v1.Instrument.instrument_type:type_name -> micashared.common.enums.instrumenttype.v1.InstrumentType
	44, // 8: mica.serviceprovider.instrument.v1.Instrument.currency:type_name -> micashared.common.enums.currency.v1.Currency
	1,  // 9: mica.serviceprovider.instrument.v1.GetInstrumentResponse.status:type_name -> mica.serviceprovider.instrument.v1.GetInstrumentResponse.Status
	46, // 10: mica.serviceprovider.instrument.v1.GetInstrumentResponse.error:type_name -> micashared.common.v1.Error
	17, // 11: mica.serviceprovider.instrument.v1.GetInstrumentResponse.instrument:type_name -> mica.serviceprovider.instrument.v1.Instrument
	2,  // 12: mica.serviceprovider.instrument.v1.RemoveInstrumentResponse.status:type_name -> mica.serviceprovider.instrument.v1.RemoveInstrumentResponse.Status
	46, // 13: mica.serviceprovider.instrument.v1.RemoveInstrumentResponse.error:type_name -> micashared.common.v1.Error
	3,  // 14: mica.serviceprovider.instrument.v1.SearchInstrumentResponse.status:type_name -> mica.serviceprovider.instrument.v1.SearchInstrumentResponse.Status
	46, // 15: mica.serviceprovider.instrument.v1.SearchInstrumentResponse.error:type_name -> micashared.common.v1.Error
	17, // 16: mica.serviceprovider.instrument.v1.SearchInstrumentResponse.instruments:type_name -> mica.serviceprovider.instrument.v1.Instrument
	45, // 17: mica.serviceprovider.instrument.v1.RetrieveTransactionRequest.date_from:type_name -> google.protobuf.Timestamp
	45, // 18: mica.serviceprovider.instrument.v1.RetrieveTransactionRequest.date_to:type_name -> google.protobuf.Timestamp
	4,  // 19: mica.serviceprovider.instrument.v1.RetrieveTransactionResponse.status:type_name -> mica.serviceprovider.instrument.v1.RetrieveTransactionResponse.Status
	46, // 20: mica.serviceprovider.instrument.v1.RetrieveTransactionResponse.error:type_name -> micashared.common.v1.Error
	14, // 21: mica.serviceprovider.instrument.v1.RetrieveTransactionResponse.transactions:type_name -> mica.serviceprovider.instrument.v1.Transaction
	47, // 22: mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeRequest.claims:type_name -> micashared.common.v1.InstrumentLinkClaims
	35, // 23: mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeRequest.usage_profile:type_name -> mica.serviceprovider.instrument.v1.LinkUsageProfile
	5,  // 24: mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeResponse.status:type_name -> mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeResponse.Status
	46, // 25: mica.serviceprovider.instrument.v1.ProvisionInstrumentLinkingCodeResponse.error:type_name -> micashared.common.v1.Error
	6,  // 26: mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeResponse.status:type_name -> mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeResponse.Status
	46, // 27: mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeResponse.error:type_name -> micashared.common.v1.Error
	36, // 28: mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeResponse.instrument_link:type_name -> mica.serviceprovider.instrument.v1.InstrumentLink
	47, // 29: mica.serviceprovider.instrument.v1.CompleteLinkingWithCodeResponse.claims:type_name -> micashared.common.v1.InstrumentLinkClaims
	7,  // 30: mica.serviceprovider.instrument.v1.GetInstrumentLinkResponse.status:type_name -> mica.serviceprovider.instrument.v1.GetInstrumentLinkResponse.Status
	46, // 31: mica.serviceprovider.instrument.v1.GetInstrumentLinkResponse.error:type_name -> micashared.common.v1.Error
	36, // 32: mica.serviceprovider.instrument.v1.GetInstrumentLinkResponse.instrument_link:type_name -> mica.serviceprovider.instrument.v1.InstrumentLink
	8,  // 33: mica.serviceprovider.instrument.v1.SearchInstrumentLinksResponse.status:type_name -> mica.serviceprovider.instrument.v1.SearchInstrumentLinksResponse.Status
	46, // 34: mica.serviceprovider.instrument.v1.SearchInstrumentLinksResponse.error:type_name -> micashared.common.v1.Error
	36, // 35: mica.serviceprovider.instrument.v1.SearchInstrumentLinksResponse.instrument_links:type_name -> mica.serviceprovider.instrument.v1.InstrumentLink
	9,  // 36: mica.serviceprovider.instrument.v1.RemoveInstrumentLinkResponse.status:type_name -> mica.serviceprovider.instrument.v1.RemoveInstrumentLinkResponse.Status
	46, // 37: mica.serviceprovider.instrument.v1.RemoveInstrumentLinkResponse.error:type_name -> micashared.common.v1.Error
	45, // 38: mica.serviceprovider.instrument.v1.InstrumentLink.created:type_name -> google.protobuf.Timestamp
	45, // 39: mica.serviceprovider.instrument.v1.InstrumentLink.updated:type_name -> google.protobuf.Timestamp
	48, // 40: mica.serviceprovider.instrument.v1.InstrumentLink.linked_instrument_data:type_name -> micashared.common.v1.LinkedInstrumentData
	10, // 41: mica.serviceprovider.instrument.v1.GetRecurringPaymentResponse.status:type_name -> mica.serviceprovider.instrument.v1.GetRecurringPaymentResponse.Status
	46, // 42: mica.serviceprovider.instrument.v1.GetRecurringPaymentResponse.error:type_name -> micashared.common.v1.Error
	49, // 43: mica.serviceprovider.instrument.v1.GetRecurringPaymentResponse.recurring_payment:type_name -> micashared.common.v1.RecurringPayment
	11, // 44: mica.serviceprovider.instrument.v1.CancelRecurringPaymentResponse.status:type_name -> mica.serviceprovider.instrument.v1.CancelRecurringPaymentResponse.Status
	46, // 45: mica.serviceprovider.instrument.v1.CancelRecurringPaymentResponse.error:type_name -> micashared.common.v1.Error
	12, // 46: mica.serviceprovider.instrument.v1.SearchRecurringPaymentsResponse.status:type_name -> mica.serviceprovider.instrument.v1.SearchRecurringPaymentsResponse.Status
	46, // 47: mica.serviceprovider.instrument.v1.SearchRecurringPaymentsResponse.error:type_name -> micashared.common.v1.Error
	49, // 48: mica.serviceprovider.instrument.v1.SearchRecurringPaymentsResponse.recurring_payments:type_name -> micashared.common.v1.RecurringPayment
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_mica_serviceprovider_instrument_v1_instrument_proto_init() }
func file_mica_serviceprovider_instrument_v1_instrument_proto_init() {
	if File_mica_serviceprovider_instrument_v1_instrument_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionInstrumentLinkingCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionInstrumentLinkingCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteLinkingWithCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteLinkingWithCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstrumentLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstrumentLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstrumentLinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstrumentLinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInstrumentLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInstrumentLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkUsageProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRecurringPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRecurringPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecurringPaymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecurringPaymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RegisterInstrumentRequest_ServiceProviderUserKey)(nil),
		(*RegisterInstrumentRequest_ServiceProviderUserRef)(nil),
	}
	file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetInstrumentRequest_ServiceProviderInstrumentKey)(nil),
		(*GetInstrumentRequest_ServiceProviderInstrumentRef)(nil),
	}
	file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RemoveInstrumentRequest_ServiceProviderInstrumentKey)(nil),
		(*RemoveInstrumentRequest_ServiceProviderInstrumentRef)(nil),
	}
	file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SearchInstrumentRequest_ServiceProviderUserKey)(nil),
		(*SearchInstrumentRequest_ServiceProviderUserRef)(nil),
	}
	file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserRef)(nil),
		(*ProvisionInstrumentLinkingCodeRequest_ServiceProviderUserKey)(nil),
		(*ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentRef)(nil),
		(*ProvisionInstrumentLinkingCodeRequest_ServiceProviderInstrumentKey)(nil),
	}
	file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*CompleteLinkingWithCodeRequest_UserRef)(nil),
		(*CompleteLinkingWithCodeRequest_UserKey)(nil),
		(*CompleteLinkingWithCodeRequest_InstrumentRef)(nil),
		(*CompleteLinkingWithCodeRequest_InstrumentKey)(nil),
	}
	file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*SearchInstrumentLinksRequest_UserRef)(nil),
		(*SearchInstrumentLinksRequest_UserKey)(nil),
		(*SearchInstrumentLinksRequest_InstrumentRef)(nil),
		(*SearchInstrumentLinksRequest_InstrumentKey)(nil),
	}
	file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*SearchRecurringPaymentsRequest_UserRef)(nil),
		(*SearchRecurringPaymentsRequest_UserKey)(nil),
		(*SearchRecurringPaymentsRequest_InstrumentRef)(nil),
		(*SearchRecurringPaymentsRequest_InstrumentKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_serviceprovider_instrument_v1_instrument_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_serviceprovider_instrument_v1_instrument_proto_goTypes,
		DependencyIndexes: file_mica_serviceprovider_instrument_v1_instrument_proto_depIdxs,
		EnumInfos:         file_mica_serviceprovider_instrument_v1_instrument_proto_enumTypes,
		MessageInfos:      file_mica_serviceprovider_instrument_v1_instrument_proto_msgTypes,
	}.Build()
	File_mica_serviceprovider_instrument_v1_instrument_proto = out.File
	file_mica_serviceprovider_instrument_v1_instrument_proto_rawDesc = nil
	file_mica_serviceprovider_instrument_v1_instrument_proto_goTypes = nil
	file_mica_serviceprovider_instrument_v1_instrument_proto_depIdxs = nil
}
