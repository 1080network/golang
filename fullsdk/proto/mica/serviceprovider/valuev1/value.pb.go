// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v6.30.2
// source: mica/serviceprovider/value/v1/value.proto

package valuev1

import (
	commonv1 "github.com/1080network/golang/fullsdk/proto/mica/commonv1"
	instrumentv1 "github.com/1080network/golang/fullsdk/proto/mica/serviceprovider/instrumentv1"
	approvaltypev1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/approvaltypev1"
	organizationcategoryv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/organizationcategoryv1"
	valueoperationtypev1 "github.com/1080network/golang/fullsdk/proto/micashared/common/enums/valueoperationtypev1"
	v1 "github.com/1080network/golang/fullsdk/proto/micashared/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PINStatus int32

const (
	PINStatus_PIN_STATUS_UNSPECIFIED PINStatus = 0
	PINStatus_PIN_STATUS_MATCH       PINStatus = 1
)

// Enum value maps for PINStatus.
var (
	PINStatus_name = map[int32]string{
		0: "PIN_STATUS_UNSPECIFIED",
		1: "PIN_STATUS_MATCH",
	}
	PINStatus_value = map[string]int32{
		"PIN_STATUS_UNSPECIFIED": 0,
		"PIN_STATUS_MATCH":       1,
	}
)

func (x PINStatus) Enum() *PINStatus {
	p := new(PINStatus)
	*p = x
	return p
}

func (x PINStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PINStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[0].Descriptor()
}

func (PINStatus) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[0]
}

func (x PINStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PINStatus.Descriptor instead.
func (PINStatus) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{0}
}

// AdviceReason contains a list of reasons why Mica may have performed a network decline.
type AdviceReason int32

const (
	AdviceReason_ADVICE_REASON_UNSPECIFIED AdviceReason = 0
	// While processing a Value request, there was a non-specific error.
	AdviceReason_ADVICE_REASON_ERROR AdviceReason = 1
	// While processing a Value request, the UUEK was invalid.
	AdviceReason_ADVICE_REASON_INVALID_UUEK AdviceReason = 2
	// While processing a Value request, the user or instrument record was not found.
	AdviceReason_ADVICE_REASON_NOT_FOUND AdviceReason = 3
	// While processing a Value request, the required line items were missing.
	AdviceReason_ADVICE_REASON_MISSING_LINE_ITEMS AdviceReason = 4
	// While processing a Value request, all of the products were ineligible (i.e., the requested amount was zero).
	AdviceReason_ADVICE_REASON_INELIGIBLE_PRODUCTS AdviceReason = 5
	// While processing a Value request, the Service Provider was unavailable. The single request timeout case is
	// covered by TIMEOUT below. This case is meant to happen when the service repeatedly fails to respond and is
	// marked down or the SP client circuit breaker is open (not currently implemented).
	AdviceReason_ADVICE_REASON_SERVICE_PROVIDER_UNAVAILABLE AdviceReason = 6
	// While processing a Value request, Mica timed out because Service Provider did not respond in time. We send this
	// notification to the SP so the Issuer can reverse the transaction if in fact it was completed.
	AdviceReason_ADVICE_REASON_SERVICE_PROVIDER_TIMEOUT AdviceReason = 7
)

// Enum value maps for AdviceReason.
var (
	AdviceReason_name = map[int32]string{
		0: "ADVICE_REASON_UNSPECIFIED",
		1: "ADVICE_REASON_ERROR",
		2: "ADVICE_REASON_INVALID_UUEK",
		3: "ADVICE_REASON_NOT_FOUND",
		4: "ADVICE_REASON_MISSING_LINE_ITEMS",
		5: "ADVICE_REASON_INELIGIBLE_PRODUCTS",
		6: "ADVICE_REASON_SERVICE_PROVIDER_UNAVAILABLE",
		7: "ADVICE_REASON_SERVICE_PROVIDER_TIMEOUT",
	}
	AdviceReason_value = map[string]int32{
		"ADVICE_REASON_UNSPECIFIED":                  0,
		"ADVICE_REASON_ERROR":                        1,
		"ADVICE_REASON_INVALID_UUEK":                 2,
		"ADVICE_REASON_NOT_FOUND":                    3,
		"ADVICE_REASON_MISSING_LINE_ITEMS":           4,
		"ADVICE_REASON_INELIGIBLE_PRODUCTS":          5,
		"ADVICE_REASON_SERVICE_PROVIDER_UNAVAILABLE": 6,
		"ADVICE_REASON_SERVICE_PROVIDER_TIMEOUT":     7,
	}
)

func (x AdviceReason) Enum() *AdviceReason {
	p := new(AdviceReason)
	*p = x
	return p
}

func (x AdviceReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdviceReason) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[1].Descriptor()
}

func (AdviceReason) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[1]
}

func (x AdviceReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdviceReason.Descriptor instead.
func (AdviceReason) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{1}
}

type ObtainValueResponse_Status int32

const (
	ObtainValueResponse_STATUS_UNSPECIFIED ObtainValueResponse_Status = 0
	// An approval for the full amount
	ObtainValueResponse_STATUS_FULL_APPROVAL ObtainValueResponse_Status = 1
	// An error occurred when processing the request
	ObtainValueResponse_STATUS_ERROR ObtainValueResponse_Status = 2
	// An approval was given for a partial amount
	ObtainValueResponse_STATUS_PARTIAL_APPROVAL ObtainValueResponse_Status = 3
	// User instrument doesn't have sufficient value to cover the transaction
	ObtainValueResponse_STATUS_INSUFFICIENT_VALUE ObtainValueResponse_Status = 4
	// When all products are either ineligible or age restricted
	ObtainValueResponse_STATUS_INELIGIBLE_PRODUCTS ObtainValueResponse_Status = 5
	// Instrument/account not found
	ObtainValueResponse_STATUS_NOT_FOUND ObtainValueResponse_Status = 6
	// User instrument is closed
	ObtainValueResponse_STATUS_INSTRUMENT_CLOSED ObtainValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_TRANSACTION_RISK_FRAUD ObtainValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ObtainValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_USER_RISK_FRAUD ObtainValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ObtainValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	ObtainValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ObtainValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	ObtainValueResponse_STATUS_UNSUPPORTED ObtainValueResponse_Status = 10
	// The Service Provider is temporarily unavailable
	ObtainValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ObtainValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	ObtainValueResponse_STATUS_INVALID_UUEK ObtainValueResponse_Status = 12
	// A valid PIN is required for this transaction
	ObtainValueResponse_STATUS_PIN_REQUIRED ObtainValueResponse_Status = 13
	// Request resulted in one or more limits being exceeded at the Service Provider
	ObtainValueResponse_STATUS_LIMIT_EXCEEDED ObtainValueResponse_Status = 19
)

// Enum value maps for ObtainValueResponse_Status.
var (
	ObtainValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		3:  "STATUS_PARTIAL_APPROVAL",
		4:  "STATUS_INSUFFICIENT_VALUE",
		5:  "STATUS_INELIGIBLE_PRODUCTS",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		19: "STATUS_LIMIT_EXCEEDED",
	}
	ObtainValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_PARTIAL_APPROVAL":             3,
		"STATUS_INSUFFICIENT_VALUE":           4,
		"STATUS_INELIGIBLE_PRODUCTS":          5,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_LIMIT_EXCEEDED":               19,
	}
)

func (x ObtainValueResponse_Status) Enum() *ObtainValueResponse_Status {
	p := new(ObtainValueResponse_Status)
	*p = x
	return p
}

func (x ObtainValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObtainValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[2].Descriptor()
}

func (ObtainValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[2]
}

func (x ObtainValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObtainValueResponse_Status.Descriptor instead.
func (ObtainValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{3, 0}
}

type ReverseObtainValueResponse_Status int32

const (
	ReverseObtainValueResponse_STATUS_UNSPECIFIED ReverseObtainValueResponse_Status = 0
	// An approval for the full amount
	ReverseObtainValueResponse_STATUS_SUCCESS ReverseObtainValueResponse_Status = 3
	// An error occurred when processing the request
	ReverseObtainValueResponse_STATUS_ERROR ReverseObtainValueResponse_Status = 2
	// An approval was given for a partial amount
	ReverseObtainValueResponse_STATUS_NOT_FOUND ReverseObtainValueResponse_Status = 4
	// The user needs to call the Service Provider to resolve an issue
	ReverseObtainValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ReverseObtainValueResponse_Status = 14
	// The original transaction falls outside the allowable time window for reversal
	ReverseObtainValueResponse_STATUS_CUTOFF_EXCEEDED ReverseObtainValueResponse_Status = 15
	// The original transaction has already been reversed
	ReverseObtainValueResponse_STATUS_ALREADY_REVERSED ReverseObtainValueResponse_Status = 16
	// The original transaction is not one that can be reversed
	ReverseObtainValueResponse_STATUS_INVALID_TRANSACTION_TYPE ReverseObtainValueResponse_Status = 17
	// User instrument is closed
	ReverseObtainValueResponse_STATUS_INSTRUMENT_CLOSED ReverseObtainValueResponse_Status = 5
	// Request triggered a transactional risk or fraud check resulting in a decline
	ReverseObtainValueResponse_STATUS_TRANSACTION_RISK_FRAUD ReverseObtainValueResponse_Status = 6
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ReverseObtainValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ReverseObtainValueResponse_Status = 7
	// Request triggered a user-based risk or fraud check resulting in a decline
	ReverseObtainValueResponse_STATUS_USER_RISK_FRAUD ReverseObtainValueResponse_Status = 8
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ReverseObtainValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ReverseObtainValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	ReverseObtainValueResponse_STATUS_UNSUPPORTED ReverseObtainValueResponse_Status = 11
	// The Service Provider is temporarily unavailable
	ReverseObtainValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ReverseObtainValueResponse_Status = 12
	// Request resulted in one or more limits being exceeded at the Service Provider
	ReverseObtainValueResponse_STATUS_LIMIT_EXCEEDED ReverseObtainValueResponse_Status = 13
)

// Enum value maps for ReverseObtainValueResponse_Status.
var (
	ReverseObtainValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		3:  "STATUS_SUCCESS",
		2:  "STATUS_ERROR",
		4:  "STATUS_NOT_FOUND",
		14: "STATUS_USER_CALL_SERVICE_PROVIDER",
		15: "STATUS_CUTOFF_EXCEEDED",
		16: "STATUS_ALREADY_REVERSED",
		17: "STATUS_INVALID_TRANSACTION_TYPE",
		5:  "STATUS_INSTRUMENT_CLOSED",
		6:  "STATUS_TRANSACTION_RISK_FRAUD",
		7:  "STATUS_BAD_ACTOR_RISK_FRAUD",
		8:  "STATUS_USER_RISK_FRAUD",
		9:  "STATUS_INSTRUMENT_RISK_FRAUD",
		11: "STATUS_UNSUPPORTED",
		12: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		13: "STATUS_LIMIT_EXCEEDED",
	}
	ReverseObtainValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_SUCCESS":                      3,
		"STATUS_ERROR":                        2,
		"STATUS_NOT_FOUND":                    4,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   14,
		"STATUS_CUTOFF_EXCEEDED":              15,
		"STATUS_ALREADY_REVERSED":             16,
		"STATUS_INVALID_TRANSACTION_TYPE":     17,
		"STATUS_INSTRUMENT_CLOSED":            5,
		"STATUS_TRANSACTION_RISK_FRAUD":       6,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         7,
		"STATUS_USER_RISK_FRAUD":              8,
		"STATUS_INSTRUMENT_RISK_FRAUD":        9,
		"STATUS_UNSUPPORTED":                  11,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 12,
		"STATUS_LIMIT_EXCEEDED":               13,
	}
)

func (x ReverseObtainValueResponse_Status) Enum() *ReverseObtainValueResponse_Status {
	p := new(ReverseObtainValueResponse_Status)
	*p = x
	return p
}

func (x ReverseObtainValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReverseObtainValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[3].Descriptor()
}

func (ReverseObtainValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[3]
}

func (x ReverseObtainValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReverseObtainValueResponse_Status.Descriptor instead.
func (ReverseObtainValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{5, 0}
}

type ReverseReturnValueResponse_Status int32

const (
	ReverseReturnValueResponse_STATUS_UNSPECIFIED ReverseReturnValueResponse_Status = 0
	// An approval for the full amount
	ReverseReturnValueResponse_STATUS_SUCCESS ReverseReturnValueResponse_Status = 3
	// An error occurred when processing the request
	ReverseReturnValueResponse_STATUS_ERROR ReverseReturnValueResponse_Status = 2
	// An approval was given for a partial amount
	ReverseReturnValueResponse_STATUS_NOT_FOUND ReverseReturnValueResponse_Status = 4
	// The user needs to call the Service Provider to resolve an issue
	ReverseReturnValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ReverseReturnValueResponse_Status = 14
	// The original transaction falls outside the allowable time window for reversal
	ReverseReturnValueResponse_STATUS_CUTOFF_EXCEEDED ReverseReturnValueResponse_Status = 15
	// The original transaction has already been reversed
	ReverseReturnValueResponse_STATUS_ALREADY_REVERSED ReverseReturnValueResponse_Status = 16
	// The original transaction is not one that can be reversed
	ReverseReturnValueResponse_STATUS_INVALID_TRANSACTION_TYPE ReverseReturnValueResponse_Status = 17
	// User instrument is closed
	ReverseReturnValueResponse_STATUS_INSTRUMENT_CLOSED ReverseReturnValueResponse_Status = 5
	// Request triggered a transactional risk or fraud check resulting in a decline
	ReverseReturnValueResponse_STATUS_TRANSACTION_RISK_FRAUD ReverseReturnValueResponse_Status = 6
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ReverseReturnValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ReverseReturnValueResponse_Status = 7
	// Request triggered a user-based risk or fraud check resulting in a decline
	ReverseReturnValueResponse_STATUS_USER_RISK_FRAUD ReverseReturnValueResponse_Status = 8
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ReverseReturnValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ReverseReturnValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	ReverseReturnValueResponse_STATUS_UNSUPPORTED ReverseReturnValueResponse_Status = 11
	// The Service Provider is temporarily unavailable
	ReverseReturnValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ReverseReturnValueResponse_Status = 12
	// Request resulted in one or more limits being exceeded at the Service Provider
	ReverseReturnValueResponse_STATUS_LIMIT_EXCEEDED ReverseReturnValueResponse_Status = 13
)

// Enum value maps for ReverseReturnValueResponse_Status.
var (
	ReverseReturnValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		3:  "STATUS_SUCCESS",
		2:  "STATUS_ERROR",
		4:  "STATUS_NOT_FOUND",
		14: "STATUS_USER_CALL_SERVICE_PROVIDER",
		15: "STATUS_CUTOFF_EXCEEDED",
		16: "STATUS_ALREADY_REVERSED",
		17: "STATUS_INVALID_TRANSACTION_TYPE",
		5:  "STATUS_INSTRUMENT_CLOSED",
		6:  "STATUS_TRANSACTION_RISK_FRAUD",
		7:  "STATUS_BAD_ACTOR_RISK_FRAUD",
		8:  "STATUS_USER_RISK_FRAUD",
		9:  "STATUS_INSTRUMENT_RISK_FRAUD",
		11: "STATUS_UNSUPPORTED",
		12: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		13: "STATUS_LIMIT_EXCEEDED",
	}
	ReverseReturnValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_SUCCESS":                      3,
		"STATUS_ERROR":                        2,
		"STATUS_NOT_FOUND":                    4,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   14,
		"STATUS_CUTOFF_EXCEEDED":              15,
		"STATUS_ALREADY_REVERSED":             16,
		"STATUS_INVALID_TRANSACTION_TYPE":     17,
		"STATUS_INSTRUMENT_CLOSED":            5,
		"STATUS_TRANSACTION_RISK_FRAUD":       6,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         7,
		"STATUS_USER_RISK_FRAUD":              8,
		"STATUS_INSTRUMENT_RISK_FRAUD":        9,
		"STATUS_UNSUPPORTED":                  11,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 12,
		"STATUS_LIMIT_EXCEEDED":               13,
	}
)

func (x ReverseReturnValueResponse_Status) Enum() *ReverseReturnValueResponse_Status {
	p := new(ReverseReturnValueResponse_Status)
	*p = x
	return p
}

func (x ReverseReturnValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReverseReturnValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[4].Descriptor()
}

func (ReverseReturnValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[4]
}

func (x ReverseReturnValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReverseReturnValueResponse_Status.Descriptor instead.
func (ReverseReturnValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{7, 0}
}

type ReturnValueResponse_Status int32

const (
	ReturnValueResponse_STATUS_UNSPECIFIED ReturnValueResponse_Status = 0
	// An approval for the full amount
	ReturnValueResponse_STATUS_FULL_APPROVAL ReturnValueResponse_Status = 1
	// An error occurred when processing the request
	ReturnValueResponse_STATUS_ERROR ReturnValueResponse_Status = 2
	// Instrument/account not found
	ReturnValueResponse_STATUS_NOT_FOUND ReturnValueResponse_Status = 6
	// User instrument is closed
	ReturnValueResponse_STATUS_INSTRUMENT_CLOSED ReturnValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_TRANSACTION_RISK_FRAUD ReturnValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ReturnValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_USER_RISK_FRAUD ReturnValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ReturnValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	ReturnValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ReturnValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	ReturnValueResponse_STATUS_UNSUPPORTED ReturnValueResponse_Status = 10
	// The Service Provider is temporarily unavailable
	ReturnValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ReturnValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	ReturnValueResponse_STATUS_INVALID_UUEK ReturnValueResponse_Status = 12
	// A valid PIN is required for this transaction
	ReturnValueResponse_STATUS_PIN_REQUIRED ReturnValueResponse_Status = 13
	// Request resulted in one or more limits being exceeded at the Service Provider
	ReturnValueResponse_STATUS_LIMIT_EXCEEDED ReturnValueResponse_Status = 19
)

// Enum value maps for ReturnValueResponse_Status.
var (
	ReturnValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		19: "STATUS_LIMIT_EXCEEDED",
	}
	ReturnValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_LIMIT_EXCEEDED":               19,
	}
)

func (x ReturnValueResponse_Status) Enum() *ReturnValueResponse_Status {
	p := new(ReturnValueResponse_Status)
	*p = x
	return p
}

func (x ReturnValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[5].Descriptor()
}

func (ReturnValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[5]
}

func (x ReturnValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnValueResponse_Status.Descriptor instead.
func (ReturnValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{9, 0}
}

type HoldValueResponse_Status int32

const (
	HoldValueResponse_STATUS_UNSPECIFIED HoldValueResponse_Status = 0
	// An approval for the full amount
	HoldValueResponse_STATUS_FULL_APPROVAL HoldValueResponse_Status = 1
	// An error occurred when processing the request
	HoldValueResponse_STATUS_ERROR HoldValueResponse_Status = 2
	// User instrument doesn't have sufficient value to cover the transaction
	HoldValueResponse_STATUS_INSUFFICIENT_VALUE HoldValueResponse_Status = 4
	// Instrument/account not found
	HoldValueResponse_STATUS_NOT_FOUND HoldValueResponse_Status = 6
	// User instrument is closed
	HoldValueResponse_STATUS_INSTRUMENT_CLOSED HoldValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	HoldValueResponse_STATUS_TRANSACTION_RISK_FRAUD HoldValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	HoldValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD HoldValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	HoldValueResponse_STATUS_USER_RISK_FRAUD HoldValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	HoldValueResponse_STATUS_INSTRUMENT_RISK_FRAUD HoldValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	HoldValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER HoldValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	HoldValueResponse_STATUS_UNSUPPORTED HoldValueResponse_Status = 10
	// The Fi is unavailable at this time
	HoldValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE HoldValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	HoldValueResponse_STATUS_INVALID_UUEK HoldValueResponse_Status = 12
	// A valid PIN is required for this transaction
	HoldValueResponse_STATUS_PIN_REQUIRED HoldValueResponse_Status = 13
	// Request resulted in one or more limits being exceeded at the Service Provider
	HoldValueResponse_STATUS_LIMIT_EXCEEDED HoldValueResponse_Status = 19
)

// Enum value maps for HoldValueResponse_Status.
var (
	HoldValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		4:  "STATUS_INSUFFICIENT_VALUE",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		19: "STATUS_LIMIT_EXCEEDED",
	}
	HoldValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_INSUFFICIENT_VALUE":           4,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_LIMIT_EXCEEDED":               19,
	}
)

func (x HoldValueResponse_Status) Enum() *HoldValueResponse_Status {
	p := new(HoldValueResponse_Status)
	*p = x
	return p
}

func (x HoldValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HoldValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[6].Descriptor()
}

func (HoldValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[6]
}

func (x HoldValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HoldValueResponse_Status.Descriptor instead.
func (HoldValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{11, 0}
}

type AmendHoldValueResponse_Status int32

const (
	AmendHoldValueResponse_STATUS_UNSPECIFIED AmendHoldValueResponse_Status = 0
	// An approval for the full amount
	AmendHoldValueResponse_STATUS_FULL_APPROVAL AmendHoldValueResponse_Status = 1
	// An error occurred when processing the request
	AmendHoldValueResponse_STATUS_ERROR AmendHoldValueResponse_Status = 2
	// User instrument doesn't have sufficient value to cover the transaction
	AmendHoldValueResponse_STATUS_INSUFFICIENT_VALUE AmendHoldValueResponse_Status = 3
	// Instrument/account not found
	AmendHoldValueResponse_STATUS_NOT_FOUND AmendHoldValueResponse_Status = 4
	// User instrument is closed
	AmendHoldValueResponse_STATUS_INSTRUMENT_CLOSED AmendHoldValueResponse_Status = 5
	// Request triggered a transactional risk or fraud check resulting in a decline
	AmendHoldValueResponse_STATUS_TRANSACTION_RISK_FRAUD AmendHoldValueResponse_Status = 6
	// Request triggered a bad actor risk or fraud check resulting in a decline
	AmendHoldValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD AmendHoldValueResponse_Status = 7
	// Request triggered a user-based risk or fraud check resulting in a decline
	AmendHoldValueResponse_STATUS_USER_RISK_FRAUD AmendHoldValueResponse_Status = 8
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	AmendHoldValueResponse_STATUS_INSTRUMENT_RISK_FRAUD AmendHoldValueResponse_Status = 9
	// The user needs to call the Service Provider to resolve an issue
	AmendHoldValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER AmendHoldValueResponse_Status = 10
	// The operation isn't supported by the Service Provider
	AmendHoldValueResponse_STATUS_UNSUPPORTED AmendHoldValueResponse_Status = 11
	// The Fi is unavailable at this time
	AmendHoldValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE AmendHoldValueResponse_Status = 12
	// Request resulted in one or more limits being exceeded at the Service Provider
	AmendHoldValueResponse_STATUS_LIMIT_EXCEEDED AmendHoldValueResponse_Status = 14
)

// Enum value maps for AmendHoldValueResponse_Status.
var (
	AmendHoldValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		3:  "STATUS_INSUFFICIENT_VALUE",
		4:  "STATUS_NOT_FOUND",
		5:  "STATUS_INSTRUMENT_CLOSED",
		6:  "STATUS_TRANSACTION_RISK_FRAUD",
		7:  "STATUS_BAD_ACTOR_RISK_FRAUD",
		8:  "STATUS_USER_RISK_FRAUD",
		9:  "STATUS_INSTRUMENT_RISK_FRAUD",
		10: "STATUS_USER_CALL_SERVICE_PROVIDER",
		11: "STATUS_UNSUPPORTED",
		12: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		14: "STATUS_LIMIT_EXCEEDED",
	}
	AmendHoldValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_INSUFFICIENT_VALUE":           3,
		"STATUS_NOT_FOUND":                    4,
		"STATUS_INSTRUMENT_CLOSED":            5,
		"STATUS_TRANSACTION_RISK_FRAUD":       6,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         7,
		"STATUS_USER_RISK_FRAUD":              8,
		"STATUS_INSTRUMENT_RISK_FRAUD":        9,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   10,
		"STATUS_UNSUPPORTED":                  11,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 12,
		"STATUS_LIMIT_EXCEEDED":               14,
	}
)

func (x AmendHoldValueResponse_Status) Enum() *AmendHoldValueResponse_Status {
	p := new(AmendHoldValueResponse_Status)
	*p = x
	return p
}

func (x AmendHoldValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmendHoldValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[7].Descriptor()
}

func (AmendHoldValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[7]
}

func (x AmendHoldValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmendHoldValueResponse_Status.Descriptor instead.
func (AmendHoldValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{13, 0}
}

type ReleaseHoldValueResponse_Status int32

const (
	ReleaseHoldValueResponse_STATUS_UNSPECIFIED      ReleaseHoldValueResponse_Status = 0
	ReleaseHoldValueResponse_STATUS_SUCCESS          ReleaseHoldValueResponse_Status = 1
	ReleaseHoldValueResponse_STATUS_ERROR            ReleaseHoldValueResponse_Status = 2
	ReleaseHoldValueResponse_STATUS_NOT_FOUND        ReleaseHoldValueResponse_Status = 3
	ReleaseHoldValueResponse_STATUS_ALREADY_EXPIRED  ReleaseHoldValueResponse_Status = 4
	ReleaseHoldValueResponse_STATUS_ALREADY_RELEASED ReleaseHoldValueResponse_Status = 5
)

// Enum value maps for ReleaseHoldValueResponse_Status.
var (
	ReleaseHoldValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_ALREADY_EXPIRED",
		5: "STATUS_ALREADY_RELEASED",
	}
	ReleaseHoldValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":      0,
		"STATUS_SUCCESS":          1,
		"STATUS_ERROR":            2,
		"STATUS_NOT_FOUND":        3,
		"STATUS_ALREADY_EXPIRED":  4,
		"STATUS_ALREADY_RELEASED": 5,
	}
)

func (x ReleaseHoldValueResponse_Status) Enum() *ReleaseHoldValueResponse_Status {
	p := new(ReleaseHoldValueResponse_Status)
	*p = x
	return p
}

func (x ReleaseHoldValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseHoldValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[8].Descriptor()
}

func (ReleaseHoldValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[8]
}

func (x ReleaseHoldValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseHoldValueResponse_Status.Descriptor instead.
func (ReleaseHoldValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{15, 0}
}

type ObtainHoldValueResponse_Status int32

const (
	ObtainHoldValueResponse_STATUS_UNSPECIFIED ObtainHoldValueResponse_Status = 0
	// An approval for the full amount
	ObtainHoldValueResponse_STATUS_FULL_APPROVAL ObtainHoldValueResponse_Status = 1
	// An error occurred when processing the request
	ObtainHoldValueResponse_STATUS_ERROR ObtainHoldValueResponse_Status = 2
	// Instrument/account not found
	ObtainHoldValueResponse_STATUS_NOT_FOUND ObtainHoldValueResponse_Status = 6
	// Request triggered a transactional risk or fraud check resulting in a decline
	ObtainHoldValueResponse_STATUS_TRANSACTION_RISK_FRAUD ObtainHoldValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ObtainHoldValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ObtainHoldValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	ObtainHoldValueResponse_STATUS_USER_RISK_FRAUD ObtainHoldValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ObtainHoldValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ObtainHoldValueResponse_Status = 18
	// The operation isn't supported by the Service Provider
	ObtainHoldValueResponse_STATUS_UNSUPPORTED ObtainHoldValueResponse_Status = 10
	// The Service Provider is temporarily unavailable
	ObtainHoldValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ObtainHoldValueResponse_Status = 11
)

// Enum value maps for ObtainHoldValueResponse_Status.
var (
	ObtainHoldValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		6:  "STATUS_NOT_FOUND",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
	}
	ObtainHoldValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
	}
)

func (x ObtainHoldValueResponse_Status) Enum() *ObtainHoldValueResponse_Status {
	p := new(ObtainHoldValueResponse_Status)
	*p = x
	return p
}

func (x ObtainHoldValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObtainHoldValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[9].Descriptor()
}

func (ObtainHoldValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[9]
}

func (x ObtainHoldValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObtainHoldValueResponse_Status.Descriptor instead.
func (ObtainHoldValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{17, 0}
}

type ReceiveValueResponse_Status int32

const (
	ReceiveValueResponse_STATUS_UNSPECIFIED ReceiveValueResponse_Status = 0
	ReceiveValueResponse_STATUS_SUCCESS     ReceiveValueResponse_Status = 1
	ReceiveValueResponse_STATUS_ERROR       ReceiveValueResponse_Status = 2
)

// Enum value maps for ReceiveValueResponse_Status.
var (
	ReceiveValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	ReceiveValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x ReceiveValueResponse_Status) Enum() *ReceiveValueResponse_Status {
	p := new(ReceiveValueResponse_Status)
	*p = x
	return p
}

func (x ReceiveValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiveValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[10].Descriptor()
}

func (ReceiveValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[10]
}

func (x ReceiveValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiveValueResponse_Status.Descriptor instead.
func (ReceiveValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{20, 0}
}

type ValueAdviceResponse_Status int32

const (
	ValueAdviceResponse_STATUS_UNSPECIFIED ValueAdviceResponse_Status = 0
	// Request was successfully processed
	ValueAdviceResponse_STATUS_ACKNOWLEDGE ValueAdviceResponse_Status = 1
	// An error occurred when processing the request
	ValueAdviceResponse_STATUS_ERROR ValueAdviceResponse_Status = 2
)

// Enum value maps for ValueAdviceResponse_Status.
var (
	ValueAdviceResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ACKNOWLEDGE",
		2: "STATUS_ERROR",
	}
	ValueAdviceResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ACKNOWLEDGE": 1,
		"STATUS_ERROR":       2,
	}
)

func (x ValueAdviceResponse_Status) Enum() *ValueAdviceResponse_Status {
	p := new(ValueAdviceResponse_Status)
	*p = x
	return p
}

func (x ValueAdviceResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueAdviceResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[11].Descriptor()
}

func (ValueAdviceResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[11]
}

func (x ValueAdviceResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueAdviceResponse_Status.Descriptor instead.
func (ValueAdviceResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{23, 0}
}

type GetValueResponse_Status int32

const (
	GetValueResponse_STATUS_UNSPECIFIED GetValueResponse_Status = 0
	GetValueResponse_STATUS_SUCCESS     GetValueResponse_Status = 1
	GetValueResponse_STATUS_ERROR       GetValueResponse_Status = 2
	GetValueResponse_STATUS_NOT_FOUND   GetValueResponse_Status = 3
)

// Enum value maps for GetValueResponse_Status.
var (
	GetValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	GetValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x GetValueResponse_Status) Enum() *GetValueResponse_Status {
	p := new(GetValueResponse_Status)
	*p = x
	return p
}

func (x GetValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_serviceprovider_value_v1_value_proto_enumTypes[12].Descriptor()
}

func (GetValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_serviceprovider_value_v1_value_proto_enumTypes[12]
}

func (x GetValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetValueResponse_Status.Descriptor instead.
func (GetValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{25, 0}
}

// Type that represents the details of the value request (either to obtain or return).
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// version of the user record, used for optimistic locking.
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Date that the Store was created at Mica.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// Date that the Store was last updated at Mica.
	Updated       *timestamppb.Timestamp                  `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	OperationType valueoperationtypev1.ValueOperationType `protobuf:"varint,5,opt,name=operation_type,json=operationType,proto3,enum=micashared.common.enums.valueoperationtype.v1.ValueOperationType" json:"operation_type,omitempty"`
	// The Mica generated key for this instrument.
	ServiceProviderInstrumentKey string `protobuf:"bytes,6,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	// Service Provider's primary key for their instrument.
	ServiceProviderInstrumentRef string `protobuf:"bytes,7,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// If a Service Provider UUEK this value will be set so the service provider can do any management on their end
	ServiceProviderUuek string `protobuf:"bytes,24,opt,name=service_provider_uuek,json=serviceProviderUuek,proto3" json:"service_provider_uuek,omitempty"`
	// The Partner's transaction record primary key for this transaction. This is an optional value and is unique within
	// a given Partner.
	PartnerTransactionRef string `protobuf:"bytes,23,opt,name=partner_transaction_ref,json=partnerTransactionRef,proto3" json:"partner_transaction_ref,omitempty"`
	// The organization this operation is being processed for.
	OrganizationKey string `protobuf:"bytes,10,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	// The organization name this operation is being processed for.
	OrganizationName string `protobuf:"bytes,11,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// The organization address this operation is being processed for.
	OrganizationAddress *v1.Address `protobuf:"bytes,12,opt,name=organization_address,json=organizationAddress,proto3" json:"organization_address,omitempty"`
	// The organizations category.
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,13,opt,name=category,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
	// The store where this operation occurred.
	StoreKey string `protobuf:"bytes,14,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The number of this store (an alternative unique value).
	StoreNumber string `protobuf:"bytes,15,opt,name=store_number,json=storeNumber,proto3" json:"store_number,omitempty"`
	// The street address of this store.
	StoreAddress *v1.Address `protobuf:"bytes,16,opt,name=store_address,json=storeAddress,proto3" json:"store_address,omitempty"`
	// The clerk that processed this operation.
	ClerkIdentifier string `protobuf:"bytes,17,opt,name=clerk_identifier,json=clerkIdentifier,proto3" json:"clerk_identifier,omitempty"`
	// Total amount for this transaction.
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,18,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Total discount amount for this transaction.
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	DiscountAmount string `protobuf:"bytes,21,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	// Total discount amount for this transaction.
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	IneligibleAmount string `protobuf:"bytes,22,opt,name=ineligible_amount,json=ineligibleAmount,proto3" json:"ineligible_amount,omitempty"`
	// The amount requested from the Service Provider for this transaction. Note that this calculated as:
	//
	//	requested_amount = total_amount - discount_amount - ineligible_amount
	//
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	RequestedAmount string `protobuf:"bytes,19,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"`
	OrderNumber     string `protobuf:"bytes,20,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	// Set in the case of a Hold transaction
	Expiration *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// A unique identifier at the Partner that represents the initial transaction in the set of transactions. This
	// would typically refer to the first Obtain transaction and passed in for Return transactions. The
	// Service Provider can then use this field to match up Returns with the original Obtain.
	InitialPartnerTransactionRef string             `protobuf:"bytes,26,opt,name=initial_partner_transaction_ref,json=initialPartnerTransactionRef,proto3" json:"initial_partner_transaction_ref,omitempty"`
	Currency                     *commonv1.Currency `protobuf:"bytes,27,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{0}
}

func (x *Value) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *Value) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Value) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Value) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Value) GetOperationType() valueoperationtypev1.ValueOperationType {
	if x != nil {
		return x.OperationType
	}
	return valueoperationtypev1.ValueOperationType(0)
}

func (x *Value) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

func (x *Value) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *Value) GetServiceProviderUuek() string {
	if x != nil {
		return x.ServiceProviderUuek
	}
	return ""
}

func (x *Value) GetPartnerTransactionRef() string {
	if x != nil {
		return x.PartnerTransactionRef
	}
	return ""
}

func (x *Value) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *Value) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *Value) GetOrganizationAddress() *v1.Address {
	if x != nil {
		return x.OrganizationAddress
	}
	return nil
}

func (x *Value) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

func (x *Value) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *Value) GetStoreNumber() string {
	if x != nil {
		return x.StoreNumber
	}
	return ""
}

func (x *Value) GetStoreAddress() *v1.Address {
	if x != nil {
		return x.StoreAddress
	}
	return nil
}

func (x *Value) GetClerkIdentifier() string {
	if x != nil {
		return x.ClerkIdentifier
	}
	return ""
}

func (x *Value) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *Value) GetDiscountAmount() string {
	if x != nil {
		return x.DiscountAmount
	}
	return ""
}

func (x *Value) GetIneligibleAmount() string {
	if x != nil {
		return x.IneligibleAmount
	}
	return ""
}

func (x *Value) GetRequestedAmount() string {
	if x != nil {
		return x.RequestedAmount
	}
	return ""
}

func (x *Value) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *Value) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Value) GetInitialPartnerTransactionRef() string {
	if x != nil {
		return x.InitialPartnerTransactionRef
	}
	return ""
}

func (x *Value) GetCurrency() *commonv1.Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

// Type that represents the details of the value request (either to obtain or return).
type ValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// The Mica generated key for this instrument.
	ServiceProviderInstrumentKey string `protobuf:"bytes,2,opt,name=service_provider_instrument_key,json=serviceProviderInstrumentKey,proto3" json:"service_provider_instrument_key,omitempty"`
	// DEPRECATED - use instrument_external_reference instead
	//
	// Deprecated: Marked as deprecated in mica/serviceprovider/value/v1/value.proto.
	ServiceProviderInstrumentRef string `protobuf:"bytes,3,opt,name=service_provider_instrument_ref,json=serviceProviderInstrumentRef,proto3" json:"service_provider_instrument_ref,omitempty"`
	// Service Provider's primary key for their instrument.
	InstrumentExternalReference *instrumentv1.InstrumentExternalReference `protobuf:"bytes,22,opt,name=instrument_external_reference,json=instrumentExternalReference,proto3" json:"instrument_external_reference,omitempty"`
	// If a Service Provider UUEK this value will be set so the service provider can do any management on their end
	ServiceProviderUuek string `protobuf:"bytes,19,opt,name=service_provider_uuek,json=serviceProviderUuek,proto3" json:"service_provider_uuek,omitempty"`
	// The Partner's transaction record primary key for this transaction. This is an optional value and is unique within
	// a given Partner.
	PartnerTransactionRef string `protobuf:"bytes,4,opt,name=partner_transaction_ref,json=partnerTransactionRef,proto3" json:"partner_transaction_ref,omitempty"`
	// The organization this operation is being processed for.
	OrganizationKey string `protobuf:"bytes,6,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	// The organization name this operation is being processed for.
	OrganizationName string `protobuf:"bytes,7,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// The organization address this operation is being processed for.
	OrganizationAddress *v1.Address `protobuf:"bytes,8,opt,name=organization_address,json=organizationAddress,proto3" json:"organization_address,omitempty"`
	// The organizations category.
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,9,opt,name=category,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
	// The store where this operation occurred.
	StoreKey string `protobuf:"bytes,10,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The number of this store (an alternative unique value).
	StoreNumber string `protobuf:"bytes,11,opt,name=store_number,json=storeNumber,proto3" json:"store_number,omitempty"`
	// The street address of this store.
	StoreAddress *v1.Address `protobuf:"bytes,12,opt,name=store_address,json=storeAddress,proto3" json:"store_address,omitempty"`
	// The clerk that processed this operation.
	ClerkIdentifier string `protobuf:"bytes,13,opt,name=clerk_identifier,json=clerkIdentifier,proto3" json:"clerk_identifier,omitempty"`
	// Total amount for this transaction.
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,14,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Total discount amount for this transaction.
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	DiscountAmount string `protobuf:"bytes,17,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	// Total discount amount for this transaction.
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	IneligibleAmount string `protobuf:"bytes,18,opt,name=ineligible_amount,json=ineligibleAmount,proto3" json:"ineligible_amount,omitempty"`
	// Surcharge amount is fees or tips, this is for informational purposes and is already computed in the total_amount
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	SurchargeAmount string `protobuf:"bytes,21,opt,name=surcharge_amount,json=surchargeAmount,proto3" json:"surcharge_amount,omitempty"`
	// The amount requested from the Service Provider for this transaction. Note that this calculated as:
	//
	//	requested_amount = total_amount - discount_amount - ineligible_amount
	//
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	RequestedAmount       string                    `protobuf:"bytes,15,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"`
	OrderNumber           string                    `protobuf:"bytes,16,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	TransactionIdentifier *v1.TransactionIdentifier `protobuf:"bytes,20,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
	Currency              *commonv1.Currency        `protobuf:"bytes,23,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *ValueRequest) Reset() {
	*x = ValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRequest) ProtoMessage() {}

func (x *ValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRequest.ProtoReflect.Descriptor instead.
func (*ValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{1}
}

func (x *ValueRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ValueRequest) GetServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ServiceProviderInstrumentKey
	}
	return ""
}

// Deprecated: Marked as deprecated in mica/serviceprovider/value/v1/value.proto.
func (x *ValueRequest) GetServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ServiceProviderInstrumentRef
	}
	return ""
}

func (x *ValueRequest) GetInstrumentExternalReference() *instrumentv1.InstrumentExternalReference {
	if x != nil {
		return x.InstrumentExternalReference
	}
	return nil
}

func (x *ValueRequest) GetServiceProviderUuek() string {
	if x != nil {
		return x.ServiceProviderUuek
	}
	return ""
}

func (x *ValueRequest) GetPartnerTransactionRef() string {
	if x != nil {
		return x.PartnerTransactionRef
	}
	return ""
}

func (x *ValueRequest) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *ValueRequest) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *ValueRequest) GetOrganizationAddress() *v1.Address {
	if x != nil {
		return x.OrganizationAddress
	}
	return nil
}

func (x *ValueRequest) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

func (x *ValueRequest) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *ValueRequest) GetStoreNumber() string {
	if x != nil {
		return x.StoreNumber
	}
	return ""
}

func (x *ValueRequest) GetStoreAddress() *v1.Address {
	if x != nil {
		return x.StoreAddress
	}
	return nil
}

func (x *ValueRequest) GetClerkIdentifier() string {
	if x != nil {
		return x.ClerkIdentifier
	}
	return ""
}

func (x *ValueRequest) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *ValueRequest) GetDiscountAmount() string {
	if x != nil {
		return x.DiscountAmount
	}
	return ""
}

func (x *ValueRequest) GetIneligibleAmount() string {
	if x != nil {
		return x.IneligibleAmount
	}
	return ""
}

func (x *ValueRequest) GetSurchargeAmount() string {
	if x != nil {
		return x.SurchargeAmount
	}
	return ""
}

func (x *ValueRequest) GetRequestedAmount() string {
	if x != nil {
		return x.RequestedAmount
	}
	return ""
}

func (x *ValueRequest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *ValueRequest) GetTransactionIdentifier() *v1.TransactionIdentifier {
	if x != nil {
		return x.TransactionIdentifier
	}
	return nil
}

func (x *ValueRequest) GetCurrency() *commonv1.Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type ObtainValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovalType approvaltypev1.ApprovalType `protobuf:"varint,1,opt,name=approval_type,json=approvalType,proto3,enum=micashared.common.enums.approvaltype.v1.ApprovalType" json:"approval_type,omitempty"`
	Value        *ValueRequest               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal *v1.RiskSignal `protobuf:"bytes,3,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
}

func (x *ObtainValueRequest) Reset() {
	*x = ObtainValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainValueRequest) ProtoMessage() {}

func (x *ObtainValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainValueRequest.ProtoReflect.Descriptor instead.
func (*ObtainValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{2}
}

func (x *ObtainValueRequest) GetApprovalType() approvaltypev1.ApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return approvaltypev1.ApprovalType(0)
}

func (x *ObtainValueRequest) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ObtainValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

type ObtainValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ObtainValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ObtainValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                     `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,4,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *ObtainValueResponse) Reset() {
	*x = ObtainValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainValueResponse) ProtoMessage() {}

func (x *ObtainValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainValueResponse.ProtoReflect.Descriptor instead.
func (*ObtainValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{3}
}

func (x *ObtainValueResponse) GetStatus() ObtainValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ObtainValueResponse_STATUS_UNSPECIFIED
}

func (x *ObtainValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ObtainValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ObtainValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type ReverseObtainValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	TransactionRef string `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal            *v1.RiskSignal            `protobuf:"bytes,3,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
	TransactionIdentifier *v1.TransactionIdentifier `protobuf:"bytes,4,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
}

func (x *ReverseObtainValueRequest) Reset() {
	*x = ReverseObtainValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseObtainValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseObtainValueRequest) ProtoMessage() {}

func (x *ReverseObtainValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseObtainValueRequest.ProtoReflect.Descriptor instead.
func (*ReverseObtainValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{4}
}

func (x *ReverseObtainValueRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ReverseObtainValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ReverseObtainValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

func (x *ReverseObtainValueRequest) GetTransactionIdentifier() *v1.TransactionIdentifier {
	if x != nil {
		return x.TransactionIdentifier
	}
	return nil
}

type ReverseObtainValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReverseObtainValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ReverseObtainValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Service Provider's unique transaction ID, new for reversal transaction
	TransactionRef string `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
}

func (x *ReverseObtainValueResponse) Reset() {
	*x = ReverseObtainValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseObtainValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseObtainValueResponse) ProtoMessage() {}

func (x *ReverseObtainValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseObtainValueResponse.ProtoReflect.Descriptor instead.
func (*ReverseObtainValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{5}
}

func (x *ReverseObtainValueResponse) GetStatus() ReverseObtainValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReverseObtainValueResponse_STATUS_UNSPECIFIED
}

func (x *ReverseObtainValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReverseObtainValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

type ReverseReturnValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	TransactionRef string `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal            *v1.RiskSignal            `protobuf:"bytes,3,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
	TransactionIdentifier *v1.TransactionIdentifier `protobuf:"bytes,4,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
}

func (x *ReverseReturnValueRequest) Reset() {
	*x = ReverseReturnValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseReturnValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseReturnValueRequest) ProtoMessage() {}

func (x *ReverseReturnValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseReturnValueRequest.ProtoReflect.Descriptor instead.
func (*ReverseReturnValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{6}
}

func (x *ReverseReturnValueRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ReverseReturnValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ReverseReturnValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

func (x *ReverseReturnValueRequest) GetTransactionIdentifier() *v1.TransactionIdentifier {
	if x != nil {
		return x.TransactionIdentifier
	}
	return nil
}

type ReverseReturnValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReverseReturnValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ReverseReturnValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Service Provider's unique transaction ID, new for reversal transaction
	TransactionRef string `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
}

func (x *ReverseReturnValueResponse) Reset() {
	*x = ReverseReturnValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseReturnValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseReturnValueResponse) ProtoMessage() {}

func (x *ReverseReturnValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseReturnValueResponse.ProtoReflect.Descriptor instead.
func (*ReverseReturnValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{7}
}

func (x *ReverseReturnValueResponse) GetStatus() ReverseReturnValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReverseReturnValueResponse_STATUS_UNSPECIFIED
}

func (x *ReverseReturnValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReverseReturnValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

type ReturnValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *ValueRequest `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// A unique identifier at the Partner that represents the initial transaction in the set of transactions. This
	// would typically refer to the first Obtain transaction and passed in for Return transactions. The
	// Service Provider can then use this field to match up Returns with the original Obtain.
	InitialPartnerTransactionRef string `protobuf:"bytes,2,opt,name=initial_partner_transaction_ref,json=initialPartnerTransactionRef,proto3" json:"initial_partner_transaction_ref,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal *v1.RiskSignal `protobuf:"bytes,3,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
}

func (x *ReturnValueRequest) Reset() {
	*x = ReturnValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnValueRequest) ProtoMessage() {}

func (x *ReturnValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnValueRequest.ProtoReflect.Descriptor instead.
func (*ReturnValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{8}
}

func (x *ReturnValueRequest) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReturnValueRequest) GetInitialPartnerTransactionRef() string {
	if x != nil {
		return x.InitialPartnerTransactionRef
	}
	return ""
}

func (x *ReturnValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

type ReturnValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ReturnValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ReturnValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                     `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,4,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *ReturnValueResponse) Reset() {
	*x = ReturnValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnValueResponse) ProtoMessage() {}

func (x *ReturnValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnValueResponse.ProtoReflect.Descriptor instead.
func (*ReturnValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{9}
}

func (x *ReturnValueResponse) GetStatus() ReturnValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReturnValueResponse_STATUS_UNSPECIFIED
}

func (x *ReturnValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReturnValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ReturnValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type HoldValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Value      *ValueRequest          `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal *v1.RiskSignal `protobuf:"bytes,3,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
}

func (x *HoldValueRequest) Reset() {
	*x = HoldValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldValueRequest) ProtoMessage() {}

func (x *HoldValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldValueRequest.ProtoReflect.Descriptor instead.
func (*HoldValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{10}
}

func (x *HoldValueRequest) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *HoldValueRequest) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HoldValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

type HoldValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         HoldValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.HoldValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                   `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,4,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *HoldValueResponse) Reset() {
	*x = HoldValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldValueResponse) ProtoMessage() {}

func (x *HoldValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldValueResponse.ProtoReflect.Descriptor instead.
func (*HoldValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{11}
}

func (x *HoldValueResponse) GetStatus() HoldValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return HoldValueResponse_STATUS_UNSPECIFIED
}

func (x *HoldValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *HoldValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *HoldValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type AmendHoldValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's amend hold transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// the Partner's reference for the amend hold transaction
	TransactionRef string `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Mica's hold transaction record primary key.
	HoldTransactionKey string `protobuf:"bytes,3,opt,name=hold_transaction_key,json=holdTransactionKey,proto3" json:"hold_transaction_key,omitempty"`
	// the Service Provider's reference for the hold transaction
	HoldTransactionRef string `protobuf:"bytes,4,opt,name=hold_transaction_ref,json=holdTransactionRef,proto3" json:"hold_transaction_ref,omitempty"`
	// the new expiration timestamp for the amended hold
	Expiration *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Total amount for this transaction.
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal            *v1.RiskSignal            `protobuf:"bytes,7,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
	TransactionIdentifier *v1.TransactionIdentifier `protobuf:"bytes,8,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
}

func (x *AmendHoldValueRequest) Reset() {
	*x = AmendHoldValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendHoldValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendHoldValueRequest) ProtoMessage() {}

func (x *AmendHoldValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendHoldValueRequest.ProtoReflect.Descriptor instead.
func (*AmendHoldValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{12}
}

func (x *AmendHoldValueRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *AmendHoldValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *AmendHoldValueRequest) GetHoldTransactionKey() string {
	if x != nil {
		return x.HoldTransactionKey
	}
	return ""
}

func (x *AmendHoldValueRequest) GetHoldTransactionRef() string {
	if x != nil {
		return x.HoldTransactionRef
	}
	return ""
}

func (x *AmendHoldValueRequest) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *AmendHoldValueRequest) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *AmendHoldValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

func (x *AmendHoldValueRequest) GetTransactionIdentifier() *v1.TransactionIdentifier {
	if x != nil {
		return x.TransactionIdentifier
	}
	return nil
}

type AmendHoldValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status AmendHoldValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.AmendHoldValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionRef string `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
}

func (x *AmendHoldValueResponse) Reset() {
	*x = AmendHoldValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendHoldValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendHoldValueResponse) ProtoMessage() {}

func (x *AmendHoldValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendHoldValueResponse.ProtoReflect.Descriptor instead.
func (*AmendHoldValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{13}
}

func (x *AmendHoldValueResponse) GetStatus() AmendHoldValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return AmendHoldValueResponse_STATUS_UNSPECIFIED
}

func (x *AmendHoldValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AmendHoldValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

type ReleaseHoldValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's hold transaction record primary key
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// the Partner's reference for the hold transaction
	TransactionRef   string                 `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	ReleaseTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=release_timestamp,json=releaseTimestamp,proto3" json:"release_timestamp,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal            *v1.RiskSignal            `protobuf:"bytes,4,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
	TransactionIdentifier *v1.TransactionIdentifier `protobuf:"bytes,5,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
}

func (x *ReleaseHoldValueRequest) Reset() {
	*x = ReleaseHoldValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseHoldValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseHoldValueRequest) ProtoMessage() {}

func (x *ReleaseHoldValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseHoldValueRequest.ProtoReflect.Descriptor instead.
func (*ReleaseHoldValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{14}
}

func (x *ReleaseHoldValueRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ReleaseHoldValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ReleaseHoldValueRequest) GetReleaseTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseTimestamp
	}
	return nil
}

func (x *ReleaseHoldValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

func (x *ReleaseHoldValueRequest) GetTransactionIdentifier() *v1.TransactionIdentifier {
	if x != nil {
		return x.TransactionIdentifier
	}
	return nil
}

type ReleaseHoldValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReleaseHoldValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ReleaseHoldValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionRef string `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
}

func (x *ReleaseHoldValueResponse) Reset() {
	*x = ReleaseHoldValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseHoldValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseHoldValueResponse) ProtoMessage() {}

func (x *ReleaseHoldValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseHoldValueResponse.ProtoReflect.Descriptor instead.
func (*ReleaseHoldValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{15}
}

func (x *ReleaseHoldValueResponse) GetStatus() ReleaseHoldValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReleaseHoldValueResponse_STATUS_UNSPECIFIED
}

func (x *ReleaseHoldValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReleaseHoldValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

type ObtainHoldValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's hold transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// Service Provider's hold transaction record primary key.
	TransactionRef string        `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	Value          *ValueRequest `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal *v1.RiskSignal `protobuf:"bytes,5,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
}

func (x *ObtainHoldValueRequest) Reset() {
	*x = ObtainHoldValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainHoldValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainHoldValueRequest) ProtoMessage() {}

func (x *ObtainHoldValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainHoldValueRequest.ProtoReflect.Descriptor instead.
func (*ObtainHoldValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{16}
}

func (x *ObtainHoldValueRequest) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ObtainHoldValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

type ObtainHoldValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ObtainHoldValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ObtainHoldValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                         `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,4,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *ObtainHoldValueResponse) Reset() {
	*x = ObtainHoldValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainHoldValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainHoldValueResponse) ProtoMessage() {}

func (x *ObtainHoldValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainHoldValueResponse.ProtoReflect.Descriptor instead.
func (*ObtainHoldValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{17}
}

func (x *ObtainHoldValueResponse) GetStatus() ObtainHoldValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ObtainHoldValueResponse_STATUS_UNSPECIFIED
}

func (x *ObtainHoldValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ObtainHoldValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ObtainHoldValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type From struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the sender uuek
	Uuek string `protobuf:"bytes,4,opt,name=uuek,proto3" json:"uuek,omitempty"`
	// The first name of the sender.
	FirstName string `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name of the sender.
	LastName string `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The email of the sender.
	Email string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	// name of sending service provider
	ServiceProviderName string `protobuf:"bytes,8,opt,name=service_provider_name,json=serviceProviderName,proto3" json:"service_provider_name,omitempty"`
}

func (x *From) Reset() {
	*x = From{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *From) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*From) ProtoMessage() {}

func (x *From) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use From.ProtoReflect.Descriptor instead.
func (*From) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{18}
}

func (x *From) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

func (x *From) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *From) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *From) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *From) GetServiceProviderName() string {
	if x != nil {
		return x.ServiceProviderName
	}
	return ""
}

type ReceiveValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Mica generated key for this instrument.
	ToServiceProviderInstrumentKey string `protobuf:"bytes,1,opt,name=to_service_provider_instrument_key,json=toServiceProviderInstrumentKey,proto3" json:"to_service_provider_instrument_key,omitempty"`
	// Service Provider's primary key for their instrument.
	ToServiceProviderInstrumentRef string                                    `protobuf:"bytes,2,opt,name=to_service_provider_instrument_ref,json=toServiceProviderInstrumentRef,proto3" json:"to_service_provider_instrument_ref,omitempty"`
	InstrumentExternalReference    *instrumentv1.InstrumentExternalReference `protobuf:"bytes,8,opt,name=instrument_external_reference,json=instrumentExternalReference,proto3" json:"instrument_external_reference,omitempty"`
	Currency                       *commonv1.Currency                        `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// the amount that's being received
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	From   *From  `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	// use the risk signals to pass enhanced data that can be used by the service provider to understand the origination characteristics of the transaction origin
	RiskSignal            *v1.RiskSignal            `protobuf:"bytes,6,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
	TransactionIdentifier *v1.TransactionIdentifier `protobuf:"bytes,7,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
}

func (x *ReceiveValueRequest) Reset() {
	*x = ReceiveValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveValueRequest) ProtoMessage() {}

func (x *ReceiveValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveValueRequest.ProtoReflect.Descriptor instead.
func (*ReceiveValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{19}
}

func (x *ReceiveValueRequest) GetToServiceProviderInstrumentKey() string {
	if x != nil {
		return x.ToServiceProviderInstrumentKey
	}
	return ""
}

func (x *ReceiveValueRequest) GetToServiceProviderInstrumentRef() string {
	if x != nil {
		return x.ToServiceProviderInstrumentRef
	}
	return ""
}

func (x *ReceiveValueRequest) GetInstrumentExternalReference() *instrumentv1.InstrumentExternalReference {
	if x != nil {
		return x.InstrumentExternalReference
	}
	return nil
}

func (x *ReceiveValueRequest) GetCurrency() *commonv1.Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *ReceiveValueRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ReceiveValueRequest) GetFrom() *From {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ReceiveValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

func (x *ReceiveValueRequest) GetTransactionIdentifier() *v1.TransactionIdentifier {
	if x != nil {
		return x.TransactionIdentifier
	}
	return nil
}

type ReceiveValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ReceiveValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ReceiveValueResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                      `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
}

func (x *ReceiveValueResponse) Reset() {
	*x = ReceiveValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveValueResponse) ProtoMessage() {}

func (x *ReceiveValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveValueResponse.ProtoReflect.Descriptor instead.
func (*ReceiveValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{20}
}

func (x *ReceiveValueResponse) GetStatus() ReceiveValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReceiveValueResponse_STATUS_UNSPECIFIED
}

func (x *ReceiveValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReceiveValueResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

type ValueAdvice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the processing priority for this advice, the lower the number the higher the priority
	// the network will guaranteed this delivered in ascending order (higher priority first)
	AdvicePriority int32                       `protobuf:"varint,1,opt,name=advice_priority,json=advicePriority,proto3" json:"advice_priority,omitempty"`
	AdviceReason   AdviceReason                `protobuf:"varint,2,opt,name=advice_reason,json=adviceReason,proto3,enum=mica.serviceprovider.value.v1.AdviceReason" json:"advice_reason,omitempty"`
	ApprovalType   approvaltypev1.ApprovalType `protobuf:"varint,3,opt,name=approval_type,json=approvalType,proto3,enum=micashared.common.enums.approvaltype.v1.ApprovalType" json:"approval_type,omitempty"`
	Value          *ValueRequest               `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueAdvice) Reset() {
	*x = ValueAdvice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueAdvice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueAdvice) ProtoMessage() {}

func (x *ValueAdvice) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueAdvice.ProtoReflect.Descriptor instead.
func (*ValueAdvice) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{21}
}

func (x *ValueAdvice) GetAdvicePriority() int32 {
	if x != nil {
		return x.AdvicePriority
	}
	return 0
}

func (x *ValueAdvice) GetAdviceReason() AdviceReason {
	if x != nil {
		return x.AdviceReason
	}
	return AdviceReason_ADVICE_REASON_UNSPECIFIED
}

func (x *ValueAdvice) GetApprovalType() approvaltypev1.ApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return approvaltypev1.ApprovalType(0)
}

func (x *ValueAdvice) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

// For any Obtain or Return Value call that does not need to make an external (to the network) call and which the
// external entity may want to know about. These are typically network declines.
type ValueAdviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueAdvices []*ValueAdvice `protobuf:"bytes,1,rep,name=value_advices,json=valueAdvices,proto3" json:"value_advices,omitempty"`
}

func (x *ValueAdviceRequest) Reset() {
	*x = ValueAdviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueAdviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueAdviceRequest) ProtoMessage() {}

func (x *ValueAdviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueAdviceRequest.ProtoReflect.Descriptor instead.
func (*ValueAdviceRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{22}
}

func (x *ValueAdviceRequest) GetValueAdvices() []*ValueAdvice {
	if x != nil {
		return x.ValueAdvices
	}
	return nil
}

// Response to acknowledge the advices
type ValueAdviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ValueAdviceResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.ValueAdviceResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ValueAdviceResponse) Reset() {
	*x = ValueAdviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueAdviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueAdviceResponse) ProtoMessage() {}

func (x *ValueAdviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueAdviceResponse.ProtoReflect.Descriptor instead.
func (*ValueAdviceResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{23}
}

func (x *ValueAdviceResponse) GetStatus() ValueAdviceResponse_Status {
	if x != nil {
		return x.Status
	}
	return ValueAdviceResponse_STATUS_UNSPECIFIED
}

func (x *ValueAdviceResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*GetValueRequest_TransactionKey
	//	*GetValueRequest_TransactionRef
	Identifier isGetValueRequest_Identifier `protobuf_oneof:"identifier"`
}

func (x *GetValueRequest) Reset() {
	*x = GetValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueRequest) ProtoMessage() {}

func (x *GetValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueRequest.ProtoReflect.Descriptor instead.
func (*GetValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{24}
}

func (m *GetValueRequest) GetIdentifier() isGetValueRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetValueRequest) GetTransactionKey() string {
	if x, ok := x.GetIdentifier().(*GetValueRequest_TransactionKey); ok {
		return x.TransactionKey
	}
	return ""
}

func (x *GetValueRequest) GetTransactionRef() string {
	if x, ok := x.GetIdentifier().(*GetValueRequest_TransactionRef); ok {
		return x.TransactionRef
	}
	return ""
}

type isGetValueRequest_Identifier interface {
	isGetValueRequest_Identifier()
}

type GetValueRequest_TransactionKey struct {
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3,oneof"`
}

type GetValueRequest_TransactionRef struct {
	// the Partner's reference for this transaction
	TransactionRef string `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3,oneof"`
}

func (*GetValueRequest_TransactionKey) isGetValueRequest_Identifier() {}

func (*GetValueRequest_TransactionRef) isGetValueRequest_Identifier() {}

type GetValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.serviceprovider.value.v1.GetValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error               `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Value  *Value                  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The oldest transaction available
	OldestTransactionTime *timestamppb.Timestamp    `protobuf:"bytes,4,opt,name=oldest_transaction_time,json=oldestTransactionTime,proto3" json:"oldest_transaction_time,omitempty"`
	TransactionIdentifier *v1.TransactionIdentifier `protobuf:"bytes,5,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
}

func (x *GetValueResponse) Reset() {
	*x = GetValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueResponse) ProtoMessage() {}

func (x *GetValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_serviceprovider_value_v1_value_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueResponse.ProtoReflect.Descriptor instead.
func (*GetValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP(), []int{25}
}

func (x *GetValueResponse) GetStatus() GetValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetValueResponse_STATUS_UNSPECIFIED
}

func (x *GetValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetValueResponse) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetValueResponse) GetOldestTransactionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OldestTransactionTime
	}
	return nil
}

func (x *GetValueResponse) GetTransactionIdentifier() *v1.TransactionIdentifier {
	if x != nil {
		return x.TransactionIdentifier
	}
	return nil
}

var File_mica_serviceprovider_value_v1_value_proto protoreflect.FileDescriptor

var file_mica_serviceprovider_value_v1_value_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x69, 0x63,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6d, 0x69, 0x63, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3b, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xab, 0x0b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18,
	0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x41, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4e, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x32, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x4e, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x55, 0x75, 0x65, 0x6b, 0x12, 0x3f, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x1f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x1c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x3e, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4a, 0x04, 0x08, 0x09, 0x10,
	0x0a, 0x22, 0xd7, 0x0a, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x18, 0x01, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x8d, 0x01, 0x0a, 0x1d, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x1b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x65,
	0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x75, 0x65, 0x6b, 0x12, 0x3f, 0x0a, 0x17,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a,
	0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e,
	0x18, 0x32, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x1e, 0x18, 0x32, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6c, 0x65, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x62, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xf6, 0x01, 0x0a, 0x12,
	0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x22, 0x8c, 0x06, 0x0a, 0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x04,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x08, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x10,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x12, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x55, 0x45, 0x4b, 0x10, 0x0c, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x13, 0x22, 0x9d, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x41, 0x0a, 0x0b,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x62, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0xbb, 0x05, 0x0a, 0x1a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x22, 0xdd, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x44, 0x10, 0x10,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46,
	0x52, 0x41, 0x55, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55,
	0x44, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x0d, 0x22, 0x9d, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x62, 0x0a,
	0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xbb, 0x05, 0x0a, 0x1a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x22,
	0xdd, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x44, 0x10, 0x10, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42,
	0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10,
	0x08, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55,
	0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0d, 0x22,
	0xea, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x1f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x1c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xbc, 0x05, 0x0a,
	0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc3, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x55, 0x45, 0x4b, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13, 0x22,
	0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22, 0xde, 0x01, 0x0a, 0x10,
	0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xcb, 0x05, 0x0a,
	0x11, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xd6, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46,
	0x52, 0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55,
	0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x55, 0x45, 0x4b, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13, 0x22, 0xef, 0x03, 0x0a, 0x15, 0x41,
	0x6d, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12,
	0x30, 0x0a, 0x14, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68,
	0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x39, 0x0a, 0x14, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x12, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x44, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x72, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xfa, 0x04, 0x0a,
	0x16, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x22, 0xa4, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46,
	0x52, 0x41, 0x55, 0x44, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0e, 0x22, 0xee, 0x02, 0x0a, 0x17, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x12, 0x51, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xef, 0x02, 0x0a, 0x18, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x22, 0x95, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x05, 0x22, 0x84, 0x02, 0x0a,
	0x16, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x41, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x22, 0xa6, 0x04, 0x0a, 0x17, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x48, 0x6f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x22, 0xa0, 0x01, 0x0a,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x89, 0x05, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x22, 0x74, 0x6f, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x1e,
	0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x53,
	0x0a, 0x22, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x52, 0x1e, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x12, 0x8d, 0x01, 0x0a, 0x1d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x72, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x14,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x22, 0x46, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xa7, 0x02, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x50,
	0x0a, 0x0d, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x65, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x64, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x22, 0x83, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xe7, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62,
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03,
	0x2a, 0x3d, 0x0a, 0x09, 0x50, 0x49, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x2a,
	0xac, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x44, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x55, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x41,
	0x44, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x45,
	0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53,
	0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x44, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x44, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x42, 0x53,
	0x0a, 0x20, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x1c,
	0x6d, 0x69, 0x63, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d,
	0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_serviceprovider_value_v1_value_proto_rawDescOnce sync.Once
	file_mica_serviceprovider_value_v1_value_proto_rawDescData = file_mica_serviceprovider_value_v1_value_proto_rawDesc
)

func file_mica_serviceprovider_value_v1_value_proto_rawDescGZIP() []byte {
	file_mica_serviceprovider_value_v1_value_proto_rawDescOnce.Do(func() {
		file_mica_serviceprovider_value_v1_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_serviceprovider_value_v1_value_proto_rawDescData)
	})
	return file_mica_serviceprovider_value_v1_value_proto_rawDescData
}

var file_mica_serviceprovider_value_v1_value_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_mica_serviceprovider_value_v1_value_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_mica_serviceprovider_value_v1_value_proto_goTypes = []interface{}{
	(PINStatus)(0),                                   // 0: mica.serviceprovider.value.v1.PINStatus
	(AdviceReason)(0),                                // 1: mica.serviceprovider.value.v1.AdviceReason
	(ObtainValueResponse_Status)(0),                  // 2: mica.serviceprovider.value.v1.ObtainValueResponse.Status
	(ReverseObtainValueResponse_Status)(0),           // 3: mica.serviceprovider.value.v1.ReverseObtainValueResponse.Status
	(ReverseReturnValueResponse_Status)(0),           // 4: mica.serviceprovider.value.v1.ReverseReturnValueResponse.Status
	(ReturnValueResponse_Status)(0),                  // 5: mica.serviceprovider.value.v1.ReturnValueResponse.Status
	(HoldValueResponse_Status)(0),                    // 6: mica.serviceprovider.value.v1.HoldValueResponse.Status
	(AmendHoldValueResponse_Status)(0),               // 7: mica.serviceprovider.value.v1.AmendHoldValueResponse.Status
	(ReleaseHoldValueResponse_Status)(0),             // 8: mica.serviceprovider.value.v1.ReleaseHoldValueResponse.Status
	(ObtainHoldValueResponse_Status)(0),              // 9: mica.serviceprovider.value.v1.ObtainHoldValueResponse.Status
	(ReceiveValueResponse_Status)(0),                 // 10: mica.serviceprovider.value.v1.ReceiveValueResponse.Status
	(ValueAdviceResponse_Status)(0),                  // 11: mica.serviceprovider.value.v1.ValueAdviceResponse.Status
	(GetValueResponse_Status)(0),                     // 12: mica.serviceprovider.value.v1.GetValueResponse.Status
	(*Value)(nil),                                    // 13: mica.serviceprovider.value.v1.Value
	(*ValueRequest)(nil),                             // 14: mica.serviceprovider.value.v1.ValueRequest
	(*ObtainValueRequest)(nil),                       // 15: mica.serviceprovider.value.v1.ObtainValueRequest
	(*ObtainValueResponse)(nil),                      // 16: mica.serviceprovider.value.v1.ObtainValueResponse
	(*ReverseObtainValueRequest)(nil),                // 17: mica.serviceprovider.value.v1.ReverseObtainValueRequest
	(*ReverseObtainValueResponse)(nil),               // 18: mica.serviceprovider.value.v1.ReverseObtainValueResponse
	(*ReverseReturnValueRequest)(nil),                // 19: mica.serviceprovider.value.v1.ReverseReturnValueRequest
	(*ReverseReturnValueResponse)(nil),               // 20: mica.serviceprovider.value.v1.ReverseReturnValueResponse
	(*ReturnValueRequest)(nil),                       // 21: mica.serviceprovider.value.v1.ReturnValueRequest
	(*ReturnValueResponse)(nil),                      // 22: mica.serviceprovider.value.v1.ReturnValueResponse
	(*HoldValueRequest)(nil),                         // 23: mica.serviceprovider.value.v1.HoldValueRequest
	(*HoldValueResponse)(nil),                        // 24: mica.serviceprovider.value.v1.HoldValueResponse
	(*AmendHoldValueRequest)(nil),                    // 25: mica.serviceprovider.value.v1.AmendHoldValueRequest
	(*AmendHoldValueResponse)(nil),                   // 26: mica.serviceprovider.value.v1.AmendHoldValueResponse
	(*ReleaseHoldValueRequest)(nil),                  // 27: mica.serviceprovider.value.v1.ReleaseHoldValueRequest
	(*ReleaseHoldValueResponse)(nil),                 // 28: mica.serviceprovider.value.v1.ReleaseHoldValueResponse
	(*ObtainHoldValueRequest)(nil),                   // 29: mica.serviceprovider.value.v1.ObtainHoldValueRequest
	(*ObtainHoldValueResponse)(nil),                  // 30: mica.serviceprovider.value.v1.ObtainHoldValueResponse
	(*From)(nil),                                     // 31: mica.serviceprovider.value.v1.From
	(*ReceiveValueRequest)(nil),                      // 32: mica.serviceprovider.value.v1.ReceiveValueRequest
	(*ReceiveValueResponse)(nil),                     // 33: mica.serviceprovider.value.v1.ReceiveValueResponse
	(*ValueAdvice)(nil),                              // 34: mica.serviceprovider.value.v1.ValueAdvice
	(*ValueAdviceRequest)(nil),                       // 35: mica.serviceprovider.value.v1.ValueAdviceRequest
	(*ValueAdviceResponse)(nil),                      // 36: mica.serviceprovider.value.v1.ValueAdviceResponse
	(*GetValueRequest)(nil),                          // 37: mica.serviceprovider.value.v1.GetValueRequest
	(*GetValueResponse)(nil),                         // 38: mica.serviceprovider.value.v1.GetValueResponse
	(*timestamppb.Timestamp)(nil),                    // 39: google.protobuf.Timestamp
	(valueoperationtypev1.ValueOperationType)(0),     // 40: micashared.common.enums.valueoperationtype.v1.ValueOperationType
	(*v1.Address)(nil),                               // 41: micashared.common.v1.Address
	(organizationcategoryv1.OrganizationCategory)(0), // 42: micashared.common.enums.organizationcategory.v1.OrganizationCategory
	(*commonv1.Currency)(nil),                        // 43: mica.common.v1.Currency
	(*instrumentv1.InstrumentExternalReference)(nil), // 44: mica.serviceprovider.instrument.v1.InstrumentExternalReference
	(*v1.TransactionIdentifier)(nil),                 // 45: micashared.common.v1.TransactionIdentifier
	(approvaltypev1.ApprovalType)(0),                 // 46: micashared.common.enums.approvaltype.v1.ApprovalType
	(*v1.RiskSignal)(nil),                            // 47: micashared.common.v1.RiskSignal
	(*v1.Error)(nil),                                 // 48: micashared.common.v1.Error
}
var file_mica_serviceprovider_value_v1_value_proto_depIdxs = []int32{
	39, // 0: mica.serviceprovider.value.v1.Value.created:type_name -> google.protobuf.Timestamp
	39, // 1: mica.serviceprovider.value.v1.Value.updated:type_name -> google.protobuf.Timestamp
	40, // 2: mica.serviceprovider.value.v1.Value.operation_type:type_name -> micashared.common.enums.valueoperationtype.v1.ValueOperationType
	41, // 3: mica.serviceprovider.value.v1.Value.organization_address:type_name -> micashared.common.v1.Address
	42, // 4: mica.serviceprovider.value.v1.Value.category:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	41, // 5: mica.serviceprovider.value.v1.Value.store_address:type_name -> micashared.common.v1.Address
	39, // 6: mica.serviceprovider.value.v1.Value.expiration:type_name -> google.protobuf.Timestamp
	43, // 7: mica.serviceprovider.value.v1.Value.currency:type_name -> mica.common.v1.Currency
	44, // 8: mica.serviceprovider.value.v1.ValueRequest.instrument_external_reference:type_name -> mica.serviceprovider.instrument.v1.InstrumentExternalReference
	41, // 9: mica.serviceprovider.value.v1.ValueRequest.organization_address:type_name -> micashared.common.v1.Address
	42, // 10: mica.serviceprovider.value.v1.ValueRequest.category:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	41, // 11: mica.serviceprovider.value.v1.ValueRequest.store_address:type_name -> micashared.common.v1.Address
	45, // 12: mica.serviceprovider.value.v1.ValueRequest.transaction_identifier:type_name -> micashared.common.v1.TransactionIdentifier
	43, // 13: mica.serviceprovider.value.v1.ValueRequest.currency:type_name -> mica.common.v1.Currency
	46, // 14: mica.serviceprovider.value.v1.ObtainValueRequest.approval_type:type_name -> micashared.common.enums.approvaltype.v1.ApprovalType
	14, // 15: mica.serviceprovider.value.v1.ObtainValueRequest.value:type_name -> mica.serviceprovider.value.v1.ValueRequest
	47, // 16: mica.serviceprovider.value.v1.ObtainValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	2,  // 17: mica.serviceprovider.value.v1.ObtainValueResponse.status:type_name -> mica.serviceprovider.value.v1.ObtainValueResponse.Status
	48, // 18: mica.serviceprovider.value.v1.ObtainValueResponse.error:type_name -> micashared.common.v1.Error
	47, // 19: mica.serviceprovider.value.v1.ReverseObtainValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	45, // 20: mica.serviceprovider.value.v1.ReverseObtainValueRequest.transaction_identifier:type_name -> micashared.common.v1.TransactionIdentifier
	3,  // 21: mica.serviceprovider.value.v1.ReverseObtainValueResponse.status:type_name -> mica.serviceprovider.value.v1.ReverseObtainValueResponse.Status
	48, // 22: mica.serviceprovider.value.v1.ReverseObtainValueResponse.error:type_name -> micashared.common.v1.Error
	47, // 23: mica.serviceprovider.value.v1.ReverseReturnValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	45, // 24: mica.serviceprovider.value.v1.ReverseReturnValueRequest.transaction_identifier:type_name -> micashared.common.v1.TransactionIdentifier
	4,  // 25: mica.serviceprovider.value.v1.ReverseReturnValueResponse.status:type_name -> mica.serviceprovider.value.v1.ReverseReturnValueResponse.Status
	48, // 26: mica.serviceprovider.value.v1.ReverseReturnValueResponse.error:type_name -> micashared.common.v1.Error
	14, // 27: mica.serviceprovider.value.v1.ReturnValueRequest.value:type_name -> mica.serviceprovider.value.v1.ValueRequest
	47, // 28: mica.serviceprovider.value.v1.ReturnValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	5,  // 29: mica.serviceprovider.value.v1.ReturnValueResponse.status:type_name -> mica.serviceprovider.value.v1.ReturnValueResponse.Status
	48, // 30: mica.serviceprovider.value.v1.ReturnValueResponse.error:type_name -> micashared.common.v1.Error
	39, // 31: mica.serviceprovider.value.v1.HoldValueRequest.expiration:type_name -> google.protobuf.Timestamp
	14, // 32: mica.serviceprovider.value.v1.HoldValueRequest.value:type_name -> mica.serviceprovider.value.v1.ValueRequest
	47, // 33: mica.serviceprovider.value.v1.HoldValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	6,  // 34: mica.serviceprovider.value.v1.HoldValueResponse.status:type_name -> mica.serviceprovider.value.v1.HoldValueResponse.Status
	48, // 35: mica.serviceprovider.value.v1.HoldValueResponse.error:type_name -> micashared.common.v1.Error
	39, // 36: mica.serviceprovider.value.v1.AmendHoldValueRequest.expiration:type_name -> google.protobuf.Timestamp
	47, // 37: mica.serviceprovider.value.v1.AmendHoldValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	45, // 38: mica.serviceprovider.value.v1.AmendHoldValueRequest.transaction_identifier:type_name -> micashared.common.v1.TransactionIdentifier
	7,  // 39: mica.serviceprovider.value.v1.AmendHoldValueResponse.status:type_name -> mica.serviceprovider.value.v1.AmendHoldValueResponse.Status
	48, // 40: mica.serviceprovider.value.v1.AmendHoldValueResponse.error:type_name -> micashared.common.v1.Error
	39, // 41: mica.serviceprovider.value.v1.ReleaseHoldValueRequest.release_timestamp:type_name -> google.protobuf.Timestamp
	47, // 42: mica.serviceprovider.value.v1.ReleaseHoldValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	45, // 43: mica.serviceprovider.value.v1.ReleaseHoldValueRequest.transaction_identifier:type_name -> micashared.common.v1.TransactionIdentifier
	8,  // 44: mica.serviceprovider.value.v1.ReleaseHoldValueResponse.status:type_name -> mica.serviceprovider.value.v1.ReleaseHoldValueResponse.Status
	48, // 45: mica.serviceprovider.value.v1.ReleaseHoldValueResponse.error:type_name -> micashared.common.v1.Error
	14, // 46: mica.serviceprovider.value.v1.ObtainHoldValueRequest.value:type_name -> mica.serviceprovider.value.v1.ValueRequest
	47, // 47: mica.serviceprovider.value.v1.ObtainHoldValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	9,  // 48: mica.serviceprovider.value.v1.ObtainHoldValueResponse.status:type_name -> mica.serviceprovider.value.v1.ObtainHoldValueResponse.Status
	48, // 49: mica.serviceprovider.value.v1.ObtainHoldValueResponse.error:type_name -> micashared.common.v1.Error
	44, // 50: mica.serviceprovider.value.v1.ReceiveValueRequest.instrument_external_reference:type_name -> mica.serviceprovider.instrument.v1.InstrumentExternalReference
	43, // 51: mica.serviceprovider.value.v1.ReceiveValueRequest.currency:type_name -> mica.common.v1.Currency
	31, // 52: mica.serviceprovider.value.v1.ReceiveValueRequest.from:type_name -> mica.serviceprovider.value.v1.From
	47, // 53: mica.serviceprovider.value.v1.ReceiveValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	45, // 54: mica.serviceprovider.value.v1.ReceiveValueRequest.transaction_identifier:type_name -> micashared.common.v1.TransactionIdentifier
	10, // 55: mica.serviceprovider.value.v1.ReceiveValueResponse.status:type_name -> mica.serviceprovider.value.v1.ReceiveValueResponse.Status
	48, // 56: mica.serviceprovider.value.v1.ReceiveValueResponse.error:type_name -> micashared.common.v1.Error
	1,  // 57: mica.serviceprovider.value.v1.ValueAdvice.advice_reason:type_name -> mica.serviceprovider.value.v1.AdviceReason
	46, // 58: mica.serviceprovider.value.v1.ValueAdvice.approval_type:type_name -> micashared.common.enums.approvaltype.v1.ApprovalType
	14, // 59: mica.serviceprovider.value.v1.ValueAdvice.value:type_name -> mica.serviceprovider.value.v1.ValueRequest
	34, // 60: mica.serviceprovider.value.v1.ValueAdviceRequest.value_advices:type_name -> mica.serviceprovider.value.v1.ValueAdvice
	11, // 61: mica.serviceprovider.value.v1.ValueAdviceResponse.status:type_name -> mica.serviceprovider.value.v1.ValueAdviceResponse.Status
	48, // 62: mica.serviceprovider.value.v1.ValueAdviceResponse.error:type_name -> micashared.common.v1.Error
	12, // 63: mica.serviceprovider.value.v1.GetValueResponse.status:type_name -> mica.serviceprovider.value.v1.GetValueResponse.Status
	48, // 64: mica.serviceprovider.value.v1.GetValueResponse.error:type_name -> micashared.common.v1.Error
	13, // 65: mica.serviceprovider.value.v1.GetValueResponse.value:type_name -> mica.serviceprovider.value.v1.Value
	39, // 66: mica.serviceprovider.value.v1.GetValueResponse.oldest_transaction_time:type_name -> google.protobuf.Timestamp
	45, // 67: mica.serviceprovider.value.v1.GetValueResponse.transaction_identifier:type_name -> micashared.common.v1.TransactionIdentifier
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_mica_serviceprovider_value_v1_value_proto_init() }
func file_mica_serviceprovider_value_v1_value_proto_init() {
	if File_mica_serviceprovider_value_v1_value_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseObtainValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseObtainValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseReturnValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseReturnValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendHoldValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendHoldValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseHoldValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseHoldValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainHoldValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainHoldValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*From); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueAdvice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueAdviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueAdviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_serviceprovider_value_v1_value_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_serviceprovider_value_v1_value_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*GetValueRequest_TransactionKey)(nil),
		(*GetValueRequest_TransactionRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_serviceprovider_value_v1_value_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_serviceprovider_value_v1_value_proto_goTypes,
		DependencyIndexes: file_mica_serviceprovider_value_v1_value_proto_depIdxs,
		EnumInfos:         file_mica_serviceprovider_value_v1_value_proto_enumTypes,
		MessageInfos:      file_mica_serviceprovider_value_v1_value_proto_msgTypes,
	}.Build()
	File_mica_serviceprovider_value_v1_value_proto = out.File
	file_mica_serviceprovider_value_v1_value_proto_rawDesc = nil
	file_mica_serviceprovider_value_v1_value_proto_goTypes = nil
	file_mica_serviceprovider_value_v1_value_proto_depIdxs = nil
}
