// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: mica/partner/administration/v1/admin_service.proto

package administrationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartnerAdministrationService_SearchDataExtractionStatistics_FullMethodName = "/mica.partner.administration.v1.PartnerAdministrationService/SearchDataExtractionStatistics"
	PartnerAdministrationService_GetDataExtractionStatistics_FullMethodName    = "/mica.partner.administration.v1.PartnerAdministrationService/GetDataExtractionStatistics"
)

// PartnerAdministrationServiceClient is the client API for PartnerAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerAdministrationServiceClient interface {
	SearchDataExtractionStatistics(ctx context.Context, in *SearchDataExtractionStatisticsRequest, opts ...grpc.CallOption) (*SearchDataExtractionStatisticsResponse, error)
	GetDataExtractionStatistics(ctx context.Context, in *GetDataExtractionStatisticsRequest, opts ...grpc.CallOption) (*GetDataExtractionStatisticsResponse, error)
}

type partnerAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerAdministrationServiceClient(cc grpc.ClientConnInterface) PartnerAdministrationServiceClient {
	return &partnerAdministrationServiceClient{cc}
}

func (c *partnerAdministrationServiceClient) SearchDataExtractionStatistics(ctx context.Context, in *SearchDataExtractionStatisticsRequest, opts ...grpc.CallOption) (*SearchDataExtractionStatisticsResponse, error) {
	out := new(SearchDataExtractionStatisticsResponse)
	err := c.cc.Invoke(ctx, PartnerAdministrationService_SearchDataExtractionStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAdministrationServiceClient) GetDataExtractionStatistics(ctx context.Context, in *GetDataExtractionStatisticsRequest, opts ...grpc.CallOption) (*GetDataExtractionStatisticsResponse, error) {
	out := new(GetDataExtractionStatisticsResponse)
	err := c.cc.Invoke(ctx, PartnerAdministrationService_GetDataExtractionStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerAdministrationServiceServer is the server API for PartnerAdministrationService service.
// All implementations must embed UnimplementedPartnerAdministrationServiceServer
// for forward compatibility
type PartnerAdministrationServiceServer interface {
	SearchDataExtractionStatistics(context.Context, *SearchDataExtractionStatisticsRequest) (*SearchDataExtractionStatisticsResponse, error)
	GetDataExtractionStatistics(context.Context, *GetDataExtractionStatisticsRequest) (*GetDataExtractionStatisticsResponse, error)
	mustEmbedUnimplementedPartnerAdministrationServiceServer()
}

// UnimplementedPartnerAdministrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerAdministrationServiceServer struct {
}

func (UnimplementedPartnerAdministrationServiceServer) SearchDataExtractionStatistics(context.Context, *SearchDataExtractionStatisticsRequest) (*SearchDataExtractionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDataExtractionStatistics not implemented")
}
func (UnimplementedPartnerAdministrationServiceServer) GetDataExtractionStatistics(context.Context, *GetDataExtractionStatisticsRequest) (*GetDataExtractionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataExtractionStatistics not implemented")
}
func (UnimplementedPartnerAdministrationServiceServer) mustEmbedUnimplementedPartnerAdministrationServiceServer() {
}

// UnsafePartnerAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerAdministrationServiceServer will
// result in compilation errors.
type UnsafePartnerAdministrationServiceServer interface {
	mustEmbedUnimplementedPartnerAdministrationServiceServer()
}

func RegisterPartnerAdministrationServiceServer(s grpc.ServiceRegistrar, srv PartnerAdministrationServiceServer) {
	s.RegisterService(&PartnerAdministrationService_ServiceDesc, srv)
}

func _PartnerAdministrationService_SearchDataExtractionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDataExtractionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAdministrationServiceServer).SearchDataExtractionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerAdministrationService_SearchDataExtractionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAdministrationServiceServer).SearchDataExtractionStatistics(ctx, req.(*SearchDataExtractionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerAdministrationService_GetDataExtractionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataExtractionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAdministrationServiceServer).GetDataExtractionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerAdministrationService_GetDataExtractionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAdministrationServiceServer).GetDataExtractionStatistics(ctx, req.(*GetDataExtractionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerAdministrationService_ServiceDesc is the grpc.ServiceDesc for PartnerAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.partner.administration.v1.PartnerAdministrationService",
	HandlerType: (*PartnerAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchDataExtractionStatistics",
			Handler:    _PartnerAdministrationService_SearchDataExtractionStatistics_Handler,
		},
		{
			MethodName: "GetDataExtractionStatistics",
			Handler:    _PartnerAdministrationService_GetDataExtractionStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/fullsdk/proto/mica/partner/administration/v1/admin_service.proto",
}
