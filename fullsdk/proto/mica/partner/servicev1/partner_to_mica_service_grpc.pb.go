// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: mica/partner/service/v1/partner_to_mica_service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	accountv1 "github.com/1080network/golang/fullsdk/proto/mica/partner/accountv1"
	instrumentv1 "github.com/1080network/golang/fullsdk/proto/mica/partner/instrumentv1"
	organizationv1 "github.com/1080network/golang/fullsdk/proto/mica/partner/organizationv1"
	partnerv1 "github.com/1080network/golang/fullsdk/proto/mica/partner/partnerv1"
	serviceproviderv1 "github.com/1080network/golang/fullsdk/proto/mica/partner/serviceproviderv1"
	storev1 "github.com/1080network/golang/fullsdk/proto/mica/partner/storev1"
	valuev1 "github.com/1080network/golang/fullsdk/proto/mica/partner/valuev1"
	pingv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/pingv1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartnerToMicaService_GetPartner_FullMethodName                       = "/mica.partner.service.v1.PartnerToMicaService/GetPartner"
	PartnerToMicaService_CreateABAAccount_FullMethodName                 = "/mica.partner.service.v1.PartnerToMicaService/CreateABAAccount"
	PartnerToMicaService_GetABAAccount_FullMethodName                    = "/mica.partner.service.v1.PartnerToMicaService/GetABAAccount"
	PartnerToMicaService_SearchABAAccount_FullMethodName                 = "/mica.partner.service.v1.PartnerToMicaService/SearchABAAccount"
	PartnerToMicaService_CreateOrganization_FullMethodName               = "/mica.partner.service.v1.PartnerToMicaService/CreateOrganization"
	PartnerToMicaService_GetOrganization_FullMethodName                  = "/mica.partner.service.v1.PartnerToMicaService/GetOrganization"
	PartnerToMicaService_UpdateOrganization_FullMethodName               = "/mica.partner.service.v1.PartnerToMicaService/UpdateOrganization"
	PartnerToMicaService_UpdateOrganizationSettlementData_FullMethodName = "/mica.partner.service.v1.PartnerToMicaService/UpdateOrganizationSettlementData"
	PartnerToMicaService_ActivateOrganization_FullMethodName             = "/mica.partner.service.v1.PartnerToMicaService/ActivateOrganization"
	PartnerToMicaService_DeactivateOrganization_FullMethodName           = "/mica.partner.service.v1.PartnerToMicaService/DeactivateOrganization"
	PartnerToMicaService_SearchOrganization_FullMethodName               = "/mica.partner.service.v1.PartnerToMicaService/SearchOrganization"
	PartnerToMicaService_CreateStore_FullMethodName                      = "/mica.partner.service.v1.PartnerToMicaService/CreateStore"
	PartnerToMicaService_GetStore_FullMethodName                         = "/mica.partner.service.v1.PartnerToMicaService/GetStore"
	PartnerToMicaService_UpdateStore_FullMethodName                      = "/mica.partner.service.v1.PartnerToMicaService/UpdateStore"
	PartnerToMicaService_RemoveStore_FullMethodName                      = "/mica.partner.service.v1.PartnerToMicaService/RemoveStore"
	PartnerToMicaService_SearchStore_FullMethodName                      = "/mica.partner.service.v1.PartnerToMicaService/SearchStore"
	PartnerToMicaService_SearchServiceProvider_FullMethodName            = "/mica.partner.service.v1.PartnerToMicaService/SearchServiceProvider"
	PartnerToMicaService_ObtainValue_FullMethodName                      = "/mica.partner.service.v1.PartnerToMicaService/ObtainValue"
	PartnerToMicaService_ReverseObtainValue_FullMethodName               = "/mica.partner.service.v1.PartnerToMicaService/ReverseObtainValue"
	PartnerToMicaService_ReturnValue_FullMethodName                      = "/mica.partner.service.v1.PartnerToMicaService/ReturnValue"
	PartnerToMicaService_ReverseReturnValue_FullMethodName               = "/mica.partner.service.v1.PartnerToMicaService/ReverseReturnValue"
	PartnerToMicaService_GetValue_FullMethodName                         = "/mica.partner.service.v1.PartnerToMicaService/GetValue"
	PartnerToMicaService_HoldValue_FullMethodName                        = "/mica.partner.service.v1.PartnerToMicaService/HoldValue"
	PartnerToMicaService_AmendHoldValue_FullMethodName                   = "/mica.partner.service.v1.PartnerToMicaService/AmendHoldValue"
	PartnerToMicaService_ReleaseHoldValue_FullMethodName                 = "/mica.partner.service.v1.PartnerToMicaService/ReleaseHoldValue"
	PartnerToMicaService_ObtainHoldValue_FullMethodName                  = "/mica.partner.service.v1.PartnerToMicaService/ObtainHoldValue"
	PartnerToMicaService_CompleteLinkingWithCode_FullMethodName          = "/mica.partner.service.v1.PartnerToMicaService/CompleteLinkingWithCode"
	PartnerToMicaService_GetLink_FullMethodName                          = "/mica.partner.service.v1.PartnerToMicaService/GetLink"
	PartnerToMicaService_RemoveInstrumentLink_FullMethodName             = "/mica.partner.service.v1.PartnerToMicaService/RemoveInstrumentLink"
	PartnerToMicaService_ProvisionUUEKFromLink_FullMethodName            = "/mica.partner.service.v1.PartnerToMicaService/ProvisionUUEKFromLink"
	PartnerToMicaService_Ping_FullMethodName                             = "/mica.partner.service.v1.PartnerToMicaService/Ping"
)

// PartnerToMicaServiceClient is the client API for PartnerToMicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerToMicaServiceClient interface {
	// Retrieves the details of the Partner at Mica.
	GetPartner(ctx context.Context, in *partnerv1.GetPartnerRequest, opts ...grpc.CallOption) (*partnerv1.GetPartnerResponse, error)
	// Create an ABA account for a partner for use in settling transactions.
	CreateABAAccount(ctx context.Context, in *accountv1.CreateABAAccountRequest, opts ...grpc.CallOption) (*accountv1.CreateABAAccountResponse, error)
	// Retrieve an ABA account based on it's key.
	GetABAAccount(ctx context.Context, in *accountv1.GetABAAccountRequest, opts ...grpc.CallOption) (*accountv1.GetABAAccountResponse, error)
	// Search for ABA accounts based on the criteria in the request.
	SearchABAAccount(ctx context.Context, in *accountv1.SearchABAAccountRequest, opts ...grpc.CallOption) (*accountv1.SearchABAAccountResponse, error)
	// A method to create an organization.
	CreateOrganization(ctx context.Context, in *organizationv1.CreateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.CreateOrganizationResponse, error)
	// Retrieve an organization based on it's key or ref.
	GetOrganization(ctx context.Context, in *organizationv1.GetOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.GetOrganizationResponse, error)
	// Update a given organization.
	UpdateOrganization(ctx context.Context, in *organizationv1.UpdateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationResponse, error)
	// Update an organization financial data for use by settlement.
	UpdateOrganizationSettlementData(ctx context.Context, in *organizationv1.UpdateOrganizationSettlementDataRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationSettlementDataResponse, error)
	// Activate an organization that is currently inactive assuming the preconditions are met.
	ActivateOrganization(ctx context.Context, in *organizationv1.ActivateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.ActivateOrganizationResponse, error)
	// Deactivate an organization that is currently active.
	DeactivateOrganization(ctx context.Context, in *organizationv1.DeactivateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.DeactivateOrganizationResponse, error)
	// Like GetOrganization, can be used to retrieve Organizations based on the criteria in the request.
	SearchOrganization(ctx context.Context, in *organizationv1.SearchOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.SearchOrganizationResponse, error)
	// Create a store that sits under an Organization.
	CreateStore(ctx context.Context, in *storev1.CreateStoreRequest, opts ...grpc.CallOption) (*storev1.CreateStoreResponse, error)
	// Retrieve a store based on it's key.
	GetStore(ctx context.Context, in *storev1.GetStoreRequest, opts ...grpc.CallOption) (*storev1.GetStoreResponse, error)
	// Update the store number and address of a Store.
	UpdateStore(ctx context.Context, in *storev1.UpdateStoreRequest, opts ...grpc.CallOption) (*storev1.UpdateStoreResponse, error)
	// Remove an existing Store.
	RemoveStore(ctx context.Context, in *storev1.RemoveStoreRequest, opts ...grpc.CallOption) (*storev1.RemoveStoreResponse, error)
	// Like GetStore, can be used to retrieve Stores based on the criteria in the request.
	SearchStore(ctx context.Context, in *storev1.SearchStoreRequest, opts ...grpc.CallOption) (*storev1.SearchStoreResponse, error)
	// Used to retrieve issuers/service providers based on the criteria in the request.
	SearchServiceProvider(ctx context.Context, in *serviceproviderv1.SearchServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.SearchServiceProviderResponse, error)
	// A method to obtain value from a user in order to pay for goods or services rendered to the user.
	ObtainValue(ctx context.Context, in *valuev1.ObtainValueRequest, opts ...grpc.CallOption) (*valuev1.ObtainValueResponse, error)
	// A method to reverse obtain value, including transaction fees and discounts for a given transaction
	ReverseObtainValue(ctx context.Context, in *valuev1.ReverseValueRequest, opts ...grpc.CallOption) (*valuev1.ReverseObtainValueResponse, error)
	// A method to return value to a user in order to refund them for goods or services.
	ReturnValue(ctx context.Context, in *valuev1.ReturnValueRequest, opts ...grpc.CallOption) (*valuev1.ReturnValueResponse, error)
	// A method to reverse return value for a given transaction
	ReverseReturnValue(ctx context.Context, in *valuev1.ReverseValueRequest, opts ...grpc.CallOption) (*valuev1.ReverseReturnValueResponse, error)
	// A method to retrieve a value transaction
	GetValue(ctx context.Context, in *valuev1.GetValueRequest, opts ...grpc.CallOption) (*valuev1.GetValueResponse, error)
	// A method to hold some value to be obtained at a later date via ObtainHoldValue
	HoldValue(ctx context.Context, in *valuev1.HoldValueRequest, opts ...grpc.CallOption) (*valuev1.HoldValueResponse, error)
	// A method to amend the value of a prior hold to be obtained at a later date via ObtainHoldValue
	AmendHoldValue(ctx context.Context, in *valuev1.AmendHoldValueRequest, opts ...grpc.CallOption) (*valuev1.AmendHoldValueResponse, error)
	// A method to release previously held value
	ReleaseHoldValue(ctx context.Context, in *valuev1.ReleaseHoldValueRequest, opts ...grpc.CallOption) (*valuev1.ReleaseHoldValueResponse, error)
	// A method to obtain value that was previously held
	ObtainHoldValue(ctx context.Context, in *valuev1.ObtainHoldValueRequest, opts ...grpc.CallOption) (*valuev1.ObtainHoldValueResponse, error)
	// Complete a link between a user and an instrument operation using a code
	CompleteLinkingWithCode(ctx context.Context, in *instrumentv1.CompleteLinkingWithCodeRequest, opts ...grpc.CallOption) (*instrumentv1.CompleteLinkingWithCodeResponse, error)
	// Retrieve a link record based on it's key
	GetLink(ctx context.Context, in *instrumentv1.GetLinkRequest, opts ...grpc.CallOption) (*instrumentv1.GetLinkResponse, error)
	// Remove a instrument link preventing it from being used in the future
	RemoveInstrumentLink(ctx context.Context, in *instrumentv1.RemoveInstrumentLinkRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentLinkResponse, error)
	// Provision a UUEK from a link in order to process a transaction
	ProvisionUUEKFromLink(ctx context.Context, in *instrumentv1.ProvisionUUEKFromLinkRequest, opts ...grpc.CallOption) (*instrumentv1.ProvisionUUEKFromLinkResponse, error)
	// A method to ping the server to ensure it's up and running and that the connection is good.
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
}

type partnerToMicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerToMicaServiceClient(cc grpc.ClientConnInterface) PartnerToMicaServiceClient {
	return &partnerToMicaServiceClient{cc}
}

func (c *partnerToMicaServiceClient) GetPartner(ctx context.Context, in *partnerv1.GetPartnerRequest, opts ...grpc.CallOption) (*partnerv1.GetPartnerResponse, error) {
	out := new(partnerv1.GetPartnerResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_GetPartner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) CreateABAAccount(ctx context.Context, in *accountv1.CreateABAAccountRequest, opts ...grpc.CallOption) (*accountv1.CreateABAAccountResponse, error) {
	out := new(accountv1.CreateABAAccountResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_CreateABAAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetABAAccount(ctx context.Context, in *accountv1.GetABAAccountRequest, opts ...grpc.CallOption) (*accountv1.GetABAAccountResponse, error) {
	out := new(accountv1.GetABAAccountResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_GetABAAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchABAAccount(ctx context.Context, in *accountv1.SearchABAAccountRequest, opts ...grpc.CallOption) (*accountv1.SearchABAAccountResponse, error) {
	out := new(accountv1.SearchABAAccountResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_SearchABAAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) CreateOrganization(ctx context.Context, in *organizationv1.CreateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.CreateOrganizationResponse, error) {
	out := new(organizationv1.CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetOrganization(ctx context.Context, in *organizationv1.GetOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.GetOrganizationResponse, error) {
	out := new(organizationv1.GetOrganizationResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateOrganization(ctx context.Context, in *organizationv1.UpdateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationResponse, error) {
	out := new(organizationv1.UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_UpdateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateOrganizationSettlementData(ctx context.Context, in *organizationv1.UpdateOrganizationSettlementDataRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationSettlementDataResponse, error) {
	out := new(organizationv1.UpdateOrganizationSettlementDataResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_UpdateOrganizationSettlementData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ActivateOrganization(ctx context.Context, in *organizationv1.ActivateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.ActivateOrganizationResponse, error) {
	out := new(organizationv1.ActivateOrganizationResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_ActivateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) DeactivateOrganization(ctx context.Context, in *organizationv1.DeactivateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.DeactivateOrganizationResponse, error) {
	out := new(organizationv1.DeactivateOrganizationResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_DeactivateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchOrganization(ctx context.Context, in *organizationv1.SearchOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.SearchOrganizationResponse, error) {
	out := new(organizationv1.SearchOrganizationResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_SearchOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) CreateStore(ctx context.Context, in *storev1.CreateStoreRequest, opts ...grpc.CallOption) (*storev1.CreateStoreResponse, error) {
	out := new(storev1.CreateStoreResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_CreateStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetStore(ctx context.Context, in *storev1.GetStoreRequest, opts ...grpc.CallOption) (*storev1.GetStoreResponse, error) {
	out := new(storev1.GetStoreResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_GetStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateStore(ctx context.Context, in *storev1.UpdateStoreRequest, opts ...grpc.CallOption) (*storev1.UpdateStoreResponse, error) {
	out := new(storev1.UpdateStoreResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_UpdateStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) RemoveStore(ctx context.Context, in *storev1.RemoveStoreRequest, opts ...grpc.CallOption) (*storev1.RemoveStoreResponse, error) {
	out := new(storev1.RemoveStoreResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_RemoveStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchStore(ctx context.Context, in *storev1.SearchStoreRequest, opts ...grpc.CallOption) (*storev1.SearchStoreResponse, error) {
	out := new(storev1.SearchStoreResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_SearchStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchServiceProvider(ctx context.Context, in *serviceproviderv1.SearchServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.SearchServiceProviderResponse, error) {
	out := new(serviceproviderv1.SearchServiceProviderResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_SearchServiceProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ObtainValue(ctx context.Context, in *valuev1.ObtainValueRequest, opts ...grpc.CallOption) (*valuev1.ObtainValueResponse, error) {
	out := new(valuev1.ObtainValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_ObtainValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ReverseObtainValue(ctx context.Context, in *valuev1.ReverseValueRequest, opts ...grpc.CallOption) (*valuev1.ReverseObtainValueResponse, error) {
	out := new(valuev1.ReverseObtainValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_ReverseObtainValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ReturnValue(ctx context.Context, in *valuev1.ReturnValueRequest, opts ...grpc.CallOption) (*valuev1.ReturnValueResponse, error) {
	out := new(valuev1.ReturnValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_ReturnValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ReverseReturnValue(ctx context.Context, in *valuev1.ReverseValueRequest, opts ...grpc.CallOption) (*valuev1.ReverseReturnValueResponse, error) {
	out := new(valuev1.ReverseReturnValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_ReverseReturnValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetValue(ctx context.Context, in *valuev1.GetValueRequest, opts ...grpc.CallOption) (*valuev1.GetValueResponse, error) {
	out := new(valuev1.GetValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) HoldValue(ctx context.Context, in *valuev1.HoldValueRequest, opts ...grpc.CallOption) (*valuev1.HoldValueResponse, error) {
	out := new(valuev1.HoldValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_HoldValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) AmendHoldValue(ctx context.Context, in *valuev1.AmendHoldValueRequest, opts ...grpc.CallOption) (*valuev1.AmendHoldValueResponse, error) {
	out := new(valuev1.AmendHoldValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_AmendHoldValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ReleaseHoldValue(ctx context.Context, in *valuev1.ReleaseHoldValueRequest, opts ...grpc.CallOption) (*valuev1.ReleaseHoldValueResponse, error) {
	out := new(valuev1.ReleaseHoldValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_ReleaseHoldValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ObtainHoldValue(ctx context.Context, in *valuev1.ObtainHoldValueRequest, opts ...grpc.CallOption) (*valuev1.ObtainHoldValueResponse, error) {
	out := new(valuev1.ObtainHoldValueResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_ObtainHoldValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) CompleteLinkingWithCode(ctx context.Context, in *instrumentv1.CompleteLinkingWithCodeRequest, opts ...grpc.CallOption) (*instrumentv1.CompleteLinkingWithCodeResponse, error) {
	out := new(instrumentv1.CompleteLinkingWithCodeResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_CompleteLinkingWithCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetLink(ctx context.Context, in *instrumentv1.GetLinkRequest, opts ...grpc.CallOption) (*instrumentv1.GetLinkResponse, error) {
	out := new(instrumentv1.GetLinkResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_GetLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) RemoveInstrumentLink(ctx context.Context, in *instrumentv1.RemoveInstrumentLinkRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentLinkResponse, error) {
	out := new(instrumentv1.RemoveInstrumentLinkResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_RemoveInstrumentLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ProvisionUUEKFromLink(ctx context.Context, in *instrumentv1.ProvisionUUEKFromLinkRequest, opts ...grpc.CallOption) (*instrumentv1.ProvisionUUEKFromLinkResponse, error) {
	out := new(instrumentv1.ProvisionUUEKFromLinkResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_ProvisionUUEKFromLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerToMicaServiceServer is the server API for PartnerToMicaService service.
// All implementations must embed UnimplementedPartnerToMicaServiceServer
// for forward compatibility
type PartnerToMicaServiceServer interface {
	// Retrieves the details of the Partner at Mica.
	GetPartner(context.Context, *partnerv1.GetPartnerRequest) (*partnerv1.GetPartnerResponse, error)
	// Create an ABA account for a partner for use in settling transactions.
	CreateABAAccount(context.Context, *accountv1.CreateABAAccountRequest) (*accountv1.CreateABAAccountResponse, error)
	// Retrieve an ABA account based on it's key.
	GetABAAccount(context.Context, *accountv1.GetABAAccountRequest) (*accountv1.GetABAAccountResponse, error)
	// Search for ABA accounts based on the criteria in the request.
	SearchABAAccount(context.Context, *accountv1.SearchABAAccountRequest) (*accountv1.SearchABAAccountResponse, error)
	// A method to create an organization.
	CreateOrganization(context.Context, *organizationv1.CreateOrganizationRequest) (*organizationv1.CreateOrganizationResponse, error)
	// Retrieve an organization based on it's key or ref.
	GetOrganization(context.Context, *organizationv1.GetOrganizationRequest) (*organizationv1.GetOrganizationResponse, error)
	// Update a given organization.
	UpdateOrganization(context.Context, *organizationv1.UpdateOrganizationRequest) (*organizationv1.UpdateOrganizationResponse, error)
	// Update an organization financial data for use by settlement.
	UpdateOrganizationSettlementData(context.Context, *organizationv1.UpdateOrganizationSettlementDataRequest) (*organizationv1.UpdateOrganizationSettlementDataResponse, error)
	// Activate an organization that is currently inactive assuming the preconditions are met.
	ActivateOrganization(context.Context, *organizationv1.ActivateOrganizationRequest) (*organizationv1.ActivateOrganizationResponse, error)
	// Deactivate an organization that is currently active.
	DeactivateOrganization(context.Context, *organizationv1.DeactivateOrganizationRequest) (*organizationv1.DeactivateOrganizationResponse, error)
	// Like GetOrganization, can be used to retrieve Organizations based on the criteria in the request.
	SearchOrganization(context.Context, *organizationv1.SearchOrganizationRequest) (*organizationv1.SearchOrganizationResponse, error)
	// Create a store that sits under an Organization.
	CreateStore(context.Context, *storev1.CreateStoreRequest) (*storev1.CreateStoreResponse, error)
	// Retrieve a store based on it's key.
	GetStore(context.Context, *storev1.GetStoreRequest) (*storev1.GetStoreResponse, error)
	// Update the store number and address of a Store.
	UpdateStore(context.Context, *storev1.UpdateStoreRequest) (*storev1.UpdateStoreResponse, error)
	// Remove an existing Store.
	RemoveStore(context.Context, *storev1.RemoveStoreRequest) (*storev1.RemoveStoreResponse, error)
	// Like GetStore, can be used to retrieve Stores based on the criteria in the request.
	SearchStore(context.Context, *storev1.SearchStoreRequest) (*storev1.SearchStoreResponse, error)
	// Used to retrieve issuers/service providers based on the criteria in the request.
	SearchServiceProvider(context.Context, *serviceproviderv1.SearchServiceProviderRequest) (*serviceproviderv1.SearchServiceProviderResponse, error)
	// A method to obtain value from a user in order to pay for goods or services rendered to the user.
	ObtainValue(context.Context, *valuev1.ObtainValueRequest) (*valuev1.ObtainValueResponse, error)
	// A method to reverse obtain value, including transaction fees and discounts for a given transaction
	ReverseObtainValue(context.Context, *valuev1.ReverseValueRequest) (*valuev1.ReverseObtainValueResponse, error)
	// A method to return value to a user in order to refund them for goods or services.
	ReturnValue(context.Context, *valuev1.ReturnValueRequest) (*valuev1.ReturnValueResponse, error)
	// A method to reverse return value for a given transaction
	ReverseReturnValue(context.Context, *valuev1.ReverseValueRequest) (*valuev1.ReverseReturnValueResponse, error)
	// A method to retrieve a value transaction
	GetValue(context.Context, *valuev1.GetValueRequest) (*valuev1.GetValueResponse, error)
	// A method to hold some value to be obtained at a later date via ObtainHoldValue
	HoldValue(context.Context, *valuev1.HoldValueRequest) (*valuev1.HoldValueResponse, error)
	// A method to amend the value of a prior hold to be obtained at a later date via ObtainHoldValue
	AmendHoldValue(context.Context, *valuev1.AmendHoldValueRequest) (*valuev1.AmendHoldValueResponse, error)
	// A method to release previously held value
	ReleaseHoldValue(context.Context, *valuev1.ReleaseHoldValueRequest) (*valuev1.ReleaseHoldValueResponse, error)
	// A method to obtain value that was previously held
	ObtainHoldValue(context.Context, *valuev1.ObtainHoldValueRequest) (*valuev1.ObtainHoldValueResponse, error)
	// Complete a link between a user and an instrument operation using a code
	CompleteLinkingWithCode(context.Context, *instrumentv1.CompleteLinkingWithCodeRequest) (*instrumentv1.CompleteLinkingWithCodeResponse, error)
	// Retrieve a link record based on it's key
	GetLink(context.Context, *instrumentv1.GetLinkRequest) (*instrumentv1.GetLinkResponse, error)
	// Remove a instrument link preventing it from being used in the future
	RemoveInstrumentLink(context.Context, *instrumentv1.RemoveInstrumentLinkRequest) (*instrumentv1.RemoveInstrumentLinkResponse, error)
	// Provision a UUEK from a link in order to process a transaction
	ProvisionUUEKFromLink(context.Context, *instrumentv1.ProvisionUUEKFromLinkRequest) (*instrumentv1.ProvisionUUEKFromLinkResponse, error)
	// A method to ping the server to ensure it's up and running and that the connection is good.
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
	mustEmbedUnimplementedPartnerToMicaServiceServer()
}

// UnimplementedPartnerToMicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerToMicaServiceServer struct {
}

func (UnimplementedPartnerToMicaServiceServer) GetPartner(context.Context, *partnerv1.GetPartnerRequest) (*partnerv1.GetPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartner not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) CreateABAAccount(context.Context, *accountv1.CreateABAAccountRequest) (*accountv1.CreateABAAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateABAAccount not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetABAAccount(context.Context, *accountv1.GetABAAccountRequest) (*accountv1.GetABAAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetABAAccount not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchABAAccount(context.Context, *accountv1.SearchABAAccountRequest) (*accountv1.SearchABAAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchABAAccount not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) CreateOrganization(context.Context, *organizationv1.CreateOrganizationRequest) (*organizationv1.CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetOrganization(context.Context, *organizationv1.GetOrganizationRequest) (*organizationv1.GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateOrganization(context.Context, *organizationv1.UpdateOrganizationRequest) (*organizationv1.UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateOrganizationSettlementData(context.Context, *organizationv1.UpdateOrganizationSettlementDataRequest) (*organizationv1.UpdateOrganizationSettlementDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationSettlementData not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ActivateOrganization(context.Context, *organizationv1.ActivateOrganizationRequest) (*organizationv1.ActivateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) DeactivateOrganization(context.Context, *organizationv1.DeactivateOrganizationRequest) (*organizationv1.DeactivateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchOrganization(context.Context, *organizationv1.SearchOrganizationRequest) (*organizationv1.SearchOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) CreateStore(context.Context, *storev1.CreateStoreRequest) (*storev1.CreateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetStore(context.Context, *storev1.GetStoreRequest) (*storev1.GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateStore(context.Context, *storev1.UpdateStoreRequest) (*storev1.UpdateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) RemoveStore(context.Context, *storev1.RemoveStoreRequest) (*storev1.RemoveStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchStore(context.Context, *storev1.SearchStoreRequest) (*storev1.SearchStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchServiceProvider(context.Context, *serviceproviderv1.SearchServiceProviderRequest) (*serviceproviderv1.SearchServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServiceProvider not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ObtainValue(context.Context, *valuev1.ObtainValueRequest) (*valuev1.ObtainValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtainValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ReverseObtainValue(context.Context, *valuev1.ReverseValueRequest) (*valuev1.ReverseObtainValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseObtainValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ReturnValue(context.Context, *valuev1.ReturnValueRequest) (*valuev1.ReturnValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ReverseReturnValue(context.Context, *valuev1.ReverseValueRequest) (*valuev1.ReverseReturnValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseReturnValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetValue(context.Context, *valuev1.GetValueRequest) (*valuev1.GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) HoldValue(context.Context, *valuev1.HoldValueRequest) (*valuev1.HoldValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) AmendHoldValue(context.Context, *valuev1.AmendHoldValueRequest) (*valuev1.AmendHoldValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmendHoldValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ReleaseHoldValue(context.Context, *valuev1.ReleaseHoldValueRequest) (*valuev1.ReleaseHoldValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseHoldValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ObtainHoldValue(context.Context, *valuev1.ObtainHoldValueRequest) (*valuev1.ObtainHoldValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtainHoldValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) CompleteLinkingWithCode(context.Context, *instrumentv1.CompleteLinkingWithCodeRequest) (*instrumentv1.CompleteLinkingWithCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteLinkingWithCode not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetLink(context.Context, *instrumentv1.GetLinkRequest) (*instrumentv1.GetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) RemoveInstrumentLink(context.Context, *instrumentv1.RemoveInstrumentLinkRequest) (*instrumentv1.RemoveInstrumentLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstrumentLink not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ProvisionUUEKFromLink(context.Context, *instrumentv1.ProvisionUUEKFromLinkRequest) (*instrumentv1.ProvisionUUEKFromLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionUUEKFromLink not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) mustEmbedUnimplementedPartnerToMicaServiceServer() {}

// UnsafePartnerToMicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerToMicaServiceServer will
// result in compilation errors.
type UnsafePartnerToMicaServiceServer interface {
	mustEmbedUnimplementedPartnerToMicaServiceServer()
}

func RegisterPartnerToMicaServiceServer(s grpc.ServiceRegistrar, srv PartnerToMicaServiceServer) {
	s.RegisterService(&PartnerToMicaService_ServiceDesc, srv)
}

func _PartnerToMicaService_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(partnerv1.GetPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_GetPartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetPartner(ctx, req.(*partnerv1.GetPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_CreateABAAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accountv1.CreateABAAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).CreateABAAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_CreateABAAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).CreateABAAccount(ctx, req.(*accountv1.CreateABAAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetABAAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accountv1.GetABAAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetABAAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_GetABAAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetABAAccount(ctx, req.(*accountv1.GetABAAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchABAAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accountv1.SearchABAAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchABAAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_SearchABAAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchABAAccount(ctx, req.(*accountv1.SearchABAAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).CreateOrganization(ctx, req.(*organizationv1.CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetOrganization(ctx, req.(*organizationv1.GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateOrganization(ctx, req.(*organizationv1.UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateOrganizationSettlementData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.UpdateOrganizationSettlementDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateOrganizationSettlementData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_UpdateOrganizationSettlementData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateOrganizationSettlementData(ctx, req.(*organizationv1.UpdateOrganizationSettlementDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ActivateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.ActivateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ActivateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_ActivateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ActivateOrganization(ctx, req.(*organizationv1.ActivateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_DeactivateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.DeactivateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).DeactivateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_DeactivateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).DeactivateOrganization(ctx, req.(*organizationv1.DeactivateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.SearchOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_SearchOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchOrganization(ctx, req.(*organizationv1.SearchOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).CreateStore(ctx, req.(*storev1.CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_GetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetStore(ctx, req.(*storev1.GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_UpdateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateStore(ctx, req.(*storev1.UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_RemoveStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.RemoveStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).RemoveStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_RemoveStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).RemoveStore(ctx, req.(*storev1.RemoveStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.SearchStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_SearchStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchStore(ctx, req.(*storev1.SearchStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceproviderv1.SearchServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_SearchServiceProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchServiceProvider(ctx, req.(*serviceproviderv1.SearchServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ObtainValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ObtainValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ObtainValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_ObtainValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ObtainValue(ctx, req.(*valuev1.ObtainValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ReverseObtainValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ReverseValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ReverseObtainValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_ReverseObtainValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ReverseObtainValue(ctx, req.(*valuev1.ReverseValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ReturnValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ReturnValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ReturnValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_ReturnValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ReturnValue(ctx, req.(*valuev1.ReturnValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ReverseReturnValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ReverseValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ReverseReturnValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_ReverseReturnValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ReverseReturnValue(ctx, req.(*valuev1.ReverseValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetValue(ctx, req.(*valuev1.GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_HoldValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.HoldValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).HoldValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_HoldValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).HoldValue(ctx, req.(*valuev1.HoldValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_AmendHoldValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.AmendHoldValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).AmendHoldValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_AmendHoldValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).AmendHoldValue(ctx, req.(*valuev1.AmendHoldValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ReleaseHoldValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ReleaseHoldValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ReleaseHoldValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_ReleaseHoldValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ReleaseHoldValue(ctx, req.(*valuev1.ReleaseHoldValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ObtainHoldValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ObtainHoldValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ObtainHoldValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_ObtainHoldValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ObtainHoldValue(ctx, req.(*valuev1.ObtainHoldValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_CompleteLinkingWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.CompleteLinkingWithCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).CompleteLinkingWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_CompleteLinkingWithCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).CompleteLinkingWithCode(ctx, req.(*instrumentv1.CompleteLinkingWithCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetLink(ctx, req.(*instrumentv1.GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_RemoveInstrumentLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RemoveInstrumentLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).RemoveInstrumentLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_RemoveInstrumentLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).RemoveInstrumentLink(ctx, req.(*instrumentv1.RemoveInstrumentLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ProvisionUUEKFromLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.ProvisionUUEKFromLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ProvisionUUEKFromLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_ProvisionUUEKFromLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ProvisionUUEKFromLink(ctx, req.(*instrumentv1.ProvisionUUEKFromLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerToMicaService_ServiceDesc is the grpc.ServiceDesc for PartnerToMicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerToMicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.partner.service.v1.PartnerToMicaService",
	HandlerType: (*PartnerToMicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartner",
			Handler:    _PartnerToMicaService_GetPartner_Handler,
		},
		{
			MethodName: "CreateABAAccount",
			Handler:    _PartnerToMicaService_CreateABAAccount_Handler,
		},
		{
			MethodName: "GetABAAccount",
			Handler:    _PartnerToMicaService_GetABAAccount_Handler,
		},
		{
			MethodName: "SearchABAAccount",
			Handler:    _PartnerToMicaService_SearchABAAccount_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _PartnerToMicaService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _PartnerToMicaService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _PartnerToMicaService_UpdateOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganizationSettlementData",
			Handler:    _PartnerToMicaService_UpdateOrganizationSettlementData_Handler,
		},
		{
			MethodName: "ActivateOrganization",
			Handler:    _PartnerToMicaService_ActivateOrganization_Handler,
		},
		{
			MethodName: "DeactivateOrganization",
			Handler:    _PartnerToMicaService_DeactivateOrganization_Handler,
		},
		{
			MethodName: "SearchOrganization",
			Handler:    _PartnerToMicaService_SearchOrganization_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _PartnerToMicaService_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _PartnerToMicaService_GetStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _PartnerToMicaService_UpdateStore_Handler,
		},
		{
			MethodName: "RemoveStore",
			Handler:    _PartnerToMicaService_RemoveStore_Handler,
		},
		{
			MethodName: "SearchStore",
			Handler:    _PartnerToMicaService_SearchStore_Handler,
		},
		{
			MethodName: "SearchServiceProvider",
			Handler:    _PartnerToMicaService_SearchServiceProvider_Handler,
		},
		{
			MethodName: "ObtainValue",
			Handler:    _PartnerToMicaService_ObtainValue_Handler,
		},
		{
			MethodName: "ReverseObtainValue",
			Handler:    _PartnerToMicaService_ReverseObtainValue_Handler,
		},
		{
			MethodName: "ReturnValue",
			Handler:    _PartnerToMicaService_ReturnValue_Handler,
		},
		{
			MethodName: "ReverseReturnValue",
			Handler:    _PartnerToMicaService_ReverseReturnValue_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _PartnerToMicaService_GetValue_Handler,
		},
		{
			MethodName: "HoldValue",
			Handler:    _PartnerToMicaService_HoldValue_Handler,
		},
		{
			MethodName: "AmendHoldValue",
			Handler:    _PartnerToMicaService_AmendHoldValue_Handler,
		},
		{
			MethodName: "ReleaseHoldValue",
			Handler:    _PartnerToMicaService_ReleaseHoldValue_Handler,
		},
		{
			MethodName: "ObtainHoldValue",
			Handler:    _PartnerToMicaService_ObtainHoldValue_Handler,
		},
		{
			MethodName: "CompleteLinkingWithCode",
			Handler:    _PartnerToMicaService_CompleteLinkingWithCode_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _PartnerToMicaService_GetLink_Handler,
		},
		{
			MethodName: "RemoveInstrumentLink",
			Handler:    _PartnerToMicaService_RemoveInstrumentLink_Handler,
		},
		{
			MethodName: "ProvisionUUEKFromLink",
			Handler:    _PartnerToMicaService_ProvisionUUEKFromLink_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _PartnerToMicaService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/fullsdk/proto/mica/partner/service/v1/partner_to_mica_service.proto",
}
