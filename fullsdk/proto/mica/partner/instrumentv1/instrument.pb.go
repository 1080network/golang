// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: mica/partner/instrument/v1/instrument.proto

package instrumentv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "github.com/1080network/golang/fullsdk/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeSessionKeyResponse_Status int32

const (
	ExchangeSessionKeyResponse_STATUS_UNSPECIFIED            ExchangeSessionKeyResponse_Status = 0
	ExchangeSessionKeyResponse_STATUS_SUCCESS                ExchangeSessionKeyResponse_Status = 1
	ExchangeSessionKeyResponse_STATUS_ERROR                  ExchangeSessionKeyResponse_Status = 2
	ExchangeSessionKeyResponse_STATUS_MATCHING_CODE_MISMATCH ExchangeSessionKeyResponse_Status = 3
	ExchangeSessionKeyResponse_STATUS_NOT_FOUND              ExchangeSessionKeyResponse_Status = 4
)

// Enum value maps for ExchangeSessionKeyResponse_Status.
var (
	ExchangeSessionKeyResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_MATCHING_CODE_MISMATCH",
		4: "STATUS_NOT_FOUND",
	}
	ExchangeSessionKeyResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":            0,
		"STATUS_SUCCESS":                1,
		"STATUS_ERROR":                  2,
		"STATUS_MATCHING_CODE_MISMATCH": 3,
		"STATUS_NOT_FOUND":              4,
	}
)

func (x ExchangeSessionKeyResponse_Status) Enum() *ExchangeSessionKeyResponse_Status {
	p := new(ExchangeSessionKeyResponse_Status)
	*p = x
	return p
}

func (x ExchangeSessionKeyResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeSessionKeyResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_instrument_v1_instrument_proto_enumTypes[0].Descriptor()
}

func (ExchangeSessionKeyResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_instrument_v1_instrument_proto_enumTypes[0]
}

func (x ExchangeSessionKeyResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeSessionKeyResponse_Status.Descriptor instead.
func (ExchangeSessionKeyResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{1, 0}
}

type ProvisionUUEKWithLinkSessionKeyResponse_Status int32

const (
	ProvisionUUEKWithLinkSessionKeyResponse_STATUS_UNSPECIFIED ProvisionUUEKWithLinkSessionKeyResponse_Status = 0
	ProvisionUUEKWithLinkSessionKeyResponse_STATUS_SUCCESS     ProvisionUUEKWithLinkSessionKeyResponse_Status = 1
	ProvisionUUEKWithLinkSessionKeyResponse_STATUS_ERROR       ProvisionUUEKWithLinkSessionKeyResponse_Status = 2
	ProvisionUUEKWithLinkSessionKeyResponse_STATUS_NOT_FOUND   ProvisionUUEKWithLinkSessionKeyResponse_Status = 3
)

// Enum value maps for ProvisionUUEKWithLinkSessionKeyResponse_Status.
var (
	ProvisionUUEKWithLinkSessionKeyResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	ProvisionUUEKWithLinkSessionKeyResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x ProvisionUUEKWithLinkSessionKeyResponse_Status) Enum() *ProvisionUUEKWithLinkSessionKeyResponse_Status {
	p := new(ProvisionUUEKWithLinkSessionKeyResponse_Status)
	*p = x
	return p
}

func (x ProvisionUUEKWithLinkSessionKeyResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisionUUEKWithLinkSessionKeyResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_instrument_v1_instrument_proto_enumTypes[1].Descriptor()
}

func (ProvisionUUEKWithLinkSessionKeyResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_instrument_v1_instrument_proto_enumTypes[1]
}

func (x ProvisionUUEKWithLinkSessionKeyResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisionUUEKWithLinkSessionKeyResponse_Status.Descriptor instead.
func (ProvisionUUEKWithLinkSessionKeyResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{3, 0}
}

type LinkInstrumentWithCodeResponse_Status int32

const (
	LinkInstrumentWithCodeResponse_STATUS_UNSPECIFIED LinkInstrumentWithCodeResponse_Status = 0
	LinkInstrumentWithCodeResponse_STATUS_SUCCESS     LinkInstrumentWithCodeResponse_Status = 1
	LinkInstrumentWithCodeResponse_STATUS_ERROR       LinkInstrumentWithCodeResponse_Status = 2
)

// Enum value maps for LinkInstrumentWithCodeResponse_Status.
var (
	LinkInstrumentWithCodeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	LinkInstrumentWithCodeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x LinkInstrumentWithCodeResponse_Status) Enum() *LinkInstrumentWithCodeResponse_Status {
	p := new(LinkInstrumentWithCodeResponse_Status)
	*p = x
	return p
}

func (x LinkInstrumentWithCodeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkInstrumentWithCodeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_instrument_v1_instrument_proto_enumTypes[2].Descriptor()
}

func (LinkInstrumentWithCodeResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_instrument_v1_instrument_proto_enumTypes[2]
}

func (x LinkInstrumentWithCodeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkInstrumentWithCodeResponse_Status.Descriptor instead.
func (LinkInstrumentWithCodeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{5, 0}
}

type ExchangeSessionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session key that was established when the Widget was initialized
	SessionKey string `protobuf:"bytes,1,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	// Primary key on the external system.
	PartnerUserRef string `protobuf:"bytes,3,opt,name=partner_user_ref,json=partnerUserRef,proto3" json:"partner_user_ref,omitempty"`
	// Primary key on the external system.
	PartnerInstrumentRef string `protobuf:"bytes,2,opt,name=partner_instrument_ref,json=partnerInstrumentRef,proto3" json:"partner_instrument_ref,omitempty"`
	// Primary key on the external system.
	PartnerUuekRef string `protobuf:"bytes,4,opt,name=partner_uuek_ref,json=partnerUuekRef,proto3" json:"partner_uuek_ref,omitempty"`
}

func (x *ExchangeSessionKeyRequest) Reset() {
	*x = ExchangeSessionKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSessionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSessionKeyRequest) ProtoMessage() {}

func (x *ExchangeSessionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSessionKeyRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSessionKeyRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeSessionKeyRequest) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

func (x *ExchangeSessionKeyRequest) GetPartnerUserRef() string {
	if x != nil {
		return x.PartnerUserRef
	}
	return ""
}

func (x *ExchangeSessionKeyRequest) GetPartnerInstrumentRef() string {
	if x != nil {
		return x.PartnerInstrumentRef
	}
	return ""
}

func (x *ExchangeSessionKeyRequest) GetPartnerUuekRef() string {
	if x != nil {
		return x.PartnerUuekRef
	}
	return ""
}

type ExchangeSessionKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ExchangeSessionKeyResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.instrument.v1.ExchangeSessionKeyResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The UUEK that the Partner can use to obtain or return value for this user.
	PartnerUuek string `protobuf:"bytes,3,opt,name=partner_uuek,json=partnerUuek,proto3" json:"partner_uuek,omitempty"`
}

func (x *ExchangeSessionKeyResponse) Reset() {
	*x = ExchangeSessionKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSessionKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSessionKeyResponse) ProtoMessage() {}

func (x *ExchangeSessionKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSessionKeyResponse.ProtoReflect.Descriptor instead.
func (*ExchangeSessionKeyResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeSessionKeyResponse) GetStatus() ExchangeSessionKeyResponse_Status {
	if x != nil {
		return x.Status
	}
	return ExchangeSessionKeyResponse_STATUS_UNSPECIFIED
}

func (x *ExchangeSessionKeyResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExchangeSessionKeyResponse) GetPartnerUuek() string {
	if x != nil {
		return x.PartnerUuek
	}
	return ""
}

type ProvisionUUEKWithLinkSessionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use the session key to provision a UUEK
	LinkSessionKey string `protobuf:"bytes,1,opt,name=link_session_key,json=linkSessionKey,proto3" json:"link_session_key,omitempty"`
}

func (x *ProvisionUUEKWithLinkSessionKeyRequest) Reset() {
	*x = ProvisionUUEKWithLinkSessionKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionUUEKWithLinkSessionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionUUEKWithLinkSessionKeyRequest) ProtoMessage() {}

func (x *ProvisionUUEKWithLinkSessionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionUUEKWithLinkSessionKeyRequest.ProtoReflect.Descriptor instead.
func (*ProvisionUUEKWithLinkSessionKeyRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{2}
}

func (x *ProvisionUUEKWithLinkSessionKeyRequest) GetLinkSessionKey() string {
	if x != nil {
		return x.LinkSessionKey
	}
	return ""
}

type ProvisionUUEKWithLinkSessionKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ProvisionUUEKWithLinkSessionKeyResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.instrument.v1.ProvisionUUEKWithLinkSessionKeyResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The UUEK that can be used to run a transaction
	PartnerUuek string `protobuf:"bytes,3,opt,name=partner_uuek,json=partnerUuek,proto3" json:"partner_uuek,omitempty"`
}

func (x *ProvisionUUEKWithLinkSessionKeyResponse) Reset() {
	*x = ProvisionUUEKWithLinkSessionKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionUUEKWithLinkSessionKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionUUEKWithLinkSessionKeyResponse) ProtoMessage() {}

func (x *ProvisionUUEKWithLinkSessionKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionUUEKWithLinkSessionKeyResponse.ProtoReflect.Descriptor instead.
func (*ProvisionUUEKWithLinkSessionKeyResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{3}
}

func (x *ProvisionUUEKWithLinkSessionKeyResponse) GetStatus() ProvisionUUEKWithLinkSessionKeyResponse_Status {
	if x != nil {
		return x.Status
	}
	return ProvisionUUEKWithLinkSessionKeyResponse_STATUS_UNSPECIFIED
}

func (x *ProvisionUUEKWithLinkSessionKeyResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProvisionUUEKWithLinkSessionKeyResponse) GetPartnerUuek() string {
	if x != nil {
		return x.PartnerUuek
	}
	return ""
}

type LinkInstrumentWithCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String code supplied by the end user
	LinkingCode string `protobuf:"bytes,1,opt,name=linking_code,json=linkingCode,proto3" json:"linking_code,omitempty"`
	// If set to true a uuek will be minted and no link session will be created
	IsOneTimeUse bool `protobuf:"varint,2,opt,name=is_one_time_use,json=isOneTimeUse,proto3" json:"is_one_time_use,omitempty"`
	// If a multi use session is requested (i.e. is_one_time_use is false), setting this flag to true will return both a
	// link session and a uuek
	CreateUuek bool `protobuf:"varint,3,opt,name=create_uuek,json=createUuek,proto3" json:"create_uuek,omitempty"`
	// On behalf of which organization this link will be created.
	//
	// Types that are assignable to OrganizationIdentifier:
	//
	//	*LinkInstrumentWithCodeRequest_OrganizationKey
	//	*LinkInstrumentWithCodeRequest_OrganizationRef
	OrganizationIdentifier isLinkInstrumentWithCodeRequest_OrganizationIdentifier `protobuf_oneof:"organization_identifier"`
}

func (x *LinkInstrumentWithCodeRequest) Reset() {
	*x = LinkInstrumentWithCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkInstrumentWithCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkInstrumentWithCodeRequest) ProtoMessage() {}

func (x *LinkInstrumentWithCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkInstrumentWithCodeRequest.ProtoReflect.Descriptor instead.
func (*LinkInstrumentWithCodeRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{4}
}

func (x *LinkInstrumentWithCodeRequest) GetLinkingCode() string {
	if x != nil {
		return x.LinkingCode
	}
	return ""
}

func (x *LinkInstrumentWithCodeRequest) GetIsOneTimeUse() bool {
	if x != nil {
		return x.IsOneTimeUse
	}
	return false
}

func (x *LinkInstrumentWithCodeRequest) GetCreateUuek() bool {
	if x != nil {
		return x.CreateUuek
	}
	return false
}

func (m *LinkInstrumentWithCodeRequest) GetOrganizationIdentifier() isLinkInstrumentWithCodeRequest_OrganizationIdentifier {
	if m != nil {
		return m.OrganizationIdentifier
	}
	return nil
}

func (x *LinkInstrumentWithCodeRequest) GetOrganizationKey() string {
	if x, ok := x.GetOrganizationIdentifier().(*LinkInstrumentWithCodeRequest_OrganizationKey); ok {
		return x.OrganizationKey
	}
	return ""
}

func (x *LinkInstrumentWithCodeRequest) GetOrganizationRef() string {
	if x, ok := x.GetOrganizationIdentifier().(*LinkInstrumentWithCodeRequest_OrganizationRef); ok {
		return x.OrganizationRef
	}
	return ""
}

type isLinkInstrumentWithCodeRequest_OrganizationIdentifier interface {
	isLinkInstrumentWithCodeRequest_OrganizationIdentifier()
}

type LinkInstrumentWithCodeRequest_OrganizationKey struct {
	OrganizationKey string `protobuf:"bytes,4,opt,name=organization_key,json=organizationKey,proto3,oneof"`
}

type LinkInstrumentWithCodeRequest_OrganizationRef struct {
	// The primary key for this organization at the Partner.
	OrganizationRef string `protobuf:"bytes,5,opt,name=organization_ref,json=organizationRef,proto3,oneof"`
}

func (*LinkInstrumentWithCodeRequest_OrganizationKey) isLinkInstrumentWithCodeRequest_OrganizationIdentifier() {
}

func (*LinkInstrumentWithCodeRequest_OrganizationRef) isLinkInstrumentWithCodeRequest_OrganizationIdentifier() {
}

type LinkInstrumentWithCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status LinkInstrumentWithCodeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.instrument.v1.LinkInstrumentWithCodeResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// If the requested link is one time use there will be no link session key
	IsOneTimeUse bool `protobuf:"varint,3,opt,name=is_one_time_use,json=isOneTimeUse,proto3" json:"is_one_time_use,omitempty"`
	// If it is not a one time use the session key is the token to request other uueks in the future
	LinkSessionKey string `protobuf:"bytes,4,opt,name=link_session_key,json=linkSessionKey,proto3" json:"link_session_key,omitempty"`
	// If a uuek was requested or if one time use was requested a uuek is minted
	Uuek string `protobuf:"bytes,5,opt,name=uuek,proto3" json:"uuek,omitempty"`
	// Any claims that are associated with the link as provided by the Service Provider
	Claims *v1.InstrumentLinkClaims `protobuf:"bytes,6,opt,name=claims,proto3" json:"claims,omitempty"`
}

func (x *LinkInstrumentWithCodeResponse) Reset() {
	*x = LinkInstrumentWithCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkInstrumentWithCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkInstrumentWithCodeResponse) ProtoMessage() {}

func (x *LinkInstrumentWithCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_instrument_v1_instrument_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkInstrumentWithCodeResponse.ProtoReflect.Descriptor instead.
func (*LinkInstrumentWithCodeResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{5}
}

func (x *LinkInstrumentWithCodeResponse) GetStatus() LinkInstrumentWithCodeResponse_Status {
	if x != nil {
		return x.Status
	}
	return LinkInstrumentWithCodeResponse_STATUS_UNSPECIFIED
}

func (x *LinkInstrumentWithCodeResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *LinkInstrumentWithCodeResponse) GetIsOneTimeUse() bool {
	if x != nil {
		return x.IsOneTimeUse
	}
	return false
}

func (x *LinkInstrumentWithCodeResponse) GetLinkSessionKey() string {
	if x != nil {
		return x.LinkSessionKey
	}
	return ""
}

func (x *LinkInstrumentWithCodeResponse) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

func (x *LinkInstrumentWithCodeResponse) GetClaims() *v1.InstrumentLinkClaims {
	if x != nil {
		return x.Claims
	}
	return nil
}

var File_mica_partner_instrument_v1_instrument_proto protoreflect.FileDescriptor

var file_mica_partner_instrument_v1_instrument_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x19,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x3d, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x55, 0x75, 0x65, 0x6b, 0x52, 0x65, 0x66, 0x22, 0xd5, 0x02, 0x0a, 0x1a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x1e, 0x18, 0x32, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x65,
	0x6b, 0x22, 0x7f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x04, 0x22, 0x5d, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x55, 0x45, 0x4b, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x10,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1b, 0x18,
	0x32, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x22, 0xc1, 0x02, 0x0a, 0x27, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x55, 0x45, 0x4b, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x45, 0x4b, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x55, 0x75, 0x65, 0x6b, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x91, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x75, 0x65, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x75,
	0x65, 0x6b, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x42, 0x19,
	0x0a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x9f, 0x03, 0x0a, 0x1e, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e,
	0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x12,
	0x42, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x06, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x52, 0x0a, 0x1d, 0x69,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x19, 0x6d,
	0x69, 0x63, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_partner_instrument_v1_instrument_proto_rawDescOnce sync.Once
	file_mica_partner_instrument_v1_instrument_proto_rawDescData = file_mica_partner_instrument_v1_instrument_proto_rawDesc
)

func file_mica_partner_instrument_v1_instrument_proto_rawDescGZIP() []byte {
	file_mica_partner_instrument_v1_instrument_proto_rawDescOnce.Do(func() {
		file_mica_partner_instrument_v1_instrument_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_partner_instrument_v1_instrument_proto_rawDescData)
	})
	return file_mica_partner_instrument_v1_instrument_proto_rawDescData
}

var file_mica_partner_instrument_v1_instrument_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mica_partner_instrument_v1_instrument_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_mica_partner_instrument_v1_instrument_proto_goTypes = []interface{}{
	(ExchangeSessionKeyResponse_Status)(0),              // 0: mica.partner.instrument.v1.ExchangeSessionKeyResponse.Status
	(ProvisionUUEKWithLinkSessionKeyResponse_Status)(0), // 1: mica.partner.instrument.v1.ProvisionUUEKWithLinkSessionKeyResponse.Status
	(LinkInstrumentWithCodeResponse_Status)(0),          // 2: mica.partner.instrument.v1.LinkInstrumentWithCodeResponse.Status
	(*ExchangeSessionKeyRequest)(nil),                   // 3: mica.partner.instrument.v1.ExchangeSessionKeyRequest
	(*ExchangeSessionKeyResponse)(nil),                  // 4: mica.partner.instrument.v1.ExchangeSessionKeyResponse
	(*ProvisionUUEKWithLinkSessionKeyRequest)(nil),      // 5: mica.partner.instrument.v1.ProvisionUUEKWithLinkSessionKeyRequest
	(*ProvisionUUEKWithLinkSessionKeyResponse)(nil),     // 6: mica.partner.instrument.v1.ProvisionUUEKWithLinkSessionKeyResponse
	(*LinkInstrumentWithCodeRequest)(nil),               // 7: mica.partner.instrument.v1.LinkInstrumentWithCodeRequest
	(*LinkInstrumentWithCodeResponse)(nil),              // 8: mica.partner.instrument.v1.LinkInstrumentWithCodeResponse
	(*v1.Error)(nil),                                    // 9: micashared.common.v1.Error
	(*v1.InstrumentLinkClaims)(nil),                     // 10: micashared.common.v1.InstrumentLinkClaims
}
var file_mica_partner_instrument_v1_instrument_proto_depIdxs = []int32{
	0,  // 0: mica.partner.instrument.v1.ExchangeSessionKeyResponse.status:type_name -> mica.partner.instrument.v1.ExchangeSessionKeyResponse.Status
	9,  // 1: mica.partner.instrument.v1.ExchangeSessionKeyResponse.error:type_name -> micashared.common.v1.Error
	1,  // 2: mica.partner.instrument.v1.ProvisionUUEKWithLinkSessionKeyResponse.status:type_name -> mica.partner.instrument.v1.ProvisionUUEKWithLinkSessionKeyResponse.Status
	9,  // 3: mica.partner.instrument.v1.ProvisionUUEKWithLinkSessionKeyResponse.error:type_name -> micashared.common.v1.Error
	2,  // 4: mica.partner.instrument.v1.LinkInstrumentWithCodeResponse.status:type_name -> mica.partner.instrument.v1.LinkInstrumentWithCodeResponse.Status
	9,  // 5: mica.partner.instrument.v1.LinkInstrumentWithCodeResponse.error:type_name -> micashared.common.v1.Error
	10, // 6: mica.partner.instrument.v1.LinkInstrumentWithCodeResponse.claims:type_name -> micashared.common.v1.InstrumentLinkClaims
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_mica_partner_instrument_v1_instrument_proto_init() }
func file_mica_partner_instrument_v1_instrument_proto_init() {
	if File_mica_partner_instrument_v1_instrument_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_partner_instrument_v1_instrument_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSessionKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_instrument_v1_instrument_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSessionKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_instrument_v1_instrument_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionUUEKWithLinkSessionKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_instrument_v1_instrument_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionUUEKWithLinkSessionKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_instrument_v1_instrument_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkInstrumentWithCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_instrument_v1_instrument_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkInstrumentWithCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_partner_instrument_v1_instrument_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*LinkInstrumentWithCodeRequest_OrganizationKey)(nil),
		(*LinkInstrumentWithCodeRequest_OrganizationRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_partner_instrument_v1_instrument_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_partner_instrument_v1_instrument_proto_goTypes,
		DependencyIndexes: file_mica_partner_instrument_v1_instrument_proto_depIdxs,
		EnumInfos:         file_mica_partner_instrument_v1_instrument_proto_enumTypes,
		MessageInfos:      file_mica_partner_instrument_v1_instrument_proto_msgTypes,
	}.Build()
	File_mica_partner_instrument_v1_instrument_proto = out.File
	file_mica_partner_instrument_v1_instrument_proto_rawDesc = nil
	file_mica_partner_instrument_v1_instrument_proto_goTypes = nil
	file_mica_partner_instrument_v1_instrument_proto_depIdxs = nil
}
