// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: mica/discount/administration/v1/admin_service.proto

package administrationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DiscountAdministrationService_GenerateFromMicaClientCertificate_FullMethodName         = "/mica.discount.administration.v1.DiscountAdministrationService/GenerateFromMicaClientCertificate"
	DiscountAdministrationService_UpdateFromMicaClientCertificate_FullMethodName           = "/mica.discount.administration.v1.DiscountAdministrationService/UpdateFromMicaClientCertificate"
	DiscountAdministrationService_EnableFromMicaClientCertificate_FullMethodName           = "/mica.discount.administration.v1.DiscountAdministrationService/EnableFromMicaClientCertificate"
	DiscountAdministrationService_SearchFromMicaClientCertificate_FullMethodName           = "/mica.discount.administration.v1.DiscountAdministrationService/SearchFromMicaClientCertificate"
	DiscountAdministrationService_GetFromMicaClientSettings_FullMethodName                 = "/mica.discount.administration.v1.DiscountAdministrationService/GetFromMicaClientSettings"
	DiscountAdministrationService_UpdateFromMicaClientCallbackAddress_FullMethodName       = "/mica.discount.administration.v1.DiscountAdministrationService/UpdateFromMicaClientCallbackAddress"
	DiscountAdministrationService_CreateApiTokenConfiguration_FullMethodName               = "/mica.discount.administration.v1.DiscountAdministrationService/CreateApiTokenConfiguration"
	DiscountAdministrationService_GetApiTokenConfiguration_FullMethodName                  = "/mica.discount.administration.v1.DiscountAdministrationService/GetApiTokenConfiguration"
	DiscountAdministrationService_UpdateAPITokenAuthenticationConfiguration_FullMethodName = "/mica.discount.administration.v1.DiscountAdministrationService/UpdateAPITokenAuthenticationConfiguration"
	DiscountAdministrationService_PingExternal_FullMethodName                              = "/mica.discount.administration.v1.DiscountAdministrationService/PingExternal"
)

// DiscountAdministrationServiceClient is the client API for DiscountAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscountAdministrationServiceClient interface {
	// Client certificates are used when mica needs to call out to a customers environment.
	GenerateFromMicaClientCertificate(ctx context.Context, in *GenerateFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*GenerateFromMicaClientCertificateResponse, error)
	// After signing the CSR the member will upload the signed cert
	UpdateFromMicaClientCertificate(ctx context.Context, in *UpdateFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*UpdateFromMicaClientCertificateResponse, error)
	// there can only be one enable cert for each endpoint
	EnableFromMicaClientCertificate(ctx context.Context, in *EnableFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*EnableFromMicaClientCertificateResponse, error)
	// return all from mica certs for now
	SearchFromMicaClientCertificate(ctx context.Context, in *SearchFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*SearchFromMicaClientCertificateResponse, error)
	// External authentication mechanisms for Mica to call provider endpoints
	GetFromMicaClientSettings(ctx context.Context, in *GetFromMicaClientSettingsRequest, opts ...grpc.CallOption) (*GetFromMicaClientSettingsResponse, error)
	UpdateFromMicaClientCallbackAddress(ctx context.Context, in *UpdateFromMicaClientCallbackAddressRequest, opts ...grpc.CallOption) (*UpdateFromMicaClientCallbackAddressResponse, error)
	// creates the token configuration
	CreateApiTokenConfiguration(ctx context.Context, in *CreateApiTokenConfigurationRequest, opts ...grpc.CallOption) (*CreateApiTokenConfigurationResponse, error)
	// if the authentication type is api token use these methods to properly setup the api token
	// retrieves the api token configuration including the token itself
	GetApiTokenConfiguration(ctx context.Context, in *GetApiTokenConfigurationRequest, opts ...grpc.CallOption) (*GetApiTokenConfigurationResponse, error)
	// Update the configuration of the token, the set fields will be modified
	UpdateAPITokenAuthenticationConfiguration(ctx context.Context, in *UpdateAPITokenAuthenticationConfigurationRequest, opts ...grpc.CallOption) (*UpdateAPITokenAuthenticationConfigurationResponse, error)
	// tests the external call to verify proper configuration and connectivity
	PingExternal(ctx context.Context, in *PingExternalRequest, opts ...grpc.CallOption) (*PingExternalResponse, error)
}

type discountAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountAdministrationServiceClient(cc grpc.ClientConnInterface) DiscountAdministrationServiceClient {
	return &discountAdministrationServiceClient{cc}
}

func (c *discountAdministrationServiceClient) GenerateFromMicaClientCertificate(ctx context.Context, in *GenerateFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*GenerateFromMicaClientCertificateResponse, error) {
	out := new(GenerateFromMicaClientCertificateResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_GenerateFromMicaClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) UpdateFromMicaClientCertificate(ctx context.Context, in *UpdateFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*UpdateFromMicaClientCertificateResponse, error) {
	out := new(UpdateFromMicaClientCertificateResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_UpdateFromMicaClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) EnableFromMicaClientCertificate(ctx context.Context, in *EnableFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*EnableFromMicaClientCertificateResponse, error) {
	out := new(EnableFromMicaClientCertificateResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_EnableFromMicaClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) SearchFromMicaClientCertificate(ctx context.Context, in *SearchFromMicaClientCertificateRequest, opts ...grpc.CallOption) (*SearchFromMicaClientCertificateResponse, error) {
	out := new(SearchFromMicaClientCertificateResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_SearchFromMicaClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) GetFromMicaClientSettings(ctx context.Context, in *GetFromMicaClientSettingsRequest, opts ...grpc.CallOption) (*GetFromMicaClientSettingsResponse, error) {
	out := new(GetFromMicaClientSettingsResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_GetFromMicaClientSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) UpdateFromMicaClientCallbackAddress(ctx context.Context, in *UpdateFromMicaClientCallbackAddressRequest, opts ...grpc.CallOption) (*UpdateFromMicaClientCallbackAddressResponse, error) {
	out := new(UpdateFromMicaClientCallbackAddressResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_UpdateFromMicaClientCallbackAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) CreateApiTokenConfiguration(ctx context.Context, in *CreateApiTokenConfigurationRequest, opts ...grpc.CallOption) (*CreateApiTokenConfigurationResponse, error) {
	out := new(CreateApiTokenConfigurationResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_CreateApiTokenConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) GetApiTokenConfiguration(ctx context.Context, in *GetApiTokenConfigurationRequest, opts ...grpc.CallOption) (*GetApiTokenConfigurationResponse, error) {
	out := new(GetApiTokenConfigurationResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_GetApiTokenConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) UpdateAPITokenAuthenticationConfiguration(ctx context.Context, in *UpdateAPITokenAuthenticationConfigurationRequest, opts ...grpc.CallOption) (*UpdateAPITokenAuthenticationConfigurationResponse, error) {
	out := new(UpdateAPITokenAuthenticationConfigurationResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_UpdateAPITokenAuthenticationConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountAdministrationServiceClient) PingExternal(ctx context.Context, in *PingExternalRequest, opts ...grpc.CallOption) (*PingExternalResponse, error) {
	out := new(PingExternalResponse)
	err := c.cc.Invoke(ctx, DiscountAdministrationService_PingExternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountAdministrationServiceServer is the server API for DiscountAdministrationService service.
// All implementations must embed UnimplementedDiscountAdministrationServiceServer
// for forward compatibility
type DiscountAdministrationServiceServer interface {
	// Client certificates are used when mica needs to call out to a customers environment.
	GenerateFromMicaClientCertificate(context.Context, *GenerateFromMicaClientCertificateRequest) (*GenerateFromMicaClientCertificateResponse, error)
	// After signing the CSR the member will upload the signed cert
	UpdateFromMicaClientCertificate(context.Context, *UpdateFromMicaClientCertificateRequest) (*UpdateFromMicaClientCertificateResponse, error)
	// there can only be one enable cert for each endpoint
	EnableFromMicaClientCertificate(context.Context, *EnableFromMicaClientCertificateRequest) (*EnableFromMicaClientCertificateResponse, error)
	// return all from mica certs for now
	SearchFromMicaClientCertificate(context.Context, *SearchFromMicaClientCertificateRequest) (*SearchFromMicaClientCertificateResponse, error)
	// External authentication mechanisms for Mica to call provider endpoints
	GetFromMicaClientSettings(context.Context, *GetFromMicaClientSettingsRequest) (*GetFromMicaClientSettingsResponse, error)
	UpdateFromMicaClientCallbackAddress(context.Context, *UpdateFromMicaClientCallbackAddressRequest) (*UpdateFromMicaClientCallbackAddressResponse, error)
	// creates the token configuration
	CreateApiTokenConfiguration(context.Context, *CreateApiTokenConfigurationRequest) (*CreateApiTokenConfigurationResponse, error)
	// if the authentication type is api token use these methods to properly setup the api token
	// retrieves the api token configuration including the token itself
	GetApiTokenConfiguration(context.Context, *GetApiTokenConfigurationRequest) (*GetApiTokenConfigurationResponse, error)
	// Update the configuration of the token, the set fields will be modified
	UpdateAPITokenAuthenticationConfiguration(context.Context, *UpdateAPITokenAuthenticationConfigurationRequest) (*UpdateAPITokenAuthenticationConfigurationResponse, error)
	// tests the external call to verify proper configuration and connectivity
	PingExternal(context.Context, *PingExternalRequest) (*PingExternalResponse, error)
	mustEmbedUnimplementedDiscountAdministrationServiceServer()
}

// UnimplementedDiscountAdministrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiscountAdministrationServiceServer struct {
}

func (UnimplementedDiscountAdministrationServiceServer) GenerateFromMicaClientCertificate(context.Context, *GenerateFromMicaClientCertificateRequest) (*GenerateFromMicaClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFromMicaClientCertificate not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) UpdateFromMicaClientCertificate(context.Context, *UpdateFromMicaClientCertificateRequest) (*UpdateFromMicaClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFromMicaClientCertificate not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) EnableFromMicaClientCertificate(context.Context, *EnableFromMicaClientCertificateRequest) (*EnableFromMicaClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFromMicaClientCertificate not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) SearchFromMicaClientCertificate(context.Context, *SearchFromMicaClientCertificateRequest) (*SearchFromMicaClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFromMicaClientCertificate not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) GetFromMicaClientSettings(context.Context, *GetFromMicaClientSettingsRequest) (*GetFromMicaClientSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromMicaClientSettings not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) UpdateFromMicaClientCallbackAddress(context.Context, *UpdateFromMicaClientCallbackAddressRequest) (*UpdateFromMicaClientCallbackAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFromMicaClientCallbackAddress not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) CreateApiTokenConfiguration(context.Context, *CreateApiTokenConfigurationRequest) (*CreateApiTokenConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiTokenConfiguration not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) GetApiTokenConfiguration(context.Context, *GetApiTokenConfigurationRequest) (*GetApiTokenConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiTokenConfiguration not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) UpdateAPITokenAuthenticationConfiguration(context.Context, *UpdateAPITokenAuthenticationConfigurationRequest) (*UpdateAPITokenAuthenticationConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPITokenAuthenticationConfiguration not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) PingExternal(context.Context, *PingExternalRequest) (*PingExternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingExternal not implemented")
}
func (UnimplementedDiscountAdministrationServiceServer) mustEmbedUnimplementedDiscountAdministrationServiceServer() {
}

// UnsafeDiscountAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscountAdministrationServiceServer will
// result in compilation errors.
type UnsafeDiscountAdministrationServiceServer interface {
	mustEmbedUnimplementedDiscountAdministrationServiceServer()
}

func RegisterDiscountAdministrationServiceServer(s grpc.ServiceRegistrar, srv DiscountAdministrationServiceServer) {
	s.RegisterService(&DiscountAdministrationService_ServiceDesc, srv)
}

func _DiscountAdministrationService_GenerateFromMicaClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFromMicaClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).GenerateFromMicaClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_GenerateFromMicaClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).GenerateFromMicaClientCertificate(ctx, req.(*GenerateFromMicaClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_UpdateFromMicaClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFromMicaClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).UpdateFromMicaClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_UpdateFromMicaClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).UpdateFromMicaClientCertificate(ctx, req.(*UpdateFromMicaClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_EnableFromMicaClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFromMicaClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).EnableFromMicaClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_EnableFromMicaClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).EnableFromMicaClientCertificate(ctx, req.(*EnableFromMicaClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_SearchFromMicaClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFromMicaClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).SearchFromMicaClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_SearchFromMicaClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).SearchFromMicaClientCertificate(ctx, req.(*SearchFromMicaClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_GetFromMicaClientSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFromMicaClientSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).GetFromMicaClientSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_GetFromMicaClientSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).GetFromMicaClientSettings(ctx, req.(*GetFromMicaClientSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_UpdateFromMicaClientCallbackAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFromMicaClientCallbackAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).UpdateFromMicaClientCallbackAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_UpdateFromMicaClientCallbackAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).UpdateFromMicaClientCallbackAddress(ctx, req.(*UpdateFromMicaClientCallbackAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_CreateApiTokenConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiTokenConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).CreateApiTokenConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_CreateApiTokenConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).CreateApiTokenConfiguration(ctx, req.(*CreateApiTokenConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_GetApiTokenConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiTokenConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).GetApiTokenConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_GetApiTokenConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).GetApiTokenConfiguration(ctx, req.(*GetApiTokenConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_UpdateAPITokenAuthenticationConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPITokenAuthenticationConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).UpdateAPITokenAuthenticationConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_UpdateAPITokenAuthenticationConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).UpdateAPITokenAuthenticationConfiguration(ctx, req.(*UpdateAPITokenAuthenticationConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountAdministrationService_PingExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingExternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountAdministrationServiceServer).PingExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountAdministrationService_PingExternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountAdministrationServiceServer).PingExternal(ctx, req.(*PingExternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscountAdministrationService_ServiceDesc is the grpc.ServiceDesc for DiscountAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscountAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.discount.administration.v1.DiscountAdministrationService",
	HandlerType: (*DiscountAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateFromMicaClientCertificate",
			Handler:    _DiscountAdministrationService_GenerateFromMicaClientCertificate_Handler,
		},
		{
			MethodName: "UpdateFromMicaClientCertificate",
			Handler:    _DiscountAdministrationService_UpdateFromMicaClientCertificate_Handler,
		},
		{
			MethodName: "EnableFromMicaClientCertificate",
			Handler:    _DiscountAdministrationService_EnableFromMicaClientCertificate_Handler,
		},
		{
			MethodName: "SearchFromMicaClientCertificate",
			Handler:    _DiscountAdministrationService_SearchFromMicaClientCertificate_Handler,
		},
		{
			MethodName: "GetFromMicaClientSettings",
			Handler:    _DiscountAdministrationService_GetFromMicaClientSettings_Handler,
		},
		{
			MethodName: "UpdateFromMicaClientCallbackAddress",
			Handler:    _DiscountAdministrationService_UpdateFromMicaClientCallbackAddress_Handler,
		},
		{
			MethodName: "CreateApiTokenConfiguration",
			Handler:    _DiscountAdministrationService_CreateApiTokenConfiguration_Handler,
		},
		{
			MethodName: "GetApiTokenConfiguration",
			Handler:    _DiscountAdministrationService_GetApiTokenConfiguration_Handler,
		},
		{
			MethodName: "UpdateAPITokenAuthenticationConfiguration",
			Handler:    _DiscountAdministrationService_UpdateAPITokenAuthenticationConfiguration_Handler,
		},
		{
			MethodName: "PingExternal",
			Handler:    _DiscountAdministrationService_PingExternal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/fullsdk/proto/mica/discount/administration/v1/admin_service.proto",
}
