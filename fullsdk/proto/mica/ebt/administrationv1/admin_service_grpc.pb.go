// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: mica/ebt/administration/v1/admin_service.proto

package administrationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "github.com/1080network/golang/fullsdk/proto/micashared/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EBTAdministrationService_GenerateToMicaCertificate_FullMethodName = "/mica.ebt.administration.v1.EBTAdministrationService/GenerateToMicaCertificate"
	EBTAdministrationService_EnableToMicaCertificate_FullMethodName   = "/mica.ebt.administration.v1.EBTAdministrationService/EnableToMicaCertificate"
	EBTAdministrationService_DisableToMicaCertificate_FullMethodName  = "/mica.ebt.administration.v1.EBTAdministrationService/DisableToMicaCertificate"
	EBTAdministrationService_SearchToMicaCertificate_FullMethodName   = "/mica.ebt.administration.v1.EBTAdministrationService/SearchToMicaCertificate"
	EBTAdministrationService_GetToMicaCertificate_FullMethodName      = "/mica.ebt.administration.v1.EBTAdministrationService/GetToMicaCertificate"
)

// EBTAdministrationServiceClient is the client API for EBTAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EBTAdministrationServiceClient interface {
	// Generate a new mTLS certificate. SignToMicaClientCSR GenerateToMicaCertificate
	GenerateToMicaCertificate(ctx context.Context, in *v1.GenerateToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.GenerateToMicaCertificateResponse, error)
	// Update the certificate with a given serial number, only supports enable/disable for now
	EnableToMicaCertificate(ctx context.Context, in *v1.EnableToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.EnableToMicaCertificateResponse, error)
	// do we need a separate Disable call?
	DisableToMicaCertificate(ctx context.Context, in *v1.DisableToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.DisableToMicaCertificateResponse, error)
	// Search for certificates and return the ones that match the criteria provided
	SearchToMicaCertificate(ctx context.Context, in *v1.SearchToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.SearchToMicaCertificateResponse, error)
	// return a single certificate
	GetToMicaCertificate(ctx context.Context, in *v1.GetToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.GetToMicaCertificateResponse, error)
}

type eBTAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEBTAdministrationServiceClient(cc grpc.ClientConnInterface) EBTAdministrationServiceClient {
	return &eBTAdministrationServiceClient{cc}
}

func (c *eBTAdministrationServiceClient) GenerateToMicaCertificate(ctx context.Context, in *v1.GenerateToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.GenerateToMicaCertificateResponse, error) {
	out := new(v1.GenerateToMicaCertificateResponse)
	err := c.cc.Invoke(ctx, EBTAdministrationService_GenerateToMicaCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTAdministrationServiceClient) EnableToMicaCertificate(ctx context.Context, in *v1.EnableToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.EnableToMicaCertificateResponse, error) {
	out := new(v1.EnableToMicaCertificateResponse)
	err := c.cc.Invoke(ctx, EBTAdministrationService_EnableToMicaCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTAdministrationServiceClient) DisableToMicaCertificate(ctx context.Context, in *v1.DisableToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.DisableToMicaCertificateResponse, error) {
	out := new(v1.DisableToMicaCertificateResponse)
	err := c.cc.Invoke(ctx, EBTAdministrationService_DisableToMicaCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTAdministrationServiceClient) SearchToMicaCertificate(ctx context.Context, in *v1.SearchToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.SearchToMicaCertificateResponse, error) {
	out := new(v1.SearchToMicaCertificateResponse)
	err := c.cc.Invoke(ctx, EBTAdministrationService_SearchToMicaCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTAdministrationServiceClient) GetToMicaCertificate(ctx context.Context, in *v1.GetToMicaCertificateRequest, opts ...grpc.CallOption) (*v1.GetToMicaCertificateResponse, error) {
	out := new(v1.GetToMicaCertificateResponse)
	err := c.cc.Invoke(ctx, EBTAdministrationService_GetToMicaCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EBTAdministrationServiceServer is the server API for EBTAdministrationService service.
// All implementations must embed UnimplementedEBTAdministrationServiceServer
// for forward compatibility
type EBTAdministrationServiceServer interface {
	// Generate a new mTLS certificate. SignToMicaClientCSR GenerateToMicaCertificate
	GenerateToMicaCertificate(context.Context, *v1.GenerateToMicaCertificateRequest) (*v1.GenerateToMicaCertificateResponse, error)
	// Update the certificate with a given serial number, only supports enable/disable for now
	EnableToMicaCertificate(context.Context, *v1.EnableToMicaCertificateRequest) (*v1.EnableToMicaCertificateResponse, error)
	// do we need a separate Disable call?
	DisableToMicaCertificate(context.Context, *v1.DisableToMicaCertificateRequest) (*v1.DisableToMicaCertificateResponse, error)
	// Search for certificates and return the ones that match the criteria provided
	SearchToMicaCertificate(context.Context, *v1.SearchToMicaCertificateRequest) (*v1.SearchToMicaCertificateResponse, error)
	// return a single certificate
	GetToMicaCertificate(context.Context, *v1.GetToMicaCertificateRequest) (*v1.GetToMicaCertificateResponse, error)
	mustEmbedUnimplementedEBTAdministrationServiceServer()
}

// UnimplementedEBTAdministrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEBTAdministrationServiceServer struct {
}

func (UnimplementedEBTAdministrationServiceServer) GenerateToMicaCertificate(context.Context, *v1.GenerateToMicaCertificateRequest) (*v1.GenerateToMicaCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToMicaCertificate not implemented")
}
func (UnimplementedEBTAdministrationServiceServer) EnableToMicaCertificate(context.Context, *v1.EnableToMicaCertificateRequest) (*v1.EnableToMicaCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableToMicaCertificate not implemented")
}
func (UnimplementedEBTAdministrationServiceServer) DisableToMicaCertificate(context.Context, *v1.DisableToMicaCertificateRequest) (*v1.DisableToMicaCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableToMicaCertificate not implemented")
}
func (UnimplementedEBTAdministrationServiceServer) SearchToMicaCertificate(context.Context, *v1.SearchToMicaCertificateRequest) (*v1.SearchToMicaCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchToMicaCertificate not implemented")
}
func (UnimplementedEBTAdministrationServiceServer) GetToMicaCertificate(context.Context, *v1.GetToMicaCertificateRequest) (*v1.GetToMicaCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToMicaCertificate not implemented")
}
func (UnimplementedEBTAdministrationServiceServer) mustEmbedUnimplementedEBTAdministrationServiceServer() {
}

// UnsafeEBTAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EBTAdministrationServiceServer will
// result in compilation errors.
type UnsafeEBTAdministrationServiceServer interface {
	mustEmbedUnimplementedEBTAdministrationServiceServer()
}

func RegisterEBTAdministrationServiceServer(s grpc.ServiceRegistrar, srv EBTAdministrationServiceServer) {
	s.RegisterService(&EBTAdministrationService_ServiceDesc, srv)
}

func _EBTAdministrationService_GenerateToMicaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GenerateToMicaCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTAdministrationServiceServer).GenerateToMicaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTAdministrationService_GenerateToMicaCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTAdministrationServiceServer).GenerateToMicaCertificate(ctx, req.(*v1.GenerateToMicaCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTAdministrationService_EnableToMicaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.EnableToMicaCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTAdministrationServiceServer).EnableToMicaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTAdministrationService_EnableToMicaCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTAdministrationServiceServer).EnableToMicaCertificate(ctx, req.(*v1.EnableToMicaCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTAdministrationService_DisableToMicaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DisableToMicaCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTAdministrationServiceServer).DisableToMicaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTAdministrationService_DisableToMicaCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTAdministrationServiceServer).DisableToMicaCertificate(ctx, req.(*v1.DisableToMicaCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTAdministrationService_SearchToMicaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SearchToMicaCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTAdministrationServiceServer).SearchToMicaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTAdministrationService_SearchToMicaCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTAdministrationServiceServer).SearchToMicaCertificate(ctx, req.(*v1.SearchToMicaCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTAdministrationService_GetToMicaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetToMicaCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTAdministrationServiceServer).GetToMicaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTAdministrationService_GetToMicaCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTAdministrationServiceServer).GetToMicaCertificate(ctx, req.(*v1.GetToMicaCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EBTAdministrationService_ServiceDesc is the grpc.ServiceDesc for EBTAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EBTAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.ebt.administration.v1.EBTAdministrationService",
	HandlerType: (*EBTAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToMicaCertificate",
			Handler:    _EBTAdministrationService_GenerateToMicaCertificate_Handler,
		},
		{
			MethodName: "EnableToMicaCertificate",
			Handler:    _EBTAdministrationService_EnableToMicaCertificate_Handler,
		},
		{
			MethodName: "DisableToMicaCertificate",
			Handler:    _EBTAdministrationService_DisableToMicaCertificate_Handler,
		},
		{
			MethodName: "SearchToMicaCertificate",
			Handler:    _EBTAdministrationService_SearchToMicaCertificate_Handler,
		},
		{
			MethodName: "GetToMicaCertificate",
			Handler:    _EBTAdministrationService_GetToMicaCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/fullsdk/proto/mica/ebt/administration/v1/admin_service.proto",
}
