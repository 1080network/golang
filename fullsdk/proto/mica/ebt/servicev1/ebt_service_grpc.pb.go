// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: mica/ebt/service/v1/ebt_service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	listitemv1 "github.com/1080network/golang/fullsdk/proto/mica/ebt/listitemv1"
	programv1 "github.com/1080network/golang/fullsdk/proto/mica/ebt/programv1"
	pingv1 "github.com/1080network/golang/fullsdk/proto/micashared/common/pingv1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EBTService_GetEBTProgram_FullMethodName    = "/mica.ebt.service.v1.EBTService/GetEBTProgram"
	EBTService_UpdateEBTProgram_FullMethodName = "/mica.ebt.service.v1.EBTService/UpdateEBTProgram"
	EBTService_CreateListItem_FullMethodName   = "/mica.ebt.service.v1.EBTService/CreateListItem"
	EBTService_GetListItem_FullMethodName      = "/mica.ebt.service.v1.EBTService/GetListItem"
	EBTService_RemoveListItem_FullMethodName   = "/mica.ebt.service.v1.EBTService/RemoveListItem"
	EBTService_UpdateListItem_FullMethodName   = "/mica.ebt.service.v1.EBTService/UpdateListItem"
	EBTService_SearchListItem_FullMethodName   = "/mica.ebt.service.v1.EBTService/SearchListItem"
	EBTService_Ping_FullMethodName             = "/mica.ebt.service.v1.EBTService/Ping"
)

// EBTServiceClient is the client API for EBTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EBTServiceClient interface {
	// Retrieve an EBT Program based on it's key.
	GetEBTProgram(ctx context.Context, in *programv1.GetEBTProgramRequest, opts ...grpc.CallOption) (*programv1.GetEBTProgramResponse, error)
	// Update an EBT program's rules.
	UpdateEBTProgram(ctx context.Context, in *programv1.UpdateEBTProgramRequest, opts ...grpc.CallOption) (*programv1.UpdateEBTProgramResponse, error)
	// Create a list item (either eligible, ineligible or age restricted) for a given program and product code.
	CreateListItem(ctx context.Context, in *listitemv1.CreateListItemRequest, opts ...grpc.CallOption) (*listitemv1.CreateListItemResponse, error)
	// Retrieve a list item based on it's key.
	GetListItem(ctx context.Context, in *listitemv1.GetListItemRequest, opts ...grpc.CallOption) (*listitemv1.GetListItemResponse, error)
	// Remove a list item that is not longer needed based on it's key.
	RemoveListItem(ctx context.Context, in *listitemv1.RemoveListItemRequest, opts ...grpc.CallOption) (*listitemv1.RemoveListItemResponse, error)
	// Update a list items description or status.
	UpdateListItem(ctx context.Context, in *listitemv1.UpdateListItemRequest, opts ...grpc.CallOption) (*listitemv1.UpdateListItemResponse, error)
	// Like GetListItem, can be used to retrieve List Items based on the criteria in the request.
	SearchListItem(ctx context.Context, in *listitemv1.SearchListItemRequest, opts ...grpc.CallOption) (*listitemv1.SearchListItemResponse, error)
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
}

type eBTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEBTServiceClient(cc grpc.ClientConnInterface) EBTServiceClient {
	return &eBTServiceClient{cc}
}

func (c *eBTServiceClient) GetEBTProgram(ctx context.Context, in *programv1.GetEBTProgramRequest, opts ...grpc.CallOption) (*programv1.GetEBTProgramResponse, error) {
	out := new(programv1.GetEBTProgramResponse)
	err := c.cc.Invoke(ctx, EBTService_GetEBTProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTServiceClient) UpdateEBTProgram(ctx context.Context, in *programv1.UpdateEBTProgramRequest, opts ...grpc.CallOption) (*programv1.UpdateEBTProgramResponse, error) {
	out := new(programv1.UpdateEBTProgramResponse)
	err := c.cc.Invoke(ctx, EBTService_UpdateEBTProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTServiceClient) CreateListItem(ctx context.Context, in *listitemv1.CreateListItemRequest, opts ...grpc.CallOption) (*listitemv1.CreateListItemResponse, error) {
	out := new(listitemv1.CreateListItemResponse)
	err := c.cc.Invoke(ctx, EBTService_CreateListItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTServiceClient) GetListItem(ctx context.Context, in *listitemv1.GetListItemRequest, opts ...grpc.CallOption) (*listitemv1.GetListItemResponse, error) {
	out := new(listitemv1.GetListItemResponse)
	err := c.cc.Invoke(ctx, EBTService_GetListItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTServiceClient) RemoveListItem(ctx context.Context, in *listitemv1.RemoveListItemRequest, opts ...grpc.CallOption) (*listitemv1.RemoveListItemResponse, error) {
	out := new(listitemv1.RemoveListItemResponse)
	err := c.cc.Invoke(ctx, EBTService_RemoveListItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTServiceClient) UpdateListItem(ctx context.Context, in *listitemv1.UpdateListItemRequest, opts ...grpc.CallOption) (*listitemv1.UpdateListItemResponse, error) {
	out := new(listitemv1.UpdateListItemResponse)
	err := c.cc.Invoke(ctx, EBTService_UpdateListItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTServiceClient) SearchListItem(ctx context.Context, in *listitemv1.SearchListItemRequest, opts ...grpc.CallOption) (*listitemv1.SearchListItemResponse, error) {
	out := new(listitemv1.SearchListItemResponse)
	err := c.cc.Invoke(ctx, EBTService_SearchListItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eBTServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, EBTService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EBTServiceServer is the server API for EBTService service.
// All implementations must embed UnimplementedEBTServiceServer
// for forward compatibility
type EBTServiceServer interface {
	// Retrieve an EBT Program based on it's key.
	GetEBTProgram(context.Context, *programv1.GetEBTProgramRequest) (*programv1.GetEBTProgramResponse, error)
	// Update an EBT program's rules.
	UpdateEBTProgram(context.Context, *programv1.UpdateEBTProgramRequest) (*programv1.UpdateEBTProgramResponse, error)
	// Create a list item (either eligible, ineligible or age restricted) for a given program and product code.
	CreateListItem(context.Context, *listitemv1.CreateListItemRequest) (*listitemv1.CreateListItemResponse, error)
	// Retrieve a list item based on it's key.
	GetListItem(context.Context, *listitemv1.GetListItemRequest) (*listitemv1.GetListItemResponse, error)
	// Remove a list item that is not longer needed based on it's key.
	RemoveListItem(context.Context, *listitemv1.RemoveListItemRequest) (*listitemv1.RemoveListItemResponse, error)
	// Update a list items description or status.
	UpdateListItem(context.Context, *listitemv1.UpdateListItemRequest) (*listitemv1.UpdateListItemResponse, error)
	// Like GetListItem, can be used to retrieve List Items based on the criteria in the request.
	SearchListItem(context.Context, *listitemv1.SearchListItemRequest) (*listitemv1.SearchListItemResponse, error)
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
	mustEmbedUnimplementedEBTServiceServer()
}

// UnimplementedEBTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEBTServiceServer struct {
}

func (UnimplementedEBTServiceServer) GetEBTProgram(context.Context, *programv1.GetEBTProgramRequest) (*programv1.GetEBTProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEBTProgram not implemented")
}
func (UnimplementedEBTServiceServer) UpdateEBTProgram(context.Context, *programv1.UpdateEBTProgramRequest) (*programv1.UpdateEBTProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEBTProgram not implemented")
}
func (UnimplementedEBTServiceServer) CreateListItem(context.Context, *listitemv1.CreateListItemRequest) (*listitemv1.CreateListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListItem not implemented")
}
func (UnimplementedEBTServiceServer) GetListItem(context.Context, *listitemv1.GetListItemRequest) (*listitemv1.GetListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListItem not implemented")
}
func (UnimplementedEBTServiceServer) RemoveListItem(context.Context, *listitemv1.RemoveListItemRequest) (*listitemv1.RemoveListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveListItem not implemented")
}
func (UnimplementedEBTServiceServer) UpdateListItem(context.Context, *listitemv1.UpdateListItemRequest) (*listitemv1.UpdateListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListItem not implemented")
}
func (UnimplementedEBTServiceServer) SearchListItem(context.Context, *listitemv1.SearchListItemRequest) (*listitemv1.SearchListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchListItem not implemented")
}
func (UnimplementedEBTServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedEBTServiceServer) mustEmbedUnimplementedEBTServiceServer() {}

// UnsafeEBTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EBTServiceServer will
// result in compilation errors.
type UnsafeEBTServiceServer interface {
	mustEmbedUnimplementedEBTServiceServer()
}

func RegisterEBTServiceServer(s grpc.ServiceRegistrar, srv EBTServiceServer) {
	s.RegisterService(&EBTService_ServiceDesc, srv)
}

func _EBTService_GetEBTProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(programv1.GetEBTProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTServiceServer).GetEBTProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTService_GetEBTProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTServiceServer).GetEBTProgram(ctx, req.(*programv1.GetEBTProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTService_UpdateEBTProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(programv1.UpdateEBTProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTServiceServer).UpdateEBTProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTService_UpdateEBTProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTServiceServer).UpdateEBTProgram(ctx, req.(*programv1.UpdateEBTProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTService_CreateListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(listitemv1.CreateListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTServiceServer).CreateListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTService_CreateListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTServiceServer).CreateListItem(ctx, req.(*listitemv1.CreateListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTService_GetListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(listitemv1.GetListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTServiceServer).GetListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTService_GetListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTServiceServer).GetListItem(ctx, req.(*listitemv1.GetListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTService_RemoveListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(listitemv1.RemoveListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTServiceServer).RemoveListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTService_RemoveListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTServiceServer).RemoveListItem(ctx, req.(*listitemv1.RemoveListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTService_UpdateListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(listitemv1.UpdateListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTServiceServer).UpdateListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTService_UpdateListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTServiceServer).UpdateListItem(ctx, req.(*listitemv1.UpdateListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTService_SearchListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(listitemv1.SearchListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTServiceServer).SearchListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTService_SearchListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTServiceServer).SearchListItem(ctx, req.(*listitemv1.SearchListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EBTService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EBTServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EBTService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EBTServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EBTService_ServiceDesc is the grpc.ServiceDesc for EBTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EBTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.ebt.service.v1.EBTService",
	HandlerType: (*EBTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEBTProgram",
			Handler:    _EBTService_GetEBTProgram_Handler,
		},
		{
			MethodName: "UpdateEBTProgram",
			Handler:    _EBTService_UpdateEBTProgram_Handler,
		},
		{
			MethodName: "CreateListItem",
			Handler:    _EBTService_CreateListItem_Handler,
		},
		{
			MethodName: "GetListItem",
			Handler:    _EBTService_GetListItem_Handler,
		},
		{
			MethodName: "RemoveListItem",
			Handler:    _EBTService_RemoveListItem_Handler,
		},
		{
			MethodName: "UpdateListItem",
			Handler:    _EBTService_UpdateListItem_Handler,
		},
		{
			MethodName: "SearchListItem",
			Handler:    _EBTService_SearchListItem_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _EBTService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/fullsdk/proto/mica/ebt/service/v1/ebt_service.proto",
}
