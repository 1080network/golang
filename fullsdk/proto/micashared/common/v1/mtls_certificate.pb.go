// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.28.3
// source: micashared/common/v1/mtls_certificate.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateFromMicaClientCertificateResponse_Status int32

const (
	GenerateFromMicaClientCertificateResponse_STATUS_UNSPECIFIED GenerateFromMicaClientCertificateResponse_Status = 0
	GenerateFromMicaClientCertificateResponse_STATUS_SUCCESS     GenerateFromMicaClientCertificateResponse_Status = 1
	GenerateFromMicaClientCertificateResponse_STATUS_ERROR       GenerateFromMicaClientCertificateResponse_Status = 2
)

// Enum value maps for GenerateFromMicaClientCertificateResponse_Status.
var (
	GenerateFromMicaClientCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	GenerateFromMicaClientCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x GenerateFromMicaClientCertificateResponse_Status) Enum() *GenerateFromMicaClientCertificateResponse_Status {
	p := new(GenerateFromMicaClientCertificateResponse_Status)
	*p = x
	return p
}

func (x GenerateFromMicaClientCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateFromMicaClientCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[0].Descriptor()
}

func (GenerateFromMicaClientCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[0]
}

func (x GenerateFromMicaClientCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateFromMicaClientCertificateResponse_Status.Descriptor instead.
func (GenerateFromMicaClientCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{2, 0}
}

type UpdateFromMicaClientCertificateResponse_Status int32

const (
	UpdateFromMicaClientCertificateResponse_STATUS_UNSPECIFIED UpdateFromMicaClientCertificateResponse_Status = 0
	UpdateFromMicaClientCertificateResponse_STATUS_SUCCESS     UpdateFromMicaClientCertificateResponse_Status = 1
	UpdateFromMicaClientCertificateResponse_STATUS_ERROR       UpdateFromMicaClientCertificateResponse_Status = 2
)

// Enum value maps for UpdateFromMicaClientCertificateResponse_Status.
var (
	UpdateFromMicaClientCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	UpdateFromMicaClientCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x UpdateFromMicaClientCertificateResponse_Status) Enum() *UpdateFromMicaClientCertificateResponse_Status {
	p := new(UpdateFromMicaClientCertificateResponse_Status)
	*p = x
	return p
}

func (x UpdateFromMicaClientCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateFromMicaClientCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[1].Descriptor()
}

func (UpdateFromMicaClientCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[1]
}

func (x UpdateFromMicaClientCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateFromMicaClientCertificateResponse_Status.Descriptor instead.
func (UpdateFromMicaClientCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{4, 0}
}

type EnableFromMicaClientCertificateResponse_Status int32

const (
	EnableFromMicaClientCertificateResponse_STATUS_UNSPECIFIED EnableFromMicaClientCertificateResponse_Status = 0
	EnableFromMicaClientCertificateResponse_STATUS_SUCCESS     EnableFromMicaClientCertificateResponse_Status = 1
	EnableFromMicaClientCertificateResponse_STATUS_ERROR       EnableFromMicaClientCertificateResponse_Status = 2
)

// Enum value maps for EnableFromMicaClientCertificateResponse_Status.
var (
	EnableFromMicaClientCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	EnableFromMicaClientCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x EnableFromMicaClientCertificateResponse_Status) Enum() *EnableFromMicaClientCertificateResponse_Status {
	p := new(EnableFromMicaClientCertificateResponse_Status)
	*p = x
	return p
}

func (x EnableFromMicaClientCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableFromMicaClientCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[2].Descriptor()
}

func (EnableFromMicaClientCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[2]
}

func (x EnableFromMicaClientCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnableFromMicaClientCertificateResponse_Status.Descriptor instead.
func (EnableFromMicaClientCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{6, 0}
}

type SearchFromMicaClientCertificateResponse_Status int32

const (
	SearchFromMicaClientCertificateResponse_STATUS_UNSPECIFIED SearchFromMicaClientCertificateResponse_Status = 0
	SearchFromMicaClientCertificateResponse_STATUS_SUCCESS     SearchFromMicaClientCertificateResponse_Status = 1
	SearchFromMicaClientCertificateResponse_STATUS_ERROR       SearchFromMicaClientCertificateResponse_Status = 2
)

// Enum value maps for SearchFromMicaClientCertificateResponse_Status.
var (
	SearchFromMicaClientCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchFromMicaClientCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchFromMicaClientCertificateResponse_Status) Enum() *SearchFromMicaClientCertificateResponse_Status {
	p := new(SearchFromMicaClientCertificateResponse_Status)
	*p = x
	return p
}

func (x SearchFromMicaClientCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchFromMicaClientCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[3].Descriptor()
}

func (SearchFromMicaClientCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[3]
}

func (x SearchFromMicaClientCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchFromMicaClientCertificateResponse_Status.Descriptor instead.
func (SearchFromMicaClientCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{8, 0}
}

type FromMicaClientCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"` // Used for lookups NOT the actual private key.
	DisplayName   string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Base64 standard encoded cert PEM string
	Base64CertificatePem string `protobuf:"bytes,7,opt,name=base64_certificate_pem,json=base64CertificatePem,proto3" json:"base64_certificate_pem,omitempty"`
	// Base64 standard encoded CSR PEM string
	Base64CsrPem string `protobuf:"bytes,8,opt,name=base64_csr_pem,json=base64CsrPem,proto3" json:"base64_csr_pem,omitempty"`
	// Base64 standard encoded PEM string
	Base64RootcaPem     string `protobuf:"bytes,9,opt,name=base64_rootca_pem,json=base64RootcaPem,proto3" json:"base64_rootca_pem,omitempty"`
	Enabled             bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	UseHostTrustedCerts bool   `protobuf:"varint,10,opt,name=use_host_trusted_certs,json=useHostTrustedCerts,proto3" json:"use_host_trusted_certs,omitempty"`
}

func (x *FromMicaClientCertificate) Reset() {
	*x = FromMicaClientCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromMicaClientCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromMicaClientCertificate) ProtoMessage() {}

func (x *FromMicaClientCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromMicaClientCertificate.ProtoReflect.Descriptor instead.
func (*FromMicaClientCertificate) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *FromMicaClientCertificate) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *FromMicaClientCertificate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *FromMicaClientCertificate) GetBase64CertificatePem() string {
	if x != nil {
		return x.Base64CertificatePem
	}
	return ""
}

func (x *FromMicaClientCertificate) GetBase64CsrPem() string {
	if x != nil {
		return x.Base64CsrPem
	}
	return ""
}

func (x *FromMicaClientCertificate) GetBase64RootcaPem() string {
	if x != nil {
		return x.Base64RootcaPem
	}
	return ""
}

func (x *FromMicaClientCertificate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FromMicaClientCertificate) GetUseHostTrustedCerts() bool {
	if x != nil {
		return x.UseHostTrustedCerts
	}
	return false
}

// We generate the db entry and return the csr to the user so they can sign it.
type GenerateFromMicaClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *GenerateFromMicaClientCertificateRequest) Reset() {
	*x = GenerateFromMicaClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFromMicaClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFromMicaClientCertificateRequest) ProtoMessage() {}

func (x *GenerateFromMicaClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFromMicaClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*GenerateFromMicaClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateFromMicaClientCertificateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type GenerateFromMicaClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            GenerateFromMicaClientCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.GenerateFromMicaClientCertificateResponse_Status" json:"status,omitempty"`
	Error             *Error                                           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	CertificateToSign *FromMicaClientCertificate                       `protobuf:"bytes,3,opt,name=certificate_to_sign,json=certificateToSign,proto3" json:"certificate_to_sign,omitempty"`
}

func (x *GenerateFromMicaClientCertificateResponse) Reset() {
	*x = GenerateFromMicaClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFromMicaClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFromMicaClientCertificateResponse) ProtoMessage() {}

func (x *GenerateFromMicaClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFromMicaClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*GenerateFromMicaClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{2}
}

func (x *GenerateFromMicaClientCertificateResponse) GetStatus() GenerateFromMicaClientCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return GenerateFromMicaClientCertificateResponse_STATUS_UNSPECIFIED
}

func (x *GenerateFromMicaClientCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GenerateFromMicaClientCertificateResponse) GetCertificateToSign() *FromMicaClientCertificate {
	if x != nil {
		return x.CertificateToSign
	}
	return nil
}

type UpdateFromMicaClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	DisplayName   string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Base64 standard encoded PEM string
	Base64SignedCertPemFromCsr string `protobuf:"bytes,3,opt,name=base64_signed_cert_pem_from_csr,json=base64SignedCertPemFromCsr,proto3" json:"base64_signed_cert_pem_from_csr,omitempty"`
	// Base64 standard encoded PEM string
	Base64RootcaPem string `protobuf:"bytes,4,opt,name=base64_rootca_pem,json=base64RootcaPem,proto3" json:"base64_rootca_pem,omitempty"`
}

func (x *UpdateFromMicaClientCertificateRequest) Reset() {
	*x = UpdateFromMicaClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFromMicaClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromMicaClientCertificateRequest) ProtoMessage() {}

func (x *UpdateFromMicaClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromMicaClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*UpdateFromMicaClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateFromMicaClientCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *UpdateFromMicaClientCertificateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdateFromMicaClientCertificateRequest) GetBase64SignedCertPemFromCsr() string {
	if x != nil {
		return x.Base64SignedCertPemFromCsr
	}
	return ""
}

func (x *UpdateFromMicaClientCertificateRequest) GetBase64RootcaPem() string {
	if x != nil {
		return x.Base64RootcaPem
	}
	return ""
}

type UpdateFromMicaClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      UpdateFromMicaClientCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.UpdateFromMicaClientCertificateResponse_Status" json:"status,omitempty"`
	Error       *Error                                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate *FromMicaClientCertificate                     `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *UpdateFromMicaClientCertificateResponse) Reset() {
	*x = UpdateFromMicaClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFromMicaClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromMicaClientCertificateResponse) ProtoMessage() {}

func (x *UpdateFromMicaClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromMicaClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*UpdateFromMicaClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateFromMicaClientCertificateResponse) GetStatus() UpdateFromMicaClientCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateFromMicaClientCertificateResponse_STATUS_UNSPECIFIED
}

func (x *UpdateFromMicaClientCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateFromMicaClientCertificateResponse) GetCertificate() *FromMicaClientCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type EnableFromMicaClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
}

func (x *EnableFromMicaClientCertificateRequest) Reset() {
	*x = EnableFromMicaClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFromMicaClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFromMicaClientCertificateRequest) ProtoMessage() {}

func (x *EnableFromMicaClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFromMicaClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*EnableFromMicaClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{5}
}

func (x *EnableFromMicaClientCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

type EnableFromMicaClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      EnableFromMicaClientCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.EnableFromMicaClientCertificateResponse_Status" json:"status,omitempty"`
	Error       *Error                                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate *FromMicaClientCertificate                     `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *EnableFromMicaClientCertificateResponse) Reset() {
	*x = EnableFromMicaClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFromMicaClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFromMicaClientCertificateResponse) ProtoMessage() {}

func (x *EnableFromMicaClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFromMicaClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*EnableFromMicaClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{6}
}

func (x *EnableFromMicaClientCertificateResponse) GetStatus() EnableFromMicaClientCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return EnableFromMicaClientCertificateResponse_STATUS_UNSPECIFIED
}

func (x *EnableFromMicaClientCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EnableFromMicaClientCertificateResponse) GetCertificate() *FromMicaClientCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type SearchFromMicaClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchFromMicaClientCertificateRequest) Reset() {
	*x = SearchFromMicaClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFromMicaClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFromMicaClientCertificateRequest) ProtoMessage() {}

func (x *SearchFromMicaClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFromMicaClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*SearchFromMicaClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{7}
}

type SearchFromMicaClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       SearchFromMicaClientCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.SearchFromMicaClientCertificateResponse_Status" json:"status,omitempty"`
	Error        *Error                                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificates []*FromMicaClientCertificate                   `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *SearchFromMicaClientCertificateResponse) Reset() {
	*x = SearchFromMicaClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFromMicaClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFromMicaClientCertificateResponse) ProtoMessage() {}

func (x *SearchFromMicaClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFromMicaClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*SearchFromMicaClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{8}
}

func (x *SearchFromMicaClientCertificateResponse) GetStatus() SearchFromMicaClientCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchFromMicaClientCertificateResponse_STATUS_UNSPECIFIED
}

func (x *SearchFromMicaClientCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchFromMicaClientCertificateResponse) GetCertificates() []*FromMicaClientCertificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

var File_micashared_common_v1_mtls_certificate_proto protoreflect.FileDescriptor

var file_micashared_common_v1_mtls_certificate_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a, 0x19, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69,
	0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x63, 0x73,
	0x72, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x43, 0x73, 0x72, 0x50, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x6f, 0x6f, 0x74,
	0x63, 0x61, 0x50, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x28, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x29, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xe3, 0x01,
	0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x63, 0x73, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x73, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x6f, 0x6f, 0x74, 0x63, 0x61,
	0x50, 0x65, 0x6d, 0x22, 0xd5, 0x02, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x44, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x51, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x4f, 0x0a, 0x26, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a,
	0x27, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd7,
	0x02, 0x0a, 0x27, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x56, 0x0a, 0x17, 0x69, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x42, 0x15, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x1d, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_micashared_common_v1_mtls_certificate_proto_rawDescOnce sync.Once
	file_micashared_common_v1_mtls_certificate_proto_rawDescData = file_micashared_common_v1_mtls_certificate_proto_rawDesc
)

func file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP() []byte {
	file_micashared_common_v1_mtls_certificate_proto_rawDescOnce.Do(func() {
		file_micashared_common_v1_mtls_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(file_micashared_common_v1_mtls_certificate_proto_rawDescData)
	})
	return file_micashared_common_v1_mtls_certificate_proto_rawDescData
}

var file_micashared_common_v1_mtls_certificate_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_micashared_common_v1_mtls_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_micashared_common_v1_mtls_certificate_proto_goTypes = []interface{}{
	(GenerateFromMicaClientCertificateResponse_Status)(0), // 0: micashared.common.v1.GenerateFromMicaClientCertificateResponse.Status
	(UpdateFromMicaClientCertificateResponse_Status)(0),   // 1: micashared.common.v1.UpdateFromMicaClientCertificateResponse.Status
	(EnableFromMicaClientCertificateResponse_Status)(0),   // 2: micashared.common.v1.EnableFromMicaClientCertificateResponse.Status
	(SearchFromMicaClientCertificateResponse_Status)(0),   // 3: micashared.common.v1.SearchFromMicaClientCertificateResponse.Status
	(*FromMicaClientCertificate)(nil),                     // 4: micashared.common.v1.FromMicaClientCertificate
	(*GenerateFromMicaClientCertificateRequest)(nil),      // 5: micashared.common.v1.GenerateFromMicaClientCertificateRequest
	(*GenerateFromMicaClientCertificateResponse)(nil),     // 6: micashared.common.v1.GenerateFromMicaClientCertificateResponse
	(*UpdateFromMicaClientCertificateRequest)(nil),        // 7: micashared.common.v1.UpdateFromMicaClientCertificateRequest
	(*UpdateFromMicaClientCertificateResponse)(nil),       // 8: micashared.common.v1.UpdateFromMicaClientCertificateResponse
	(*EnableFromMicaClientCertificateRequest)(nil),        // 9: micashared.common.v1.EnableFromMicaClientCertificateRequest
	(*EnableFromMicaClientCertificateResponse)(nil),       // 10: micashared.common.v1.EnableFromMicaClientCertificateResponse
	(*SearchFromMicaClientCertificateRequest)(nil),        // 11: micashared.common.v1.SearchFromMicaClientCertificateRequest
	(*SearchFromMicaClientCertificateResponse)(nil),       // 12: micashared.common.v1.SearchFromMicaClientCertificateResponse
	(*Error)(nil), // 13: micashared.common.v1.Error
}
var file_micashared_common_v1_mtls_certificate_proto_depIdxs = []int32{
	0,  // 0: micashared.common.v1.GenerateFromMicaClientCertificateResponse.status:type_name -> micashared.common.v1.GenerateFromMicaClientCertificateResponse.Status
	13, // 1: micashared.common.v1.GenerateFromMicaClientCertificateResponse.error:type_name -> micashared.common.v1.Error
	4,  // 2: micashared.common.v1.GenerateFromMicaClientCertificateResponse.certificate_to_sign:type_name -> micashared.common.v1.FromMicaClientCertificate
	1,  // 3: micashared.common.v1.UpdateFromMicaClientCertificateResponse.status:type_name -> micashared.common.v1.UpdateFromMicaClientCertificateResponse.Status
	13, // 4: micashared.common.v1.UpdateFromMicaClientCertificateResponse.error:type_name -> micashared.common.v1.Error
	4,  // 5: micashared.common.v1.UpdateFromMicaClientCertificateResponse.certificate:type_name -> micashared.common.v1.FromMicaClientCertificate
	2,  // 6: micashared.common.v1.EnableFromMicaClientCertificateResponse.status:type_name -> micashared.common.v1.EnableFromMicaClientCertificateResponse.Status
	13, // 7: micashared.common.v1.EnableFromMicaClientCertificateResponse.error:type_name -> micashared.common.v1.Error
	4,  // 8: micashared.common.v1.EnableFromMicaClientCertificateResponse.certificate:type_name -> micashared.common.v1.FromMicaClientCertificate
	3,  // 9: micashared.common.v1.SearchFromMicaClientCertificateResponse.status:type_name -> micashared.common.v1.SearchFromMicaClientCertificateResponse.Status
	13, // 10: micashared.common.v1.SearchFromMicaClientCertificateResponse.error:type_name -> micashared.common.v1.Error
	4,  // 11: micashared.common.v1.SearchFromMicaClientCertificateResponse.certificates:type_name -> micashared.common.v1.FromMicaClientCertificate
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_micashared_common_v1_mtls_certificate_proto_init() }
func file_micashared_common_v1_mtls_certificate_proto_init() {
	if File_micashared_common_v1_mtls_certificate_proto != nil {
		return
	}
	file_micashared_common_v1_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromMicaClientCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFromMicaClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFromMicaClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFromMicaClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFromMicaClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFromMicaClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFromMicaClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFromMicaClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFromMicaClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_micashared_common_v1_mtls_certificate_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_micashared_common_v1_mtls_certificate_proto_goTypes,
		DependencyIndexes: file_micashared_common_v1_mtls_certificate_proto_depIdxs,
		EnumInfos:         file_micashared_common_v1_mtls_certificate_proto_enumTypes,
		MessageInfos:      file_micashared_common_v1_mtls_certificate_proto_msgTypes,
	}.Build()
	File_micashared_common_v1_mtls_certificate_proto = out.File
	file_micashared_common_v1_mtls_certificate_proto_rawDesc = nil
	file_micashared_common_v1_mtls_certificate_proto_goTypes = nil
	file_micashared_common_v1_mtls_certificate_proto_depIdxs = nil
}
