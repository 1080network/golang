// Copyright (c) 2022 Mica, Inc. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: sp/funds/v1/funds.proto

package fundsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	approvaltypev1 "mica/proto/common/enums/approvaltypev1"
	channelv1 "mica/proto/common/enums/channelv1"
	currencyv1 "mica/proto/common/enums/currencyv1"
	lineitemstatusv1 "mica/proto/common/enums/lineitemstatusv1"
	organizationcategoryv1 "mica/proto/common/enums/organizationcategoryv1"
	v1 "mica/proto/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PINStatus int32

const (
	PINStatus_PIN_STATUS_UNSPECIFIED PINStatus = 0
	PINStatus_PIN_STATUS_MATCH       PINStatus = 1
)

// Enum value maps for PINStatus.
var (
	PINStatus_name = map[int32]string{
		0: "PIN_STATUS_UNSPECIFIED",
		1: "PIN_STATUS_MATCH",
	}
	PINStatus_value = map[string]int32{
		"PIN_STATUS_UNSPECIFIED": 0,
		"PIN_STATUS_MATCH":       1,
	}
)

func (x PINStatus) Enum() *PINStatus {
	p := new(PINStatus)
	*p = x
	return p
}

func (x PINStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PINStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_funds_v1_funds_proto_enumTypes[0].Descriptor()
}

func (PINStatus) Type() protoreflect.EnumType {
	return &file_sp_funds_v1_funds_proto_enumTypes[0]
}

func (x PINStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PINStatus.Descriptor instead.
func (PINStatus) EnumDescriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{0}
}

// union of ObtainFundsResponse.Status and ReturnFundsResponse.Status
type FundsStatus int32

const (
	FundsStatus_FUNDS_STATUS_UNSPECIFIED FundsStatus = 0
	// An approval for the full amount
	FundsStatus_FUNDS_STATUS_APPROVED FundsStatus = 1
	// An error occurred when processing the request
	FundsStatus_FUNDS_STATUS_ERROR FundsStatus = 2
	// An approval was given for a partial amount
	FundsStatus_FUNDS_STATUS_PARTIAL_APPROVAL FundsStatus = 3
	// User instrument doesn't have sufficient funds to cover the transaction
	FundsStatus_FUNDS_STATUS_INSUFFICIENT_FUNDS FundsStatus = 4
	// When all products are either ineligible or age restricted
	FundsStatus_FUNDS_STATUS_INELIGIBLE_PRODUCTS FundsStatus = 5
	// Instrument/account not found
	FundsStatus_FUNDS_STATUS_NOT_FOUND FundsStatus = 6
	// User instrument is closed
	FundsStatus_FUNDS_STATUS_INSTRUMENT_CLOSED FundsStatus = 7
	// Request triggered a risk or fraud check resulting in a decline
	FundsStatus_FUNDS_STATUS_RISK_FRAUD FundsStatus = 8
	// The user needs to call the SP to resolve an issue
	FundsStatus_FUNDS_STATUS_USER_CALL_SP FundsStatus = 9
	// The operation isn't supported by the SP
	FundsStatus_FUNDS_STATUS_UNSUPPORTED FundsStatus = 10
	// The SP is temporarily unavailable
	FundsStatus_FUNDS_STATUS_SP_UNAVAILABLE FundsStatus = 11
	// The payment token sent is invalid or not found
	FundsStatus_FUNDS_STATUS_INVALID_PAYMENT_TOKEN FundsStatus = 12
	// A valid PIN is required for this transaction
	FundsStatus_FUNDS_STATUS_PIN_REQUIRED FundsStatus = 13
)

// Enum value maps for FundsStatus.
var (
	FundsStatus_name = map[int32]string{
		0:  "FUNDS_STATUS_UNSPECIFIED",
		1:  "FUNDS_STATUS_APPROVED",
		2:  "FUNDS_STATUS_ERROR",
		3:  "FUNDS_STATUS_PARTIAL_APPROVAL",
		4:  "FUNDS_STATUS_INSUFFICIENT_FUNDS",
		5:  "FUNDS_STATUS_INELIGIBLE_PRODUCTS",
		6:  "FUNDS_STATUS_NOT_FOUND",
		7:  "FUNDS_STATUS_INSTRUMENT_CLOSED",
		8:  "FUNDS_STATUS_RISK_FRAUD",
		9:  "FUNDS_STATUS_USER_CALL_SP",
		10: "FUNDS_STATUS_UNSUPPORTED",
		11: "FUNDS_STATUS_SP_UNAVAILABLE",
		12: "FUNDS_STATUS_INVALID_PAYMENT_TOKEN",
		13: "FUNDS_STATUS_PIN_REQUIRED",
	}
	FundsStatus_value = map[string]int32{
		"FUNDS_STATUS_UNSPECIFIED":           0,
		"FUNDS_STATUS_APPROVED":              1,
		"FUNDS_STATUS_ERROR":                 2,
		"FUNDS_STATUS_PARTIAL_APPROVAL":      3,
		"FUNDS_STATUS_INSUFFICIENT_FUNDS":    4,
		"FUNDS_STATUS_INELIGIBLE_PRODUCTS":   5,
		"FUNDS_STATUS_NOT_FOUND":             6,
		"FUNDS_STATUS_INSTRUMENT_CLOSED":     7,
		"FUNDS_STATUS_RISK_FRAUD":            8,
		"FUNDS_STATUS_USER_CALL_SP":          9,
		"FUNDS_STATUS_UNSUPPORTED":           10,
		"FUNDS_STATUS_SP_UNAVAILABLE":        11,
		"FUNDS_STATUS_INVALID_PAYMENT_TOKEN": 12,
		"FUNDS_STATUS_PIN_REQUIRED":          13,
	}
)

func (x FundsStatus) Enum() *FundsStatus {
	p := new(FundsStatus)
	*p = x
	return p
}

func (x FundsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FundsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_funds_v1_funds_proto_enumTypes[1].Descriptor()
}

func (FundsStatus) Type() protoreflect.EnumType {
	return &file_sp_funds_v1_funds_proto_enumTypes[1]
}

func (x FundsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FundsStatus.Descriptor instead.
func (FundsStatus) EnumDescriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{1}
}

type ObtainFundsResponse_Status int32

const (
	ObtainFundsResponse_STATUS_UNSPECIFIED ObtainFundsResponse_Status = 0
	// An approval for the full amount
	ObtainFundsResponse_STATUS_APPROVED ObtainFundsResponse_Status = 1
	// An error occurred when processing the request
	ObtainFundsResponse_STATUS_ERROR ObtainFundsResponse_Status = 2
	// An approval was given for a partial amount
	ObtainFundsResponse_STATUS_PARTIAL_APPROVAL ObtainFundsResponse_Status = 3
	// User instrument doesn't have sufficient funds to cover the transaction
	ObtainFundsResponse_STATUS_INSUFFICIENT_FUNDS ObtainFundsResponse_Status = 4
	// When all products are either ineligible or age restricted
	ObtainFundsResponse_STATUS_INELIGIBLE_PRODUCTS ObtainFundsResponse_Status = 5
	// Instrument/account not found
	ObtainFundsResponse_STATUS_NOT_FOUND ObtainFundsResponse_Status = 6
	// User instrument is closed
	ObtainFundsResponse_STATUS_INSTRUMENT_CLOSED ObtainFundsResponse_Status = 7
	// Request triggered a risk or fraud check resulting in a decline
	ObtainFundsResponse_STATUS_RISK_FRAUD ObtainFundsResponse_Status = 8
	// The user needs to call the SP to resolve an issue
	ObtainFundsResponse_STATUS_USER_CALL_SP ObtainFundsResponse_Status = 9
	// The operation isn't supported by the SP
	ObtainFundsResponse_STATUS_UNSUPPORTED ObtainFundsResponse_Status = 10
	// The SP is temporarily unavailable
	ObtainFundsResponse_STATUS_SP_UNAVAILABLE ObtainFundsResponse_Status = 11
	// The payment token sent is invalid or not found
	ObtainFundsResponse_STATUS_INVALID_PAYMENT_TOKEN ObtainFundsResponse_Status = 12
	// A valid PIN is required for this transaction
	ObtainFundsResponse_STATUS_PIN_REQUIRED ObtainFundsResponse_Status = 13
)

// Enum value maps for ObtainFundsResponse_Status.
var (
	ObtainFundsResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_APPROVED",
		2:  "STATUS_ERROR",
		3:  "STATUS_PARTIAL_APPROVAL",
		4:  "STATUS_INSUFFICIENT_FUNDS",
		5:  "STATUS_INELIGIBLE_PRODUCTS",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SP",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SP_UNAVAILABLE",
		12: "STATUS_INVALID_PAYMENT_TOKEN",
		13: "STATUS_PIN_REQUIRED",
	}
	ObtainFundsResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":           0,
		"STATUS_APPROVED":              1,
		"STATUS_ERROR":                 2,
		"STATUS_PARTIAL_APPROVAL":      3,
		"STATUS_INSUFFICIENT_FUNDS":    4,
		"STATUS_INELIGIBLE_PRODUCTS":   5,
		"STATUS_NOT_FOUND":             6,
		"STATUS_INSTRUMENT_CLOSED":     7,
		"STATUS_RISK_FRAUD":            8,
		"STATUS_USER_CALL_SP":          9,
		"STATUS_UNSUPPORTED":           10,
		"STATUS_SP_UNAVAILABLE":        11,
		"STATUS_INVALID_PAYMENT_TOKEN": 12,
		"STATUS_PIN_REQUIRED":          13,
	}
)

func (x ObtainFundsResponse_Status) Enum() *ObtainFundsResponse_Status {
	p := new(ObtainFundsResponse_Status)
	*p = x
	return p
}

func (x ObtainFundsResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObtainFundsResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_funds_v1_funds_proto_enumTypes[2].Descriptor()
}

func (ObtainFundsResponse_Status) Type() protoreflect.EnumType {
	return &file_sp_funds_v1_funds_proto_enumTypes[2]
}

func (x ObtainFundsResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObtainFundsResponse_Status.Descriptor instead.
func (ObtainFundsResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{3, 0}
}

type ReturnFundsResponse_Status int32

const (
	ReturnFundsResponse_STATUS_UNSPECIFIED ReturnFundsResponse_Status = 0
	// An approval for the full amount
	ReturnFundsResponse_STATUS_APPROVED ReturnFundsResponse_Status = 1
	// An error occurred when processing the request
	ReturnFundsResponse_STATUS_ERROR ReturnFundsResponse_Status = 2
	// Instrument/account not found
	ReturnFundsResponse_STATUS_NOT_FOUND ReturnFundsResponse_Status = 6
	// User instrument is closed
	ReturnFundsResponse_STATUS_INSTRUMENT_CLOSED ReturnFundsResponse_Status = 7
	// Request triggered a risk or fraud check resulting in a decline
	ReturnFundsResponse_STATUS_RISK_FRAUD ReturnFundsResponse_Status = 8
	// The user needs to call the SP to resolve an issue
	ReturnFundsResponse_STATUS_USER_CALL_SP ReturnFundsResponse_Status = 9
	// The operation isn't supported by the SP
	ReturnFundsResponse_STATUS_UNSUPPORTED ReturnFundsResponse_Status = 10
	// The SP is temporarily unavailable
	ReturnFundsResponse_STATUS_SP_UNAVAILABLE ReturnFundsResponse_Status = 11
	// The payment token sent is invalid or not found
	ReturnFundsResponse_STATUS_INVALID_PAYMENT_TOKEN ReturnFundsResponse_Status = 12
	// A valid PIN is required for this transaction
	ReturnFundsResponse_STATUS_PIN_REQUIRED ReturnFundsResponse_Status = 13
)

// Enum value maps for ReturnFundsResponse_Status.
var (
	ReturnFundsResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_APPROVED",
		2:  "STATUS_ERROR",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SP",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SP_UNAVAILABLE",
		12: "STATUS_INVALID_PAYMENT_TOKEN",
		13: "STATUS_PIN_REQUIRED",
	}
	ReturnFundsResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":           0,
		"STATUS_APPROVED":              1,
		"STATUS_ERROR":                 2,
		"STATUS_NOT_FOUND":             6,
		"STATUS_INSTRUMENT_CLOSED":     7,
		"STATUS_RISK_FRAUD":            8,
		"STATUS_USER_CALL_SP":          9,
		"STATUS_UNSUPPORTED":           10,
		"STATUS_SP_UNAVAILABLE":        11,
		"STATUS_INVALID_PAYMENT_TOKEN": 12,
		"STATUS_PIN_REQUIRED":          13,
	}
)

func (x ReturnFundsResponse_Status) Enum() *ReturnFundsResponse_Status {
	p := new(ReturnFundsResponse_Status)
	*p = x
	return p
}

func (x ReturnFundsResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnFundsResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_funds_v1_funds_proto_enumTypes[3].Descriptor()
}

func (ReturnFundsResponse_Status) Type() protoreflect.EnumType {
	return &file_sp_funds_v1_funds_proto_enumTypes[3]
}

func (x ReturnFundsResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnFundsResponse_Status.Descriptor instead.
func (ReturnFundsResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{5, 0}
}

type ReceiveFundsResponse_Status int32

const (
	ReceiveFundsResponse_STATUS_UNSPECIFIED ReceiveFundsResponse_Status = 0
	ReceiveFundsResponse_STATUS_SUCCESS     ReceiveFundsResponse_Status = 1
	ReceiveFundsResponse_STATUS_ERROR       ReceiveFundsResponse_Status = 2
)

// Enum value maps for ReceiveFundsResponse_Status.
var (
	ReceiveFundsResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	ReceiveFundsResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x ReceiveFundsResponse_Status) Enum() *ReceiveFundsResponse_Status {
	p := new(ReceiveFundsResponse_Status)
	*p = x
	return p
}

func (x ReceiveFundsResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiveFundsResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_funds_v1_funds_proto_enumTypes[4].Descriptor()
}

func (ReceiveFundsResponse_Status) Type() protoreflect.EnumType {
	return &file_sp_funds_v1_funds_proto_enumTypes[4]
}

func (x ReceiveFundsResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiveFundsResponse_Status.Descriptor instead.
func (ReceiveFundsResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{8, 0}
}

type SearchFundsResponse_Status int32

const (
	SearchFundsResponse_STATUS_UNSPECIFIED SearchFundsResponse_Status = 0
	SearchFundsResponse_STATUS_SUCCESS     SearchFundsResponse_Status = 1
	SearchFundsResponse_STATUS_ERROR       SearchFundsResponse_Status = 2
)

// Enum value maps for SearchFundsResponse_Status.
var (
	SearchFundsResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchFundsResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchFundsResponse_Status) Enum() *SearchFundsResponse_Status {
	p := new(SearchFundsResponse_Status)
	*p = x
	return p
}

func (x SearchFundsResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchFundsResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_funds_v1_funds_proto_enumTypes[5].Descriptor()
}

func (SearchFundsResponse_Status) Type() protoreflect.EnumType {
	return &file_sp_funds_v1_funds_proto_enumTypes[5]
}

func (x SearchFundsResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchFundsResponse_Status.Descriptor instead.
func (SearchFundsResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{10, 0}
}

type SendFundsResponse_Status int32

const (
	SendFundsResponse_STATUS_UNSPECIFIED SendFundsResponse_Status = 0
	SendFundsResponse_STATUS_SUCCESS     SendFundsResponse_Status = 1
	SendFundsResponse_STATUS_ERROR       SendFundsResponse_Status = 2
)

// Enum value maps for SendFundsResponse_Status.
var (
	SendFundsResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SendFundsResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SendFundsResponse_Status) Enum() *SendFundsResponse_Status {
	p := new(SendFundsResponse_Status)
	*p = x
	return p
}

func (x SendFundsResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendFundsResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_funds_v1_funds_proto_enumTypes[6].Descriptor()
}

func (SendFundsResponse_Status) Type() protoreflect.EnumType {
	return &file_sp_funds_v1_funds_proto_enumTypes[6]
}

func (x SendFundsResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendFundsResponse_Status.Descriptor instead.
func (SendFundsResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{12, 0}
}

// Type that represents the details of the funds request (either to obtain or return).
type Funds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// The Mica generated key for this instrument.
	SpInstrumentKey string `protobuf:"bytes,2,opt,name=sp_instrument_key,json=spInstrumentKey,proto3" json:"sp_instrument_key,omitempty"`
	// Service Provider's primary key for their instrument.
	SpInstrumentRef string `protobuf:"bytes,3,opt,name=sp_instrument_ref,json=spInstrumentRef,proto3" json:"sp_instrument_ref,omitempty"`
	// How this transaction should be processed.
	Channel channelv1.Channel `protobuf:"varint,4,opt,name=channel,proto3,enum=common.enums.channel.v1.Channel" json:"channel,omitempty"`
	// The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
	Currency currencyv1.Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// The organization this operation is being processed for.
	OrganizationKey string `protobuf:"bytes,6,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	// The organization name this operation is being processed for.
	OrganizationName string `protobuf:"bytes,7,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// The organization address this operation is being processed for.
	OrganizationAddress *v1.Address `protobuf:"bytes,8,opt,name=organization_address,json=organizationAddress,proto3" json:"organization_address,omitempty"`
	// The organizations category.
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,9,opt,name=category,proto3,enum=common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
	// The store where this operation occurred.
	StoreKey string `protobuf:"bytes,10,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// The number of this store (an alternative unique value).
	StoreNumber string `protobuf:"bytes,11,opt,name=store_number,json=storeNumber,proto3" json:"store_number,omitempty"`
	// The street address of this store.
	StoreAddress *v1.Address `protobuf:"bytes,12,opt,name=store_address,json=storeAddress,proto3" json:"store_address,omitempty"`
	// The clerk that processed this operation.
	ClerkIdentifier string `protobuf:"bytes,13,opt,name=clerk_identifier,json=clerkIdentifier,proto3" json:"clerk_identifier,omitempty"`
	// Total amount for this transaction.
	//
	// When Items are present then: `total_amount` = sum(`items.amount + items.tax_amount`)
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,14,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The amount requested for this transaction. Note that this will be the same as total_amount if all products are eligible
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	RequestedAmount string `protobuf:"bytes,15,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"`
	OrderNumber     string `protobuf:"bytes,16,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	// List of items bought or returned.
	LineItems []*LineItemRequest `protobuf:"bytes,17,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
}

func (x *Funds) Reset() {
	*x = Funds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Funds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Funds) ProtoMessage() {}

func (x *Funds) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Funds.ProtoReflect.Descriptor instead.
func (*Funds) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{0}
}

func (x *Funds) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *Funds) GetSpInstrumentKey() string {
	if x != nil {
		return x.SpInstrumentKey
	}
	return ""
}

func (x *Funds) GetSpInstrumentRef() string {
	if x != nil {
		return x.SpInstrumentRef
	}
	return ""
}

func (x *Funds) GetChannel() channelv1.Channel {
	if x != nil {
		return x.Channel
	}
	return channelv1.Channel(0)
}

func (x *Funds) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *Funds) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *Funds) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *Funds) GetOrganizationAddress() *v1.Address {
	if x != nil {
		return x.OrganizationAddress
	}
	return nil
}

func (x *Funds) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

func (x *Funds) GetStoreKey() string {
	if x != nil {
		return x.StoreKey
	}
	return ""
}

func (x *Funds) GetStoreNumber() string {
	if x != nil {
		return x.StoreNumber
	}
	return ""
}

func (x *Funds) GetStoreAddress() *v1.Address {
	if x != nil {
		return x.StoreAddress
	}
	return nil
}

func (x *Funds) GetClerkIdentifier() string {
	if x != nil {
		return x.ClerkIdentifier
	}
	return ""
}

func (x *Funds) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *Funds) GetRequestedAmount() string {
	if x != nil {
		return x.RequestedAmount
	}
	return ""
}

func (x *Funds) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *Funds) GetLineItems() []*LineItemRequest {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type LineItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique number in a list of items that can be used to refer to a specific item
	Sequence    int32  `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ProductCode string `protobuf:"bytes,2,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The total amount for this line item excluding tax.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The amount of tax for this line item.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	TaxAmount string                          `protobuf:"bytes,5,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	Status    lineitemstatusv1.LineItemStatus `protobuf:"varint,6,opt,name=status,proto3,enum=common.enums.lineitemstatus.v1.LineItemStatus" json:"status,omitempty"`
}

func (x *LineItemRequest) Reset() {
	*x = LineItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineItemRequest) ProtoMessage() {}

func (x *LineItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineItemRequest.ProtoReflect.Descriptor instead.
func (*LineItemRequest) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{1}
}

func (x *LineItemRequest) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *LineItemRequest) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *LineItemRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LineItemRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *LineItemRequest) GetTaxAmount() string {
	if x != nil {
		return x.TaxAmount
	}
	return ""
}

func (x *LineItemRequest) GetStatus() lineitemstatusv1.LineItemStatus {
	if x != nil {
		return x.Status
	}
	return lineitemstatusv1.LineItemStatus(0)
}

type ObtainFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovalType approvaltypev1.ApprovalType `protobuf:"varint,1,opt,name=approval_type,json=approvalType,proto3,enum=common.enums.approvaltype.v1.ApprovalType" json:"approval_type,omitempty"`
	Funds        *Funds                      `protobuf:"bytes,2,opt,name=funds,proto3" json:"funds,omitempty"`
}

func (x *ObtainFundsRequest) Reset() {
	*x = ObtainFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainFundsRequest) ProtoMessage() {}

func (x *ObtainFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainFundsRequest.ProtoReflect.Descriptor instead.
func (*ObtainFundsRequest) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{2}
}

func (x *ObtainFundsRequest) GetApprovalType() approvaltypev1.ApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return approvaltypev1.ApprovalType(0)
}

func (x *ObtainFundsRequest) GetFunds() *Funds {
	if x != nil {
		return x.Funds
	}
	return nil
}

type ObtainFundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ObtainFundsResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=sp.funds.v1.ObtainFundsResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                     `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,4,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *ObtainFundsResponse) Reset() {
	*x = ObtainFundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainFundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainFundsResponse) ProtoMessage() {}

func (x *ObtainFundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainFundsResponse.ProtoReflect.Descriptor instead.
func (*ObtainFundsResponse) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{3}
}

func (x *ObtainFundsResponse) GetStatus() ObtainFundsResponse_Status {
	if x != nil {
		return x.Status
	}
	return ObtainFundsResponse_STATUS_UNSPECIFIED
}

func (x *ObtainFundsResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ObtainFundsResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ObtainFundsResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type ReturnFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funds *Funds `protobuf:"bytes,1,opt,name=funds,proto3" json:"funds,omitempty"`
}

func (x *ReturnFundsRequest) Reset() {
	*x = ReturnFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnFundsRequest) ProtoMessage() {}

func (x *ReturnFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnFundsRequest.ProtoReflect.Descriptor instead.
func (*ReturnFundsRequest) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{4}
}

func (x *ReturnFundsRequest) GetFunds() *Funds {
	if x != nil {
		return x.Funds
	}
	return nil
}

type ReturnFundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ReturnFundsResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=sp.funds.v1.ReturnFundsResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                     `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,4,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *ReturnFundsResponse) Reset() {
	*x = ReturnFundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnFundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnFundsResponse) ProtoMessage() {}

func (x *ReturnFundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnFundsResponse.ProtoReflect.Descriptor instead.
func (*ReturnFundsResponse) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{5}
}

func (x *ReturnFundsResponse) GetStatus() ReturnFundsResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReturnFundsResponse_STATUS_UNSPECIFIED
}

func (x *ReturnFundsResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReturnFundsResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ReturnFundsResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type From struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the sender payment_token
	PaymentToken string `protobuf:"bytes,4,opt,name=payment_token,json=paymentToken,proto3" json:"payment_token,omitempty"`
	// The first name of the sender.
	FirstName string `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name of the sender.
	LastName string `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The email of the sender.
	Email string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	// name of sending service provider
	SpName string `protobuf:"bytes,8,opt,name=sp_name,json=spName,proto3" json:"sp_name,omitempty"`
}

func (x *From) Reset() {
	*x = From{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *From) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*From) ProtoMessage() {}

func (x *From) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use From.ProtoReflect.Descriptor instead.
func (*From) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{6}
}

func (x *From) GetPaymentToken() string {
	if x != nil {
		return x.PaymentToken
	}
	return ""
}

func (x *From) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *From) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *From) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *From) GetSpName() string {
	if x != nil {
		return x.SpName
	}
	return ""
}

type ReceiveFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Mica generated key for this instrument.
	ToSpInstrumentKey string `protobuf:"bytes,1,opt,name=to_sp_instrument_key,json=toSpInstrumentKey,proto3" json:"to_sp_instrument_key,omitempty"`
	// Service Provider's primary key for their instrument.
	ToSpInstrumentRef string              `protobuf:"bytes,2,opt,name=to_sp_instrument_ref,json=toSpInstrumentRef,proto3" json:"to_sp_instrument_ref,omitempty"`
	Currency          currencyv1.Currency `protobuf:"varint,3,opt,name=currency,proto3,enum=common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// the amount that's being received
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	From   *From  `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *ReceiveFundsRequest) Reset() {
	*x = ReceiveFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveFundsRequest) ProtoMessage() {}

func (x *ReceiveFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveFundsRequest.ProtoReflect.Descriptor instead.
func (*ReceiveFundsRequest) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{7}
}

func (x *ReceiveFundsRequest) GetToSpInstrumentKey() string {
	if x != nil {
		return x.ToSpInstrumentKey
	}
	return ""
}

func (x *ReceiveFundsRequest) GetToSpInstrumentRef() string {
	if x != nil {
		return x.ToSpInstrumentRef
	}
	return ""
}

func (x *ReceiveFundsRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *ReceiveFundsRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ReceiveFundsRequest) GetFrom() *From {
	if x != nil {
		return x.From
	}
	return nil
}

type ReceiveFundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ReceiveFundsResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=sp.funds.v1.ReceiveFundsResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionRef string                      `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
}

func (x *ReceiveFundsResponse) Reset() {
	*x = ReceiveFundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveFundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveFundsResponse) ProtoMessage() {}

func (x *ReceiveFundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveFundsResponse.ProtoReflect.Descriptor instead.
func (*ReceiveFundsResponse) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{8}
}

func (x *ReceiveFundsResponse) GetStatus() ReceiveFundsResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReceiveFundsResponse_STATUS_UNSPECIFIED
}

func (x *ReceiveFundsResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReceiveFundsResponse) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

type SearchFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criteria:
	//	*SearchFundsRequest_TransactionKey
	//	*SearchFundsRequest_SpPaymentToken
	//	*SearchFundsRequest_SpInstrumentRef
	Criteria isSearchFundsRequest_Criteria `protobuf_oneof:"criteria"`
	// Transactions that occurred after this date (inclusive).
	DateFrom *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	// Transactions that occurred before this date (exclusive).
	DateTo *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
}

func (x *SearchFundsRequest) Reset() {
	*x = SearchFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFundsRequest) ProtoMessage() {}

func (x *SearchFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFundsRequest.ProtoReflect.Descriptor instead.
func (*SearchFundsRequest) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{9}
}

func (m *SearchFundsRequest) GetCriteria() isSearchFundsRequest_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *SearchFundsRequest) GetTransactionKey() string {
	if x, ok := x.GetCriteria().(*SearchFundsRequest_TransactionKey); ok {
		return x.TransactionKey
	}
	return ""
}

func (x *SearchFundsRequest) GetSpPaymentToken() string {
	if x, ok := x.GetCriteria().(*SearchFundsRequest_SpPaymentToken); ok {
		return x.SpPaymentToken
	}
	return ""
}

func (x *SearchFundsRequest) GetSpInstrumentRef() string {
	if x, ok := x.GetCriteria().(*SearchFundsRequest_SpInstrumentRef); ok {
		return x.SpInstrumentRef
	}
	return ""
}

func (x *SearchFundsRequest) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *SearchFundsRequest) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

type isSearchFundsRequest_Criteria interface {
	isSearchFundsRequest_Criteria()
}

type SearchFundsRequest_TransactionKey struct {
	// Mica's transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3,oneof"`
}

type SearchFundsRequest_SpPaymentToken struct {
	// The payment token of the user.
	SpPaymentToken string `protobuf:"bytes,2,opt,name=sp_payment_token,json=spPaymentToken,proto3,oneof"`
}

type SearchFundsRequest_SpInstrumentRef struct {
	// Service Provider's primary key for their instrument.
	SpInstrumentRef string `protobuf:"bytes,3,opt,name=sp_instrument_ref,json=spInstrumentRef,proto3,oneof"`
}

func (*SearchFundsRequest_TransactionKey) isSearchFundsRequest_Criteria() {}

func (*SearchFundsRequest_SpPaymentToken) isSearchFundsRequest_Criteria() {}

func (*SearchFundsRequest_SpInstrumentRef) isSearchFundsRequest_Criteria() {}

type SearchFundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SearchFundsResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=sp.funds.v1.SearchFundsResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Funds  []*Funds                   `protobuf:"bytes,3,rep,name=funds,proto3" json:"funds,omitempty"`
}

func (x *SearchFundsResponse) Reset() {
	*x = SearchFundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFundsResponse) ProtoMessage() {}

func (x *SearchFundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFundsResponse.ProtoReflect.Descriptor instead.
func (*SearchFundsResponse) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{10}
}

func (x *SearchFundsResponse) GetStatus() SearchFundsResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchFundsResponse_STATUS_UNSPECIFIED
}

func (x *SearchFundsResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchFundsResponse) GetFunds() []*Funds {
	if x != nil {
		return x.Funds
	}
	return nil
}

type SendFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromSpUserKey       string              `protobuf:"bytes,1,opt,name=from_sp_user_key,json=fromSpUserKey,proto3" json:"from_sp_user_key,omitempty"`
	FromSpInstrumentKey string              `protobuf:"bytes,2,opt,name=from_sp_instrument_key,json=fromSpInstrumentKey,proto3" json:"from_sp_instrument_key,omitempty"`
	ToPaymentToken      string              `protobuf:"bytes,3,opt,name=to_payment_token,json=toPaymentToken,proto3" json:"to_payment_token,omitempty"`
	Currency            currencyv1.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SendFundsRequest) Reset() {
	*x = SendFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFundsRequest) ProtoMessage() {}

func (x *SendFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFundsRequest.ProtoReflect.Descriptor instead.
func (*SendFundsRequest) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{11}
}

func (x *SendFundsRequest) GetFromSpUserKey() string {
	if x != nil {
		return x.FromSpUserKey
	}
	return ""
}

func (x *SendFundsRequest) GetFromSpInstrumentKey() string {
	if x != nil {
		return x.FromSpInstrumentKey
	}
	return ""
}

func (x *SendFundsRequest) GetToPaymentToken() string {
	if x != nil {
		return x.ToPaymentToken
	}
	return ""
}

func (x *SendFundsRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *SendFundsRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type SendFundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         SendFundsResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=sp.funds.v1.SendFundsResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	TransactionKey string                   `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
}

func (x *SendFundsResponse) Reset() {
	*x = SendFundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_funds_v1_funds_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFundsResponse) ProtoMessage() {}

func (x *SendFundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sp_funds_v1_funds_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFundsResponse.ProtoReflect.Descriptor instead.
func (*SendFundsResponse) Descriptor() ([]byte, []int) {
	return file_sp_funds_v1_funds_proto_rawDescGZIP(), []int{12}
}

func (x *SendFundsResponse) GetStatus() SendFundsResponse_Status {
	if x != nil {
		return x.Status
	}
	return SendFundsResponse_STATUS_UNSPECIFIED
}

func (x *SendFundsResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SendFundsResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

var File_sp_funds_v1_funds_proto protoreflect.FileDescriptor

var file_sp_funds_v1_funds_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x70, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x70, 0x2e, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x40, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcd, 0x06, 0x0a, 0x05, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x3a, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x2e, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6c, 0x69,
	0x6e, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x4f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x70, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x22, 0xc8, 0x04, 0x0a, 0x13, 0x4f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x73, 0x70, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53,
	0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x45, 0x4c,
	0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x50, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x50, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x0d, 0x22, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x2e, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x22, 0xf8, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x70,
	0x2e, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x50, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x50, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x0d, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22, 0x96,
	0x01, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x6f, 0x53, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x6f, 0x53, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x2e, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x22, 0xf1, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x70, 0x2e, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x22, 0x46, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x22, 0x93, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x42, 0x0a,
	0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x2e,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xf2, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x72, 0x6f,
	0x6d, 0x53, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x2e, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x2a, 0x3d, 0x0a, 0x09, 0x50, 0x49, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x2a,
	0xce, 0x03, 0x0a, 0x0b, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x4e, 0x44,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x55, 0x4e, 0x44,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x45, 0x4c, 0x49, 0x47, 0x49,
	0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x55,
	0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x50, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x55,
	0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x44,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x50, 0x5f, 0x55, 0x4e, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x55, 0x4e,
	0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d,
	0x42, 0x44, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x73, 0x70, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x15, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x76, 0x31, 0xa2,
	0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sp_funds_v1_funds_proto_rawDescOnce sync.Once
	file_sp_funds_v1_funds_proto_rawDescData = file_sp_funds_v1_funds_proto_rawDesc
)

func file_sp_funds_v1_funds_proto_rawDescGZIP() []byte {
	file_sp_funds_v1_funds_proto_rawDescOnce.Do(func() {
		file_sp_funds_v1_funds_proto_rawDescData = protoimpl.X.CompressGZIP(file_sp_funds_v1_funds_proto_rawDescData)
	})
	return file_sp_funds_v1_funds_proto_rawDescData
}

var file_sp_funds_v1_funds_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_sp_funds_v1_funds_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sp_funds_v1_funds_proto_goTypes = []interface{}{
	(PINStatus)(0),                                   // 0: sp.funds.v1.PINStatus
	(FundsStatus)(0),                                 // 1: sp.funds.v1.FundsStatus
	(ObtainFundsResponse_Status)(0),                  // 2: sp.funds.v1.ObtainFundsResponse.Status
	(ReturnFundsResponse_Status)(0),                  // 3: sp.funds.v1.ReturnFundsResponse.Status
	(ReceiveFundsResponse_Status)(0),                 // 4: sp.funds.v1.ReceiveFundsResponse.Status
	(SearchFundsResponse_Status)(0),                  // 5: sp.funds.v1.SearchFundsResponse.Status
	(SendFundsResponse_Status)(0),                    // 6: sp.funds.v1.SendFundsResponse.Status
	(*Funds)(nil),                                    // 7: sp.funds.v1.Funds
	(*LineItemRequest)(nil),                          // 8: sp.funds.v1.LineItemRequest
	(*ObtainFundsRequest)(nil),                       // 9: sp.funds.v1.ObtainFundsRequest
	(*ObtainFundsResponse)(nil),                      // 10: sp.funds.v1.ObtainFundsResponse
	(*ReturnFundsRequest)(nil),                       // 11: sp.funds.v1.ReturnFundsRequest
	(*ReturnFundsResponse)(nil),                      // 12: sp.funds.v1.ReturnFundsResponse
	(*From)(nil),                                     // 13: sp.funds.v1.From
	(*ReceiveFundsRequest)(nil),                      // 14: sp.funds.v1.ReceiveFundsRequest
	(*ReceiveFundsResponse)(nil),                     // 15: sp.funds.v1.ReceiveFundsResponse
	(*SearchFundsRequest)(nil),                       // 16: sp.funds.v1.SearchFundsRequest
	(*SearchFundsResponse)(nil),                      // 17: sp.funds.v1.SearchFundsResponse
	(*SendFundsRequest)(nil),                         // 18: sp.funds.v1.SendFundsRequest
	(*SendFundsResponse)(nil),                        // 19: sp.funds.v1.SendFundsResponse
	(channelv1.Channel)(0),                           // 20: common.enums.channel.v1.Channel
	(currencyv1.Currency)(0),                         // 21: common.enums.currency.v1.Currency
	(*v1.Address)(nil),                               // 22: common.v1.Address
	(organizationcategoryv1.OrganizationCategory)(0), // 23: common.enums.organizationcategory.v1.OrganizationCategory
	(lineitemstatusv1.LineItemStatus)(0),             // 24: common.enums.lineitemstatus.v1.LineItemStatus
	(approvaltypev1.ApprovalType)(0),                 // 25: common.enums.approvaltype.v1.ApprovalType
	(*v1.Error)(nil),                                 // 26: common.v1.Error
	(*timestamppb.Timestamp)(nil),                    // 27: google.protobuf.Timestamp
}
var file_sp_funds_v1_funds_proto_depIdxs = []int32{
	20, // 0: sp.funds.v1.Funds.channel:type_name -> common.enums.channel.v1.Channel
	21, // 1: sp.funds.v1.Funds.currency:type_name -> common.enums.currency.v1.Currency
	22, // 2: sp.funds.v1.Funds.organization_address:type_name -> common.v1.Address
	23, // 3: sp.funds.v1.Funds.category:type_name -> common.enums.organizationcategory.v1.OrganizationCategory
	22, // 4: sp.funds.v1.Funds.store_address:type_name -> common.v1.Address
	8,  // 5: sp.funds.v1.Funds.line_items:type_name -> sp.funds.v1.LineItemRequest
	24, // 6: sp.funds.v1.LineItemRequest.status:type_name -> common.enums.lineitemstatus.v1.LineItemStatus
	25, // 7: sp.funds.v1.ObtainFundsRequest.approval_type:type_name -> common.enums.approvaltype.v1.ApprovalType
	7,  // 8: sp.funds.v1.ObtainFundsRequest.funds:type_name -> sp.funds.v1.Funds
	2,  // 9: sp.funds.v1.ObtainFundsResponse.status:type_name -> sp.funds.v1.ObtainFundsResponse.Status
	26, // 10: sp.funds.v1.ObtainFundsResponse.error:type_name -> common.v1.Error
	7,  // 11: sp.funds.v1.ReturnFundsRequest.funds:type_name -> sp.funds.v1.Funds
	3,  // 12: sp.funds.v1.ReturnFundsResponse.status:type_name -> sp.funds.v1.ReturnFundsResponse.Status
	26, // 13: sp.funds.v1.ReturnFundsResponse.error:type_name -> common.v1.Error
	21, // 14: sp.funds.v1.ReceiveFundsRequest.currency:type_name -> common.enums.currency.v1.Currency
	13, // 15: sp.funds.v1.ReceiveFundsRequest.from:type_name -> sp.funds.v1.From
	4,  // 16: sp.funds.v1.ReceiveFundsResponse.status:type_name -> sp.funds.v1.ReceiveFundsResponse.Status
	26, // 17: sp.funds.v1.ReceiveFundsResponse.error:type_name -> common.v1.Error
	27, // 18: sp.funds.v1.SearchFundsRequest.date_from:type_name -> google.protobuf.Timestamp
	27, // 19: sp.funds.v1.SearchFundsRequest.date_to:type_name -> google.protobuf.Timestamp
	5,  // 20: sp.funds.v1.SearchFundsResponse.status:type_name -> sp.funds.v1.SearchFundsResponse.Status
	26, // 21: sp.funds.v1.SearchFundsResponse.error:type_name -> common.v1.Error
	7,  // 22: sp.funds.v1.SearchFundsResponse.funds:type_name -> sp.funds.v1.Funds
	21, // 23: sp.funds.v1.SendFundsRequest.currency:type_name -> common.enums.currency.v1.Currency
	6,  // 24: sp.funds.v1.SendFundsResponse.status:type_name -> sp.funds.v1.SendFundsResponse.Status
	26, // 25: sp.funds.v1.SendFundsResponse.error:type_name -> common.v1.Error
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_sp_funds_v1_funds_proto_init() }
func file_sp_funds_v1_funds_proto_init() {
	if File_sp_funds_v1_funds_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sp_funds_v1_funds_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Funds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainFundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnFundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*From); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveFundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_funds_v1_funds_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sp_funds_v1_funds_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SearchFundsRequest_TransactionKey)(nil),
		(*SearchFundsRequest_SpPaymentToken)(nil),
		(*SearchFundsRequest_SpInstrumentRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sp_funds_v1_funds_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sp_funds_v1_funds_proto_goTypes,
		DependencyIndexes: file_sp_funds_v1_funds_proto_depIdxs,
		EnumInfos:         file_sp_funds_v1_funds_proto_enumTypes,
		MessageInfos:      file_sp_funds_v1_funds_proto_msgTypes,
	}.Build()
	File_sp_funds_v1_funds_proto = out.File
	file_sp_funds_v1_funds_proto_rawDesc = nil
	file_sp_funds_v1_funds_proto_goTypes = nil
	file_sp_funds_v1_funds_proto_depIdxs = nil
}
