// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	authenticatev1 "mica/proto/common/authenticatev1"
	pingv1 "mica/proto/common/pingv1"
	fundsv1 "mica/proto/sp/fundsv1"
	instrumentv1 "mica/proto/sp/instrumentv1"
	paymenttokenv1 "mica/proto/sp/paymenttokenv1"
	serviceaccountv1 "mica/proto/sp/serviceaccountv1"
	spv1 "mica/proto/sp/spv1"
	userv1 "mica/proto/sp/userv1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SPToMicaServiceClient is the client API for SPToMicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SPToMicaServiceClient interface {
	Authenticate(ctx context.Context, in *authenticatev1.AuthenticateRequest, opts ...grpc.CallOption) (*authenticatev1.AuthenticateResponse, error)
	GetSP(ctx context.Context, in *spv1.GetSPRequest, opts ...grpc.CallOption) (*spv1.GetSPResponse, error)
	RegisterUser(ctx context.Context, in *userv1.RegisterUserRequest, opts ...grpc.CallOption) (*userv1.RegisterUserResponse, error)
	GetUser(ctx context.Context, in *userv1.GetUserRequest, opts ...grpc.CallOption) (*userv1.GetUserResponse, error)
	UpdateUser(ctx context.Context, in *userv1.UpdateUserRequest, opts ...grpc.CallOption) (*userv1.UpdateUserResponse, error)
	RemoveUser(ctx context.Context, in *userv1.RemoveUserRequest, opts ...grpc.CallOption) (*userv1.RemoveUserResponse, error)
	SearchUser(ctx context.Context, in *userv1.SearchUserRequest, opts ...grpc.CallOption) (*userv1.SearchUserResponse, error)
	RegisterInstrument(ctx context.Context, in *instrumentv1.RegisterInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RegisterInstrumentResponse, error)
	GetInstrument(ctx context.Context, in *instrumentv1.GetInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentResponse, error)
	RemoveInstrument(ctx context.Context, in *instrumentv1.RemoveInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentResponse, error)
	SearchInstrument(ctx context.Context, in *instrumentv1.SearchInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentResponse, error)
	SetPIN(ctx context.Context, in *instrumentv1.SetPINRequest, opts ...grpc.CallOption) (*instrumentv1.SetPINResponse, error)
	ResetPIN(ctx context.Context, in *instrumentv1.ResetPINRequest, opts ...grpc.CallOption) (*instrumentv1.ResetPINResponse, error)
	RemovePIN(ctx context.Context, in *instrumentv1.RemovePINRequest, opts ...grpc.CallOption) (*instrumentv1.RemovePINResponse, error)
	ProvisionSPPaymentToken(ctx context.Context, in *paymenttokenv1.ProvisionSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ProvisionSPPaymentTokenResponse, error)
	RemoveSPPaymentToken(ctx context.Context, in *paymenttokenv1.RemoveSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemoveSPPaymentTokenResponse, error)
	SearchSPPaymentToken(ctx context.Context, in *paymenttokenv1.SearchSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchSPPaymentTokenResponse, error)
	CreateServiceAccount(ctx context.Context, in *serviceaccountv1.CreateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.CreateServiceAccountResponse, error)
	GetServiceAccount(ctx context.Context, in *serviceaccountv1.GetServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.GetServiceAccountResponse, error)
	UpdateServiceAccount(ctx context.Context, in *serviceaccountv1.UpdateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.UpdateServiceAccountResponse, error)
	SearchServiceAccount(ctx context.Context, in *serviceaccountv1.SearchServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.SearchServiceAccountResponse, error)
	SendFunds(ctx context.Context, in *fundsv1.SendFundsRequest, opts ...grpc.CallOption) (*fundsv1.SendFundsResponse, error)
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
}

type sPToMicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSPToMicaServiceClient(cc grpc.ClientConnInterface) SPToMicaServiceClient {
	return &sPToMicaServiceClient{cc}
}

func (c *sPToMicaServiceClient) Authenticate(ctx context.Context, in *authenticatev1.AuthenticateRequest, opts ...grpc.CallOption) (*authenticatev1.AuthenticateResponse, error) {
	out := new(authenticatev1.AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) GetSP(ctx context.Context, in *spv1.GetSPRequest, opts ...grpc.CallOption) (*spv1.GetSPResponse, error) {
	out := new(spv1.GetSPResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/GetSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) RegisterUser(ctx context.Context, in *userv1.RegisterUserRequest, opts ...grpc.CallOption) (*userv1.RegisterUserResponse, error) {
	out := new(userv1.RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) GetUser(ctx context.Context, in *userv1.GetUserRequest, opts ...grpc.CallOption) (*userv1.GetUserResponse, error) {
	out := new(userv1.GetUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) UpdateUser(ctx context.Context, in *userv1.UpdateUserRequest, opts ...grpc.CallOption) (*userv1.UpdateUserResponse, error) {
	out := new(userv1.UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) RemoveUser(ctx context.Context, in *userv1.RemoveUserRequest, opts ...grpc.CallOption) (*userv1.RemoveUserResponse, error) {
	out := new(userv1.RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) SearchUser(ctx context.Context, in *userv1.SearchUserRequest, opts ...grpc.CallOption) (*userv1.SearchUserResponse, error) {
	out := new(userv1.SearchUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) RegisterInstrument(ctx context.Context, in *instrumentv1.RegisterInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RegisterInstrumentResponse, error) {
	out := new(instrumentv1.RegisterInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/RegisterInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) GetInstrument(ctx context.Context, in *instrumentv1.GetInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentResponse, error) {
	out := new(instrumentv1.GetInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/GetInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) RemoveInstrument(ctx context.Context, in *instrumentv1.RemoveInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentResponse, error) {
	out := new(instrumentv1.RemoveInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/RemoveInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) SearchInstrument(ctx context.Context, in *instrumentv1.SearchInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentResponse, error) {
	out := new(instrumentv1.SearchInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/SearchInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) SetPIN(ctx context.Context, in *instrumentv1.SetPINRequest, opts ...grpc.CallOption) (*instrumentv1.SetPINResponse, error) {
	out := new(instrumentv1.SetPINResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/SetPIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) ResetPIN(ctx context.Context, in *instrumentv1.ResetPINRequest, opts ...grpc.CallOption) (*instrumentv1.ResetPINResponse, error) {
	out := new(instrumentv1.ResetPINResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/ResetPIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) RemovePIN(ctx context.Context, in *instrumentv1.RemovePINRequest, opts ...grpc.CallOption) (*instrumentv1.RemovePINResponse, error) {
	out := new(instrumentv1.RemovePINResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/RemovePIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) ProvisionSPPaymentToken(ctx context.Context, in *paymenttokenv1.ProvisionSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ProvisionSPPaymentTokenResponse, error) {
	out := new(paymenttokenv1.ProvisionSPPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/ProvisionSPPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) RemoveSPPaymentToken(ctx context.Context, in *paymenttokenv1.RemoveSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemoveSPPaymentTokenResponse, error) {
	out := new(paymenttokenv1.RemoveSPPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/RemoveSPPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) SearchSPPaymentToken(ctx context.Context, in *paymenttokenv1.SearchSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchSPPaymentTokenResponse, error) {
	out := new(paymenttokenv1.SearchSPPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/SearchSPPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) CreateServiceAccount(ctx context.Context, in *serviceaccountv1.CreateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.CreateServiceAccountResponse, error) {
	out := new(serviceaccountv1.CreateServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/CreateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) GetServiceAccount(ctx context.Context, in *serviceaccountv1.GetServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.GetServiceAccountResponse, error) {
	out := new(serviceaccountv1.GetServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/GetServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) UpdateServiceAccount(ctx context.Context, in *serviceaccountv1.UpdateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.UpdateServiceAccountResponse, error) {
	out := new(serviceaccountv1.UpdateServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/UpdateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) SearchServiceAccount(ctx context.Context, in *serviceaccountv1.SearchServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.SearchServiceAccountResponse, error) {
	out := new(serviceaccountv1.SearchServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/SearchServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) SendFunds(ctx context.Context, in *fundsv1.SendFundsRequest, opts ...grpc.CallOption) (*fundsv1.SendFundsResponse, error) {
	out := new(fundsv1.SendFundsResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/SendFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPToMicaServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPToMicaService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SPToMicaServiceServer is the server API for SPToMicaService service.
// All implementations must embed UnimplementedSPToMicaServiceServer
// for forward compatibility
type SPToMicaServiceServer interface {
	Authenticate(context.Context, *authenticatev1.AuthenticateRequest) (*authenticatev1.AuthenticateResponse, error)
	GetSP(context.Context, *spv1.GetSPRequest) (*spv1.GetSPResponse, error)
	RegisterUser(context.Context, *userv1.RegisterUserRequest) (*userv1.RegisterUserResponse, error)
	GetUser(context.Context, *userv1.GetUserRequest) (*userv1.GetUserResponse, error)
	UpdateUser(context.Context, *userv1.UpdateUserRequest) (*userv1.UpdateUserResponse, error)
	RemoveUser(context.Context, *userv1.RemoveUserRequest) (*userv1.RemoveUserResponse, error)
	SearchUser(context.Context, *userv1.SearchUserRequest) (*userv1.SearchUserResponse, error)
	RegisterInstrument(context.Context, *instrumentv1.RegisterInstrumentRequest) (*instrumentv1.RegisterInstrumentResponse, error)
	GetInstrument(context.Context, *instrumentv1.GetInstrumentRequest) (*instrumentv1.GetInstrumentResponse, error)
	RemoveInstrument(context.Context, *instrumentv1.RemoveInstrumentRequest) (*instrumentv1.RemoveInstrumentResponse, error)
	SearchInstrument(context.Context, *instrumentv1.SearchInstrumentRequest) (*instrumentv1.SearchInstrumentResponse, error)
	SetPIN(context.Context, *instrumentv1.SetPINRequest) (*instrumentv1.SetPINResponse, error)
	ResetPIN(context.Context, *instrumentv1.ResetPINRequest) (*instrumentv1.ResetPINResponse, error)
	RemovePIN(context.Context, *instrumentv1.RemovePINRequest) (*instrumentv1.RemovePINResponse, error)
	ProvisionSPPaymentToken(context.Context, *paymenttokenv1.ProvisionSPPaymentTokenRequest) (*paymenttokenv1.ProvisionSPPaymentTokenResponse, error)
	RemoveSPPaymentToken(context.Context, *paymenttokenv1.RemoveSPPaymentTokenRequest) (*paymenttokenv1.RemoveSPPaymentTokenResponse, error)
	SearchSPPaymentToken(context.Context, *paymenttokenv1.SearchSPPaymentTokenRequest) (*paymenttokenv1.SearchSPPaymentTokenResponse, error)
	CreateServiceAccount(context.Context, *serviceaccountv1.CreateServiceAccountRequest) (*serviceaccountv1.CreateServiceAccountResponse, error)
	GetServiceAccount(context.Context, *serviceaccountv1.GetServiceAccountRequest) (*serviceaccountv1.GetServiceAccountResponse, error)
	UpdateServiceAccount(context.Context, *serviceaccountv1.UpdateServiceAccountRequest) (*serviceaccountv1.UpdateServiceAccountResponse, error)
	SearchServiceAccount(context.Context, *serviceaccountv1.SearchServiceAccountRequest) (*serviceaccountv1.SearchServiceAccountResponse, error)
	SendFunds(context.Context, *fundsv1.SendFundsRequest) (*fundsv1.SendFundsResponse, error)
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
	mustEmbedUnimplementedSPToMicaServiceServer()
}

// UnimplementedSPToMicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSPToMicaServiceServer struct {
}

func (UnimplementedSPToMicaServiceServer) Authenticate(context.Context, *authenticatev1.AuthenticateRequest) (*authenticatev1.AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSPToMicaServiceServer) GetSP(context.Context, *spv1.GetSPRequest) (*spv1.GetSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSP not implemented")
}
func (UnimplementedSPToMicaServiceServer) RegisterUser(context.Context, *userv1.RegisterUserRequest) (*userv1.RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedSPToMicaServiceServer) GetUser(context.Context, *userv1.GetUserRequest) (*userv1.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedSPToMicaServiceServer) UpdateUser(context.Context, *userv1.UpdateUserRequest) (*userv1.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSPToMicaServiceServer) RemoveUser(context.Context, *userv1.RemoveUserRequest) (*userv1.RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedSPToMicaServiceServer) SearchUser(context.Context, *userv1.SearchUserRequest) (*userv1.SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedSPToMicaServiceServer) RegisterInstrument(context.Context, *instrumentv1.RegisterInstrumentRequest) (*instrumentv1.RegisterInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInstrument not implemented")
}
func (UnimplementedSPToMicaServiceServer) GetInstrument(context.Context, *instrumentv1.GetInstrumentRequest) (*instrumentv1.GetInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrument not implemented")
}
func (UnimplementedSPToMicaServiceServer) RemoveInstrument(context.Context, *instrumentv1.RemoveInstrumentRequest) (*instrumentv1.RemoveInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstrument not implemented")
}
func (UnimplementedSPToMicaServiceServer) SearchInstrument(context.Context, *instrumentv1.SearchInstrumentRequest) (*instrumentv1.SearchInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInstrument not implemented")
}
func (UnimplementedSPToMicaServiceServer) SetPIN(context.Context, *instrumentv1.SetPINRequest) (*instrumentv1.SetPINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPIN not implemented")
}
func (UnimplementedSPToMicaServiceServer) ResetPIN(context.Context, *instrumentv1.ResetPINRequest) (*instrumentv1.ResetPINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPIN not implemented")
}
func (UnimplementedSPToMicaServiceServer) RemovePIN(context.Context, *instrumentv1.RemovePINRequest) (*instrumentv1.RemovePINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePIN not implemented")
}
func (UnimplementedSPToMicaServiceServer) ProvisionSPPaymentToken(context.Context, *paymenttokenv1.ProvisionSPPaymentTokenRequest) (*paymenttokenv1.ProvisionSPPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionSPPaymentToken not implemented")
}
func (UnimplementedSPToMicaServiceServer) RemoveSPPaymentToken(context.Context, *paymenttokenv1.RemoveSPPaymentTokenRequest) (*paymenttokenv1.RemoveSPPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSPPaymentToken not implemented")
}
func (UnimplementedSPToMicaServiceServer) SearchSPPaymentToken(context.Context, *paymenttokenv1.SearchSPPaymentTokenRequest) (*paymenttokenv1.SearchSPPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSPPaymentToken not implemented")
}
func (UnimplementedSPToMicaServiceServer) CreateServiceAccount(context.Context, *serviceaccountv1.CreateServiceAccountRequest) (*serviceaccountv1.CreateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccount not implemented")
}
func (UnimplementedSPToMicaServiceServer) GetServiceAccount(context.Context, *serviceaccountv1.GetServiceAccountRequest) (*serviceaccountv1.GetServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccount not implemented")
}
func (UnimplementedSPToMicaServiceServer) UpdateServiceAccount(context.Context, *serviceaccountv1.UpdateServiceAccountRequest) (*serviceaccountv1.UpdateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceAccount not implemented")
}
func (UnimplementedSPToMicaServiceServer) SearchServiceAccount(context.Context, *serviceaccountv1.SearchServiceAccountRequest) (*serviceaccountv1.SearchServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServiceAccount not implemented")
}
func (UnimplementedSPToMicaServiceServer) SendFunds(context.Context, *fundsv1.SendFundsRequest) (*fundsv1.SendFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFunds not implemented")
}
func (UnimplementedSPToMicaServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSPToMicaServiceServer) mustEmbedUnimplementedSPToMicaServiceServer() {}

// UnsafeSPToMicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SPToMicaServiceServer will
// result in compilation errors.
type UnsafeSPToMicaServiceServer interface {
	mustEmbedUnimplementedSPToMicaServiceServer()
}

func RegisterSPToMicaServiceServer(s grpc.ServiceRegistrar, srv SPToMicaServiceServer) {
	s.RegisterService(&SPToMicaService_ServiceDesc, srv)
}

func _SPToMicaService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authenticatev1.AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).Authenticate(ctx, req.(*authenticatev1.AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_GetSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spv1.GetSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).GetSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/GetSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).GetSP(ctx, req.(*spv1.GetSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).RegisterUser(ctx, req.(*userv1.RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).GetUser(ctx, req.(*userv1.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).UpdateUser(ctx, req.(*userv1.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).RemoveUser(ctx, req.(*userv1.RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).SearchUser(ctx, req.(*userv1.SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_RegisterInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RegisterInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).RegisterInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/RegisterInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).RegisterInstrument(ctx, req.(*instrumentv1.RegisterInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_GetInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.GetInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).GetInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/GetInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).GetInstrument(ctx, req.(*instrumentv1.GetInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_RemoveInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RemoveInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).RemoveInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/RemoveInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).RemoveInstrument(ctx, req.(*instrumentv1.RemoveInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_SearchInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.SearchInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).SearchInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/SearchInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).SearchInstrument(ctx, req.(*instrumentv1.SearchInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_SetPIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.SetPINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).SetPIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/SetPIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).SetPIN(ctx, req.(*instrumentv1.SetPINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_ResetPIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.ResetPINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).ResetPIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/ResetPIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).ResetPIN(ctx, req.(*instrumentv1.ResetPINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_RemovePIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RemovePINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).RemovePIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/RemovePIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).RemovePIN(ctx, req.(*instrumentv1.RemovePINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_ProvisionSPPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.ProvisionSPPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).ProvisionSPPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/ProvisionSPPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).ProvisionSPPaymentToken(ctx, req.(*paymenttokenv1.ProvisionSPPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_RemoveSPPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.RemoveSPPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).RemoveSPPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/RemoveSPPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).RemoveSPPaymentToken(ctx, req.(*paymenttokenv1.RemoveSPPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_SearchSPPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.SearchSPPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).SearchSPPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/SearchSPPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).SearchSPPaymentToken(ctx, req.(*paymenttokenv1.SearchSPPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/CreateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).CreateServiceAccount(ctx, req.(*serviceaccountv1.CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_GetServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.GetServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).GetServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/GetServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).GetServiceAccount(ctx, req.(*serviceaccountv1.GetServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_UpdateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.UpdateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).UpdateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/UpdateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).UpdateServiceAccount(ctx, req.(*serviceaccountv1.UpdateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_SearchServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.SearchServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).SearchServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/SearchServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).SearchServiceAccount(ctx, req.(*serviceaccountv1.SearchServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_SendFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fundsv1.SendFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).SendFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/SendFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).SendFunds(ctx, req.(*fundsv1.SendFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPToMicaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPToMicaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPToMicaService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPToMicaServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SPToMicaService_ServiceDesc is the grpc.ServiceDesc for SPToMicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SPToMicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sp.service.v1.SPToMicaService",
	HandlerType: (*SPToMicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _SPToMicaService_Authenticate_Handler,
		},
		{
			MethodName: "GetSP",
			Handler:    _SPToMicaService_GetSP_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _SPToMicaService_RegisterUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _SPToMicaService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SPToMicaService_UpdateUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _SPToMicaService_RemoveUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _SPToMicaService_SearchUser_Handler,
		},
		{
			MethodName: "RegisterInstrument",
			Handler:    _SPToMicaService_RegisterInstrument_Handler,
		},
		{
			MethodName: "GetInstrument",
			Handler:    _SPToMicaService_GetInstrument_Handler,
		},
		{
			MethodName: "RemoveInstrument",
			Handler:    _SPToMicaService_RemoveInstrument_Handler,
		},
		{
			MethodName: "SearchInstrument",
			Handler:    _SPToMicaService_SearchInstrument_Handler,
		},
		{
			MethodName: "SetPIN",
			Handler:    _SPToMicaService_SetPIN_Handler,
		},
		{
			MethodName: "ResetPIN",
			Handler:    _SPToMicaService_ResetPIN_Handler,
		},
		{
			MethodName: "RemovePIN",
			Handler:    _SPToMicaService_RemovePIN_Handler,
		},
		{
			MethodName: "ProvisionSPPaymentToken",
			Handler:    _SPToMicaService_ProvisionSPPaymentToken_Handler,
		},
		{
			MethodName: "RemoveSPPaymentToken",
			Handler:    _SPToMicaService_RemoveSPPaymentToken_Handler,
		},
		{
			MethodName: "SearchSPPaymentToken",
			Handler:    _SPToMicaService_SearchSPPaymentToken_Handler,
		},
		{
			MethodName: "CreateServiceAccount",
			Handler:    _SPToMicaService_CreateServiceAccount_Handler,
		},
		{
			MethodName: "GetServiceAccount",
			Handler:    _SPToMicaService_GetServiceAccount_Handler,
		},
		{
			MethodName: "UpdateServiceAccount",
			Handler:    _SPToMicaService_UpdateServiceAccount_Handler,
		},
		{
			MethodName: "SearchServiceAccount",
			Handler:    _SPToMicaService_SearchServiceAccount_Handler,
		},
		{
			MethodName: "SendFunds",
			Handler:    _SPToMicaService_SendFunds_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SPToMicaService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sp/service/v1/sp_to_mica_service.proto",
}
