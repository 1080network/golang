// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pingv1 "mica/proto/common/pingv1"
	fundsv1 "mica/proto/sp/fundsv1"
	instrumentv1 "mica/proto/sp/instrumentv1"
	userv1 "mica/proto/sp/userv1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SPFromMicaServiceClient is the client API for SPFromMicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SPFromMicaServiceClient interface {
	EnrollUserInstrument(ctx context.Context, in *userv1.EnrollUserInstrumentRequest, opts ...grpc.CallOption) (*userv1.EnrollUserInstrumentResponse, error)
	RetrieveTransaction(ctx context.Context, in *instrumentv1.RetrieveTransactionRequest, opts ...grpc.CallOption) (*instrumentv1.RetrieveTransactionResponse, error)
	ObtainFunds(ctx context.Context, in *fundsv1.ObtainFundsRequest, opts ...grpc.CallOption) (*fundsv1.ObtainFundsResponse, error)
	ReturnFunds(ctx context.Context, in *fundsv1.ReturnFundsRequest, opts ...grpc.CallOption) (*fundsv1.ReturnFundsResponse, error)
	ReceiveFunds(ctx context.Context, in *fundsv1.ReceiveFundsRequest, opts ...grpc.CallOption) (*fundsv1.ReceiveFundsResponse, error)
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
}

type sPFromMicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSPFromMicaServiceClient(cc grpc.ClientConnInterface) SPFromMicaServiceClient {
	return &sPFromMicaServiceClient{cc}
}

func (c *sPFromMicaServiceClient) EnrollUserInstrument(ctx context.Context, in *userv1.EnrollUserInstrumentRequest, opts ...grpc.CallOption) (*userv1.EnrollUserInstrumentResponse, error) {
	out := new(userv1.EnrollUserInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPFromMicaService/EnrollUserInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPFromMicaServiceClient) RetrieveTransaction(ctx context.Context, in *instrumentv1.RetrieveTransactionRequest, opts ...grpc.CallOption) (*instrumentv1.RetrieveTransactionResponse, error) {
	out := new(instrumentv1.RetrieveTransactionResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPFromMicaService/RetrieveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPFromMicaServiceClient) ObtainFunds(ctx context.Context, in *fundsv1.ObtainFundsRequest, opts ...grpc.CallOption) (*fundsv1.ObtainFundsResponse, error) {
	out := new(fundsv1.ObtainFundsResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPFromMicaService/ObtainFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPFromMicaServiceClient) ReturnFunds(ctx context.Context, in *fundsv1.ReturnFundsRequest, opts ...grpc.CallOption) (*fundsv1.ReturnFundsResponse, error) {
	out := new(fundsv1.ReturnFundsResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPFromMicaService/ReturnFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPFromMicaServiceClient) ReceiveFunds(ctx context.Context, in *fundsv1.ReceiveFundsRequest, opts ...grpc.CallOption) (*fundsv1.ReceiveFundsResponse, error) {
	out := new(fundsv1.ReceiveFundsResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPFromMicaService/ReceiveFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPFromMicaServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPFromMicaService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SPFromMicaServiceServer is the server API for SPFromMicaService service.
// All implementations must embed UnimplementedSPFromMicaServiceServer
// for forward compatibility
type SPFromMicaServiceServer interface {
	EnrollUserInstrument(context.Context, *userv1.EnrollUserInstrumentRequest) (*userv1.EnrollUserInstrumentResponse, error)
	RetrieveTransaction(context.Context, *instrumentv1.RetrieveTransactionRequest) (*instrumentv1.RetrieveTransactionResponse, error)
	ObtainFunds(context.Context, *fundsv1.ObtainFundsRequest) (*fundsv1.ObtainFundsResponse, error)
	ReturnFunds(context.Context, *fundsv1.ReturnFundsRequest) (*fundsv1.ReturnFundsResponse, error)
	ReceiveFunds(context.Context, *fundsv1.ReceiveFundsRequest) (*fundsv1.ReceiveFundsResponse, error)
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
	mustEmbedUnimplementedSPFromMicaServiceServer()
}

// UnimplementedSPFromMicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSPFromMicaServiceServer struct {
}

func (UnimplementedSPFromMicaServiceServer) EnrollUserInstrument(context.Context, *userv1.EnrollUserInstrumentRequest) (*userv1.EnrollUserInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUserInstrument not implemented")
}
func (UnimplementedSPFromMicaServiceServer) RetrieveTransaction(context.Context, *instrumentv1.RetrieveTransactionRequest) (*instrumentv1.RetrieveTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTransaction not implemented")
}
func (UnimplementedSPFromMicaServiceServer) ObtainFunds(context.Context, *fundsv1.ObtainFundsRequest) (*fundsv1.ObtainFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtainFunds not implemented")
}
func (UnimplementedSPFromMicaServiceServer) ReturnFunds(context.Context, *fundsv1.ReturnFundsRequest) (*fundsv1.ReturnFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnFunds not implemented")
}
func (UnimplementedSPFromMicaServiceServer) ReceiveFunds(context.Context, *fundsv1.ReceiveFundsRequest) (*fundsv1.ReceiveFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFunds not implemented")
}
func (UnimplementedSPFromMicaServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSPFromMicaServiceServer) mustEmbedUnimplementedSPFromMicaServiceServer() {}

// UnsafeSPFromMicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SPFromMicaServiceServer will
// result in compilation errors.
type UnsafeSPFromMicaServiceServer interface {
	mustEmbedUnimplementedSPFromMicaServiceServer()
}

func RegisterSPFromMicaServiceServer(s grpc.ServiceRegistrar, srv SPFromMicaServiceServer) {
	s.RegisterService(&SPFromMicaService_ServiceDesc, srv)
}

func _SPFromMicaService_EnrollUserInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.EnrollUserInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPFromMicaServiceServer).EnrollUserInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPFromMicaService/EnrollUserInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPFromMicaServiceServer).EnrollUserInstrument(ctx, req.(*userv1.EnrollUserInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPFromMicaService_RetrieveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RetrieveTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPFromMicaServiceServer).RetrieveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPFromMicaService/RetrieveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPFromMicaServiceServer).RetrieveTransaction(ctx, req.(*instrumentv1.RetrieveTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPFromMicaService_ObtainFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fundsv1.ObtainFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPFromMicaServiceServer).ObtainFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPFromMicaService/ObtainFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPFromMicaServiceServer).ObtainFunds(ctx, req.(*fundsv1.ObtainFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPFromMicaService_ReturnFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fundsv1.ReturnFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPFromMicaServiceServer).ReturnFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPFromMicaService/ReturnFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPFromMicaServiceServer).ReturnFunds(ctx, req.(*fundsv1.ReturnFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPFromMicaService_ReceiveFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fundsv1.ReceiveFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPFromMicaServiceServer).ReceiveFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPFromMicaService/ReceiveFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPFromMicaServiceServer).ReceiveFunds(ctx, req.(*fundsv1.ReceiveFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPFromMicaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPFromMicaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPFromMicaService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPFromMicaServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SPFromMicaService_ServiceDesc is the grpc.ServiceDesc for SPFromMicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SPFromMicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sp.service.v1.SPFromMicaService",
	HandlerType: (*SPFromMicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUserInstrument",
			Handler:    _SPFromMicaService_EnrollUserInstrument_Handler,
		},
		{
			MethodName: "RetrieveTransaction",
			Handler:    _SPFromMicaService_RetrieveTransaction_Handler,
		},
		{
			MethodName: "ObtainFunds",
			Handler:    _SPFromMicaService_ObtainFunds_Handler,
		},
		{
			MethodName: "ReturnFunds",
			Handler:    _SPFromMicaService_ReturnFunds_Handler,
		},
		{
			MethodName: "ReceiveFunds",
			Handler:    _SPFromMicaService_ReceiveFunds_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SPFromMicaService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sp/service/v1/sp_from_mica_service.proto",
}
