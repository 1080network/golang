// Copyright (c) 2021 1080 Network, Inc. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of 1080 Network, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "1080 Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the 1080 Software without a
// valid license or the prior written approval of 1080 Network, Inc. 1080 Network, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of 1080 Network, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: sp/service/v1/sp_to_ten80_service.proto

package servicev1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	authenticatev1 "ten80/proto/common/authenticatev1"
	pingv1 "ten80/proto/common/pingv1"
	instrumentv1 "ten80/proto/sp/instrumentv1"
	paymenttokenv1 "ten80/proto/sp/paymenttokenv1"
	serviceaccountv1 "ten80/proto/sp/serviceaccountv1"
	spv1 "ten80/proto/sp/spv1"
	userv1 "ten80/proto/sp/userv1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_sp_service_v1_sp_to_ten80_service_proto protoreflect.FileDescriptor

var file_sp_service_v1_sp_to_ten80_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x6e, 0x38, 0x30, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x70, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x73, 0x70, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x73, 0x70, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x73, 0x70, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x70, 0x2f, 0x73, 0x70, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x70, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0xb4, 0x0f, 0x0a, 0x0f, 0x53, 0x50, 0x54, 0x6f, 0x31, 0x30, 0x38, 0x30, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x53, 0x50, 0x12, 0x16, 0x2e, 0x73, 0x70, 0x2e, 0x73,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x73, 0x70, 0x2e, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x73,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x73, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x73,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x73, 0x70, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x73, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x2e, 0x73, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73,
	0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x50, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x32, 0x2e, 0x73, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x50, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x50, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x50, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x50, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x50, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x50, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x50, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x50,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x2e, 0x73, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x73, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x73,
	0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73,
	0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x70, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x70,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4c, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x74, 0x65, 0x6e, 0x38, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x0e, 0x53, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x18, 0x74, 0x65, 0x6e, 0x38, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x54,
	0x45, 0x4e, 0x38, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_sp_service_v1_sp_to_ten80_service_proto_goTypes = []interface{}{
	(*authenticatev1.AuthenticateRequest)(nil),             // 0: common.authenticate.v1.AuthenticateRequest
	(*spv1.GetSPRequest)(nil),                              // 1: sp.sp.v1.GetSPRequest
	(*userv1.RegisterUserRequest)(nil),                     // 2: sp.user.v1.RegisterUserRequest
	(*userv1.GetUserRequest)(nil),                          // 3: sp.user.v1.GetUserRequest
	(*userv1.UpdateUserRequest)(nil),                       // 4: sp.user.v1.UpdateUserRequest
	(*userv1.RemoveUserRequest)(nil),                       // 5: sp.user.v1.RemoveUserRequest
	(*userv1.SearchUserRequest)(nil),                       // 6: sp.user.v1.SearchUserRequest
	(*instrumentv1.RegisterInstrumentRequest)(nil),         // 7: sp.instrument.v1.RegisterInstrumentRequest
	(*instrumentv1.GetInstrumentRequest)(nil),              // 8: sp.instrument.v1.GetInstrumentRequest
	(*instrumentv1.RemoveInstrumentRequest)(nil),           // 9: sp.instrument.v1.RemoveInstrumentRequest
	(*instrumentv1.SearchInstrumentRequest)(nil),           // 10: sp.instrument.v1.SearchInstrumentRequest
	(*paymenttokenv1.ProvisionSPPaymentTokenRequest)(nil),  // 11: sp.paymenttoken.v1.ProvisionSPPaymentTokenRequest
	(*paymenttokenv1.RemoveSPPaymentTokenRequest)(nil),     // 12: sp.paymenttoken.v1.RemoveSPPaymentTokenRequest
	(*paymenttokenv1.SearchSPPaymentTokenRequest)(nil),     // 13: sp.paymenttoken.v1.SearchSPPaymentTokenRequest
	(*serviceaccountv1.CreateServiceAccountRequest)(nil),   // 14: sp.serviceaccount.v1.CreateServiceAccountRequest
	(*serviceaccountv1.GetServiceAccountRequest)(nil),      // 15: sp.serviceaccount.v1.GetServiceAccountRequest
	(*serviceaccountv1.UpdateServiceAccountRequest)(nil),   // 16: sp.serviceaccount.v1.UpdateServiceAccountRequest
	(*serviceaccountv1.SearchServiceAccountRequest)(nil),   // 17: sp.serviceaccount.v1.SearchServiceAccountRequest
	(*pingv1.PingRequest)(nil),                             // 18: common.ping.v1.PingRequest
	(*authenticatev1.AuthenticateResponse)(nil),            // 19: common.authenticate.v1.AuthenticateResponse
	(*spv1.GetSPResponse)(nil),                             // 20: sp.sp.v1.GetSPResponse
	(*userv1.RegisterUserResponse)(nil),                    // 21: sp.user.v1.RegisterUserResponse
	(*userv1.GetUserResponse)(nil),                         // 22: sp.user.v1.GetUserResponse
	(*userv1.UpdateUserResponse)(nil),                      // 23: sp.user.v1.UpdateUserResponse
	(*userv1.RemoveUserResponse)(nil),                      // 24: sp.user.v1.RemoveUserResponse
	(*userv1.SearchUserResponse)(nil),                      // 25: sp.user.v1.SearchUserResponse
	(*instrumentv1.RegisterInstrumentResponse)(nil),        // 26: sp.instrument.v1.RegisterInstrumentResponse
	(*instrumentv1.GetInstrumentResponse)(nil),             // 27: sp.instrument.v1.GetInstrumentResponse
	(*instrumentv1.RemoveInstrumentResponse)(nil),          // 28: sp.instrument.v1.RemoveInstrumentResponse
	(*instrumentv1.SearchInstrumentResponse)(nil),          // 29: sp.instrument.v1.SearchInstrumentResponse
	(*paymenttokenv1.ProvisionSPPaymentTokenResponse)(nil), // 30: sp.paymenttoken.v1.ProvisionSPPaymentTokenResponse
	(*paymenttokenv1.RemoveSPPaymentTokenResponse)(nil),    // 31: sp.paymenttoken.v1.RemoveSPPaymentTokenResponse
	(*paymenttokenv1.SearchSPPaymentTokenResponse)(nil),    // 32: sp.paymenttoken.v1.SearchSPPaymentTokenResponse
	(*serviceaccountv1.CreateServiceAccountResponse)(nil),  // 33: sp.serviceaccount.v1.CreateServiceAccountResponse
	(*serviceaccountv1.GetServiceAccountResponse)(nil),     // 34: sp.serviceaccount.v1.GetServiceAccountResponse
	(*serviceaccountv1.UpdateServiceAccountResponse)(nil),  // 35: sp.serviceaccount.v1.UpdateServiceAccountResponse
	(*serviceaccountv1.SearchServiceAccountResponse)(nil),  // 36: sp.serviceaccount.v1.SearchServiceAccountResponse
	(*pingv1.PingResponse)(nil),                            // 37: common.ping.v1.PingResponse
}
var file_sp_service_v1_sp_to_ten80_service_proto_depIdxs = []int32{
	0,  // 0: sp.service.v1.SPTo1080Service.Authenticate:input_type -> common.authenticate.v1.AuthenticateRequest
	1,  // 1: sp.service.v1.SPTo1080Service.GetSP:input_type -> sp.sp.v1.GetSPRequest
	2,  // 2: sp.service.v1.SPTo1080Service.RegisterUser:input_type -> sp.user.v1.RegisterUserRequest
	3,  // 3: sp.service.v1.SPTo1080Service.GetUser:input_type -> sp.user.v1.GetUserRequest
	4,  // 4: sp.service.v1.SPTo1080Service.UpdateUser:input_type -> sp.user.v1.UpdateUserRequest
	5,  // 5: sp.service.v1.SPTo1080Service.RemoveUser:input_type -> sp.user.v1.RemoveUserRequest
	6,  // 6: sp.service.v1.SPTo1080Service.SearchUser:input_type -> sp.user.v1.SearchUserRequest
	7,  // 7: sp.service.v1.SPTo1080Service.RegisterInstrument:input_type -> sp.instrument.v1.RegisterInstrumentRequest
	8,  // 8: sp.service.v1.SPTo1080Service.GetInstrument:input_type -> sp.instrument.v1.GetInstrumentRequest
	9,  // 9: sp.service.v1.SPTo1080Service.RemoveInstrument:input_type -> sp.instrument.v1.RemoveInstrumentRequest
	10, // 10: sp.service.v1.SPTo1080Service.SearchInstrument:input_type -> sp.instrument.v1.SearchInstrumentRequest
	11, // 11: sp.service.v1.SPTo1080Service.ProvisionSPPaymentToken:input_type -> sp.paymenttoken.v1.ProvisionSPPaymentTokenRequest
	12, // 12: sp.service.v1.SPTo1080Service.RemoveSPPaymentToken:input_type -> sp.paymenttoken.v1.RemoveSPPaymentTokenRequest
	13, // 13: sp.service.v1.SPTo1080Service.SearchSPPaymentToken:input_type -> sp.paymenttoken.v1.SearchSPPaymentTokenRequest
	14, // 14: sp.service.v1.SPTo1080Service.CreateServiceAccount:input_type -> sp.serviceaccount.v1.CreateServiceAccountRequest
	15, // 15: sp.service.v1.SPTo1080Service.GetServiceAccount:input_type -> sp.serviceaccount.v1.GetServiceAccountRequest
	16, // 16: sp.service.v1.SPTo1080Service.UpdateServiceAccount:input_type -> sp.serviceaccount.v1.UpdateServiceAccountRequest
	17, // 17: sp.service.v1.SPTo1080Service.SearchServiceAccount:input_type -> sp.serviceaccount.v1.SearchServiceAccountRequest
	18, // 18: sp.service.v1.SPTo1080Service.Ping:input_type -> common.ping.v1.PingRequest
	19, // 19: sp.service.v1.SPTo1080Service.Authenticate:output_type -> common.authenticate.v1.AuthenticateResponse
	20, // 20: sp.service.v1.SPTo1080Service.GetSP:output_type -> sp.sp.v1.GetSPResponse
	21, // 21: sp.service.v1.SPTo1080Service.RegisterUser:output_type -> sp.user.v1.RegisterUserResponse
	22, // 22: sp.service.v1.SPTo1080Service.GetUser:output_type -> sp.user.v1.GetUserResponse
	23, // 23: sp.service.v1.SPTo1080Service.UpdateUser:output_type -> sp.user.v1.UpdateUserResponse
	24, // 24: sp.service.v1.SPTo1080Service.RemoveUser:output_type -> sp.user.v1.RemoveUserResponse
	25, // 25: sp.service.v1.SPTo1080Service.SearchUser:output_type -> sp.user.v1.SearchUserResponse
	26, // 26: sp.service.v1.SPTo1080Service.RegisterInstrument:output_type -> sp.instrument.v1.RegisterInstrumentResponse
	27, // 27: sp.service.v1.SPTo1080Service.GetInstrument:output_type -> sp.instrument.v1.GetInstrumentResponse
	28, // 28: sp.service.v1.SPTo1080Service.RemoveInstrument:output_type -> sp.instrument.v1.RemoveInstrumentResponse
	29, // 29: sp.service.v1.SPTo1080Service.SearchInstrument:output_type -> sp.instrument.v1.SearchInstrumentResponse
	30, // 30: sp.service.v1.SPTo1080Service.ProvisionSPPaymentToken:output_type -> sp.paymenttoken.v1.ProvisionSPPaymentTokenResponse
	31, // 31: sp.service.v1.SPTo1080Service.RemoveSPPaymentToken:output_type -> sp.paymenttoken.v1.RemoveSPPaymentTokenResponse
	32, // 32: sp.service.v1.SPTo1080Service.SearchSPPaymentToken:output_type -> sp.paymenttoken.v1.SearchSPPaymentTokenResponse
	33, // 33: sp.service.v1.SPTo1080Service.CreateServiceAccount:output_type -> sp.serviceaccount.v1.CreateServiceAccountResponse
	34, // 34: sp.service.v1.SPTo1080Service.GetServiceAccount:output_type -> sp.serviceaccount.v1.GetServiceAccountResponse
	35, // 35: sp.service.v1.SPTo1080Service.UpdateServiceAccount:output_type -> sp.serviceaccount.v1.UpdateServiceAccountResponse
	36, // 36: sp.service.v1.SPTo1080Service.SearchServiceAccount:output_type -> sp.serviceaccount.v1.SearchServiceAccountResponse
	37, // 37: sp.service.v1.SPTo1080Service.Ping:output_type -> common.ping.v1.PingResponse
	19, // [19:38] is the sub-list for method output_type
	0,  // [0:19] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_sp_service_v1_sp_to_ten80_service_proto_init() }
func file_sp_service_v1_sp_to_ten80_service_proto_init() {
	if File_sp_service_v1_sp_to_ten80_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sp_service_v1_sp_to_ten80_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sp_service_v1_sp_to_ten80_service_proto_goTypes,
		DependencyIndexes: file_sp_service_v1_sp_to_ten80_service_proto_depIdxs,
	}.Build()
	File_sp_service_v1_sp_to_ten80_service_proto = out.File
	file_sp_service_v1_sp_to_ten80_service_proto_rawDesc = nil
	file_sp_service_v1_sp_to_ten80_service_proto_goTypes = nil
	file_sp_service_v1_sp_to_ten80_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SPTo1080ServiceClient is the client API for SPTo1080Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SPTo1080ServiceClient interface {
	Authenticate(ctx context.Context, in *authenticatev1.AuthenticateRequest, opts ...grpc.CallOption) (*authenticatev1.AuthenticateResponse, error)
	GetSP(ctx context.Context, in *spv1.GetSPRequest, opts ...grpc.CallOption) (*spv1.GetSPResponse, error)
	RegisterUser(ctx context.Context, in *userv1.RegisterUserRequest, opts ...grpc.CallOption) (*userv1.RegisterUserResponse, error)
	GetUser(ctx context.Context, in *userv1.GetUserRequest, opts ...grpc.CallOption) (*userv1.GetUserResponse, error)
	UpdateUser(ctx context.Context, in *userv1.UpdateUserRequest, opts ...grpc.CallOption) (*userv1.UpdateUserResponse, error)
	RemoveUser(ctx context.Context, in *userv1.RemoveUserRequest, opts ...grpc.CallOption) (*userv1.RemoveUserResponse, error)
	SearchUser(ctx context.Context, in *userv1.SearchUserRequest, opts ...grpc.CallOption) (*userv1.SearchUserResponse, error)
	RegisterInstrument(ctx context.Context, in *instrumentv1.RegisterInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RegisterInstrumentResponse, error)
	GetInstrument(ctx context.Context, in *instrumentv1.GetInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentResponse, error)
	RemoveInstrument(ctx context.Context, in *instrumentv1.RemoveInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentResponse, error)
	SearchInstrument(ctx context.Context, in *instrumentv1.SearchInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentResponse, error)
	ProvisionSPPaymentToken(ctx context.Context, in *paymenttokenv1.ProvisionSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ProvisionSPPaymentTokenResponse, error)
	RemoveSPPaymentToken(ctx context.Context, in *paymenttokenv1.RemoveSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemoveSPPaymentTokenResponse, error)
	SearchSPPaymentToken(ctx context.Context, in *paymenttokenv1.SearchSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchSPPaymentTokenResponse, error)
	CreateServiceAccount(ctx context.Context, in *serviceaccountv1.CreateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.CreateServiceAccountResponse, error)
	GetServiceAccount(ctx context.Context, in *serviceaccountv1.GetServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.GetServiceAccountResponse, error)
	UpdateServiceAccount(ctx context.Context, in *serviceaccountv1.UpdateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.UpdateServiceAccountResponse, error)
	SearchServiceAccount(ctx context.Context, in *serviceaccountv1.SearchServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.SearchServiceAccountResponse, error)
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
}

type sPTo1080ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSPTo1080ServiceClient(cc grpc.ClientConnInterface) SPTo1080ServiceClient {
	return &sPTo1080ServiceClient{cc}
}

func (c *sPTo1080ServiceClient) Authenticate(ctx context.Context, in *authenticatev1.AuthenticateRequest, opts ...grpc.CallOption) (*authenticatev1.AuthenticateResponse, error) {
	out := new(authenticatev1.AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) GetSP(ctx context.Context, in *spv1.GetSPRequest, opts ...grpc.CallOption) (*spv1.GetSPResponse, error) {
	out := new(spv1.GetSPResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/GetSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) RegisterUser(ctx context.Context, in *userv1.RegisterUserRequest, opts ...grpc.CallOption) (*userv1.RegisterUserResponse, error) {
	out := new(userv1.RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) GetUser(ctx context.Context, in *userv1.GetUserRequest, opts ...grpc.CallOption) (*userv1.GetUserResponse, error) {
	out := new(userv1.GetUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) UpdateUser(ctx context.Context, in *userv1.UpdateUserRequest, opts ...grpc.CallOption) (*userv1.UpdateUserResponse, error) {
	out := new(userv1.UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) RemoveUser(ctx context.Context, in *userv1.RemoveUserRequest, opts ...grpc.CallOption) (*userv1.RemoveUserResponse, error) {
	out := new(userv1.RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) SearchUser(ctx context.Context, in *userv1.SearchUserRequest, opts ...grpc.CallOption) (*userv1.SearchUserResponse, error) {
	out := new(userv1.SearchUserResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) RegisterInstrument(ctx context.Context, in *instrumentv1.RegisterInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RegisterInstrumentResponse, error) {
	out := new(instrumentv1.RegisterInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/RegisterInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) GetInstrument(ctx context.Context, in *instrumentv1.GetInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.GetInstrumentResponse, error) {
	out := new(instrumentv1.GetInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/GetInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) RemoveInstrument(ctx context.Context, in *instrumentv1.RemoveInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.RemoveInstrumentResponse, error) {
	out := new(instrumentv1.RemoveInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/RemoveInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) SearchInstrument(ctx context.Context, in *instrumentv1.SearchInstrumentRequest, opts ...grpc.CallOption) (*instrumentv1.SearchInstrumentResponse, error) {
	out := new(instrumentv1.SearchInstrumentResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/SearchInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) ProvisionSPPaymentToken(ctx context.Context, in *paymenttokenv1.ProvisionSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ProvisionSPPaymentTokenResponse, error) {
	out := new(paymenttokenv1.ProvisionSPPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/ProvisionSPPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) RemoveSPPaymentToken(ctx context.Context, in *paymenttokenv1.RemoveSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemoveSPPaymentTokenResponse, error) {
	out := new(paymenttokenv1.RemoveSPPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/RemoveSPPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) SearchSPPaymentToken(ctx context.Context, in *paymenttokenv1.SearchSPPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchSPPaymentTokenResponse, error) {
	out := new(paymenttokenv1.SearchSPPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/SearchSPPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) CreateServiceAccount(ctx context.Context, in *serviceaccountv1.CreateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.CreateServiceAccountResponse, error) {
	out := new(serviceaccountv1.CreateServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/CreateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) GetServiceAccount(ctx context.Context, in *serviceaccountv1.GetServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.GetServiceAccountResponse, error) {
	out := new(serviceaccountv1.GetServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/GetServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) UpdateServiceAccount(ctx context.Context, in *serviceaccountv1.UpdateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.UpdateServiceAccountResponse, error) {
	out := new(serviceaccountv1.UpdateServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/UpdateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) SearchServiceAccount(ctx context.Context, in *serviceaccountv1.SearchServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.SearchServiceAccountResponse, error) {
	out := new(serviceaccountv1.SearchServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/SearchServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPTo1080ServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, "/sp.service.v1.SPTo1080Service/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SPTo1080ServiceServer is the server API for SPTo1080Service service.
type SPTo1080ServiceServer interface {
	Authenticate(context.Context, *authenticatev1.AuthenticateRequest) (*authenticatev1.AuthenticateResponse, error)
	GetSP(context.Context, *spv1.GetSPRequest) (*spv1.GetSPResponse, error)
	RegisterUser(context.Context, *userv1.RegisterUserRequest) (*userv1.RegisterUserResponse, error)
	GetUser(context.Context, *userv1.GetUserRequest) (*userv1.GetUserResponse, error)
	UpdateUser(context.Context, *userv1.UpdateUserRequest) (*userv1.UpdateUserResponse, error)
	RemoveUser(context.Context, *userv1.RemoveUserRequest) (*userv1.RemoveUserResponse, error)
	SearchUser(context.Context, *userv1.SearchUserRequest) (*userv1.SearchUserResponse, error)
	RegisterInstrument(context.Context, *instrumentv1.RegisterInstrumentRequest) (*instrumentv1.RegisterInstrumentResponse, error)
	GetInstrument(context.Context, *instrumentv1.GetInstrumentRequest) (*instrumentv1.GetInstrumentResponse, error)
	RemoveInstrument(context.Context, *instrumentv1.RemoveInstrumentRequest) (*instrumentv1.RemoveInstrumentResponse, error)
	SearchInstrument(context.Context, *instrumentv1.SearchInstrumentRequest) (*instrumentv1.SearchInstrumentResponse, error)
	ProvisionSPPaymentToken(context.Context, *paymenttokenv1.ProvisionSPPaymentTokenRequest) (*paymenttokenv1.ProvisionSPPaymentTokenResponse, error)
	RemoveSPPaymentToken(context.Context, *paymenttokenv1.RemoveSPPaymentTokenRequest) (*paymenttokenv1.RemoveSPPaymentTokenResponse, error)
	SearchSPPaymentToken(context.Context, *paymenttokenv1.SearchSPPaymentTokenRequest) (*paymenttokenv1.SearchSPPaymentTokenResponse, error)
	CreateServiceAccount(context.Context, *serviceaccountv1.CreateServiceAccountRequest) (*serviceaccountv1.CreateServiceAccountResponse, error)
	GetServiceAccount(context.Context, *serviceaccountv1.GetServiceAccountRequest) (*serviceaccountv1.GetServiceAccountResponse, error)
	UpdateServiceAccount(context.Context, *serviceaccountv1.UpdateServiceAccountRequest) (*serviceaccountv1.UpdateServiceAccountResponse, error)
	SearchServiceAccount(context.Context, *serviceaccountv1.SearchServiceAccountRequest) (*serviceaccountv1.SearchServiceAccountResponse, error)
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
}

// UnimplementedSPTo1080ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSPTo1080ServiceServer struct {
}

func (*UnimplementedSPTo1080ServiceServer) Authenticate(context.Context, *authenticatev1.AuthenticateRequest) (*authenticatev1.AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) GetSP(context.Context, *spv1.GetSPRequest) (*spv1.GetSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSP not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) RegisterUser(context.Context, *userv1.RegisterUserRequest) (*userv1.RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) GetUser(context.Context, *userv1.GetUserRequest) (*userv1.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) UpdateUser(context.Context, *userv1.UpdateUserRequest) (*userv1.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) RemoveUser(context.Context, *userv1.RemoveUserRequest) (*userv1.RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) SearchUser(context.Context, *userv1.SearchUserRequest) (*userv1.SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) RegisterInstrument(context.Context, *instrumentv1.RegisterInstrumentRequest) (*instrumentv1.RegisterInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInstrument not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) GetInstrument(context.Context, *instrumentv1.GetInstrumentRequest) (*instrumentv1.GetInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrument not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) RemoveInstrument(context.Context, *instrumentv1.RemoveInstrumentRequest) (*instrumentv1.RemoveInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstrument not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) SearchInstrument(context.Context, *instrumentv1.SearchInstrumentRequest) (*instrumentv1.SearchInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInstrument not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) ProvisionSPPaymentToken(context.Context, *paymenttokenv1.ProvisionSPPaymentTokenRequest) (*paymenttokenv1.ProvisionSPPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionSPPaymentToken not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) RemoveSPPaymentToken(context.Context, *paymenttokenv1.RemoveSPPaymentTokenRequest) (*paymenttokenv1.RemoveSPPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSPPaymentToken not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) SearchSPPaymentToken(context.Context, *paymenttokenv1.SearchSPPaymentTokenRequest) (*paymenttokenv1.SearchSPPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSPPaymentToken not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) CreateServiceAccount(context.Context, *serviceaccountv1.CreateServiceAccountRequest) (*serviceaccountv1.CreateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccount not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) GetServiceAccount(context.Context, *serviceaccountv1.GetServiceAccountRequest) (*serviceaccountv1.GetServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccount not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) UpdateServiceAccount(context.Context, *serviceaccountv1.UpdateServiceAccountRequest) (*serviceaccountv1.UpdateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceAccount not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) SearchServiceAccount(context.Context, *serviceaccountv1.SearchServiceAccountRequest) (*serviceaccountv1.SearchServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServiceAccount not implemented")
}
func (*UnimplementedSPTo1080ServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterSPTo1080ServiceServer(s *grpc.Server, srv SPTo1080ServiceServer) {
	s.RegisterService(&_SPTo1080Service_serviceDesc, srv)
}

func _SPTo1080Service_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authenticatev1.AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).Authenticate(ctx, req.(*authenticatev1.AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_GetSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spv1.GetSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).GetSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/GetSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).GetSP(ctx, req.(*spv1.GetSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).RegisterUser(ctx, req.(*userv1.RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).GetUser(ctx, req.(*userv1.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).UpdateUser(ctx, req.(*userv1.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).RemoveUser(ctx, req.(*userv1.RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).SearchUser(ctx, req.(*userv1.SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_RegisterInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RegisterInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).RegisterInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/RegisterInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).RegisterInstrument(ctx, req.(*instrumentv1.RegisterInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_GetInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.GetInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).GetInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/GetInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).GetInstrument(ctx, req.(*instrumentv1.GetInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_RemoveInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.RemoveInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).RemoveInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/RemoveInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).RemoveInstrument(ctx, req.(*instrumentv1.RemoveInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_SearchInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.SearchInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).SearchInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/SearchInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).SearchInstrument(ctx, req.(*instrumentv1.SearchInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_ProvisionSPPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.ProvisionSPPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).ProvisionSPPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/ProvisionSPPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).ProvisionSPPaymentToken(ctx, req.(*paymenttokenv1.ProvisionSPPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_RemoveSPPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.RemoveSPPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).RemoveSPPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/RemoveSPPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).RemoveSPPaymentToken(ctx, req.(*paymenttokenv1.RemoveSPPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_SearchSPPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.SearchSPPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).SearchSPPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/SearchSPPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).SearchSPPaymentToken(ctx, req.(*paymenttokenv1.SearchSPPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/CreateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).CreateServiceAccount(ctx, req.(*serviceaccountv1.CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_GetServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.GetServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).GetServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/GetServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).GetServiceAccount(ctx, req.(*serviceaccountv1.GetServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_UpdateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.UpdateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).UpdateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/UpdateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).UpdateServiceAccount(ctx, req.(*serviceaccountv1.UpdateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_SearchServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.SearchServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).SearchServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/SearchServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).SearchServiceAccount(ctx, req.(*serviceaccountv1.SearchServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPTo1080Service_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPTo1080ServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sp.service.v1.SPTo1080Service/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPTo1080ServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SPTo1080Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sp.service.v1.SPTo1080Service",
	HandlerType: (*SPTo1080ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _SPTo1080Service_Authenticate_Handler,
		},
		{
			MethodName: "GetSP",
			Handler:    _SPTo1080Service_GetSP_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _SPTo1080Service_RegisterUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _SPTo1080Service_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SPTo1080Service_UpdateUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _SPTo1080Service_RemoveUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _SPTo1080Service_SearchUser_Handler,
		},
		{
			MethodName: "RegisterInstrument",
			Handler:    _SPTo1080Service_RegisterInstrument_Handler,
		},
		{
			MethodName: "GetInstrument",
			Handler:    _SPTo1080Service_GetInstrument_Handler,
		},
		{
			MethodName: "RemoveInstrument",
			Handler:    _SPTo1080Service_RemoveInstrument_Handler,
		},
		{
			MethodName: "SearchInstrument",
			Handler:    _SPTo1080Service_SearchInstrument_Handler,
		},
		{
			MethodName: "ProvisionSPPaymentToken",
			Handler:    _SPTo1080Service_ProvisionSPPaymentToken_Handler,
		},
		{
			MethodName: "RemoveSPPaymentToken",
			Handler:    _SPTo1080Service_RemoveSPPaymentToken_Handler,
		},
		{
			MethodName: "SearchSPPaymentToken",
			Handler:    _SPTo1080Service_SearchSPPaymentToken_Handler,
		},
		{
			MethodName: "CreateServiceAccount",
			Handler:    _SPTo1080Service_CreateServiceAccount_Handler,
		},
		{
			MethodName: "GetServiceAccount",
			Handler:    _SPTo1080Service_GetServiceAccount_Handler,
		},
		{
			MethodName: "UpdateServiceAccount",
			Handler:    _SPTo1080Service_UpdateServiceAccount_Handler,
		},
		{
			MethodName: "SearchServiceAccount",
			Handler:    _SPTo1080Service_SearchServiceAccount_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SPTo1080Service_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sp/service/v1/sp_to_ten80_service.proto",
}
