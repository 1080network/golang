// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	authenticatev1 "mica/proto/common/authenticatev1"
	pingv1 "mica/proto/common/pingv1"
	fundsv1 "mica/proto/partner/fundsv1"
	instrumentv1 "mica/proto/partner/instrumentv1"
	organizationv1 "mica/proto/partner/organizationv1"
	partnerv1 "mica/proto/partner/partnerv1"
	paymenttokenv1 "mica/proto/partner/paymenttokenv1"
	serviceaccountv1 "mica/proto/partner/serviceaccountv1"
	spv1 "mica/proto/partner/spv1"
	storev1 "mica/proto/partner/storev1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnerToMicaServiceClient is the client API for PartnerToMicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerToMicaServiceClient interface {
	Authenticate(ctx context.Context, in *authenticatev1.AuthenticateRequest, opts ...grpc.CallOption) (*authenticatev1.AuthenticateResponse, error)
	GetPartner(ctx context.Context, in *partnerv1.GetPartnerRequest, opts ...grpc.CallOption) (*partnerv1.GetPartnerResponse, error)
	CreateServiceAccount(ctx context.Context, in *serviceaccountv1.CreateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.CreateServiceAccountResponse, error)
	GetServiceAccount(ctx context.Context, in *serviceaccountv1.GetServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.GetServiceAccountResponse, error)
	UpdateServiceAccount(ctx context.Context, in *serviceaccountv1.UpdateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.UpdateServiceAccountResponse, error)
	SearchServiceAccount(ctx context.Context, in *serviceaccountv1.SearchServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.SearchServiceAccountResponse, error)
	GetOrganization(ctx context.Context, in *organizationv1.GetOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.GetOrganizationResponse, error)
	UpdateOrganization(ctx context.Context, in *organizationv1.UpdateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationResponse, error)
	SearchOrganization(ctx context.Context, in *organizationv1.SearchOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.SearchOrganizationResponse, error)
	CreateStore(ctx context.Context, in *storev1.CreateStoreRequest, opts ...grpc.CallOption) (*storev1.CreateStoreResponse, error)
	GetStore(ctx context.Context, in *storev1.GetStoreRequest, opts ...grpc.CallOption) (*storev1.GetStoreResponse, error)
	UpdateStore(ctx context.Context, in *storev1.UpdateStoreRequest, opts ...grpc.CallOption) (*storev1.UpdateStoreResponse, error)
	RemoveStore(ctx context.Context, in *storev1.RemoveStoreRequest, opts ...grpc.CallOption) (*storev1.RemoveStoreResponse, error)
	SearchStore(ctx context.Context, in *storev1.SearchStoreRequest, opts ...grpc.CallOption) (*storev1.SearchStoreResponse, error)
	SearchSP(ctx context.Context, in *spv1.SearchSPRequest, opts ...grpc.CallOption) (*spv1.SearchSPResponse, error)
	ClosePaymentToken(ctx context.Context, in *paymenttokenv1.RemovePaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemovePaymentTokenResponse, error)
	ReplacePaymentToken(ctx context.Context, in *paymenttokenv1.ExchangePaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ExchangePaymentTokenResponse, error)
	SearchPaymentToken(ctx context.Context, in *paymenttokenv1.SearchPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchPaymentTokenResponse, error)
	ObtainFunds(ctx context.Context, in *fundsv1.ObtainFundsRequest, opts ...grpc.CallOption) (*fundsv1.ObtainFundsResponse, error)
	ReturnFunds(ctx context.Context, in *fundsv1.ReturnFundsRequest, opts ...grpc.CallOption) (*fundsv1.ReturnFundsResponse, error)
	SearchFunds(ctx context.Context, in *fundsv1.SearchFundsRequest, opts ...grpc.CallOption) (*fundsv1.SearchFundsResponse, error)
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
	InitializeWidget(ctx context.Context, in *instrumentv1.InitializeWidgetRequest, opts ...grpc.CallOption) (*instrumentv1.InitializeWidgetResponse, error)
	ExchangeSessionKey(ctx context.Context, in *instrumentv1.ExchangeSessionKeyRequest, opts ...grpc.CallOption) (*instrumentv1.ExchangeSessionKeyResponse, error)
}

type partnerToMicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerToMicaServiceClient(cc grpc.ClientConnInterface) PartnerToMicaServiceClient {
	return &partnerToMicaServiceClient{cc}
}

func (c *partnerToMicaServiceClient) Authenticate(ctx context.Context, in *authenticatev1.AuthenticateRequest, opts ...grpc.CallOption) (*authenticatev1.AuthenticateResponse, error) {
	out := new(authenticatev1.AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetPartner(ctx context.Context, in *partnerv1.GetPartnerRequest, opts ...grpc.CallOption) (*partnerv1.GetPartnerResponse, error) {
	out := new(partnerv1.GetPartnerResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) CreateServiceAccount(ctx context.Context, in *serviceaccountv1.CreateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.CreateServiceAccountResponse, error) {
	out := new(serviceaccountv1.CreateServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/CreateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetServiceAccount(ctx context.Context, in *serviceaccountv1.GetServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.GetServiceAccountResponse, error) {
	out := new(serviceaccountv1.GetServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateServiceAccount(ctx context.Context, in *serviceaccountv1.UpdateServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.UpdateServiceAccountResponse, error) {
	out := new(serviceaccountv1.UpdateServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/UpdateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchServiceAccount(ctx context.Context, in *serviceaccountv1.SearchServiceAccountRequest, opts ...grpc.CallOption) (*serviceaccountv1.SearchServiceAccountResponse, error) {
	out := new(serviceaccountv1.SearchServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetOrganization(ctx context.Context, in *organizationv1.GetOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.GetOrganizationResponse, error) {
	out := new(organizationv1.GetOrganizationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateOrganization(ctx context.Context, in *organizationv1.UpdateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationResponse, error) {
	out := new(organizationv1.UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchOrganization(ctx context.Context, in *organizationv1.SearchOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.SearchOrganizationResponse, error) {
	out := new(organizationv1.SearchOrganizationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) CreateStore(ctx context.Context, in *storev1.CreateStoreRequest, opts ...grpc.CallOption) (*storev1.CreateStoreResponse, error) {
	out := new(storev1.CreateStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/CreateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetStore(ctx context.Context, in *storev1.GetStoreRequest, opts ...grpc.CallOption) (*storev1.GetStoreResponse, error) {
	out := new(storev1.GetStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateStore(ctx context.Context, in *storev1.UpdateStoreRequest, opts ...grpc.CallOption) (*storev1.UpdateStoreResponse, error) {
	out := new(storev1.UpdateStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/UpdateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) RemoveStore(ctx context.Context, in *storev1.RemoveStoreRequest, opts ...grpc.CallOption) (*storev1.RemoveStoreResponse, error) {
	out := new(storev1.RemoveStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/RemoveStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchStore(ctx context.Context, in *storev1.SearchStoreRequest, opts ...grpc.CallOption) (*storev1.SearchStoreResponse, error) {
	out := new(storev1.SearchStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchSP(ctx context.Context, in *spv1.SearchSPRequest, opts ...grpc.CallOption) (*spv1.SearchSPResponse, error) {
	out := new(spv1.SearchSPResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ClosePaymentToken(ctx context.Context, in *paymenttokenv1.RemovePaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemovePaymentTokenResponse, error) {
	out := new(paymenttokenv1.RemovePaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ClosePaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ReplacePaymentToken(ctx context.Context, in *paymenttokenv1.ExchangePaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ExchangePaymentTokenResponse, error) {
	out := new(paymenttokenv1.ExchangePaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ReplacePaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchPaymentToken(ctx context.Context, in *paymenttokenv1.SearchPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchPaymentTokenResponse, error) {
	out := new(paymenttokenv1.SearchPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ObtainFunds(ctx context.Context, in *fundsv1.ObtainFundsRequest, opts ...grpc.CallOption) (*fundsv1.ObtainFundsResponse, error) {
	out := new(fundsv1.ObtainFundsResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ObtainFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ReturnFunds(ctx context.Context, in *fundsv1.ReturnFundsRequest, opts ...grpc.CallOption) (*fundsv1.ReturnFundsResponse, error) {
	out := new(fundsv1.ReturnFundsResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ReturnFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchFunds(ctx context.Context, in *fundsv1.SearchFundsRequest, opts ...grpc.CallOption) (*fundsv1.SearchFundsResponse, error) {
	out := new(fundsv1.SearchFundsResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) InitializeWidget(ctx context.Context, in *instrumentv1.InitializeWidgetRequest, opts ...grpc.CallOption) (*instrumentv1.InitializeWidgetResponse, error) {
	out := new(instrumentv1.InitializeWidgetResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/InitializeWidget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ExchangeSessionKey(ctx context.Context, in *instrumentv1.ExchangeSessionKeyRequest, opts ...grpc.CallOption) (*instrumentv1.ExchangeSessionKeyResponse, error) {
	out := new(instrumentv1.ExchangeSessionKeyResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ExchangeSessionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerToMicaServiceServer is the server API for PartnerToMicaService service.
// All implementations must embed UnimplementedPartnerToMicaServiceServer
// for forward compatibility
type PartnerToMicaServiceServer interface {
	Authenticate(context.Context, *authenticatev1.AuthenticateRequest) (*authenticatev1.AuthenticateResponse, error)
	GetPartner(context.Context, *partnerv1.GetPartnerRequest) (*partnerv1.GetPartnerResponse, error)
	CreateServiceAccount(context.Context, *serviceaccountv1.CreateServiceAccountRequest) (*serviceaccountv1.CreateServiceAccountResponse, error)
	GetServiceAccount(context.Context, *serviceaccountv1.GetServiceAccountRequest) (*serviceaccountv1.GetServiceAccountResponse, error)
	UpdateServiceAccount(context.Context, *serviceaccountv1.UpdateServiceAccountRequest) (*serviceaccountv1.UpdateServiceAccountResponse, error)
	SearchServiceAccount(context.Context, *serviceaccountv1.SearchServiceAccountRequest) (*serviceaccountv1.SearchServiceAccountResponse, error)
	GetOrganization(context.Context, *organizationv1.GetOrganizationRequest) (*organizationv1.GetOrganizationResponse, error)
	UpdateOrganization(context.Context, *organizationv1.UpdateOrganizationRequest) (*organizationv1.UpdateOrganizationResponse, error)
	SearchOrganization(context.Context, *organizationv1.SearchOrganizationRequest) (*organizationv1.SearchOrganizationResponse, error)
	CreateStore(context.Context, *storev1.CreateStoreRequest) (*storev1.CreateStoreResponse, error)
	GetStore(context.Context, *storev1.GetStoreRequest) (*storev1.GetStoreResponse, error)
	UpdateStore(context.Context, *storev1.UpdateStoreRequest) (*storev1.UpdateStoreResponse, error)
	RemoveStore(context.Context, *storev1.RemoveStoreRequest) (*storev1.RemoveStoreResponse, error)
	SearchStore(context.Context, *storev1.SearchStoreRequest) (*storev1.SearchStoreResponse, error)
	SearchSP(context.Context, *spv1.SearchSPRequest) (*spv1.SearchSPResponse, error)
	ClosePaymentToken(context.Context, *paymenttokenv1.RemovePaymentTokenRequest) (*paymenttokenv1.RemovePaymentTokenResponse, error)
	ReplacePaymentToken(context.Context, *paymenttokenv1.ExchangePaymentTokenRequest) (*paymenttokenv1.ExchangePaymentTokenResponse, error)
	SearchPaymentToken(context.Context, *paymenttokenv1.SearchPaymentTokenRequest) (*paymenttokenv1.SearchPaymentTokenResponse, error)
	ObtainFunds(context.Context, *fundsv1.ObtainFundsRequest) (*fundsv1.ObtainFundsResponse, error)
	ReturnFunds(context.Context, *fundsv1.ReturnFundsRequest) (*fundsv1.ReturnFundsResponse, error)
	SearchFunds(context.Context, *fundsv1.SearchFundsRequest) (*fundsv1.SearchFundsResponse, error)
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
	InitializeWidget(context.Context, *instrumentv1.InitializeWidgetRequest) (*instrumentv1.InitializeWidgetResponse, error)
	ExchangeSessionKey(context.Context, *instrumentv1.ExchangeSessionKeyRequest) (*instrumentv1.ExchangeSessionKeyResponse, error)
	mustEmbedUnimplementedPartnerToMicaServiceServer()
}

// UnimplementedPartnerToMicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerToMicaServiceServer struct {
}

func (UnimplementedPartnerToMicaServiceServer) Authenticate(context.Context, *authenticatev1.AuthenticateRequest) (*authenticatev1.AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetPartner(context.Context, *partnerv1.GetPartnerRequest) (*partnerv1.GetPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartner not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) CreateServiceAccount(context.Context, *serviceaccountv1.CreateServiceAccountRequest) (*serviceaccountv1.CreateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccount not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetServiceAccount(context.Context, *serviceaccountv1.GetServiceAccountRequest) (*serviceaccountv1.GetServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccount not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateServiceAccount(context.Context, *serviceaccountv1.UpdateServiceAccountRequest) (*serviceaccountv1.UpdateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceAccount not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchServiceAccount(context.Context, *serviceaccountv1.SearchServiceAccountRequest) (*serviceaccountv1.SearchServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServiceAccount not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetOrganization(context.Context, *organizationv1.GetOrganizationRequest) (*organizationv1.GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateOrganization(context.Context, *organizationv1.UpdateOrganizationRequest) (*organizationv1.UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchOrganization(context.Context, *organizationv1.SearchOrganizationRequest) (*organizationv1.SearchOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) CreateStore(context.Context, *storev1.CreateStoreRequest) (*storev1.CreateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetStore(context.Context, *storev1.GetStoreRequest) (*storev1.GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateStore(context.Context, *storev1.UpdateStoreRequest) (*storev1.UpdateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) RemoveStore(context.Context, *storev1.RemoveStoreRequest) (*storev1.RemoveStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchStore(context.Context, *storev1.SearchStoreRequest) (*storev1.SearchStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchSP(context.Context, *spv1.SearchSPRequest) (*spv1.SearchSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSP not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ClosePaymentToken(context.Context, *paymenttokenv1.RemovePaymentTokenRequest) (*paymenttokenv1.RemovePaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePaymentToken not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ReplacePaymentToken(context.Context, *paymenttokenv1.ExchangePaymentTokenRequest) (*paymenttokenv1.ExchangePaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplacePaymentToken not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchPaymentToken(context.Context, *paymenttokenv1.SearchPaymentTokenRequest) (*paymenttokenv1.SearchPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPaymentToken not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ObtainFunds(context.Context, *fundsv1.ObtainFundsRequest) (*fundsv1.ObtainFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtainFunds not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ReturnFunds(context.Context, *fundsv1.ReturnFundsRequest) (*fundsv1.ReturnFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnFunds not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchFunds(context.Context, *fundsv1.SearchFundsRequest) (*fundsv1.SearchFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFunds not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) InitializeWidget(context.Context, *instrumentv1.InitializeWidgetRequest) (*instrumentv1.InitializeWidgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeWidget not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ExchangeSessionKey(context.Context, *instrumentv1.ExchangeSessionKeyRequest) (*instrumentv1.ExchangeSessionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeSessionKey not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) mustEmbedUnimplementedPartnerToMicaServiceServer() {}

// UnsafePartnerToMicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerToMicaServiceServer will
// result in compilation errors.
type UnsafePartnerToMicaServiceServer interface {
	mustEmbedUnimplementedPartnerToMicaServiceServer()
}

func RegisterPartnerToMicaServiceServer(s grpc.ServiceRegistrar, srv PartnerToMicaServiceServer) {
	s.RegisterService(&PartnerToMicaService_ServiceDesc, srv)
}

func _PartnerToMicaService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authenticatev1.AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).Authenticate(ctx, req.(*authenticatev1.AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(partnerv1.GetPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetPartner(ctx, req.(*partnerv1.GetPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/CreateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).CreateServiceAccount(ctx, req.(*serviceaccountv1.CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.GetServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetServiceAccount(ctx, req.(*serviceaccountv1.GetServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.UpdateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/UpdateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateServiceAccount(ctx, req.(*serviceaccountv1.UpdateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceaccountv1.SearchServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchServiceAccount(ctx, req.(*serviceaccountv1.SearchServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetOrganization(ctx, req.(*organizationv1.GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateOrganization(ctx, req.(*organizationv1.UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.SearchOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchOrganization(ctx, req.(*organizationv1.SearchOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/CreateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).CreateStore(ctx, req.(*storev1.CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetStore(ctx, req.(*storev1.GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/UpdateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateStore(ctx, req.(*storev1.UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_RemoveStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.RemoveStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).RemoveStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/RemoveStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).RemoveStore(ctx, req.(*storev1.RemoveStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.SearchStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchStore(ctx, req.(*storev1.SearchStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spv1.SearchSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchSP(ctx, req.(*spv1.SearchSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ClosePaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.RemovePaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ClosePaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ClosePaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ClosePaymentToken(ctx, req.(*paymenttokenv1.RemovePaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ReplacePaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.ExchangePaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ReplacePaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ReplacePaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ReplacePaymentToken(ctx, req.(*paymenttokenv1.ExchangePaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.SearchPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchPaymentToken(ctx, req.(*paymenttokenv1.SearchPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ObtainFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fundsv1.ObtainFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ObtainFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ObtainFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ObtainFunds(ctx, req.(*fundsv1.ObtainFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ReturnFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fundsv1.ReturnFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ReturnFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ReturnFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ReturnFunds(ctx, req.(*fundsv1.ReturnFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(fundsv1.SearchFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchFunds(ctx, req.(*fundsv1.SearchFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_InitializeWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.InitializeWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).InitializeWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/InitializeWidget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).InitializeWidget(ctx, req.(*instrumentv1.InitializeWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ExchangeSessionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.ExchangeSessionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ExchangeSessionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ExchangeSessionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ExchangeSessionKey(ctx, req.(*instrumentv1.ExchangeSessionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerToMicaService_ServiceDesc is the grpc.ServiceDesc for PartnerToMicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerToMicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partner.service.v1.PartnerToMicaService",
	HandlerType: (*PartnerToMicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _PartnerToMicaService_Authenticate_Handler,
		},
		{
			MethodName: "GetPartner",
			Handler:    _PartnerToMicaService_GetPartner_Handler,
		},
		{
			MethodName: "CreateServiceAccount",
			Handler:    _PartnerToMicaService_CreateServiceAccount_Handler,
		},
		{
			MethodName: "GetServiceAccount",
			Handler:    _PartnerToMicaService_GetServiceAccount_Handler,
		},
		{
			MethodName: "UpdateServiceAccount",
			Handler:    _PartnerToMicaService_UpdateServiceAccount_Handler,
		},
		{
			MethodName: "SearchServiceAccount",
			Handler:    _PartnerToMicaService_SearchServiceAccount_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _PartnerToMicaService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _PartnerToMicaService_UpdateOrganization_Handler,
		},
		{
			MethodName: "SearchOrganization",
			Handler:    _PartnerToMicaService_SearchOrganization_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _PartnerToMicaService_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _PartnerToMicaService_GetStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _PartnerToMicaService_UpdateStore_Handler,
		},
		{
			MethodName: "RemoveStore",
			Handler:    _PartnerToMicaService_RemoveStore_Handler,
		},
		{
			MethodName: "SearchStore",
			Handler:    _PartnerToMicaService_SearchStore_Handler,
		},
		{
			MethodName: "SearchSP",
			Handler:    _PartnerToMicaService_SearchSP_Handler,
		},
		{
			MethodName: "ClosePaymentToken",
			Handler:    _PartnerToMicaService_ClosePaymentToken_Handler,
		},
		{
			MethodName: "ReplacePaymentToken",
			Handler:    _PartnerToMicaService_ReplacePaymentToken_Handler,
		},
		{
			MethodName: "SearchPaymentToken",
			Handler:    _PartnerToMicaService_SearchPaymentToken_Handler,
		},
		{
			MethodName: "ObtainFunds",
			Handler:    _PartnerToMicaService_ObtainFunds_Handler,
		},
		{
			MethodName: "ReturnFunds",
			Handler:    _PartnerToMicaService_ReturnFunds_Handler,
		},
		{
			MethodName: "SearchFunds",
			Handler:    _PartnerToMicaService_SearchFunds_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _PartnerToMicaService_Ping_Handler,
		},
		{
			MethodName: "InitializeWidget",
			Handler:    _PartnerToMicaService_InitializeWidget_Handler,
		},
		{
			MethodName: "ExchangeSessionKey",
			Handler:    _PartnerToMicaService_ExchangeSessionKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "partner/service/v1/partner_to_mica_service.proto",
}
