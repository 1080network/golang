// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/line_item.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	lineitemstatusv1 "github.com/1080network/golang/discount/proto/common/enums/lineitemstatusv1"

	unitv1 "github.com/1080network/golang/discount/proto/common/enums/unitv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = lineitemstatusv1.LineItemStatus(0)

	_ = unitv1.Unit(0)
)

// Validate checks the field values on LineItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LineItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LineItemMultiError, or nil
// if none found.
func (m *LineItem) ValidateAll() error {
	return m.validate(true)
}

func (m *LineItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	// no validation rules for LineItemGroup

	// no validation rules for ProductCode

	// no validation rules for Description

	// no validation rules for Quantity

	// no validation rules for Unit

	// no validation rules for UnitAmount

	// no validation rules for UnitTaxAmount

	// no validation rules for LineAmount

	// no validation rules for LineTaxAmount

	if len(errors) > 0 {
		return LineItemMultiError(errors)
	}

	return nil
}

// LineItemMultiError is an error wrapping multiple validation errors returned
// by LineItem.ValidateAll() if the designated constraints aren't met.
type LineItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineItemMultiError) AllErrors() []error { return m }

// LineItemValidationError is the validation error returned by
// LineItem.Validate if the designated constraints aren't met.
type LineItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineItemValidationError) ErrorName() string { return "LineItemValidationError" }

// Error satisfies the builtin error interface
func (e LineItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineItemValidationError{}

// Validate checks the field values on LineItemWrapper with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LineItemWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineItemWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LineItemWrapperMultiError, or nil if none found.
func (m *LineItemWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *LineItemWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LineItemWrapperValidationError{
						field:  fmt.Sprintf("LineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LineItemWrapperValidationError{
						field:  fmt.Sprintf("LineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LineItemWrapperValidationError{
					field:  fmt.Sprintf("LineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LineItemWrapperMultiError(errors)
	}

	return nil
}

// LineItemWrapperMultiError is an error wrapping multiple validation errors
// returned by LineItemWrapper.ValidateAll() if the designated constraints
// aren't met.
type LineItemWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineItemWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineItemWrapperMultiError) AllErrors() []error { return m }

// LineItemWrapperValidationError is the validation error returned by
// LineItemWrapper.Validate if the designated constraints aren't met.
type LineItemWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineItemWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineItemWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineItemWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineItemWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineItemWrapperValidationError) ErrorName() string { return "LineItemWrapperValidationError" }

// Error satisfies the builtin error interface
func (e LineItemWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineItemWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineItemWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineItemWrapperValidationError{}

// Validate checks the field values on Adjustment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Adjustment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Adjustment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdjustmentMultiError, or
// nil if none found.
func (m *Adjustment) ValidateAll() error {
	return m.validate(true)
}

func (m *Adjustment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	// no validation rules for AdjustmentType

	// no validation rules for ProductCode

	// no validation rules for Description

	// no validation rules for Quantity

	// no validation rules for Unit

	// no validation rules for UnitAmount

	// no validation rules for UnitTaxAmount

	// no validation rules for LineAmount

	// no validation rules for LineTaxAmount

	if len(errors) > 0 {
		return AdjustmentMultiError(errors)
	}

	return nil
}

// AdjustmentMultiError is an error wrapping multiple validation errors
// returned by Adjustment.ValidateAll() if the designated constraints aren't met.
type AdjustmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdjustmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdjustmentMultiError) AllErrors() []error { return m }

// AdjustmentValidationError is the validation error returned by
// Adjustment.Validate if the designated constraints aren't met.
type AdjustmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdjustmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdjustmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdjustmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdjustmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdjustmentValidationError) ErrorName() string { return "AdjustmentValidationError" }

// Error satisfies the builtin error interface
func (e AdjustmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdjustment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdjustmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdjustmentValidationError{}

// Validate checks the field values on LineItemSequenceAndStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LineItemSequenceAndStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineItemSequenceAndStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LineItemSequenceAndStatusMultiError, or nil if none found.
func (m *LineItemSequenceAndStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *LineItemSequenceAndStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	// no validation rules for Status

	if len(errors) > 0 {
		return LineItemSequenceAndStatusMultiError(errors)
	}

	return nil
}

// LineItemSequenceAndStatusMultiError is an error wrapping multiple validation
// errors returned by LineItemSequenceAndStatus.ValidateAll() if the
// designated constraints aren't met.
type LineItemSequenceAndStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineItemSequenceAndStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineItemSequenceAndStatusMultiError) AllErrors() []error { return m }

// LineItemSequenceAndStatusValidationError is the validation error returned by
// LineItemSequenceAndStatus.Validate if the designated constraints aren't met.
type LineItemSequenceAndStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineItemSequenceAndStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineItemSequenceAndStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineItemSequenceAndStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineItemSequenceAndStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineItemSequenceAndStatusValidationError) ErrorName() string {
	return "LineItemSequenceAndStatusValidationError"
}

// Error satisfies the builtin error interface
func (e LineItemSequenceAndStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineItemSequenceAndStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineItemSequenceAndStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineItemSequenceAndStatusValidationError{}

// Validate checks the field values on LineItemSequenceAndStatusValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LineItemSequenceAndStatusValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineItemSequenceAndStatusValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LineItemSequenceAndStatusValueMultiError, or nil if none found.
func (m *LineItemSequenceAndStatusValue) ValidateAll() error {
	return m.validate(true)
}

func (m *LineItemSequenceAndStatusValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLineItemSequenceAndStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LineItemSequenceAndStatusValueValidationError{
						field:  fmt.Sprintf("LineItemSequenceAndStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LineItemSequenceAndStatusValueValidationError{
						field:  fmt.Sprintf("LineItemSequenceAndStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LineItemSequenceAndStatusValueValidationError{
					field:  fmt.Sprintf("LineItemSequenceAndStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LineItemSequenceAndStatusValueMultiError(errors)
	}

	return nil
}

// LineItemSequenceAndStatusValueMultiError is an error wrapping multiple
// validation errors returned by LineItemSequenceAndStatusValue.ValidateAll()
// if the designated constraints aren't met.
type LineItemSequenceAndStatusValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineItemSequenceAndStatusValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineItemSequenceAndStatusValueMultiError) AllErrors() []error { return m }

// LineItemSequenceAndStatusValueValidationError is the validation error
// returned by LineItemSequenceAndStatusValue.Validate if the designated
// constraints aren't met.
type LineItemSequenceAndStatusValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineItemSequenceAndStatusValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineItemSequenceAndStatusValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineItemSequenceAndStatusValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineItemSequenceAndStatusValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineItemSequenceAndStatusValueValidationError) ErrorName() string {
	return "LineItemSequenceAndStatusValueValidationError"
}

// Error satisfies the builtin error interface
func (e LineItemSequenceAndStatusValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineItemSequenceAndStatusValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineItemSequenceAndStatusValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineItemSequenceAndStatusValueValidationError{}

// Validate checks the field values on LineItemAndStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LineItemAndStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineItemAndStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LineItemAndStatusMultiError, or nil if none found.
func (m *LineItemAndStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *LineItemAndStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLineItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LineItemAndStatusValidationError{
					field:  "LineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LineItemAndStatusValidationError{
					field:  "LineItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLineItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LineItemAndStatusValidationError{
				field:  "LineItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return LineItemAndStatusMultiError(errors)
	}

	return nil
}

// LineItemAndStatusMultiError is an error wrapping multiple validation errors
// returned by LineItemAndStatus.ValidateAll() if the designated constraints
// aren't met.
type LineItemAndStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineItemAndStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineItemAndStatusMultiError) AllErrors() []error { return m }

// LineItemAndStatusValidationError is the validation error returned by
// LineItemAndStatus.Validate if the designated constraints aren't met.
type LineItemAndStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineItemAndStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineItemAndStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineItemAndStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineItemAndStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineItemAndStatusValidationError) ErrorName() string {
	return "LineItemAndStatusValidationError"
}

// Error satisfies the builtin error interface
func (e LineItemAndStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineItemAndStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineItemAndStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineItemAndStatusValidationError{}

// Validate checks the field values on LineItemResponseValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LineItemResponseValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineItemResponseValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LineItemResponseValueMultiError, or nil if none found.
func (m *LineItemResponseValue) ValidateAll() error {
	return m.validate(true)
}

func (m *LineItemResponseValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLineItemAndStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LineItemResponseValueValidationError{
						field:  fmt.Sprintf("LineItemAndStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LineItemResponseValueValidationError{
						field:  fmt.Sprintf("LineItemAndStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LineItemResponseValueValidationError{
					field:  fmt.Sprintf("LineItemAndStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LineItemResponseValueMultiError(errors)
	}

	return nil
}

// LineItemResponseValueMultiError is an error wrapping multiple validation
// errors returned by LineItemResponseValue.ValidateAll() if the designated
// constraints aren't met.
type LineItemResponseValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineItemResponseValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineItemResponseValueMultiError) AllErrors() []error { return m }

// LineItemResponseValueValidationError is the validation error returned by
// LineItemResponseValue.Validate if the designated constraints aren't met.
type LineItemResponseValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineItemResponseValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineItemResponseValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineItemResponseValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineItemResponseValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineItemResponseValueValidationError) ErrorName() string {
	return "LineItemResponseValueValidationError"
}

// Error satisfies the builtin error interface
func (e LineItemResponseValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineItemResponseValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineItemResponseValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineItemResponseValueValidationError{}
