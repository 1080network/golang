// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: discount/productgroup/v1/product_group.proto

package productgroupv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProductGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductGroupMultiError, or
// nil if none found.
func (m *ProductGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductGroupKey

	// no validation rules for Version

	// no validation rules for Name

	// no validation rules for ProductGroupRef

	if len(errors) > 0 {
		return ProductGroupMultiError(errors)
	}

	return nil
}

// ProductGroupMultiError is an error wrapping multiple validation errors
// returned by ProductGroup.ValidateAll() if the designated constraints aren't met.
type ProductGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductGroupMultiError) AllErrors() []error { return m }

// ProductGroupValidationError is the validation error returned by
// ProductGroup.Validate if the designated constraints aren't met.
type ProductGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductGroupValidationError) ErrorName() string { return "ProductGroupValidationError" }

// Error satisfies the builtin error interface
func (e ProductGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductGroupValidationError{}

// Validate checks the field values on CreateProductGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductGroupRequestMultiError, or nil if none found.
func (m *CreateProductGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductGroupRef

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateProductGroupRequestMultiError(errors)
	}

	return nil
}

// CreateProductGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateProductGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductGroupRequestMultiError) AllErrors() []error { return m }

// CreateProductGroupRequestValidationError is the validation error returned by
// CreateProductGroupRequest.Validate if the designated constraints aren't met.
type CreateProductGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductGroupRequestValidationError) ErrorName() string {
	return "CreateProductGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductGroupRequestValidationError{}

// Validate checks the field values on CreateProductGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductGroupResponseMultiError, or nil if none found.
func (m *CreateProductGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductGroupResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductGroupResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductGroupResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductGroupKey

	// no validation rules for Version

	if len(errors) > 0 {
		return CreateProductGroupResponseMultiError(errors)
	}

	return nil
}

// CreateProductGroupResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProductGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateProductGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductGroupResponseMultiError) AllErrors() []error { return m }

// CreateProductGroupResponseValidationError is the validation error returned
// by CreateProductGroupResponse.Validate if the designated constraints aren't met.
type CreateProductGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductGroupResponseValidationError) ErrorName() string {
	return "CreateProductGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductGroupResponseValidationError{}

// Validate checks the field values on GetProductGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductGroupRequestMultiError, or nil if none found.
func (m *GetProductGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductGroupKey

	if len(errors) > 0 {
		return GetProductGroupRequestMultiError(errors)
	}

	return nil
}

// GetProductGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductGroupRequestMultiError) AllErrors() []error { return m }

// GetProductGroupRequestValidationError is the validation error returned by
// GetProductGroupRequest.Validate if the designated constraints aren't met.
type GetProductGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductGroupRequestValidationError) ErrorName() string {
	return "GetProductGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductGroupRequestValidationError{}

// Validate checks the field values on GetProductGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductGroupResponseMultiError, or nil if none found.
func (m *GetProductGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductGroupResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductGroupResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductGroupResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProductGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductGroupResponseValidationError{
					field:  "ProductGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductGroupResponseValidationError{
					field:  "ProductGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductGroupResponseValidationError{
				field:  "ProductGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductGroupResponseMultiError(errors)
	}

	return nil
}

// GetProductGroupResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductGroupResponseMultiError) AllErrors() []error { return m }

// GetProductGroupResponseValidationError is the validation error returned by
// GetProductGroupResponse.Validate if the designated constraints aren't met.
type GetProductGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductGroupResponseValidationError) ErrorName() string {
	return "GetProductGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductGroupResponseValidationError{}

// Validate checks the field values on UpdateProductGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductGroupRequestMultiError, or nil if none found.
func (m *UpdateProductGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductGroupKey

	if len(errors) > 0 {
		return UpdateProductGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateProductGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateProductGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductGroupRequestMultiError) AllErrors() []error { return m }

// UpdateProductGroupRequestValidationError is the validation error returned by
// UpdateProductGroupRequest.Validate if the designated constraints aren't met.
type UpdateProductGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductGroupRequestValidationError) ErrorName() string {
	return "UpdateProductGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductGroupRequestValidationError{}

// Validate checks the field values on UpdateProductGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductGroupResponseMultiError, or nil if none found.
func (m *UpdateProductGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductGroupResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductGroupResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductGroupResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdateProductGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateProductGroupResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProductGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductGroupResponseMultiError) AllErrors() []error { return m }

// UpdateProductGroupResponseValidationError is the validation error returned
// by UpdateProductGroupResponse.Validate if the designated constraints aren't met.
type UpdateProductGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductGroupResponseValidationError) ErrorName() string {
	return "UpdateProductGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductGroupResponseValidationError{}

// Validate checks the field values on RemoveProductGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProductGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProductGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProductGroupRequestMultiError, or nil if none found.
func (m *RemoveProductGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProductGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductGroupKey

	if len(errors) > 0 {
		return RemoveProductGroupRequestMultiError(errors)
	}

	return nil
}

// RemoveProductGroupRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveProductGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type RemoveProductGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProductGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProductGroupRequestMultiError) AllErrors() []error { return m }

// RemoveProductGroupRequestValidationError is the validation error returned by
// RemoveProductGroupRequest.Validate if the designated constraints aren't met.
type RemoveProductGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProductGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProductGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProductGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProductGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProductGroupRequestValidationError) ErrorName() string {
	return "RemoveProductGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProductGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProductGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProductGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProductGroupRequestValidationError{}

// Validate checks the field values on RemoveProductGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProductGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProductGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProductGroupResponseMultiError, or nil if none found.
func (m *RemoveProductGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProductGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveProductGroupResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveProductGroupResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveProductGroupResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveProductGroupResponseMultiError(errors)
	}

	return nil
}

// RemoveProductGroupResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveProductGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveProductGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProductGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProductGroupResponseMultiError) AllErrors() []error { return m }

// RemoveProductGroupResponseValidationError is the validation error returned
// by RemoveProductGroupResponse.Validate if the designated constraints aren't met.
type RemoveProductGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProductGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProductGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProductGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProductGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProductGroupResponseValidationError) ErrorName() string {
	return "RemoveProductGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProductGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProductGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProductGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProductGroupResponseValidationError{}
