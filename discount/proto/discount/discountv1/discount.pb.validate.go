// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: discount/discount/v1/discount.proto

package discountv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	currencyv1 "mica/proto/common/enums/currencyv1"

	unitv1 "mica/proto/common/enums/unitv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = currencyv1.Currency(0)

	_ = unitv1.Unit(0)
)

// Validate checks the field values on Discount with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Discount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Discount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiscountMultiError, or nil
// if none found.
func (m *Discount) ValidateAll() error {
	return m.validate(true)
}

func (m *Discount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountKey

	// no validation rules for Version

	// no validation rules for ExternalRef

	// no validation rules for ReceiptDescription

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	// no validation rules for DiscountAmount

	// no validation rules for DiscountTaxAmount

	// no validation rules for UserKey

	// no validation rules for UserRef

	for idx, item := range m.GetDiscountCriteria() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscountValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscountValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscountValidationError{
					field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiscountMultiError(errors)
	}

	return nil
}

// DiscountMultiError is an error wrapping multiple validation errors returned
// by Discount.ValidateAll() if the designated constraints aren't met.
type DiscountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountMultiError) AllErrors() []error { return m }

// DiscountValidationError is the validation error returned by
// Discount.Validate if the designated constraints aren't met.
type DiscountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountValidationError) ErrorName() string { return "DiscountValidationError" }

// Error satisfies the builtin error interface
func (e DiscountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountValidationError{}

// Validate checks the field values on Quantity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Quantity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Quantity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuantityMultiError, or nil
// if none found.
func (m *Quantity) ValidateAll() error {
	return m.validate(true)
}

func (m *Quantity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Quantity

	// no validation rules for Unit

	if len(errors) > 0 {
		return QuantityMultiError(errors)
	}

	return nil
}

// QuantityMultiError is an error wrapping multiple validation errors returned
// by Quantity.ValidateAll() if the designated constraints aren't met.
type QuantityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuantityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuantityMultiError) AllErrors() []error { return m }

// QuantityValidationError is the validation error returned by
// Quantity.Validate if the designated constraints aren't met.
type QuantityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuantityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuantityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuantityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuantityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuantityValidationError) ErrorName() string { return "QuantityValidationError" }

// Error satisfies the builtin error interface
func (e QuantityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuantity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuantityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuantityValidationError{}

// Validate checks the field values on DiscountCriteria with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiscountCriteria) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscountCriteria with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscountCriteriaMultiError, or nil if none found.
func (m *DiscountCriteria) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscountCriteria) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountCriteriaValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountCriteriaValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountCriteriaValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscountCriteriaMultiError(errors)
	}

	return nil
}

// DiscountCriteriaMultiError is an error wrapping multiple validation errors
// returned by DiscountCriteria.ValidateAll() if the designated constraints
// aren't met.
type DiscountCriteriaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountCriteriaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountCriteriaMultiError) AllErrors() []error { return m }

// DiscountCriteriaValidationError is the validation error returned by
// DiscountCriteria.Validate if the designated constraints aren't met.
type DiscountCriteriaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountCriteriaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountCriteriaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountCriteriaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountCriteriaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountCriteriaValidationError) ErrorName() string { return "DiscountCriteriaValidationError" }

// Error satisfies the builtin error interface
func (e DiscountCriteriaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscountCriteria.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountCriteriaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountCriteriaValidationError{}

// Validate checks the field values on CreateDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiscountRequestMultiError, or nil if none found.
func (m *CreateDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalRef

	// no validation rules for ReceiptDescription

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountRequestValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountRequestValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	// no validation rules for DiscountAmount

	// no validation rules for DiscountTaxAmount

	// no validation rules for UserKey

	// no validation rules for UserRef

	for idx, item := range m.GetDiscountCriteria() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDiscountRequestValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDiscountRequestValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDiscountRequestValidationError{
					field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDiscountRequestMultiError(errors)
	}

	return nil
}

// CreateDiscountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDiscountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountRequestMultiError) AllErrors() []error { return m }

// CreateDiscountRequestValidationError is the validation error returned by
// CreateDiscountRequest.Validate if the designated constraints aren't met.
type CreateDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountRequestValidationError) ErrorName() string {
	return "CreateDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountRequestValidationError{}

// Validate checks the field values on CreateDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiscountResponseMultiError, or nil if none found.
func (m *CreateDiscountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiscountKey

	// no validation rules for Version

	if len(errors) > 0 {
		return CreateDiscountResponseMultiError(errors)
	}

	return nil
}

// CreateDiscountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDiscountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountResponseMultiError) AllErrors() []error { return m }

// CreateDiscountResponseValidationError is the validation error returned by
// CreateDiscountResponse.Validate if the designated constraints aren't met.
type CreateDiscountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountResponseValidationError) ErrorName() string {
	return "CreateDiscountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountResponseValidationError{}

// Validate checks the field values on GetDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscountRequestMultiError, or nil if none found.
func (m *GetDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountKey

	if len(errors) > 0 {
		return GetDiscountRequestMultiError(errors)
	}

	return nil
}

// GetDiscountRequestMultiError is an error wrapping multiple validation errors
// returned by GetDiscountRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountRequestMultiError) AllErrors() []error { return m }

// GetDiscountRequestValidationError is the validation error returned by
// GetDiscountRequest.Validate if the designated constraints aren't met.
type GetDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountRequestValidationError) ErrorName() string {
	return "GetDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountRequestValidationError{}

// Validate checks the field values on GetDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscountResponseMultiError, or nil if none found.
func (m *GetDiscountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountResponseValidationError{
					field:  "Discount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountResponseValidationError{
					field:  "Discount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountResponseValidationError{
				field:  "Discount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDiscountResponseMultiError(errors)
	}

	return nil
}

// GetDiscountResponseMultiError is an error wrapping multiple validation
// errors returned by GetDiscountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDiscountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountResponseMultiError) AllErrors() []error { return m }

// GetDiscountResponseValidationError is the validation error returned by
// GetDiscountResponse.Validate if the designated constraints aren't met.
type GetDiscountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountResponseValidationError) ErrorName() string {
	return "GetDiscountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountResponseValidationError{}
