// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: discount/discountdefinition/v1/discount_definition.proto

package discountdefinitionv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	currencyv1 "mica/proto/common/enums/currencyv1"

	discountv1 "mica/proto/discount/discountv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = currencyv1.Currency(0)

	_ = discountv1.DiscountType(0)
)

// Validate checks the field values on DiscountDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscountDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscountDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscountDefinitionMultiError, or nil if none found.
func (m *DiscountDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscountDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountDefinitionKey

	// no validation rules for Version

	// no validation rules for DiscountDefinitionRef

	// no validation rules for ReceiptDescription

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountDefinitionValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountDefinitionValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountDefinitionValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountDefinitionValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountDefinitionValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountDefinitionValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDiscountCriteria() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscountDefinitionValidationError{
					field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Currency

	switch m.DiscountAmount.(type) {

	case *DiscountDefinition_Amount:

		if all {
			switch v := interface{}(m.GetAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  "Amount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  "Amount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscountDefinitionValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DiscountDefinition_Percentage:

		if all {
			switch v := interface{}(m.GetPercentage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  "Percentage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  "Percentage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscountDefinitionValidationError{
					field:  "Percentage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiscountDefinitionMultiError(errors)
	}

	return nil
}

// DiscountDefinitionMultiError is an error wrapping multiple validation errors
// returned by DiscountDefinition.ValidateAll() if the designated constraints
// aren't met.
type DiscountDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountDefinitionMultiError) AllErrors() []error { return m }

// DiscountDefinitionValidationError is the validation error returned by
// DiscountDefinition.Validate if the designated constraints aren't met.
type DiscountDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountDefinitionValidationError) ErrorName() string {
	return "DiscountDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e DiscountDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscountDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountDefinitionValidationError{}

// Validate checks the field values on CreateDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDiscountDefinitionRequestMultiError, or nil if none found.
func (m *CreateDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountDefinitionRef

	// no validation rules for ReceiptDescription

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountDefinitionRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountDefinitionRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountDefinitionRequestValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountDefinitionRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountDefinitionRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountDefinitionRequestValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDiscountCriteria() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDiscountDefinitionRequestValidationError{
					field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Currency

	switch m.DiscountAmount.(type) {

	case *CreateDiscountDefinitionRequest_Amount:

		if all {
			switch v := interface{}(m.GetAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  "Amount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  "Amount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDiscountDefinitionRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateDiscountDefinitionRequest_Percentage:

		if all {
			switch v := interface{}(m.GetPercentage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  "Percentage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  "Percentage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDiscountDefinitionRequestValidationError{
					field:  "Percentage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// CreateDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDiscountDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// CreateDiscountDefinitionRequestValidationError is the validation error
// returned by CreateDiscountDefinitionRequest.Validate if the designated
// constraints aren't met.
type CreateDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountDefinitionRequestValidationError) ErrorName() string {
	return "CreateDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountDefinitionRequestValidationError{}

// Validate checks the field values on CreateDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDiscountDefinitionResponseMultiError, or nil if none found.
func (m *CreateDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiscountDefinitionKey

	// no validation rules for Version

	if len(errors) > 0 {
		return CreateDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// CreateDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateDiscountDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// CreateDiscountDefinitionResponseValidationError is the validation error
// returned by CreateDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type CreateDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountDefinitionResponseValidationError) ErrorName() string {
	return "CreateDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountDefinitionResponseValidationError{}

// Validate checks the field values on GetDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscountDefinitionRequestMultiError, or nil if none found.
func (m *GetDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountDefinitionRef

	if len(errors) > 0 {
		return GetDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// GetDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by GetDiscountDefinitionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// GetDiscountDefinitionRequestValidationError is the validation error returned
// by GetDiscountDefinitionRequest.Validate if the designated constraints
// aren't met.
type GetDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountDefinitionRequestValidationError) ErrorName() string {
	return "GetDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountDefinitionRequestValidationError{}

// Validate checks the field values on GetDiscountDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDiscountDefinitionResponseMultiError, or nil if none found.
func (m *GetDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscountDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountDefinitionResponseValidationError{
					field:  "DiscountDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountDefinitionResponseValidationError{
					field:  "DiscountDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscountDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountDefinitionResponseValidationError{
				field:  "DiscountDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// GetDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by GetDiscountDefinitionResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// GetDiscountDefinitionResponseValidationError is the validation error
// returned by GetDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type GetDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountDefinitionResponseValidationError) ErrorName() string {
	return "GetDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountDefinitionResponseValidationError{}

// Validate checks the field values on UpdateDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDiscountDefinitionRequestMultiError, or nil if none found.
func (m *UpdateDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountDefinitionRef

	if len(errors) > 0 {
		return UpdateDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// UpdateDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDiscountDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// UpdateDiscountDefinitionRequestValidationError is the validation error
// returned by UpdateDiscountDefinitionRequest.Validate if the designated
// constraints aren't met.
type UpdateDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountDefinitionRequestValidationError) ErrorName() string {
	return "UpdateDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountDefinitionRequestValidationError{}

// Validate checks the field values on UpdateDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDiscountDefinitionResponseMultiError, or nil if none found.
func (m *UpdateDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdateDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// UpdateDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDiscountDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// UpdateDiscountDefinitionResponseValidationError is the validation error
// returned by UpdateDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type UpdateDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountDefinitionResponseValidationError) ErrorName() string {
	return "UpdateDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountDefinitionResponseValidationError{}

// Validate checks the field values on RemoveDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDiscountDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDiscountDefinitionRequestMultiError, or nil if none found.
func (m *RemoveDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountDefinitionRef

	if len(errors) > 0 {
		return RemoveDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// RemoveDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDiscountDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// RemoveDiscountDefinitionRequestValidationError is the validation error
// returned by RemoveDiscountDefinitionRequest.Validate if the designated
// constraints aren't met.
type RemoveDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDiscountDefinitionRequestValidationError) ErrorName() string {
	return "RemoveDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDiscountDefinitionRequestValidationError{}

// Validate checks the field values on RemoveDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDiscountDefinitionResponseMultiError, or nil if none found.
func (m *RemoveDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// RemoveDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveDiscountDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// RemoveDiscountDefinitionResponseValidationError is the validation error
// returned by RemoveDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type RemoveDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDiscountDefinitionResponseValidationError) ErrorName() string {
	return "RemoveDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDiscountDefinitionResponseValidationError{}
