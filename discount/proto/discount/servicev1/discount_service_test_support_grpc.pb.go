// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: discount/service/v1/discount_service_test_support.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscountTestSupportServiceClient is the client API for DiscountTestSupportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscountTestSupportServiceClient interface {
	// Determine which discount(s) can be applied to this transaction
	TestDetermineDiscount(ctx context.Context, in *DetermineDiscountRequest, opts ...grpc.CallOption) (*DetermineDiscountResponse, error)
	// Apply the discount(s) that were applicable to this transaction
	TestApplyDiscount(ctx context.Context, in *ApplyDiscountRequest, opts ...grpc.CallOption) (*ApplyDiscountResponse, error)
}

type discountTestSupportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountTestSupportServiceClient(cc grpc.ClientConnInterface) DiscountTestSupportServiceClient {
	return &discountTestSupportServiceClient{cc}
}

func (c *discountTestSupportServiceClient) TestDetermineDiscount(ctx context.Context, in *DetermineDiscountRequest, opts ...grpc.CallOption) (*DetermineDiscountResponse, error) {
	out := new(DetermineDiscountResponse)
	err := c.cc.Invoke(ctx, "/discount.service.v1.DiscountTestSupportService/TestDetermineDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountTestSupportServiceClient) TestApplyDiscount(ctx context.Context, in *ApplyDiscountRequest, opts ...grpc.CallOption) (*ApplyDiscountResponse, error) {
	out := new(ApplyDiscountResponse)
	err := c.cc.Invoke(ctx, "/discount.service.v1.DiscountTestSupportService/TestApplyDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountTestSupportServiceServer is the server API for DiscountTestSupportService service.
// All implementations must embed UnimplementedDiscountTestSupportServiceServer
// for forward compatibility
type DiscountTestSupportServiceServer interface {
	// Determine which discount(s) can be applied to this transaction
	TestDetermineDiscount(context.Context, *DetermineDiscountRequest) (*DetermineDiscountResponse, error)
	// Apply the discount(s) that were applicable to this transaction
	TestApplyDiscount(context.Context, *ApplyDiscountRequest) (*ApplyDiscountResponse, error)
	mustEmbedUnimplementedDiscountTestSupportServiceServer()
}

// UnimplementedDiscountTestSupportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiscountTestSupportServiceServer struct {
}

func (UnimplementedDiscountTestSupportServiceServer) TestDetermineDiscount(context.Context, *DetermineDiscountRequest) (*DetermineDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDetermineDiscount not implemented")
}
func (UnimplementedDiscountTestSupportServiceServer) TestApplyDiscount(context.Context, *ApplyDiscountRequest) (*ApplyDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestApplyDiscount not implemented")
}
func (UnimplementedDiscountTestSupportServiceServer) mustEmbedUnimplementedDiscountTestSupportServiceServer() {
}

// UnsafeDiscountTestSupportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscountTestSupportServiceServer will
// result in compilation errors.
type UnsafeDiscountTestSupportServiceServer interface {
	mustEmbedUnimplementedDiscountTestSupportServiceServer()
}

func RegisterDiscountTestSupportServiceServer(s grpc.ServiceRegistrar, srv DiscountTestSupportServiceServer) {
	s.RegisterService(&DiscountTestSupportService_ServiceDesc, srv)
}

func _DiscountTestSupportService_TestDetermineDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetermineDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountTestSupportServiceServer).TestDetermineDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.service.v1.DiscountTestSupportService/TestDetermineDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountTestSupportServiceServer).TestDetermineDiscount(ctx, req.(*DetermineDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountTestSupportService_TestApplyDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountTestSupportServiceServer).TestApplyDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.service.v1.DiscountTestSupportService/TestApplyDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountTestSupportServiceServer).TestApplyDiscount(ctx, req.(*ApplyDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscountTestSupportService_ServiceDesc is the grpc.ServiceDesc for DiscountTestSupportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscountTestSupportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discount.service.v1.DiscountTestSupportService",
	HandlerType: (*DiscountTestSupportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestDetermineDiscount",
			Handler:    _DiscountTestSupportService_TestDetermineDiscount_Handler,
		},
		{
			MethodName: "TestApplyDiscount",
			Handler:    _DiscountTestSupportService_TestApplyDiscount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discount/service/v1/discount_service_test_support.proto",
}
