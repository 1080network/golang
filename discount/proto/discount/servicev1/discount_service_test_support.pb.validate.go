// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: discount/service/v1/discount_service_test_support.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DetermineDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetermineDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetermineDiscountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetermineDiscountRequestMultiError, or nil if none found.
func (m *DetermineDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DetermineDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FederatedUserKey

	for idx, item := range m.GetLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DetermineDiscountRequestValidationError{
						field:  fmt.Sprintf("LineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DetermineDiscountRequestValidationError{
						field:  fmt.Sprintf("LineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DetermineDiscountRequestValidationError{
					field:  fmt.Sprintf("LineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DetermineDiscountRequestMultiError(errors)
	}

	return nil
}

// DetermineDiscountRequestMultiError is an error wrapping multiple validation
// errors returned by DetermineDiscountRequest.ValidateAll() if the designated
// constraints aren't met.
type DetermineDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetermineDiscountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetermineDiscountRequestMultiError) AllErrors() []error { return m }

// DetermineDiscountRequestValidationError is the validation error returned by
// DetermineDiscountRequest.Validate if the designated constraints aren't met.
type DetermineDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetermineDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetermineDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetermineDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetermineDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetermineDiscountRequestValidationError) ErrorName() string {
	return "DetermineDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DetermineDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetermineDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetermineDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetermineDiscountRequestValidationError{}

// Validate checks the field values on DetermineDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetermineDiscountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetermineDiscountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetermineDiscountResponseMultiError, or nil if none found.
func (m *DetermineDiscountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DetermineDiscountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetermineDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetermineDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetermineDiscountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DetermineDiscountResponseMultiError(errors)
	}

	return nil
}

// DetermineDiscountResponseMultiError is an error wrapping multiple validation
// errors returned by DetermineDiscountResponse.ValidateAll() if the
// designated constraints aren't met.
type DetermineDiscountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetermineDiscountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetermineDiscountResponseMultiError) AllErrors() []error { return m }

// DetermineDiscountResponseValidationError is the validation error returned by
// DetermineDiscountResponse.Validate if the designated constraints aren't met.
type DetermineDiscountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetermineDiscountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetermineDiscountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetermineDiscountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetermineDiscountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetermineDiscountResponseValidationError) ErrorName() string {
	return "DetermineDiscountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DetermineDiscountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetermineDiscountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetermineDiscountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetermineDiscountResponseValidationError{}

// Validate checks the field values on ApplyDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyDiscountRequestMultiError, or nil if none found.
func (m *ApplyDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApplyDiscountRequestMultiError(errors)
	}

	return nil
}

// ApplyDiscountRequestMultiError is an error wrapping multiple validation
// errors returned by ApplyDiscountRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplyDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyDiscountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyDiscountRequestMultiError) AllErrors() []error { return m }

// ApplyDiscountRequestValidationError is the validation error returned by
// ApplyDiscountRequest.Validate if the designated constraints aren't met.
type ApplyDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyDiscountRequestValidationError) ErrorName() string {
	return "ApplyDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyDiscountRequestValidationError{}

// Validate checks the field values on ApplyDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyDiscountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyDiscountResponseMultiError, or nil if none found.
func (m *ApplyDiscountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyDiscountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyDiscountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyDiscountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplyDiscountResponseMultiError(errors)
	}

	return nil
}

// ApplyDiscountResponseMultiError is an error wrapping multiple validation
// errors returned by ApplyDiscountResponse.ValidateAll() if the designated
// constraints aren't met.
type ApplyDiscountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyDiscountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyDiscountResponseMultiError) AllErrors() []error { return m }

// ApplyDiscountResponseValidationError is the validation error returned by
// ApplyDiscountResponse.Validate if the designated constraints aren't met.
type ApplyDiscountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyDiscountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyDiscountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyDiscountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyDiscountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyDiscountResponseValidationError) ErrorName() string {
	return "ApplyDiscountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyDiscountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyDiscountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyDiscountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyDiscountResponseValidationError{}
