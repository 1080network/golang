// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: micashared/common/v1/receipt.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	channelv1 "micashared/common/enums/channelv1"

	currencyv1 "micashared/common/enums/currencyv1"

	organizationcategoryv1 "micashared/common/enums/organizationcategoryv1"

	valueoperationtypev1 "micashared/common/enums/valueoperationtypev1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = channelv1.Channel(0)

	_ = currencyv1.Currency(0)

	_ = organizationcategoryv1.OrganizationCategory(0)

	_ = valueoperationtypev1.ValueOperationType(0)
)

// Validate checks the field values on Receipt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Receipt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Receipt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReceiptMultiError, or nil if none found.
func (m *Receipt) ValidateAll() error {
	return m.validate(true)
}

func (m *Receipt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTransactionKey()); l < 30 || l > 50 {
		err := ReceiptValidationError{
			field:  "TransactionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiptValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiptValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiptValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiptValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiptValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiptValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperationType

	// no validation rules for PartnerTransactionRef

	if l := utf8.RuneCountInString(m.GetServiceProviderInstrumentKey()); l < 30 || l > 50 {
		err := ReceiptValidationError{
			field:  "ServiceProviderInstrumentKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceProviderInstrumentRef

	// no validation rules for Channel

	// no validation rules for Currency

	if l := utf8.RuneCountInString(m.GetOrganizationKey()); l < 30 || l > 50 {
		err := ReceiptValidationError{
			field:  "OrganizationKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrganizationName

	if all {
		switch v := interface{}(m.GetOrganizationAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiptValidationError{
					field:  "OrganizationAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiptValidationError{
					field:  "OrganizationAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiptValidationError{
				field:  "OrganizationAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Category

	if l := utf8.RuneCountInString(m.GetStoreKey()); l < 30 || l > 50 {
		err := ReceiptValidationError{
			field:  "StoreKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StoreNumber

	if all {
		switch v := interface{}(m.GetStoreAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiptValidationError{
					field:  "StoreAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiptValidationError{
					field:  "StoreAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoreAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiptValidationError{
				field:  "StoreAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClerkIdentifier

	// no validation rules for TotalAmount

	// no validation rules for RequestedAmount

	// no validation rules for ApprovedAmount

	// no validation rules for OrderNumber

	for idx, item := range m.GetLineItemAndStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiptValidationError{
						field:  fmt.Sprintf("LineItemAndStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiptValidationError{
						field:  fmt.Sprintf("LineItemAndStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiptValidationError{
					field:  fmt.Sprintf("LineItemAndStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAppliedDiscounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiptValidationError{
						field:  fmt.Sprintf("AppliedDiscounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiptValidationError{
						field:  fmt.Sprintf("AppliedDiscounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiptValidationError{
					field:  fmt.Sprintf("AppliedDiscounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAdjustments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiptValidationError{
						field:  fmt.Sprintf("Adjustments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiptValidationError{
						field:  fmt.Sprintf("Adjustments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiptValidationError{
					field:  fmt.Sprintf("Adjustments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReceiptMultiError(errors)
	}

	return nil
}

// ReceiptMultiError is an error wrapping multiple validation errors returned
// by Receipt.ValidateAll() if the designated constraints aren't met.
type ReceiptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiptMultiError) AllErrors() []error { return m }

// ReceiptValidationError is the validation error returned by Receipt.Validate
// if the designated constraints aren't met.
type ReceiptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiptValidationError) ErrorName() string { return "ReceiptValidationError" }

// Error satisfies the builtin error interface
func (e ReceiptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceipt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiptValidationError{}

// Validate checks the field values on GetReceiptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReceiptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceiptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceiptRequestMultiError, or nil if none found.
func (m *GetReceiptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceiptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTransactionKey()); l < 30 || l > 50 {
		err := GetReceiptRequestValidationError{
			field:  "TransactionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReceiptRequestMultiError(errors)
	}

	return nil
}

// GetReceiptRequestMultiError is an error wrapping multiple validation errors
// returned by GetReceiptRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReceiptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceiptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceiptRequestMultiError) AllErrors() []error { return m }

// GetReceiptRequestValidationError is the validation error returned by
// GetReceiptRequest.Validate if the designated constraints aren't met.
type GetReceiptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceiptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceiptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceiptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceiptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceiptRequestValidationError) ErrorName() string {
	return "GetReceiptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceiptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceiptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceiptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceiptRequestValidationError{}

// Validate checks the field values on GetReceiptResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceiptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceiptResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceiptResponseMultiError, or nil if none found.
func (m *GetReceiptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceiptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceiptResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceiptResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceiptResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceipt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceiptResponseValidationError{
					field:  "Receipt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceiptResponseValidationError{
					field:  "Receipt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceipt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceiptResponseValidationError{
				field:  "Receipt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceiptResponseMultiError(errors)
	}

	return nil
}

// GetReceiptResponseMultiError is an error wrapping multiple validation errors
// returned by GetReceiptResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReceiptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceiptResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceiptResponseMultiError) AllErrors() []error { return m }

// GetReceiptResponseValidationError is the validation error returned by
// GetReceiptResponse.Validate if the designated constraints aren't met.
type GetReceiptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceiptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceiptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceiptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceiptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceiptResponseValidationError) ErrorName() string {
	return "GetReceiptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceiptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceiptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceiptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceiptResponseValidationError{}
