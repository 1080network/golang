// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mica/discount/discountdefinition/v1/discount_definition.proto

package discountdefinitionv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	currencyv1 "micashared/common/enums/currencyv1"

	discounttypev1 "micashared/common/enums/discounttypev1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = currencyv1.Currency(0)

	_ = discounttypev1.DiscountType(0)
)

// Validate checks the field values on DiscountDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscountDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscountDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscountDefinitionMultiError, or nil if none found.
func (m *DiscountDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscountDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDiscountDefinitionKey()); l < 30 || l > 50 {
		err := DiscountDefinitionValidationError{
			field:  "DiscountDefinitionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVersion() < 0 {
		err := DiscountDefinitionValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountDefinitionValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountDefinitionValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountDefinitionValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountDefinitionValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountDefinitionValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountDefinitionValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetDiscountDefinitionRef()); l < 1 || l > 50 {
		err := DiscountDefinitionValidationError{
			field:  "DiscountDefinitionRef",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
		err := DiscountDefinitionValidationError{
			field:  "DiscountProviderAccountRef",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHeadline()) > 100 {
		err := DiscountDefinitionValidationError{
			field:  "Headline",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSummary()) > 300 {
		err := DiscountDefinitionValidationError{
			field:  "Summary",
			reason: "value length must be at most 300 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiptDescription()) > 100 {
		err := DiscountDefinitionValidationError{
			field:  "ReceiptDescription",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Type

	if m.GetValidFrom() == nil {
		err := DiscountDefinitionValidationError{
			field:  "ValidFrom",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetValidTo(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = DiscountDefinitionValidationError{
				field:  "ValidTo",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := DiscountDefinitionValidationError{
					field:  "ValidTo",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(m.GetDiscountCriteria()) < 1 {
		err := DiscountDefinitionValidationError{
			field:  "DiscountCriteria",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDiscountCriteria() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscountDefinitionValidationError{
					field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Currency

	if utf8.RuneCountInString(m.GetThumbnailUrl()) > 300 {
		err := DiscountDefinitionValidationError{
			field:  "ThumbnailUrl",
			reason: "value length must be at most 300 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.DiscountAmount.(type) {
	case *DiscountDefinition_MonetaryAmount:
		if v == nil {
			err := DiscountDefinitionValidationError{
				field:  "DiscountAmount",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMonetaryAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  "MonetaryAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  "MonetaryAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMonetaryAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscountDefinitionValidationError{
					field:  "MonetaryAmount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DiscountDefinition_PercentageAmount:
		if v == nil {
			err := DiscountDefinitionValidationError{
				field:  "DiscountAmount",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPercentageAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  "PercentageAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscountDefinitionValidationError{
						field:  "PercentageAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPercentageAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscountDefinitionValidationError{
					field:  "PercentageAmount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DiscountDefinitionMultiError(errors)
	}

	return nil
}

// DiscountDefinitionMultiError is an error wrapping multiple validation errors
// returned by DiscountDefinition.ValidateAll() if the designated constraints
// aren't met.
type DiscountDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountDefinitionMultiError) AllErrors() []error { return m }

// DiscountDefinitionValidationError is the validation error returned by
// DiscountDefinition.Validate if the designated constraints aren't met.
type DiscountDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountDefinitionValidationError) ErrorName() string {
	return "DiscountDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e DiscountDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscountDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountDefinitionValidationError{}

// Validate checks the field values on CreateDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDiscountDefinitionRequestMultiError, or nil if none found.
func (m *CreateDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDiscountDefinitionRef()); l < 1 || l > 50 {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "DiscountDefinitionRef",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "DiscountProviderAccountRef",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHeadline()) > 100 {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "Headline",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSummary()) > 300 {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "Summary",
			reason: "value length must be at most 300 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiptDescription()) > 100 {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "ReceiptDescription",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateDiscountDefinitionRequest_Status_NotInLookup[m.GetStatus()]; ok {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "Status",
			reason: "value must not be in list [DISCOUNT_DEFINITION_STATUS_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if m.GetValidFrom() == nil {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "ValidFrom",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetValidTo(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = CreateDiscountDefinitionRequestValidationError{
				field:  "ValidTo",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := CreateDiscountDefinitionRequestValidationError{
					field:  "ValidTo",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(m.GetDiscountCriteria()) < 1 {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "DiscountCriteria",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDiscountCriteria() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDiscountDefinitionRequestValidationError{
					field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Currency

	if utf8.RuneCountInString(m.GetThumbnailUrl()) > 300 {
		err := CreateDiscountDefinitionRequestValidationError{
			field:  "ThumbnailUrl",
			reason: "value length must be at most 300 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.DiscountAmount.(type) {
	case *CreateDiscountDefinitionRequest_MonetaryAmount:
		if v == nil {
			err := CreateDiscountDefinitionRequestValidationError{
				field:  "DiscountAmount",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMonetaryAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  "MonetaryAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  "MonetaryAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMonetaryAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDiscountDefinitionRequestValidationError{
					field:  "MonetaryAmount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateDiscountDefinitionRequest_PercentageAmount:
		if v == nil {
			err := CreateDiscountDefinitionRequestValidationError{
				field:  "DiscountAmount",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPercentageAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  "PercentageAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDiscountDefinitionRequestValidationError{
						field:  "PercentageAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPercentageAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDiscountDefinitionRequestValidationError{
					field:  "PercentageAmount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// CreateDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDiscountDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// CreateDiscountDefinitionRequestValidationError is the validation error
// returned by CreateDiscountDefinitionRequest.Validate if the designated
// constraints aren't met.
type CreateDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountDefinitionRequestValidationError) ErrorName() string {
	return "CreateDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountDefinitionRequestValidationError{}

var _CreateDiscountDefinitionRequest_Status_NotInLookup = map[DiscountDefinitionStatus]struct{}{
	0: {},
}

// Validate checks the field values on CreateDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDiscountDefinitionResponseMultiError, or nil if none found.
func (m *CreateDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiscountDefinitionKey

	if m.GetVersion() < 0 {
		err := CreateDiscountDefinitionResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// CreateDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateDiscountDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// CreateDiscountDefinitionResponseValidationError is the validation error
// returned by CreateDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type CreateDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountDefinitionResponseValidationError) ErrorName() string {
	return "CreateDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountDefinitionResponseValidationError{}

// Validate checks the field values on GetDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscountDefinitionRequestMultiError, or nil if none found.
func (m *GetDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.DiscountDefinitionIdentifier.(type) {
	case *GetDiscountDefinitionRequest_DiscountDefinitionRef:
		if v == nil {
			err := GetDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountDefinitionRef()); l < 1 || l > 50 {
			err := GetDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionRef",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetDiscountDefinitionRequest_DiscountDefinitionKey:
		if v == nil {
			err := GetDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountDefinitionKey()); l < 30 || l > 50 {
			err := GetDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// GetDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by GetDiscountDefinitionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// GetDiscountDefinitionRequestValidationError is the validation error returned
// by GetDiscountDefinitionRequest.Validate if the designated constraints
// aren't met.
type GetDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountDefinitionRequestValidationError) ErrorName() string {
	return "GetDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountDefinitionRequestValidationError{}

// Validate checks the field values on GetDiscountDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDiscountDefinitionResponseMultiError, or nil if none found.
func (m *GetDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscountDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountDefinitionResponseValidationError{
					field:  "DiscountDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountDefinitionResponseValidationError{
					field:  "DiscountDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscountDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountDefinitionResponseValidationError{
				field:  "DiscountDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// GetDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by GetDiscountDefinitionResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// GetDiscountDefinitionResponseValidationError is the validation error
// returned by GetDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type GetDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountDefinitionResponseValidationError) ErrorName() string {
	return "GetDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountDefinitionResponseValidationError{}

// Validate checks the field values on UpdateDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDiscountDefinitionRequestMultiError, or nil if none found.
func (m *UpdateDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVersion() < 0 {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "DiscountProviderAccountRef",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHeadline()) > 100 {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "Headline",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSummary()) > 300 {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "Summary",
			reason: "value length must be at most 300 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetThumbnailUrl()) > 300 {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "ThumbnailUrl",
			reason: "value length must be at most 300 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiptDescription()) > 100 {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "ReceiptDescription",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateDiscountDefinitionRequest_Status_NotInLookup[m.GetStatus()]; ok {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "Status",
			reason: "value must not be in list [DISCOUNT_DEFINITION_STATUS_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if m.GetValidFrom() == nil {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "ValidFrom",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetValidTo(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = UpdateDiscountDefinitionRequestValidationError{
				field:  "ValidTo",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := UpdateDiscountDefinitionRequestValidationError{
					field:  "ValidTo",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(m.GetDiscountCriteria()) < 1 {
		err := UpdateDiscountDefinitionRequestValidationError{
			field:  "DiscountCriteria",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDiscountCriteria() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDiscountDefinitionRequestValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDiscountDefinitionRequestValidationError{
						field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDiscountDefinitionRequestValidationError{
					field:  fmt.Sprintf("DiscountCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Currency

	switch v := m.DiscountDefinitionIdentifier.(type) {
	case *UpdateDiscountDefinitionRequest_DiscountDefinitionRef:
		if v == nil {
			err := UpdateDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountDefinitionRef()); l < 1 || l > 50 {
			err := UpdateDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionRef",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *UpdateDiscountDefinitionRequest_DiscountDefinitionKey:
		if v == nil {
			err := UpdateDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountDefinitionKey()); l < 30 || l > 50 {
			err := UpdateDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}
	switch v := m.DiscountAmount.(type) {
	case *UpdateDiscountDefinitionRequest_MonetaryAmount:
		if v == nil {
			err := UpdateDiscountDefinitionRequestValidationError{
				field:  "DiscountAmount",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMonetaryAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDiscountDefinitionRequestValidationError{
						field:  "MonetaryAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDiscountDefinitionRequestValidationError{
						field:  "MonetaryAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMonetaryAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDiscountDefinitionRequestValidationError{
					field:  "MonetaryAmount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateDiscountDefinitionRequest_PercentageAmount:
		if v == nil {
			err := UpdateDiscountDefinitionRequestValidationError{
				field:  "DiscountAmount",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPercentageAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDiscountDefinitionRequestValidationError{
						field:  "PercentageAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDiscountDefinitionRequestValidationError{
						field:  "PercentageAmount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPercentageAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDiscountDefinitionRequestValidationError{
					field:  "PercentageAmount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// UpdateDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDiscountDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// UpdateDiscountDefinitionRequestValidationError is the validation error
// returned by UpdateDiscountDefinitionRequest.Validate if the designated
// constraints aren't met.
type UpdateDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountDefinitionRequestValidationError) ErrorName() string {
	return "UpdateDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountDefinitionRequestValidationError{}

var _UpdateDiscountDefinitionRequest_Status_NotInLookup = map[DiscountDefinitionStatus]struct{}{
	0: {},
}

// Validate checks the field values on UpdateDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDiscountDefinitionResponseMultiError, or nil if none found.
func (m *UpdateDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVersion() < 0 {
		err := UpdateDiscountDefinitionResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// UpdateDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDiscountDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// UpdateDiscountDefinitionResponseValidationError is the validation error
// returned by UpdateDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type UpdateDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountDefinitionResponseValidationError) ErrorName() string {
	return "UpdateDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountDefinitionResponseValidationError{}

// Validate checks the field values on UpdateDiscountDefinitionStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateDiscountDefinitionStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountDefinitionStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateDiscountDefinitionStatusRequestMultiError, or nil if none found.
func (m *UpdateDiscountDefinitionStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountDefinitionStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UpdateDiscountDefinitionStatusRequest_DiscountDefinitionStatus_NotInLookup[m.GetDiscountDefinitionStatus()]; ok {
		err := UpdateDiscountDefinitionStatusRequestValidationError{
			field:  "DiscountDefinitionStatus",
			reason: "value must not be in list [DISCOUNT_DEFINITION_STATUS_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.DiscountDefinitionIdentifier.(type) {
	case *UpdateDiscountDefinitionStatusRequest_DiscountDefinitionRef:
		if v == nil {
			err := UpdateDiscountDefinitionStatusRequestValidationError{
				field:  "DiscountDefinitionIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountDefinitionRef()); l < 1 || l > 50 {
			err := UpdateDiscountDefinitionStatusRequestValidationError{
				field:  "DiscountDefinitionRef",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *UpdateDiscountDefinitionStatusRequest_DiscountDefinitionKey:
		if v == nil {
			err := UpdateDiscountDefinitionStatusRequestValidationError{
				field:  "DiscountDefinitionIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountDefinitionKey()); l < 30 || l > 50 {
			err := UpdateDiscountDefinitionStatusRequestValidationError{
				field:  "DiscountDefinitionKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateDiscountDefinitionStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateDiscountDefinitionStatusRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateDiscountDefinitionStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiscountDefinitionStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountDefinitionStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountDefinitionStatusRequestMultiError) AllErrors() []error { return m }

// UpdateDiscountDefinitionStatusRequestValidationError is the validation error
// returned by UpdateDiscountDefinitionStatusRequest.Validate if the
// designated constraints aren't met.
type UpdateDiscountDefinitionStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountDefinitionStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountDefinitionStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountDefinitionStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountDefinitionStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountDefinitionStatusRequestValidationError) ErrorName() string {
	return "UpdateDiscountDefinitionStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountDefinitionStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountDefinitionStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountDefinitionStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountDefinitionStatusRequestValidationError{}

var _UpdateDiscountDefinitionStatusRequest_DiscountDefinitionStatus_NotInLookup = map[DiscountDefinitionStatus]struct{}{
	0: {},
}

// Validate checks the field values on UpdateDiscountDefinitionStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateDiscountDefinitionStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateDiscountDefinitionStatusResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateDiscountDefinitionStatusResponseMultiError, or nil if none found.
func (m *UpdateDiscountDefinitionStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountDefinitionStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountDefinitionStatusResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountDefinitionStatusResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountDefinitionStatusResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVersion() < 0 {
		err := UpdateDiscountDefinitionStatusResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDiscountDefinitionStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateDiscountDefinitionStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateDiscountDefinitionStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiscountDefinitionStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountDefinitionStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountDefinitionStatusResponseMultiError) AllErrors() []error { return m }

// UpdateDiscountDefinitionStatusResponseValidationError is the validation
// error returned by UpdateDiscountDefinitionStatusResponse.Validate if the
// designated constraints aren't met.
type UpdateDiscountDefinitionStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountDefinitionStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountDefinitionStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountDefinitionStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountDefinitionStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountDefinitionStatusResponseValidationError) ErrorName() string {
	return "UpdateDiscountDefinitionStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountDefinitionStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountDefinitionStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountDefinitionStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountDefinitionStatusResponseValidationError{}

// Validate checks the field values on RemoveDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDiscountDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDiscountDefinitionRequestMultiError, or nil if none found.
func (m *RemoveDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.DiscountDefinitionIdentifier.(type) {
	case *RemoveDiscountDefinitionRequest_DiscountDefinitionRef:
		if v == nil {
			err := RemoveDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountDefinitionRef()); l < 1 || l > 50 {
			err := RemoveDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionRef",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RemoveDiscountDefinitionRequest_DiscountDefinitionKey:
		if v == nil {
			err := RemoveDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountDefinitionKey()); l < 30 || l > 50 {
			err := RemoveDiscountDefinitionRequestValidationError{
				field:  "DiscountDefinitionKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RemoveDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// RemoveDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDiscountDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// RemoveDiscountDefinitionRequestValidationError is the validation error
// returned by RemoveDiscountDefinitionRequest.Validate if the designated
// constraints aren't met.
type RemoveDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDiscountDefinitionRequestValidationError) ErrorName() string {
	return "RemoveDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDiscountDefinitionRequestValidationError{}

// Validate checks the field values on RemoveDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDiscountDefinitionResponseMultiError, or nil if none found.
func (m *RemoveDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// RemoveDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveDiscountDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// RemoveDiscountDefinitionResponseValidationError is the validation error
// returned by RemoveDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type RemoveDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDiscountDefinitionResponseValidationError) ErrorName() string {
	return "RemoveDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDiscountDefinitionResponseValidationError{}

// Validate checks the field values on SearchDiscountDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchDiscountDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDiscountDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchDiscountDefinitionRequestMultiError, or nil if none found.
func (m *SearchDiscountDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDiscountDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReceiptDescription

	// no validation rules for Status

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetValidFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchDiscountDefinitionRequestValidationError{
					field:  "ValidFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchDiscountDefinitionRequestValidationError{
					field:  "ValidFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchDiscountDefinitionRequestValidationError{
				field:  "ValidFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchDiscountDefinitionRequestValidationError{
					field:  "ValidTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchDiscountDefinitionRequestValidationError{
					field:  "ValidTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchDiscountDefinitionRequestValidationError{
				field:  "ValidTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	if len(errors) > 0 {
		return SearchDiscountDefinitionRequestMultiError(errors)
	}

	return nil
}

// SearchDiscountDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by SearchDiscountDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type SearchDiscountDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDiscountDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDiscountDefinitionRequestMultiError) AllErrors() []error { return m }

// SearchDiscountDefinitionRequestValidationError is the validation error
// returned by SearchDiscountDefinitionRequest.Validate if the designated
// constraints aren't met.
type SearchDiscountDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDiscountDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDiscountDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDiscountDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDiscountDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDiscountDefinitionRequestValidationError) ErrorName() string {
	return "SearchDiscountDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDiscountDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDiscountDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDiscountDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDiscountDefinitionRequestValidationError{}

// Validate checks the field values on SearchDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchDiscountDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDiscountDefinitionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchDiscountDefinitionResponseMultiError, or nil if none found.
func (m *SearchDiscountDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDiscountDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchDiscountDefinitionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchDiscountDefinitionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDiscountDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchDiscountDefinitionResponseValidationError{
						field:  fmt.Sprintf("DiscountDefinitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchDiscountDefinitionResponseValidationError{
						field:  fmt.Sprintf("DiscountDefinitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchDiscountDefinitionResponseValidationError{
					field:  fmt.Sprintf("DiscountDefinitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchDiscountDefinitionResponseMultiError(errors)
	}

	return nil
}

// SearchDiscountDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by
// SearchDiscountDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchDiscountDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDiscountDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDiscountDefinitionResponseMultiError) AllErrors() []error { return m }

// SearchDiscountDefinitionResponseValidationError is the validation error
// returned by SearchDiscountDefinitionResponse.Validate if the designated
// constraints aren't met.
type SearchDiscountDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDiscountDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDiscountDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDiscountDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDiscountDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDiscountDefinitionResponseValidationError) ErrorName() string {
	return "SearchDiscountDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDiscountDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDiscountDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDiscountDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDiscountDefinitionResponseValidationError{}
