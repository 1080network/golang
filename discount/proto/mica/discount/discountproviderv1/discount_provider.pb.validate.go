// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mica/discount/discountprovider/v1/discount_provider.proto

package discountproviderv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DiscountProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiscountProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscountProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscountProviderMultiError, or nil if none found.
func (m *DiscountProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscountProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDiscountProviderKey()); l < 30 || l > 50 {
		err := DiscountProviderValidationError{
			field:  "DiscountProviderKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVersion() < 0 {
		err := DiscountProviderValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountProviderValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountProviderValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountProviderValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountProviderValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountProviderValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountProviderValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 100 {
		err := DiscountProviderValidationError{
			field:  "Name",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountProviderValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountProviderValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountProviderValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CallbackAddress

	// no validation rules for Email

	// no validation rules for Phone

	if all {
		switch v := interface{}(m.GetBankAccountDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountProviderValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountProviderValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccountDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountProviderValidationError{
				field:  "BankAccountDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscountProviderMultiError(errors)
	}

	return nil
}

// DiscountProviderMultiError is an error wrapping multiple validation errors
// returned by DiscountProvider.ValidateAll() if the designated constraints
// aren't met.
type DiscountProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountProviderMultiError) AllErrors() []error { return m }

// DiscountProviderValidationError is the validation error returned by
// DiscountProvider.Validate if the designated constraints aren't met.
type DiscountProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountProviderValidationError) ErrorName() string { return "DiscountProviderValidationError" }

// Error satisfies the builtin error interface
func (e DiscountProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscountProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountProviderValidationError{}

// Validate checks the field values on GetDiscountProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscountProviderRequestMultiError, or nil if none found.
func (m *GetDiscountProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDiscountProviderRequestMultiError(errors)
	}

	return nil
}

// GetDiscountProviderRequestMultiError is an error wrapping multiple
// validation errors returned by GetDiscountProviderRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDiscountProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountProviderRequestMultiError) AllErrors() []error { return m }

// GetDiscountProviderRequestValidationError is the validation error returned
// by GetDiscountProviderRequest.Validate if the designated constraints aren't met.
type GetDiscountProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountProviderRequestValidationError) ErrorName() string {
	return "GetDiscountProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountProviderRequestValidationError{}

// Validate checks the field values on GetDiscountProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscountProviderResponseMultiError, or nil if none found.
func (m *GetDiscountProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountProviderResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountProviderResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountProviderResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscountProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountProviderResponseValidationError{
					field:  "DiscountProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountProviderResponseValidationError{
					field:  "DiscountProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscountProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountProviderResponseValidationError{
				field:  "DiscountProvider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDiscountProviderResponseMultiError(errors)
	}

	return nil
}

// GetDiscountProviderResponseMultiError is an error wrapping multiple
// validation errors returned by GetDiscountProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDiscountProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountProviderResponseMultiError) AllErrors() []error { return m }

// GetDiscountProviderResponseValidationError is the validation error returned
// by GetDiscountProviderResponse.Validate if the designated constraints
// aren't met.
type GetDiscountProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountProviderResponseValidationError) ErrorName() string {
	return "GetDiscountProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountProviderResponseValidationError{}

// Validate checks the field values on UpdateDiscountProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiscountProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountProviderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDiscountProviderRequestMultiError, or nil if none found.
func (m *UpdateDiscountProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVersion() < 0 {
		err := UpdateDiscountProviderRequestValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 100 {
		err := UpdateDiscountProviderRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountProviderRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountProviderRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountProviderRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CallbackAddress

	// no validation rules for Email

	// no validation rules for Phone

	if all {
		switch v := interface{}(m.GetBankAccountDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountProviderRequestValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountProviderRequestValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccountDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountProviderRequestValidationError{
				field:  "BankAccountDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDiscountProviderRequestMultiError(errors)
	}

	return nil
}

// UpdateDiscountProviderRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDiscountProviderRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDiscountProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountProviderRequestMultiError) AllErrors() []error { return m }

// UpdateDiscountProviderRequestValidationError is the validation error
// returned by UpdateDiscountProviderRequest.Validate if the designated
// constraints aren't met.
type UpdateDiscountProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountProviderRequestValidationError) ErrorName() string {
	return "UpdateDiscountProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountProviderRequestValidationError{}

// Validate checks the field values on UpdateDiscountProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiscountProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountProviderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDiscountProviderResponseMultiError, or nil if none found.
func (m *UpdateDiscountProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountProviderResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountProviderResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountProviderResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVersion() < 0 {
		err := UpdateDiscountProviderResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDiscountProviderResponseMultiError(errors)
	}

	return nil
}

// UpdateDiscountProviderResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDiscountProviderResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateDiscountProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountProviderResponseMultiError) AllErrors() []error { return m }

// UpdateDiscountProviderResponseValidationError is the validation error
// returned by UpdateDiscountProviderResponse.Validate if the designated
// constraints aren't met.
type UpdateDiscountProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountProviderResponseValidationError) ErrorName() string {
	return "UpdateDiscountProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountProviderResponseValidationError{}
