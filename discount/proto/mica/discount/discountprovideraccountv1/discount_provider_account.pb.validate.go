// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mica/discount/discountprovideraccount/v1/discount_provider_account.proto

package discountprovideraccountv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DiscountProviderAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscountProviderAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscountProviderAccount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscountProviderAccountMultiError, or nil if none found.
func (m *DiscountProviderAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscountProviderAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDiscountProviderAccountKey()); l < 30 || l > 50 {
		err := DiscountProviderAccountValidationError{
			field:  "DiscountProviderAccountKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVersion() < 0 {
		err := DiscountProviderAccountValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountProviderAccountValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountProviderAccountValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountProviderAccountValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountProviderAccountValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountProviderAccountValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountProviderAccountValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
		err := DiscountProviderAccountValidationError{
			field:  "DiscountProviderAccountRef",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DiscountProviderAccountStatus

	if utf8.RuneCountInString(m.GetName()) > 100 {
		err := DiscountProviderAccountValidationError{
			field:  "Name",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBankAccountDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountProviderAccountValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountProviderAccountValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccountDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountProviderAccountValidationError{
				field:  "BankAccountDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscountProviderAccountMultiError(errors)
	}

	return nil
}

// DiscountProviderAccountMultiError is an error wrapping multiple validation
// errors returned by DiscountProviderAccount.ValidateAll() if the designated
// constraints aren't met.
type DiscountProviderAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountProviderAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountProviderAccountMultiError) AllErrors() []error { return m }

// DiscountProviderAccountValidationError is the validation error returned by
// DiscountProviderAccount.Validate if the designated constraints aren't met.
type DiscountProviderAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountProviderAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountProviderAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountProviderAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountProviderAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountProviderAccountValidationError) ErrorName() string {
	return "DiscountProviderAccountValidationError"
}

// Error satisfies the builtin error interface
func (e DiscountProviderAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscountProviderAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountProviderAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountProviderAccountValidationError{}

// Validate checks the field values on CreateDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDiscountProviderAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDiscountProviderAccountRequestMultiError, or nil if none found.
func (m *CreateDiscountProviderAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountProviderAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
		err := CreateDiscountProviderAccountRequestValidationError{
			field:  "DiscountProviderAccountRef",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 100 {
		err := CreateDiscountProviderAccountRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DiscountProviderAccountStatus

	if all {
		switch v := interface{}(m.GetBankAccountDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountProviderAccountRequestValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountProviderAccountRequestValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccountDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountProviderAccountRequestValidationError{
				field:  "BankAccountDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDiscountProviderAccountRequestMultiError(errors)
	}

	return nil
}

// CreateDiscountProviderAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateDiscountProviderAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscountProviderAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountProviderAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountProviderAccountRequestMultiError) AllErrors() []error { return m }

// CreateDiscountProviderAccountRequestValidationError is the validation error
// returned by CreateDiscountProviderAccountRequest.Validate if the designated
// constraints aren't met.
type CreateDiscountProviderAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountProviderAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountProviderAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountProviderAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountProviderAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountProviderAccountRequestValidationError) ErrorName() string {
	return "CreateDiscountProviderAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountProviderAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountProviderAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountProviderAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountProviderAccountRequestValidationError{}

// Validate checks the field values on CreateDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDiscountProviderAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDiscountProviderAccountResponseMultiError, or nil if none found.
func (m *CreateDiscountProviderAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountProviderAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountProviderAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiscountProviderAccountKey

	if m.GetVersion() < 0 {
		err := CreateDiscountProviderAccountResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateDiscountProviderAccountResponseMultiError(errors)
	}

	return nil
}

// CreateDiscountProviderAccountResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateDiscountProviderAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscountProviderAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountProviderAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountProviderAccountResponseMultiError) AllErrors() []error { return m }

// CreateDiscountProviderAccountResponseValidationError is the validation error
// returned by CreateDiscountProviderAccountResponse.Validate if the
// designated constraints aren't met.
type CreateDiscountProviderAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountProviderAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountProviderAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountProviderAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountProviderAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountProviderAccountResponseValidationError) ErrorName() string {
	return "CreateDiscountProviderAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountProviderAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountProviderAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountProviderAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountProviderAccountResponseValidationError{}

// Validate checks the field values on GetDiscountProviderAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDiscountProviderAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDiscountProviderAccountRequestMultiError, or nil if none found.
func (m *GetDiscountProviderAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountProviderAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.DiscountProviderAccountIdentifier.(type) {
	case *GetDiscountProviderAccountRequest_DiscountProviderAccountRef:
		if v == nil {
			err := GetDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
			err := GetDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountRef",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetDiscountProviderAccountRequest_DiscountProviderAccountKey:
		if v == nil {
			err := GetDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountProviderAccountKey()); l < 30 || l > 50 {
			err := GetDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDiscountProviderAccountRequestMultiError(errors)
	}

	return nil
}

// GetDiscountProviderAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetDiscountProviderAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDiscountProviderAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountProviderAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountProviderAccountRequestMultiError) AllErrors() []error { return m }

// GetDiscountProviderAccountRequestValidationError is the validation error
// returned by GetDiscountProviderAccountRequest.Validate if the designated
// constraints aren't met.
type GetDiscountProviderAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountProviderAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountProviderAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountProviderAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountProviderAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountProviderAccountRequestValidationError) ErrorName() string {
	return "GetDiscountProviderAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountProviderAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountProviderAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountProviderAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountProviderAccountRequestValidationError{}

// Validate checks the field values on GetDiscountProviderAccountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDiscountProviderAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDiscountProviderAccountResponseMultiError, or nil if none found.
func (m *GetDiscountProviderAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountProviderAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountProviderAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscountProviderAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscountProviderAccountResponseValidationError{
					field:  "DiscountProviderAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscountProviderAccountResponseValidationError{
					field:  "DiscountProviderAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscountProviderAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscountProviderAccountResponseValidationError{
				field:  "DiscountProviderAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDiscountProviderAccountResponseMultiError(errors)
	}

	return nil
}

// GetDiscountProviderAccountResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDiscountProviderAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDiscountProviderAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountProviderAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountProviderAccountResponseMultiError) AllErrors() []error { return m }

// GetDiscountProviderAccountResponseValidationError is the validation error
// returned by GetDiscountProviderAccountResponse.Validate if the designated
// constraints aren't met.
type GetDiscountProviderAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountProviderAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountProviderAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountProviderAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountProviderAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountProviderAccountResponseValidationError) ErrorName() string {
	return "GetDiscountProviderAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountProviderAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountProviderAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountProviderAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountProviderAccountResponseValidationError{}

// Validate checks the field values on UpdateDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateDiscountProviderAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateDiscountProviderAccountRequestMultiError, or nil if none found.
func (m *UpdateDiscountProviderAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountProviderAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVersion() < 0 {
		err := UpdateDiscountProviderAccountRequestValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DiscountProviderAccountStatus

	if utf8.RuneCountInString(m.GetName()) > 100 {
		err := UpdateDiscountProviderAccountRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBankAccountDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountProviderAccountRequestValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountProviderAccountRequestValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccountDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountProviderAccountRequestValidationError{
				field:  "BankAccountDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.DiscountProviderAccountIdentifier.(type) {
	case *UpdateDiscountProviderAccountRequest_DiscountProviderAccountRef:
		if v == nil {
			err := UpdateDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
			err := UpdateDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountRef",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *UpdateDiscountProviderAccountRequest_DiscountProviderAccountKey:
		if v == nil {
			err := UpdateDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountProviderAccountKey()); l < 30 || l > 50 {
			err := UpdateDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateDiscountProviderAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateDiscountProviderAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDiscountProviderAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiscountProviderAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountProviderAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountProviderAccountRequestMultiError) AllErrors() []error { return m }

// UpdateDiscountProviderAccountRequestValidationError is the validation error
// returned by UpdateDiscountProviderAccountRequest.Validate if the designated
// constraints aren't met.
type UpdateDiscountProviderAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountProviderAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountProviderAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountProviderAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountProviderAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountProviderAccountRequestValidationError) ErrorName() string {
	return "UpdateDiscountProviderAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountProviderAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountProviderAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountProviderAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountProviderAccountRequestValidationError{}

// Validate checks the field values on UpdateDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateDiscountProviderAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateDiscountProviderAccountResponseMultiError, or nil if none found.
func (m *UpdateDiscountProviderAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountProviderAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountProviderAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVersion() < 0 {
		err := UpdateDiscountProviderAccountResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDiscountProviderAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateDiscountProviderAccountResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateDiscountProviderAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiscountProviderAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountProviderAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountProviderAccountResponseMultiError) AllErrors() []error { return m }

// UpdateDiscountProviderAccountResponseValidationError is the validation error
// returned by UpdateDiscountProviderAccountResponse.Validate if the
// designated constraints aren't met.
type UpdateDiscountProviderAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountProviderAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountProviderAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountProviderAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountProviderAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountProviderAccountResponseValidationError) ErrorName() string {
	return "UpdateDiscountProviderAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountProviderAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountProviderAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountProviderAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountProviderAccountResponseValidationError{}

// Validate checks the field values on
// UpdateDiscountProviderAccountStatusRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateDiscountProviderAccountStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateDiscountProviderAccountStatusRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateDiscountProviderAccountStatusRequestMultiError, or nil if none found.
func (m *UpdateDiscountProviderAccountStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountProviderAccountStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UpdateDiscountProviderAccountStatusRequest_DiscountProviderAccountStatus_NotInLookup[m.GetDiscountProviderAccountStatus()]; ok {
		err := UpdateDiscountProviderAccountStatusRequestValidationError{
			field:  "DiscountProviderAccountStatus",
			reason: "value must not be in list [DISCOUNT_PROVIDER_ACCOUNT_STATUS_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.DiscountProviderAccountIdentifier.(type) {
	case *UpdateDiscountProviderAccountStatusRequest_DiscountProviderAccountRef:
		if v == nil {
			err := UpdateDiscountProviderAccountStatusRequestValidationError{
				field:  "DiscountProviderAccountIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
			err := UpdateDiscountProviderAccountStatusRequestValidationError{
				field:  "DiscountProviderAccountRef",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *UpdateDiscountProviderAccountStatusRequest_DiscountProviderAccountKey:
		if v == nil {
			err := UpdateDiscountProviderAccountStatusRequestValidationError{
				field:  "DiscountProviderAccountIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountProviderAccountKey()); l < 30 || l > 50 {
			err := UpdateDiscountProviderAccountStatusRequestValidationError{
				field:  "DiscountProviderAccountKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateDiscountProviderAccountStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateDiscountProviderAccountStatusRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateDiscountProviderAccountStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiscountProviderAccountStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountProviderAccountStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountProviderAccountStatusRequestMultiError) AllErrors() []error { return m }

// UpdateDiscountProviderAccountStatusRequestValidationError is the validation
// error returned by UpdateDiscountProviderAccountStatusRequest.Validate if
// the designated constraints aren't met.
type UpdateDiscountProviderAccountStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountProviderAccountStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountProviderAccountStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountProviderAccountStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountProviderAccountStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountProviderAccountStatusRequestValidationError) ErrorName() string {
	return "UpdateDiscountProviderAccountStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountProviderAccountStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountProviderAccountStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountProviderAccountStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountProviderAccountStatusRequestValidationError{}

var _UpdateDiscountProviderAccountStatusRequest_DiscountProviderAccountStatus_NotInLookup = map[DiscountProviderAccountStatus]struct{}{
	0: {},
}

// Validate checks the field values on
// UpdateDiscountProviderAccountStatusResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateDiscountProviderAccountStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateDiscountProviderAccountStatusResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateDiscountProviderAccountStatusResponseMultiError, or nil if none found.
func (m *UpdateDiscountProviderAccountStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiscountProviderAccountStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiscountProviderAccountStatusResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiscountProviderAccountStatusResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiscountProviderAccountStatusResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVersion() < 0 {
		err := UpdateDiscountProviderAccountStatusResponseValidationError{
			field:  "Version",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDiscountProviderAccountStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateDiscountProviderAccountStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateDiscountProviderAccountStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiscountProviderAccountStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiscountProviderAccountStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiscountProviderAccountStatusResponseMultiError) AllErrors() []error { return m }

// UpdateDiscountProviderAccountStatusResponseValidationError is the validation
// error returned by UpdateDiscountProviderAccountStatusResponse.Validate if
// the designated constraints aren't met.
type UpdateDiscountProviderAccountStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiscountProviderAccountStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiscountProviderAccountStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiscountProviderAccountStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiscountProviderAccountStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiscountProviderAccountStatusResponseValidationError) ErrorName() string {
	return "UpdateDiscountProviderAccountStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiscountProviderAccountStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiscountProviderAccountStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiscountProviderAccountStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiscountProviderAccountStatusResponseValidationError{}

// Validate checks the field values on RemoveDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveDiscountProviderAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveDiscountProviderAccountRequestMultiError, or nil if none found.
func (m *RemoveDiscountProviderAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDiscountProviderAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.DiscountProviderAccountIdentifier.(type) {
	case *RemoveDiscountProviderAccountRequest_DiscountProviderAccountRef:
		if v == nil {
			err := RemoveDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountProviderAccountRef()); l < 1 || l > 50 {
			err := RemoveDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountRef",
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RemoveDiscountProviderAccountRequest_DiscountProviderAccountKey:
		if v == nil {
			err := RemoveDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetDiscountProviderAccountKey()); l < 30 || l > 50 {
			err := RemoveDiscountProviderAccountRequestValidationError{
				field:  "DiscountProviderAccountKey",
				reason: "value length must be between 30 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RemoveDiscountProviderAccountRequestMultiError(errors)
	}

	return nil
}

// RemoveDiscountProviderAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemoveDiscountProviderAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveDiscountProviderAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDiscountProviderAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDiscountProviderAccountRequestMultiError) AllErrors() []error { return m }

// RemoveDiscountProviderAccountRequestValidationError is the validation error
// returned by RemoveDiscountProviderAccountRequest.Validate if the designated
// constraints aren't met.
type RemoveDiscountProviderAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDiscountProviderAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDiscountProviderAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDiscountProviderAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDiscountProviderAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDiscountProviderAccountRequestValidationError) ErrorName() string {
	return "RemoveDiscountProviderAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDiscountProviderAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDiscountProviderAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDiscountProviderAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDiscountProviderAccountRequestValidationError{}

// Validate checks the field values on RemoveDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveDiscountProviderAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemoveDiscountProviderAccountResponseMultiError, or nil if none found.
func (m *RemoveDiscountProviderAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDiscountProviderAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveDiscountProviderAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveDiscountProviderAccountResponseMultiError(errors)
	}

	return nil
}

// RemoveDiscountProviderAccountResponseMultiError is an error wrapping
// multiple validation errors returned by
// RemoveDiscountProviderAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveDiscountProviderAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDiscountProviderAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDiscountProviderAccountResponseMultiError) AllErrors() []error { return m }

// RemoveDiscountProviderAccountResponseValidationError is the validation error
// returned by RemoveDiscountProviderAccountResponse.Validate if the
// designated constraints aren't met.
type RemoveDiscountProviderAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDiscountProviderAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDiscountProviderAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDiscountProviderAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDiscountProviderAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDiscountProviderAccountResponseValidationError) ErrorName() string {
	return "RemoveDiscountProviderAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDiscountProviderAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDiscountProviderAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDiscountProviderAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDiscountProviderAccountResponseValidationError{}

// Validate checks the field values on SearchDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchDiscountProviderAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDiscountProviderAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchDiscountProviderAccountRequestMultiError, or nil if none found.
func (m *SearchDiscountProviderAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDiscountProviderAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountProviderAccountStatus

	if utf8.RuneCountInString(m.GetName()) > 100 {
		err := SearchDiscountProviderAccountRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBankAccountDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchDiscountProviderAccountRequestValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchDiscountProviderAccountRequestValidationError{
					field:  "BankAccountDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccountDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchDiscountProviderAccountRequestValidationError{
				field:  "BankAccountDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchDiscountProviderAccountRequestMultiError(errors)
	}

	return nil
}

// SearchDiscountProviderAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// SearchDiscountProviderAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchDiscountProviderAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDiscountProviderAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDiscountProviderAccountRequestMultiError) AllErrors() []error { return m }

// SearchDiscountProviderAccountRequestValidationError is the validation error
// returned by SearchDiscountProviderAccountRequest.Validate if the designated
// constraints aren't met.
type SearchDiscountProviderAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDiscountProviderAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDiscountProviderAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDiscountProviderAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDiscountProviderAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDiscountProviderAccountRequestValidationError) ErrorName() string {
	return "SearchDiscountProviderAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDiscountProviderAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDiscountProviderAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDiscountProviderAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDiscountProviderAccountRequestValidationError{}

// Validate checks the field values on SearchDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchDiscountProviderAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDiscountProviderAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchDiscountProviderAccountResponseMultiError, or nil if none found.
func (m *SearchDiscountProviderAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDiscountProviderAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchDiscountProviderAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchDiscountProviderAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDiscountProviderAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchDiscountProviderAccountResponseValidationError{
						field:  fmt.Sprintf("DiscountProviderAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchDiscountProviderAccountResponseValidationError{
						field:  fmt.Sprintf("DiscountProviderAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchDiscountProviderAccountResponseValidationError{
					field:  fmt.Sprintf("DiscountProviderAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchDiscountProviderAccountResponseMultiError(errors)
	}

	return nil
}

// SearchDiscountProviderAccountResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchDiscountProviderAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchDiscountProviderAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDiscountProviderAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDiscountProviderAccountResponseMultiError) AllErrors() []error { return m }

// SearchDiscountProviderAccountResponseValidationError is the validation error
// returned by SearchDiscountProviderAccountResponse.Validate if the
// designated constraints aren't met.
type SearchDiscountProviderAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDiscountProviderAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDiscountProviderAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDiscountProviderAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDiscountProviderAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDiscountProviderAccountResponseValidationError) ErrorName() string {
	return "SearchDiscountProviderAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDiscountProviderAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDiscountProviderAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDiscountProviderAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDiscountProviderAccountResponseValidationError{}
