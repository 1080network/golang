// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: connect/staticdata/v1/static_data.proto

package staticdatav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	serviceprovidertypev1 "github.com/1080network/golang/connect/proto/common/enums/serviceprovidertypev1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = serviceprovidertypev1.ServiceProviderType(0)
)

// Validate checks the field values on GetStaticDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStaticDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStaticDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStaticDataRequestMultiError, or nil if none found.
func (m *GetStaticDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStaticDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetStaticDataRequestMultiError(errors)
	}

	return nil
}

// GetStaticDataRequestMultiError is an error wrapping multiple validation
// errors returned by GetStaticDataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStaticDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStaticDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStaticDataRequestMultiError) AllErrors() []error { return m }

// GetStaticDataRequestValidationError is the validation error returned by
// GetStaticDataRequest.Validate if the designated constraints aren't met.
type GetStaticDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStaticDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStaticDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStaticDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStaticDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStaticDataRequestValidationError) ErrorName() string {
	return "GetStaticDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStaticDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStaticDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStaticDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStaticDataRequestValidationError{}

// Validate checks the field values on GetStaticDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStaticDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStaticDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStaticDataResponseMultiError, or nil if none found.
func (m *GetStaticDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStaticDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStaticDataResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStaticDataResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStaticDataResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetServiceProviderTypeMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStaticDataResponseValidationError{
						field:  fmt.Sprintf("ServiceProviderTypeMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStaticDataResponseValidationError{
						field:  fmt.Sprintf("ServiceProviderTypeMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStaticDataResponseValidationError{
					field:  fmt.Sprintf("ServiceProviderTypeMetadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStaticDataResponseMultiError(errors)
	}

	return nil
}

// GetStaticDataResponseMultiError is an error wrapping multiple validation
// errors returned by GetStaticDataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStaticDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStaticDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStaticDataResponseMultiError) AllErrors() []error { return m }

// GetStaticDataResponseValidationError is the validation error returned by
// GetStaticDataResponse.Validate if the designated constraints aren't met.
type GetStaticDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStaticDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStaticDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStaticDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStaticDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStaticDataResponseValidationError) ErrorName() string {
	return "GetStaticDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStaticDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStaticDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStaticDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStaticDataResponseValidationError{}

// Validate checks the field values on ServiceProviderTypeMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceProviderTypeMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceProviderTypeMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceProviderTypeMetadataMultiError, or nil if none found.
func (m *ServiceProviderTypeMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceProviderTypeMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceProviderType

	if l := utf8.RuneCountInString(m.GetPublicKey()); l < 30 || l > 50 {
		err := ServiceProviderTypeMetadataValidationError{
			field:  "PublicKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServiceProviderTypeMetadataMultiError(errors)
	}

	return nil
}

// ServiceProviderTypeMetadataMultiError is an error wrapping multiple
// validation errors returned by ServiceProviderTypeMetadata.ValidateAll() if
// the designated constraints aren't met.
type ServiceProviderTypeMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceProviderTypeMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceProviderTypeMetadataMultiError) AllErrors() []error { return m }

// ServiceProviderTypeMetadataValidationError is the validation error returned
// by ServiceProviderTypeMetadata.Validate if the designated constraints
// aren't met.
type ServiceProviderTypeMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceProviderTypeMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceProviderTypeMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceProviderTypeMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceProviderTypeMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceProviderTypeMetadataValidationError) ErrorName() string {
	return "ServiceProviderTypeMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceProviderTypeMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceProviderTypeMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceProviderTypeMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceProviderTypeMetadataValidationError{}
