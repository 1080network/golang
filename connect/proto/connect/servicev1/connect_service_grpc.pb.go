// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: connect/service/v1/connect_service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pingv1 "github.com/1080network/golang/connect/proto/common/pingv1"
	instrumentv1 "github.com/1080network/golang/connect/proto/connect/instrumentv1"
	serviceproviderv1 "github.com/1080network/golang/connect/proto/connect/serviceproviderv1"
	staticdatav1 "github.com/1080network/golang/connect/proto/connect/staticdatav1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectServiceClient is the client API for ConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectServiceClient interface {
	// Retrieve systems static data which is used to drive UI behavior. This includes the public keys for the various
	// service provider types. Called from Widget.
	GetStaticData(ctx context.Context, in *staticdatav1.GetStaticDataRequest, opts ...grpc.CallOption) (*staticdatav1.GetStaticDataResponse, error)
	// Find Service Providers that match a given name. This includes pagination. Called by the mica Widget to populate
	// the list of Service Providers the user can choose from. Called from Widget.
	SearchServiceProvider(ctx context.Context, in *serviceproviderv1.SearchServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.SearchServiceProviderResponse, error)
	// Following the call from Partner to InitializeWidget, this call is the first one that the Widget makes after the
	// user has provided the necessary details to determine their identity. It returns a list of instruments that the
	// user has. Called from Widget.
	WidgetRegisterInstrumentInitiate(ctx context.Context, in *instrumentv1.WidgetRegisterInstrumentInitiateRequest, opts ...grpc.CallOption) (*instrumentv1.WidgetRegisterInstrumentInitiateResponse, error)
	// In cases where the user has more than on instrument with a given Service Provider this call is needed to identify
	// which one the user wants to enroll. Called from Widget. Optional call required when user uses username/password
	// and they have more than one account at the service provider
	WidgetRegisterInstrumentWithAccount(ctx context.Context, in *instrumentv1.WidgetRegisterInstrumentWithAccountRequest, opts ...grpc.CallOption) (*instrumentv1.WidgetRegisterInstrumentWithAccountResponse, error)
	// The final call the Widget makes for either the mica Matching Code or Ribbit's Account Token. Called from Widget.
	WidgetRegisterInstrumentComplete(ctx context.Context, in *instrumentv1.WidgetRegisterInstrumentCompleteRequest, opts ...grpc.CallOption) (*instrumentv1.WidgetRegisterInstrumentCompleteResponse, error)
	// When a user chooses a Ribbit Service Provider, this call is used to initialize the Ribbit Widget. It returns the
	// JavaScript script along with the Ribbit Institution ID. Called from Widget.
	WidgetRibbitRegisterInstrumentInitiate(ctx context.Context, in *instrumentv1.WidgetRibbitRegisterInstrumentInitiateRequest, opts ...grpc.CallOption) (*instrumentv1.WidgetRibbitRegisterInstrumentInitiateResponse, error)
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
}

type connectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectServiceClient(cc grpc.ClientConnInterface) ConnectServiceClient {
	return &connectServiceClient{cc}
}

func (c *connectServiceClient) GetStaticData(ctx context.Context, in *staticdatav1.GetStaticDataRequest, opts ...grpc.CallOption) (*staticdatav1.GetStaticDataResponse, error) {
	out := new(staticdatav1.GetStaticDataResponse)
	err := c.cc.Invoke(ctx, "/connect.service.v1.ConnectService/GetStaticData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) SearchServiceProvider(ctx context.Context, in *serviceproviderv1.SearchServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.SearchServiceProviderResponse, error) {
	out := new(serviceproviderv1.SearchServiceProviderResponse)
	err := c.cc.Invoke(ctx, "/connect.service.v1.ConnectService/SearchServiceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) WidgetRegisterInstrumentInitiate(ctx context.Context, in *instrumentv1.WidgetRegisterInstrumentInitiateRequest, opts ...grpc.CallOption) (*instrumentv1.WidgetRegisterInstrumentInitiateResponse, error) {
	out := new(instrumentv1.WidgetRegisterInstrumentInitiateResponse)
	err := c.cc.Invoke(ctx, "/connect.service.v1.ConnectService/WidgetRegisterInstrumentInitiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) WidgetRegisterInstrumentWithAccount(ctx context.Context, in *instrumentv1.WidgetRegisterInstrumentWithAccountRequest, opts ...grpc.CallOption) (*instrumentv1.WidgetRegisterInstrumentWithAccountResponse, error) {
	out := new(instrumentv1.WidgetRegisterInstrumentWithAccountResponse)
	err := c.cc.Invoke(ctx, "/connect.service.v1.ConnectService/WidgetRegisterInstrumentWithAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) WidgetRegisterInstrumentComplete(ctx context.Context, in *instrumentv1.WidgetRegisterInstrumentCompleteRequest, opts ...grpc.CallOption) (*instrumentv1.WidgetRegisterInstrumentCompleteResponse, error) {
	out := new(instrumentv1.WidgetRegisterInstrumentCompleteResponse)
	err := c.cc.Invoke(ctx, "/connect.service.v1.ConnectService/WidgetRegisterInstrumentComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) WidgetRibbitRegisterInstrumentInitiate(ctx context.Context, in *instrumentv1.WidgetRibbitRegisterInstrumentInitiateRequest, opts ...grpc.CallOption) (*instrumentv1.WidgetRibbitRegisterInstrumentInitiateResponse, error) {
	out := new(instrumentv1.WidgetRibbitRegisterInstrumentInitiateResponse)
	err := c.cc.Invoke(ctx, "/connect.service.v1.ConnectService/WidgetRibbitRegisterInstrumentInitiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, "/connect.service.v1.ConnectService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectServiceServer is the server API for ConnectService service.
// All implementations must embed UnimplementedConnectServiceServer
// for forward compatibility
type ConnectServiceServer interface {
	// Retrieve systems static data which is used to drive UI behavior. This includes the public keys for the various
	// service provider types. Called from Widget.
	GetStaticData(context.Context, *staticdatav1.GetStaticDataRequest) (*staticdatav1.GetStaticDataResponse, error)
	// Find Service Providers that match a given name. This includes pagination. Called by the mica Widget to populate
	// the list of Service Providers the user can choose from. Called from Widget.
	SearchServiceProvider(context.Context, *serviceproviderv1.SearchServiceProviderRequest) (*serviceproviderv1.SearchServiceProviderResponse, error)
	// Following the call from Partner to InitializeWidget, this call is the first one that the Widget makes after the
	// user has provided the necessary details to determine their identity. It returns a list of instruments that the
	// user has. Called from Widget.
	WidgetRegisterInstrumentInitiate(context.Context, *instrumentv1.WidgetRegisterInstrumentInitiateRequest) (*instrumentv1.WidgetRegisterInstrumentInitiateResponse, error)
	// In cases where the user has more than on instrument with a given Service Provider this call is needed to identify
	// which one the user wants to enroll. Called from Widget. Optional call required when user uses username/password
	// and they have more than one account at the service provider
	WidgetRegisterInstrumentWithAccount(context.Context, *instrumentv1.WidgetRegisterInstrumentWithAccountRequest) (*instrumentv1.WidgetRegisterInstrumentWithAccountResponse, error)
	// The final call the Widget makes for either the mica Matching Code or Ribbit's Account Token. Called from Widget.
	WidgetRegisterInstrumentComplete(context.Context, *instrumentv1.WidgetRegisterInstrumentCompleteRequest) (*instrumentv1.WidgetRegisterInstrumentCompleteResponse, error)
	// When a user chooses a Ribbit Service Provider, this call is used to initialize the Ribbit Widget. It returns the
	// JavaScript script along with the Ribbit Institution ID. Called from Widget.
	WidgetRibbitRegisterInstrumentInitiate(context.Context, *instrumentv1.WidgetRibbitRegisterInstrumentInitiateRequest) (*instrumentv1.WidgetRibbitRegisterInstrumentInitiateResponse, error)
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
	mustEmbedUnimplementedConnectServiceServer()
}

// UnimplementedConnectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectServiceServer struct {
}

func (UnimplementedConnectServiceServer) GetStaticData(context.Context, *staticdatav1.GetStaticDataRequest) (*staticdatav1.GetStaticDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaticData not implemented")
}
func (UnimplementedConnectServiceServer) SearchServiceProvider(context.Context, *serviceproviderv1.SearchServiceProviderRequest) (*serviceproviderv1.SearchServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServiceProvider not implemented")
}
func (UnimplementedConnectServiceServer) WidgetRegisterInstrumentInitiate(context.Context, *instrumentv1.WidgetRegisterInstrumentInitiateRequest) (*instrumentv1.WidgetRegisterInstrumentInitiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WidgetRegisterInstrumentInitiate not implemented")
}
func (UnimplementedConnectServiceServer) WidgetRegisterInstrumentWithAccount(context.Context, *instrumentv1.WidgetRegisterInstrumentWithAccountRequest) (*instrumentv1.WidgetRegisterInstrumentWithAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WidgetRegisterInstrumentWithAccount not implemented")
}
func (UnimplementedConnectServiceServer) WidgetRegisterInstrumentComplete(context.Context, *instrumentv1.WidgetRegisterInstrumentCompleteRequest) (*instrumentv1.WidgetRegisterInstrumentCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WidgetRegisterInstrumentComplete not implemented")
}
func (UnimplementedConnectServiceServer) WidgetRibbitRegisterInstrumentInitiate(context.Context, *instrumentv1.WidgetRibbitRegisterInstrumentInitiateRequest) (*instrumentv1.WidgetRibbitRegisterInstrumentInitiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WidgetRibbitRegisterInstrumentInitiate not implemented")
}
func (UnimplementedConnectServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedConnectServiceServer) mustEmbedUnimplementedConnectServiceServer() {}

// UnsafeConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServiceServer will
// result in compilation errors.
type UnsafeConnectServiceServer interface {
	mustEmbedUnimplementedConnectServiceServer()
}

func RegisterConnectServiceServer(s grpc.ServiceRegistrar, srv ConnectServiceServer) {
	s.RegisterService(&ConnectService_ServiceDesc, srv)
}

func _ConnectService_GetStaticData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(staticdatav1.GetStaticDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).GetStaticData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.service.v1.ConnectService/GetStaticData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).GetStaticData(ctx, req.(*staticdatav1.GetStaticDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_SearchServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceproviderv1.SearchServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).SearchServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.service.v1.ConnectService/SearchServiceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).SearchServiceProvider(ctx, req.(*serviceproviderv1.SearchServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_WidgetRegisterInstrumentInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.WidgetRegisterInstrumentInitiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).WidgetRegisterInstrumentInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.service.v1.ConnectService/WidgetRegisterInstrumentInitiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).WidgetRegisterInstrumentInitiate(ctx, req.(*instrumentv1.WidgetRegisterInstrumentInitiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_WidgetRegisterInstrumentWithAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.WidgetRegisterInstrumentWithAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).WidgetRegisterInstrumentWithAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.service.v1.ConnectService/WidgetRegisterInstrumentWithAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).WidgetRegisterInstrumentWithAccount(ctx, req.(*instrumentv1.WidgetRegisterInstrumentWithAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_WidgetRegisterInstrumentComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.WidgetRegisterInstrumentCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).WidgetRegisterInstrumentComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.service.v1.ConnectService/WidgetRegisterInstrumentComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).WidgetRegisterInstrumentComplete(ctx, req.(*instrumentv1.WidgetRegisterInstrumentCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_WidgetRibbitRegisterInstrumentInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.WidgetRibbitRegisterInstrumentInitiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).WidgetRibbitRegisterInstrumentInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.service.v1.ConnectService/WidgetRibbitRegisterInstrumentInitiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).WidgetRibbitRegisterInstrumentInitiate(ctx, req.(*instrumentv1.WidgetRibbitRegisterInstrumentInitiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.service.v1.ConnectService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectService_ServiceDesc is the grpc.ServiceDesc for ConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect.service.v1.ConnectService",
	HandlerType: (*ConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStaticData",
			Handler:    _ConnectService_GetStaticData_Handler,
		},
		{
			MethodName: "SearchServiceProvider",
			Handler:    _ConnectService_SearchServiceProvider_Handler,
		},
		{
			MethodName: "WidgetRegisterInstrumentInitiate",
			Handler:    _ConnectService_WidgetRegisterInstrumentInitiate_Handler,
		},
		{
			MethodName: "WidgetRegisterInstrumentWithAccount",
			Handler:    _ConnectService_WidgetRegisterInstrumentWithAccount_Handler,
		},
		{
			MethodName: "WidgetRegisterInstrumentComplete",
			Handler:    _ConnectService_WidgetRegisterInstrumentComplete_Handler,
		},
		{
			MethodName: "WidgetRibbitRegisterInstrumentInitiate",
			Handler:    _ConnectService_WidgetRibbitRegisterInstrumentInitiate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ConnectService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect/service/v1/connect_service.proto",
}
