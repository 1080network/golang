// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mica/connect/instrument/v1/instrument.proto

package instrumentv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	currencyv1 "micashared/common/enums/currencyv1"

	instrumenttypev1 "micashared/common/enums/instrumenttypev1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = currencyv1.Currency(0)

	_ = instrumenttypev1.InstrumentType(0)
)

// Validate checks the field values on WidgetRegisterInstrumentInitiateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WidgetRegisterInstrumentInitiateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WidgetRegisterInstrumentInitiateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// WidgetRegisterInstrumentInitiateRequestMultiError, or nil if none found.
func (m *WidgetRegisterInstrumentInitiateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WidgetRegisterInstrumentInitiateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSessionKey()); l < 30 || l > 50 {
		err := WidgetRegisterInstrumentInitiateRequestValidationError{
			field:  "SessionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetServiceProviderKey()); l < 30 || l > 50 {
		err := WidgetRegisterInstrumentInitiateRequestValidationError{
			field:  "ServiceProviderKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.InstrumentIdentifier.(type) {
	case *WidgetRegisterInstrumentInitiateRequest_ConnectDetails:
		if v == nil {
			err := WidgetRegisterInstrumentInitiateRequestValidationError{
				field:  "InstrumentIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConnectDetails()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WidgetRegisterInstrumentInitiateRequestValidationError{
						field:  "ConnectDetails",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WidgetRegisterInstrumentInitiateRequestValidationError{
						field:  "ConnectDetails",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConnectDetails()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WidgetRegisterInstrumentInitiateRequestValidationError{
					field:  "ConnectDetails",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return WidgetRegisterInstrumentInitiateRequestMultiError(errors)
	}

	return nil
}

// WidgetRegisterInstrumentInitiateRequestMultiError is an error wrapping
// multiple validation errors returned by
// WidgetRegisterInstrumentInitiateRequest.ValidateAll() if the designated
// constraints aren't met.
type WidgetRegisterInstrumentInitiateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WidgetRegisterInstrumentInitiateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WidgetRegisterInstrumentInitiateRequestMultiError) AllErrors() []error { return m }

// WidgetRegisterInstrumentInitiateRequestValidationError is the validation
// error returned by WidgetRegisterInstrumentInitiateRequest.Validate if the
// designated constraints aren't met.
type WidgetRegisterInstrumentInitiateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WidgetRegisterInstrumentInitiateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WidgetRegisterInstrumentInitiateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WidgetRegisterInstrumentInitiateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WidgetRegisterInstrumentInitiateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WidgetRegisterInstrumentInitiateRequestValidationError) ErrorName() string {
	return "WidgetRegisterInstrumentInitiateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WidgetRegisterInstrumentInitiateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWidgetRegisterInstrumentInitiateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WidgetRegisterInstrumentInitiateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WidgetRegisterInstrumentInitiateRequestValidationError{}

// Validate checks the field values on ConnectDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectDetailsMultiError,
// or nil if none found.
func (m *ConnectDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectDetailsMultiError(errors)
	}

	return nil
}

// ConnectDetailsMultiError is an error wrapping multiple validation errors
// returned by ConnectDetails.ValidateAll() if the designated constraints
// aren't met.
type ConnectDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectDetailsMultiError) AllErrors() []error { return m }

// ConnectDetailsValidationError is the validation error returned by
// ConnectDetails.Validate if the designated constraints aren't met.
type ConnectDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectDetailsValidationError) ErrorName() string { return "ConnectDetailsValidationError" }

// Error satisfies the builtin error interface
func (e ConnectDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectDetailsValidationError{}

// Validate checks the field values on WidgetRegisterInstrumentInitiateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WidgetRegisterInstrumentInitiateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WidgetRegisterInstrumentInitiateResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WidgetRegisterInstrumentInitiateResponseMultiError, or nil if none found.
func (m *WidgetRegisterInstrumentInitiateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WidgetRegisterInstrumentInitiateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WidgetRegisterInstrumentInitiateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WidgetRegisterInstrumentInitiateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WidgetRegisterInstrumentInitiateResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInstruments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WidgetRegisterInstrumentInitiateResponseValidationError{
						field:  fmt.Sprintf("Instruments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WidgetRegisterInstrumentInitiateResponseValidationError{
						field:  fmt.Sprintf("Instruments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WidgetRegisterInstrumentInitiateResponseValidationError{
					field:  fmt.Sprintf("Instruments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WidgetRegisterInstrumentInitiateResponseMultiError(errors)
	}

	return nil
}

// WidgetRegisterInstrumentInitiateResponseMultiError is an error wrapping
// multiple validation errors returned by
// WidgetRegisterInstrumentInitiateResponse.ValidateAll() if the designated
// constraints aren't met.
type WidgetRegisterInstrumentInitiateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WidgetRegisterInstrumentInitiateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WidgetRegisterInstrumentInitiateResponseMultiError) AllErrors() []error { return m }

// WidgetRegisterInstrumentInitiateResponseValidationError is the validation
// error returned by WidgetRegisterInstrumentInitiateResponse.Validate if the
// designated constraints aren't met.
type WidgetRegisterInstrumentInitiateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WidgetRegisterInstrumentInitiateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WidgetRegisterInstrumentInitiateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WidgetRegisterInstrumentInitiateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WidgetRegisterInstrumentInitiateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WidgetRegisterInstrumentInitiateResponseValidationError) ErrorName() string {
	return "WidgetRegisterInstrumentInitiateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WidgetRegisterInstrumentInitiateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWidgetRegisterInstrumentInitiateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WidgetRegisterInstrumentInitiateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WidgetRegisterInstrumentInitiateResponseValidationError{}

// Validate checks the field values on Instrument with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Instrument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Instrument with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstrumentMultiError, or
// nil if none found.
func (m *Instrument) ValidateAll() error {
	return m.validate(true)
}

func (m *Instrument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstrumentType

	// no validation rules for Currency

	// no validation rules for InstrumentIdentifier

	if len(errors) > 0 {
		return InstrumentMultiError(errors)
	}

	return nil
}

// InstrumentMultiError is an error wrapping multiple validation errors
// returned by Instrument.ValidateAll() if the designated constraints aren't met.
type InstrumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentMultiError) AllErrors() []error { return m }

// InstrumentValidationError is the validation error returned by
// Instrument.Validate if the designated constraints aren't met.
type InstrumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentValidationError) ErrorName() string { return "InstrumentValidationError" }

// Error satisfies the builtin error interface
func (e InstrumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentValidationError{}

// Validate checks the field values on
// WidgetRegisterInstrumentWithAccountRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WidgetRegisterInstrumentWithAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WidgetRegisterInstrumentWithAccountRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WidgetRegisterInstrumentWithAccountRequestMultiError, or nil if none found.
func (m *WidgetRegisterInstrumentWithAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WidgetRegisterInstrumentWithAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSessionKey()); l < 30 || l > 50 {
		err := WidgetRegisterInstrumentWithAccountRequestValidationError{
			field:  "SessionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInstrument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WidgetRegisterInstrumentWithAccountRequestValidationError{
					field:  "Instrument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WidgetRegisterInstrumentWithAccountRequestValidationError{
					field:  "Instrument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstrument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WidgetRegisterInstrumentWithAccountRequestValidationError{
				field:  "Instrument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WidgetRegisterInstrumentWithAccountRequestMultiError(errors)
	}

	return nil
}

// WidgetRegisterInstrumentWithAccountRequestMultiError is an error wrapping
// multiple validation errors returned by
// WidgetRegisterInstrumentWithAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type WidgetRegisterInstrumentWithAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WidgetRegisterInstrumentWithAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WidgetRegisterInstrumentWithAccountRequestMultiError) AllErrors() []error { return m }

// WidgetRegisterInstrumentWithAccountRequestValidationError is the validation
// error returned by WidgetRegisterInstrumentWithAccountRequest.Validate if
// the designated constraints aren't met.
type WidgetRegisterInstrumentWithAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WidgetRegisterInstrumentWithAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WidgetRegisterInstrumentWithAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WidgetRegisterInstrumentWithAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WidgetRegisterInstrumentWithAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WidgetRegisterInstrumentWithAccountRequestValidationError) ErrorName() string {
	return "WidgetRegisterInstrumentWithAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WidgetRegisterInstrumentWithAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWidgetRegisterInstrumentWithAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WidgetRegisterInstrumentWithAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WidgetRegisterInstrumentWithAccountRequestValidationError{}

// Validate checks the field values on
// WidgetRegisterInstrumentWithAccountResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WidgetRegisterInstrumentWithAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WidgetRegisterInstrumentWithAccountResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WidgetRegisterInstrumentWithAccountResponseMultiError, or nil if none found.
func (m *WidgetRegisterInstrumentWithAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WidgetRegisterInstrumentWithAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WidgetRegisterInstrumentWithAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WidgetRegisterInstrumentWithAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WidgetRegisterInstrumentWithAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MatchingCode

	if len(errors) > 0 {
		return WidgetRegisterInstrumentWithAccountResponseMultiError(errors)
	}

	return nil
}

// WidgetRegisterInstrumentWithAccountResponseMultiError is an error wrapping
// multiple validation errors returned by
// WidgetRegisterInstrumentWithAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type WidgetRegisterInstrumentWithAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WidgetRegisterInstrumentWithAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WidgetRegisterInstrumentWithAccountResponseMultiError) AllErrors() []error { return m }

// WidgetRegisterInstrumentWithAccountResponseValidationError is the validation
// error returned by WidgetRegisterInstrumentWithAccountResponse.Validate if
// the designated constraints aren't met.
type WidgetRegisterInstrumentWithAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WidgetRegisterInstrumentWithAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WidgetRegisterInstrumentWithAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WidgetRegisterInstrumentWithAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WidgetRegisterInstrumentWithAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WidgetRegisterInstrumentWithAccountResponseValidationError) ErrorName() string {
	return "WidgetRegisterInstrumentWithAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WidgetRegisterInstrumentWithAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWidgetRegisterInstrumentWithAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WidgetRegisterInstrumentWithAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WidgetRegisterInstrumentWithAccountResponseValidationError{}

// Validate checks the field values on WidgetRegisterInstrumentCompleteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WidgetRegisterInstrumentCompleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WidgetRegisterInstrumentCompleteRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// WidgetRegisterInstrumentCompleteRequestMultiError, or nil if none found.
func (m *WidgetRegisterInstrumentCompleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WidgetRegisterInstrumentCompleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSessionKey()); l < 30 || l > 50 {
		err := WidgetRegisterInstrumentCompleteRequestValidationError{
			field:  "SessionKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Details.(type) {
	case *WidgetRegisterInstrumentCompleteRequest_Connect:
		if v == nil {
			err := WidgetRegisterInstrumentCompleteRequestValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConnect()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WidgetRegisterInstrumentCompleteRequestValidationError{
						field:  "Connect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WidgetRegisterInstrumentCompleteRequestValidationError{
						field:  "Connect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConnect()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WidgetRegisterInstrumentCompleteRequestValidationError{
					field:  "Connect",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return WidgetRegisterInstrumentCompleteRequestMultiError(errors)
	}

	return nil
}

// WidgetRegisterInstrumentCompleteRequestMultiError is an error wrapping
// multiple validation errors returned by
// WidgetRegisterInstrumentCompleteRequest.ValidateAll() if the designated
// constraints aren't met.
type WidgetRegisterInstrumentCompleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WidgetRegisterInstrumentCompleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WidgetRegisterInstrumentCompleteRequestMultiError) AllErrors() []error { return m }

// WidgetRegisterInstrumentCompleteRequestValidationError is the validation
// error returned by WidgetRegisterInstrumentCompleteRequest.Validate if the
// designated constraints aren't met.
type WidgetRegisterInstrumentCompleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WidgetRegisterInstrumentCompleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WidgetRegisterInstrumentCompleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WidgetRegisterInstrumentCompleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WidgetRegisterInstrumentCompleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WidgetRegisterInstrumentCompleteRequestValidationError) ErrorName() string {
	return "WidgetRegisterInstrumentCompleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WidgetRegisterInstrumentCompleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWidgetRegisterInstrumentCompleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WidgetRegisterInstrumentCompleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WidgetRegisterInstrumentCompleteRequestValidationError{}

// Validate checks the field values on Connect with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Connect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Connect with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConnectMultiError, or nil if none found.
func (m *Connect) ValidateAll() error {
	return m.validate(true)
}

func (m *Connect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MatchingCode

	if len(errors) > 0 {
		return ConnectMultiError(errors)
	}

	return nil
}

// ConnectMultiError is an error wrapping multiple validation errors returned
// by Connect.ValidateAll() if the designated constraints aren't met.
type ConnectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectMultiError) AllErrors() []error { return m }

// ConnectValidationError is the validation error returned by Connect.Validate
// if the designated constraints aren't met.
type ConnectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectValidationError) ErrorName() string { return "ConnectValidationError" }

// Error satisfies the builtin error interface
func (e ConnectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectValidationError{}

// Validate checks the field values on WidgetRegisterInstrumentCompleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WidgetRegisterInstrumentCompleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WidgetRegisterInstrumentCompleteResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WidgetRegisterInstrumentCompleteResponseMultiError, or nil if none found.
func (m *WidgetRegisterInstrumentCompleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WidgetRegisterInstrumentCompleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WidgetRegisterInstrumentCompleteResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WidgetRegisterInstrumentCompleteResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WidgetRegisterInstrumentCompleteResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WidgetRegisterInstrumentCompleteResponseMultiError(errors)
	}

	return nil
}

// WidgetRegisterInstrumentCompleteResponseMultiError is an error wrapping
// multiple validation errors returned by
// WidgetRegisterInstrumentCompleteResponse.ValidateAll() if the designated
// constraints aren't met.
type WidgetRegisterInstrumentCompleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WidgetRegisterInstrumentCompleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WidgetRegisterInstrumentCompleteResponseMultiError) AllErrors() []error { return m }

// WidgetRegisterInstrumentCompleteResponseValidationError is the validation
// error returned by WidgetRegisterInstrumentCompleteResponse.Validate if the
// designated constraints aren't met.
type WidgetRegisterInstrumentCompleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WidgetRegisterInstrumentCompleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WidgetRegisterInstrumentCompleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WidgetRegisterInstrumentCompleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WidgetRegisterInstrumentCompleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WidgetRegisterInstrumentCompleteResponseValidationError) ErrorName() string {
	return "WidgetRegisterInstrumentCompleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WidgetRegisterInstrumentCompleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWidgetRegisterInstrumentCompleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WidgetRegisterInstrumentCompleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WidgetRegisterInstrumentCompleteResponseValidationError{}
