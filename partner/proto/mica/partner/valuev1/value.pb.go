// Copyright (c) 2022 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: mica/partner/value/v1/value.proto

package valuev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	approvaltypev1 "github.com/1080network/golang/partner/proto/micashared/common/enums/approvaltypev1"
	currencyv1 "github.com/1080network/golang/partner/proto/micashared/common/enums/currencyv1"
	organizationcategoryv1 "github.com/1080network/golang/partner/proto/micashared/common/enums/organizationcategoryv1"
	valueoperationtypev1 "github.com/1080network/golang/partner/proto/micashared/common/enums/valueoperationtypev1"
	v1 "github.com/1080network/golang/partner/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObtainValueResponse_Status int32

const (
	ObtainValueResponse_STATUS_UNSPECIFIED ObtainValueResponse_Status = 0
	// An approval for the full amount
	ObtainValueResponse_STATUS_FULL_APPROVAL ObtainValueResponse_Status = 1
	// An error occurred when processing the request
	ObtainValueResponse_STATUS_ERROR ObtainValueResponse_Status = 2
	// An approval was given for a partial amount
	ObtainValueResponse_STATUS_PARTIAL_APPROVAL ObtainValueResponse_Status = 3
	// User instrument doesn't have sufficient value to cover the transaction
	ObtainValueResponse_STATUS_INSUFFICIENT_VALUE ObtainValueResponse_Status = 4
	// When all products are either ineligible or age restricted
	ObtainValueResponse_STATUS_INELIGIBLE_PRODUCTS ObtainValueResponse_Status = 5
	// Instrument/account not found
	ObtainValueResponse_STATUS_NOT_FOUND ObtainValueResponse_Status = 6
	// User instrument is closed
	ObtainValueResponse_STATUS_INSTRUMENT_CLOSED ObtainValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_TRANSACTION_RISK_FRAUD ObtainValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ObtainValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_USER_RISK_FRAUD ObtainValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ObtainValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ObtainValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	ObtainValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ObtainValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	ObtainValueResponse_STATUS_UNSUPPORTED ObtainValueResponse_Status = 10
	// The Fi is unavailable at this time
	ObtainValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ObtainValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	ObtainValueResponse_STATUS_INVALID_UUEK ObtainValueResponse_Status = 12
	// A valid PIN is required for this transaction
	ObtainValueResponse_STATUS_PIN_REQUIRED ObtainValueResponse_Status = 13
	// returned when processing an EBT transaction but no line items have been given
	ObtainValueResponse_STATUS_MISSING_LINE_ITEMS ObtainValueResponse_Status = 14
	// when partial approval is requested but not supported
	ObtainValueResponse_STATUS_PARTIAL_APPROVAL_INVALID ObtainValueResponse_Status = 15
	// Request resulted in one or more limits being exceeded at the Service Provider
	ObtainValueResponse_STATUS_LIMIT_EXCEEDED ObtainValueResponse_Status = 19
	// This request has already been processed and this is a duplicate request
	ObtainValueResponse_STATUS_DUPLICATE ObtainValueResponse_Status = 20
)

// Enum value maps for ObtainValueResponse_Status.
var (
	ObtainValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		3:  "STATUS_PARTIAL_APPROVAL",
		4:  "STATUS_INSUFFICIENT_VALUE",
		5:  "STATUS_INELIGIBLE_PRODUCTS",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		14: "STATUS_MISSING_LINE_ITEMS",
		15: "STATUS_PARTIAL_APPROVAL_INVALID",
		19: "STATUS_LIMIT_EXCEEDED",
		20: "STATUS_DUPLICATE",
	}
	ObtainValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_PARTIAL_APPROVAL":             3,
		"STATUS_INSUFFICIENT_VALUE":           4,
		"STATUS_INELIGIBLE_PRODUCTS":          5,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_MISSING_LINE_ITEMS":           14,
		"STATUS_PARTIAL_APPROVAL_INVALID":     15,
		"STATUS_LIMIT_EXCEEDED":               19,
		"STATUS_DUPLICATE":                    20,
	}
)

func (x ObtainValueResponse_Status) Enum() *ObtainValueResponse_Status {
	p := new(ObtainValueResponse_Status)
	*p = x
	return p
}

func (x ObtainValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObtainValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_value_v1_value_proto_enumTypes[0].Descriptor()
}

func (ObtainValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_value_v1_value_proto_enumTypes[0]
}

func (x ObtainValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObtainValueResponse_Status.Descriptor instead.
func (ObtainValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{3, 0}
}

type ReturnValueResponse_Status int32

const (
	ReturnValueResponse_STATUS_UNSPECIFIED ReturnValueResponse_Status = 0
	// An approval for the full amount
	ReturnValueResponse_STATUS_FULL_APPROVAL ReturnValueResponse_Status = 1
	// An error occurred when processing the request
	ReturnValueResponse_STATUS_ERROR ReturnValueResponse_Status = 2
	// User instrument is closed
	ReturnValueResponse_STATUS_INSTRUMENT_CLOSED ReturnValueResponse_Status = 3
	// Instrument/account not found
	ReturnValueResponse_STATUS_NOT_FOUND ReturnValueResponse_Status = 4
	// Request triggered a transactional risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_TRANSACTION_RISK_FRAUD ReturnValueResponse_Status = 5
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ReturnValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_USER_RISK_FRAUD ReturnValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ReturnValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ReturnValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	ReturnValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ReturnValueResponse_Status = 6
	// The operation isn't supported by the Service Provider
	ReturnValueResponse_STATUS_UNSUPPORTED ReturnValueResponse_Status = 7
	// The Fi is unavailable at this time
	ReturnValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ReturnValueResponse_Status = 8
	// The UUEK sent is invalid or not found
	ReturnValueResponse_STATUS_INVALID_UUEK ReturnValueResponse_Status = 9
	// Request resulted in one or more limits being exceeded at the Service Provider
	ReturnValueResponse_STATUS_LIMIT_EXCEEDED ReturnValueResponse_Status = 19
)

// Enum value maps for ReturnValueResponse_Status.
var (
	ReturnValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		3:  "STATUS_INSTRUMENT_CLOSED",
		4:  "STATUS_NOT_FOUND",
		5:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		6:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		7:  "STATUS_UNSUPPORTED",
		8:  "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		9:  "STATUS_INVALID_UUEK",
		19: "STATUS_LIMIT_EXCEEDED",
	}
	ReturnValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_INSTRUMENT_CLOSED":            3,
		"STATUS_NOT_FOUND":                    4,
		"STATUS_TRANSACTION_RISK_FRAUD":       5,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   6,
		"STATUS_UNSUPPORTED":                  7,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 8,
		"STATUS_INVALID_UUEK":                 9,
		"STATUS_LIMIT_EXCEEDED":               19,
	}
)

func (x ReturnValueResponse_Status) Enum() *ReturnValueResponse_Status {
	p := new(ReturnValueResponse_Status)
	*p = x
	return p
}

func (x ReturnValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_value_v1_value_proto_enumTypes[1].Descriptor()
}

func (ReturnValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_value_v1_value_proto_enumTypes[1]
}

func (x ReturnValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnValueResponse_Status.Descriptor instead.
func (ReturnValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{5, 0}
}

type GetValueResponse_Status int32

const (
	GetValueResponse_STATUS_UNSPECIFIED GetValueResponse_Status = 0
	GetValueResponse_STATUS_SUCCESS     GetValueResponse_Status = 1
	GetValueResponse_STATUS_ERROR       GetValueResponse_Status = 2
	GetValueResponse_STATUS_NOT_FOUND   GetValueResponse_Status = 3
)

// Enum value maps for GetValueResponse_Status.
var (
	GetValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
	}
	GetValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_NOT_FOUND":   3,
	}
)

func (x GetValueResponse_Status) Enum() *GetValueResponse_Status {
	p := new(GetValueResponse_Status)
	*p = x
	return p
}

func (x GetValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_value_v1_value_proto_enumTypes[2].Descriptor()
}

func (GetValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_value_v1_value_proto_enumTypes[2]
}

func (x GetValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetValueResponse_Status.Descriptor instead.
func (GetValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{7, 0}
}

type ReverseObtainValueResponse_Status int32

const (
	ReverseObtainValueResponse_STATUS_UNSPECIFIED ReverseObtainValueResponse_Status = 0
	// Reversal approved and successful
	ReverseObtainValueResponse_STATUS_SUCCESS ReverseObtainValueResponse_Status = 1
	// An error occurred when processing the request
	ReverseObtainValueResponse_STATUS_ERROR ReverseObtainValueResponse_Status = 2
	// An approval was given for a partial amount
	ReverseObtainValueResponse_STATUS_NOT_FOUND ReverseObtainValueResponse_Status = 3
	// The user needs to call the Service Provider to resolve an issue
	ReverseObtainValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ReverseObtainValueResponse_Status = 4
	// The operation isn't supported by the Service Provider
	ReverseObtainValueResponse_STATUS_UNSUPPORTED ReverseObtainValueResponse_Status = 5
	// The Fi is unavailable at this time
	ReverseObtainValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ReverseObtainValueResponse_Status = 6
	// The UUEK sent is invalid or not found
	ReverseObtainValueResponse_STATUS_INVALID_UUEK ReverseObtainValueResponse_Status = 7
)

// Enum value maps for ReverseObtainValueResponse_Status.
var (
	ReverseObtainValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_USER_CALL_SERVICE_PROVIDER",
		5: "STATUS_UNSUPPORTED",
		6: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		7: "STATUS_INVALID_UUEK",
	}
	ReverseObtainValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_SUCCESS":                      1,
		"STATUS_ERROR":                        2,
		"STATUS_NOT_FOUND":                    3,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   4,
		"STATUS_UNSUPPORTED":                  5,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 6,
		"STATUS_INVALID_UUEK":                 7,
	}
)

func (x ReverseObtainValueResponse_Status) Enum() *ReverseObtainValueResponse_Status {
	p := new(ReverseObtainValueResponse_Status)
	*p = x
	return p
}

func (x ReverseObtainValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReverseObtainValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_value_v1_value_proto_enumTypes[3].Descriptor()
}

func (ReverseObtainValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_value_v1_value_proto_enumTypes[3]
}

func (x ReverseObtainValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReverseObtainValueResponse_Status.Descriptor instead.
func (ReverseObtainValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{9, 0}
}

type ReverseReturnValueResponse_Status int32

const (
	ReverseReturnValueResponse_STATUS_UNSPECIFIED ReverseReturnValueResponse_Status = 0
	// An approval for the full amount
	ReverseReturnValueResponse_STATUS_APPROVAL ReverseReturnValueResponse_Status = 1
	// An error occurred when processing the request
	ReverseReturnValueResponse_STATUS_ERROR ReverseReturnValueResponse_Status = 2
	// Transaction ID, instrument, SP, or other component not found
	ReverseReturnValueResponse_STATUS_NOT_FOUND ReverseReturnValueResponse_Status = 3
	// The user needs to call the Service Provider to resolve an issue
	ReverseReturnValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ReverseReturnValueResponse_Status = 4
	// The operation isn't supported by the Service Provider
	ReverseReturnValueResponse_STATUS_UNSUPPORTED ReverseReturnValueResponse_Status = 5
	// The Fi is unavailable at this time
	ReverseReturnValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ReverseReturnValueResponse_Status = 6
	// The UUEK sent is invalid or not found
	ReverseReturnValueResponse_STATUS_INVALID_UUEK ReverseReturnValueResponse_Status = 7
)

// Enum value maps for ReverseReturnValueResponse_Status.
var (
	ReverseReturnValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_APPROVAL",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_USER_CALL_SERVICE_PROVIDER",
		5: "STATUS_UNSUPPORTED",
		6: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		7: "STATUS_INVALID_UUEK",
	}
	ReverseReturnValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_APPROVAL":                     1,
		"STATUS_ERROR":                        2,
		"STATUS_NOT_FOUND":                    3,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   4,
		"STATUS_UNSUPPORTED":                  5,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 6,
		"STATUS_INVALID_UUEK":                 7,
	}
)

func (x ReverseReturnValueResponse_Status) Enum() *ReverseReturnValueResponse_Status {
	p := new(ReverseReturnValueResponse_Status)
	*p = x
	return p
}

func (x ReverseReturnValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReverseReturnValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_value_v1_value_proto_enumTypes[4].Descriptor()
}

func (ReverseReturnValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_value_v1_value_proto_enumTypes[4]
}

func (x ReverseReturnValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReverseReturnValueResponse_Status.Descriptor instead.
func (ReverseReturnValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{10, 0}
}

type HoldValueResponse_Status int32

const (
	HoldValueResponse_STATUS_UNSPECIFIED HoldValueResponse_Status = 0
	// An approval for the full amount
	HoldValueResponse_STATUS_FULL_APPROVAL HoldValueResponse_Status = 1
	// An error occurred when processing the request
	HoldValueResponse_STATUS_ERROR HoldValueResponse_Status = 2
	// User instrument doesn't have sufficient value to cover the transaction
	HoldValueResponse_STATUS_INSUFFICIENT_VALUE HoldValueResponse_Status = 4
	// Instrument/account not found
	HoldValueResponse_STATUS_NOT_FOUND HoldValueResponse_Status = 6
	// User instrument is closed
	HoldValueResponse_STATUS_INSTRUMENT_CLOSED HoldValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	HoldValueResponse_STATUS_TRANSACTION_RISK_FRAUD HoldValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	HoldValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD HoldValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	HoldValueResponse_STATUS_USER_RISK_FRAUD HoldValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	HoldValueResponse_STATUS_INSTRUMENT_RISK_FRAUD HoldValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	HoldValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER HoldValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	HoldValueResponse_STATUS_UNSUPPORTED HoldValueResponse_Status = 10
	// The Fi is unavailable at this time
	HoldValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE HoldValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	HoldValueResponse_STATUS_INVALID_UUEK HoldValueResponse_Status = 12
	// A valid PIN is required for this transaction
	HoldValueResponse_STATUS_PIN_REQUIRED HoldValueResponse_Status = 13
	// returned when processing an EBT transaction but no line items have been given
	HoldValueResponse_STATUS_MISSING_LINE_ITEMS HoldValueResponse_Status = 14
	// when partial approval is requested but not supported
	HoldValueResponse_STATUS_PARTIAL_APPROVAL_INVALID HoldValueResponse_Status = 15
	// Request resulted in one or more limits being exceeded at the Service Provider
	HoldValueResponse_STATUS_LIMIT_EXCEEDED HoldValueResponse_Status = 19
	// This request has already been processed and this is a duplicate request
	HoldValueResponse_STATUS_DUPLICATE HoldValueResponse_Status = 20
)

// Enum value maps for HoldValueResponse_Status.
var (
	HoldValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		4:  "STATUS_INSUFFICIENT_VALUE",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		14: "STATUS_MISSING_LINE_ITEMS",
		15: "STATUS_PARTIAL_APPROVAL_INVALID",
		19: "STATUS_LIMIT_EXCEEDED",
		20: "STATUS_DUPLICATE",
	}
	HoldValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_INSUFFICIENT_VALUE":           4,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_MISSING_LINE_ITEMS":           14,
		"STATUS_PARTIAL_APPROVAL_INVALID":     15,
		"STATUS_LIMIT_EXCEEDED":               19,
		"STATUS_DUPLICATE":                    20,
	}
)

func (x HoldValueResponse_Status) Enum() *HoldValueResponse_Status {
	p := new(HoldValueResponse_Status)
	*p = x
	return p
}

func (x HoldValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HoldValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_value_v1_value_proto_enumTypes[5].Descriptor()
}

func (HoldValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_value_v1_value_proto_enumTypes[5]
}

func (x HoldValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HoldValueResponse_Status.Descriptor instead.
func (HoldValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{12, 0}
}

type ReleaseHoldValueResponse_Status int32

const (
	ReleaseHoldValueResponse_STATUS_UNSPECIFIED      ReleaseHoldValueResponse_Status = 0
	ReleaseHoldValueResponse_STATUS_SUCCESS          ReleaseHoldValueResponse_Status = 1
	ReleaseHoldValueResponse_STATUS_ERROR            ReleaseHoldValueResponse_Status = 2
	ReleaseHoldValueResponse_STATUS_NOT_FOUND        ReleaseHoldValueResponse_Status = 3
	ReleaseHoldValueResponse_STATUS_ALREADY_EXPIRED  ReleaseHoldValueResponse_Status = 4
	ReleaseHoldValueResponse_STATUS_ALREADY_RELEASED ReleaseHoldValueResponse_Status = 5
)

// Enum value maps for ReleaseHoldValueResponse_Status.
var (
	ReleaseHoldValueResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_ALREADY_EXPIRED",
		5: "STATUS_ALREADY_RELEASED",
	}
	ReleaseHoldValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":      0,
		"STATUS_SUCCESS":          1,
		"STATUS_ERROR":            2,
		"STATUS_NOT_FOUND":        3,
		"STATUS_ALREADY_EXPIRED":  4,
		"STATUS_ALREADY_RELEASED": 5,
	}
)

func (x ReleaseHoldValueResponse_Status) Enum() *ReleaseHoldValueResponse_Status {
	p := new(ReleaseHoldValueResponse_Status)
	*p = x
	return p
}

func (x ReleaseHoldValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseHoldValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_value_v1_value_proto_enumTypes[6].Descriptor()
}

func (ReleaseHoldValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_value_v1_value_proto_enumTypes[6]
}

func (x ReleaseHoldValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseHoldValueResponse_Status.Descriptor instead.
func (ReleaseHoldValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{14, 0}
}

type ObtainHoldValueResponse_Status int32

const (
	ObtainHoldValueResponse_STATUS_UNSPECIFIED ObtainHoldValueResponse_Status = 0
	// An approval for the full amount
	ObtainHoldValueResponse_STATUS_FULL_APPROVAL ObtainHoldValueResponse_Status = 1
	// An error occurred when processing the request
	ObtainHoldValueResponse_STATUS_ERROR ObtainHoldValueResponse_Status = 2
	// An approval was given for a partial amount
	ObtainHoldValueResponse_STATUS_PARTIAL_APPROVAL ObtainHoldValueResponse_Status = 3
	// User instrument doesn't have sufficient value to cover the transaction
	ObtainHoldValueResponse_STATUS_INSUFFICIENT_VALUE ObtainHoldValueResponse_Status = 4
	// Instrument/account not found
	ObtainHoldValueResponse_STATUS_NOT_FOUND ObtainHoldValueResponse_Status = 6
	// User instrument is closed
	ObtainHoldValueResponse_STATUS_INSTRUMENT_CLOSED ObtainHoldValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	ObtainHoldValueResponse_STATUS_TRANSACTION_RISK_FRAUD ObtainHoldValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	ObtainHoldValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD ObtainHoldValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	ObtainHoldValueResponse_STATUS_USER_RISK_FRAUD ObtainHoldValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	ObtainHoldValueResponse_STATUS_INSTRUMENT_RISK_FRAUD ObtainHoldValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	ObtainHoldValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER ObtainHoldValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	ObtainHoldValueResponse_STATUS_UNSUPPORTED ObtainHoldValueResponse_Status = 10
	// The Fi is unavailable at this time
	ObtainHoldValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE ObtainHoldValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	ObtainHoldValueResponse_STATUS_INVALID_UUEK ObtainHoldValueResponse_Status = 12
	// A valid PIN is required for this transaction
	ObtainHoldValueResponse_STATUS_PIN_REQUIRED ObtainHoldValueResponse_Status = 13
	// when partial approval is requested but not supported
	ObtainHoldValueResponse_STATUS_PARTIAL_APPROVAL_INVALID ObtainHoldValueResponse_Status = 15
	// Request resulted in one or more limits being exceeded at the Service Provider
	ObtainHoldValueResponse_STATUS_LIMIT_EXCEEDED ObtainHoldValueResponse_Status = 19
	// This request has already been processed and this is a duplicate request
	ObtainHoldValueResponse_STATUS_DUPLICATE ObtainHoldValueResponse_Status = 20
	// The hold was already expired or released or not found (as it's already been released or expired and purged)
	ObtainHoldValueResponse_STATUS_INVALID_HOLD ObtainHoldValueResponse_Status = 21
)

// Enum value maps for ObtainHoldValueResponse_Status.
var (
	ObtainHoldValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		3:  "STATUS_PARTIAL_APPROVAL",
		4:  "STATUS_INSUFFICIENT_VALUE",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		15: "STATUS_PARTIAL_APPROVAL_INVALID",
		19: "STATUS_LIMIT_EXCEEDED",
		20: "STATUS_DUPLICATE",
		21: "STATUS_INVALID_HOLD",
	}
	ObtainHoldValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_PARTIAL_APPROVAL":             3,
		"STATUS_INSUFFICIENT_VALUE":           4,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_PARTIAL_APPROVAL_INVALID":     15,
		"STATUS_LIMIT_EXCEEDED":               19,
		"STATUS_DUPLICATE":                    20,
		"STATUS_INVALID_HOLD":                 21,
	}
)

func (x ObtainHoldValueResponse_Status) Enum() *ObtainHoldValueResponse_Status {
	p := new(ObtainHoldValueResponse_Status)
	*p = x
	return p
}

func (x ObtainHoldValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObtainHoldValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_value_v1_value_proto_enumTypes[7].Descriptor()
}

func (ObtainHoldValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_value_v1_value_proto_enumTypes[7]
}

func (x ObtainHoldValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObtainHoldValueResponse_Status.Descriptor instead.
func (ObtainHoldValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{17, 0}
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mica's transaction record primary key.
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// version of the user record, used for optimistic locking
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Date that the Store was created at Mica.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// Date that the Store was last updated at Mica.
	Updated       *timestamppb.Timestamp                  `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	OperationType valueoperationtypev1.ValueOperationType `protobuf:"varint,5,opt,name=operation_type,json=operationType,proto3,enum=micashared.common.enums.valueoperationtype.v1.ValueOperationType" json:"operation_type,omitempty"`
	// The UUEK of the instrument either one specific to the partner or one provisioned by an Service Provider.
	Uuek string `protobuf:"bytes,6,opt,name=uuek,proto3" json:"uuek,omitempty"`
	// A unique identifier at the Partner for this transaction.
	TransactionRef string `protobuf:"bytes,7,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
	Currency currencyv1.Currency `protobuf:"varint,9,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Deprecated: Marked as deprecated in mica/partner/value/v1/value.proto.
	ObsoleteOrganizationKey string `protobuf:"bytes,10,opt,name=obsolete_organization_key,json=obsoleteOrganizationKey,proto3" json:"obsolete_organization_key,omitempty"`
	// The organization this operation is being processed for.
	//
	// Types that are assignable to OrganizationIdentifier:
	//
	//	*Value_OrganizationKey
	//	*Value_OrganizationRef
	OrganizationIdentifier isValue_OrganizationIdentifier `protobuf_oneof:"organization_identifier"`
	// Organization category
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,11,opt,name=category,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
	// Deprecated: Marked as deprecated in mica/partner/value/v1/value.proto.
	ObsoleteStoreKey string `protobuf:"bytes,12,opt,name=obsolete_store_key,json=obsoleteStoreKey,proto3" json:"obsolete_store_key,omitempty"`
	// The store where this operation occurred.
	//
	// Types that are assignable to StoreIdentifier:
	//
	//	*Value_StoreKey
	//	*Value_StoreRef
	StoreIdentifier isValue_StoreIdentifier `protobuf_oneof:"store_identifier"`
	// The clerk that processed this operation.
	ClerkIdentifier string `protobuf:"bytes,13,opt,name=clerk_identifier,json=clerkIdentifier,proto3" json:"clerk_identifier,omitempty"`
	// Total amount for this transaction.
	//
	// When Items are present then: `total_amount` = sum(`items.amount + items.tax_amount`)
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,14,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	RequestedAmount string `protobuf:"bytes,15,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,16,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
	OrderNumber    string `protobuf:"bytes,17,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	// List of items bought or returned.
	LineItemAndStatuses []*v1.LineItemAndStatus `protobuf:"bytes,18,rep,name=line_item_and_statuses,json=lineItemAndStatuses,proto3" json:"line_item_and_statuses,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{0}
}

func (x *Value) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *Value) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Value) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Value) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Value) GetOperationType() valueoperationtypev1.ValueOperationType {
	if x != nil {
		return x.OperationType
	}
	return valueoperationtypev1.ValueOperationType(0)
}

func (x *Value) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

func (x *Value) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *Value) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

// Deprecated: Marked as deprecated in mica/partner/value/v1/value.proto.
func (x *Value) GetObsoleteOrganizationKey() string {
	if x != nil {
		return x.ObsoleteOrganizationKey
	}
	return ""
}

func (m *Value) GetOrganizationIdentifier() isValue_OrganizationIdentifier {
	if m != nil {
		return m.OrganizationIdentifier
	}
	return nil
}

func (x *Value) GetOrganizationKey() string {
	if x, ok := x.GetOrganizationIdentifier().(*Value_OrganizationKey); ok {
		return x.OrganizationKey
	}
	return ""
}

func (x *Value) GetOrganizationRef() string {
	if x, ok := x.GetOrganizationIdentifier().(*Value_OrganizationRef); ok {
		return x.OrganizationRef
	}
	return ""
}

func (x *Value) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

// Deprecated: Marked as deprecated in mica/partner/value/v1/value.proto.
func (x *Value) GetObsoleteStoreKey() string {
	if x != nil {
		return x.ObsoleteStoreKey
	}
	return ""
}

func (m *Value) GetStoreIdentifier() isValue_StoreIdentifier {
	if m != nil {
		return m.StoreIdentifier
	}
	return nil
}

func (x *Value) GetStoreKey() string {
	if x, ok := x.GetStoreIdentifier().(*Value_StoreKey); ok {
		return x.StoreKey
	}
	return ""
}

func (x *Value) GetStoreRef() string {
	if x, ok := x.GetStoreIdentifier().(*Value_StoreRef); ok {
		return x.StoreRef
	}
	return ""
}

func (x *Value) GetClerkIdentifier() string {
	if x != nil {
		return x.ClerkIdentifier
	}
	return ""
}

func (x *Value) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *Value) GetRequestedAmount() string {
	if x != nil {
		return x.RequestedAmount
	}
	return ""
}

func (x *Value) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

func (x *Value) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *Value) GetLineItemAndStatuses() []*v1.LineItemAndStatus {
	if x != nil {
		return x.LineItemAndStatuses
	}
	return nil
}

type isValue_OrganizationIdentifier interface {
	isValue_OrganizationIdentifier()
}

type Value_OrganizationKey struct {
	OrganizationKey string `protobuf:"bytes,19,opt,name=organization_key,json=organizationKey,proto3,oneof"`
}

type Value_OrganizationRef struct {
	// The primary key for this organization at the Partner.
	OrganizationRef string `protobuf:"bytes,8,opt,name=organization_ref,json=organizationRef,proto3,oneof"`
}

func (*Value_OrganizationKey) isValue_OrganizationIdentifier() {}

func (*Value_OrganizationRef) isValue_OrganizationIdentifier() {}

type isValue_StoreIdentifier interface {
	isValue_StoreIdentifier()
}

type Value_StoreKey struct {
	StoreKey string `protobuf:"bytes,20,opt,name=store_key,json=storeKey,proto3,oneof"`
}

type Value_StoreRef struct {
	// The primary key for this store at the Partner.
	StoreRef string `protobuf:"bytes,21,opt,name=store_ref,json=storeRef,proto3,oneof"`
}

func (*Value_StoreKey) isValue_StoreIdentifier() {}

func (*Value_StoreRef) isValue_StoreIdentifier() {}

// Type that represents the details of the value request (either to obtain or return).
type ValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUEK of the instrument is either one specific to the partner or one provisioned by a Service Provider.
	Uuek string `protobuf:"bytes,1,opt,name=uuek,proto3" json:"uuek,omitempty"`
	// A unique identifier at the Partner for this transaction.
	TransactionRef string `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
	Currency currencyv1.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	// Deprecated: Marked as deprecated in mica/partner/value/v1/value.proto.
	ObsoleteOrganizationKey string `protobuf:"bytes,5,opt,name=obsolete_organization_key,json=obsoleteOrganizationKey,proto3" json:"obsolete_organization_key,omitempty"`
	// The organization this operation is being processed for.
	//
	// Types that are assignable to OrganizationIdentifier:
	//
	//	*ValueRequest_OrganizationKey
	//	*ValueRequest_OrganizationRef
	OrganizationIdentifier isValueRequest_OrganizationIdentifier `protobuf_oneof:"organization_identifier"`
	// Organization category
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,6,opt,name=category,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
	// Deprecated: Marked as deprecated in mica/partner/value/v1/value.proto.
	ObsoleteStoreKey string `protobuf:"bytes,7,opt,name=obsolete_store_key,json=obsoleteStoreKey,proto3" json:"obsolete_store_key,omitempty"`
	// The store where this operation occurred.
	//
	// Types that are assignable to StoreIdentifier:
	//
	//	*ValueRequest_StoreKey
	//	*ValueRequest_StoreRef
	StoreIdentifier isValueRequest_StoreIdentifier `protobuf_oneof:"store_identifier"`
	// The clerk that processed this operation.
	ClerkIdentifier string `protobuf:"bytes,8,opt,name=clerk_identifier,json=clerkIdentifier,proto3" json:"clerk_identifier,omitempty"`
	// Total amount for this transaction.
	//
	// When Items are present then: `total_amount` = sum(`items.amount + items.tax_amount`) + surcharge_amount
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,9,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The additional cost for this transaction. This would hold the ATM fee or the tip at a restaurant.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	SurchargeAmount string `protobuf:"bytes,19,opt,name=surcharge_amount,json=surchargeAmount,proto3" json:"surcharge_amount,omitempty"`
	OrderNumber     string `protobuf:"bytes,10,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	// List of items bought or returned.
	LineItems   []*v1.LineItem             `protobuf:"bytes,11,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	Adjustments []*v1.Adjustment           `protobuf:"bytes,12,rep,name=adjustments,proto3" json:"adjustments,omitempty"`
	ReceiptData *v1.ReceiptTransactionData `protobuf:"bytes,14,opt,name=receipt_data,json=receiptData,proto3" json:"receipt_data,omitempty"`
}

func (x *ValueRequest) Reset() {
	*x = ValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRequest) ProtoMessage() {}

func (x *ValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRequest.ProtoReflect.Descriptor instead.
func (*ValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{1}
}

func (x *ValueRequest) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

func (x *ValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ValueRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

// Deprecated: Marked as deprecated in mica/partner/value/v1/value.proto.
func (x *ValueRequest) GetObsoleteOrganizationKey() string {
	if x != nil {
		return x.ObsoleteOrganizationKey
	}
	return ""
}

func (m *ValueRequest) GetOrganizationIdentifier() isValueRequest_OrganizationIdentifier {
	if m != nil {
		return m.OrganizationIdentifier
	}
	return nil
}

func (x *ValueRequest) GetOrganizationKey() string {
	if x, ok := x.GetOrganizationIdentifier().(*ValueRequest_OrganizationKey); ok {
		return x.OrganizationKey
	}
	return ""
}

func (x *ValueRequest) GetOrganizationRef() string {
	if x, ok := x.GetOrganizationIdentifier().(*ValueRequest_OrganizationRef); ok {
		return x.OrganizationRef
	}
	return ""
}

func (x *ValueRequest) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

// Deprecated: Marked as deprecated in mica/partner/value/v1/value.proto.
func (x *ValueRequest) GetObsoleteStoreKey() string {
	if x != nil {
		return x.ObsoleteStoreKey
	}
	return ""
}

func (m *ValueRequest) GetStoreIdentifier() isValueRequest_StoreIdentifier {
	if m != nil {
		return m.StoreIdentifier
	}
	return nil
}

func (x *ValueRequest) GetStoreKey() string {
	if x, ok := x.GetStoreIdentifier().(*ValueRequest_StoreKey); ok {
		return x.StoreKey
	}
	return ""
}

func (x *ValueRequest) GetStoreRef() string {
	if x, ok := x.GetStoreIdentifier().(*ValueRequest_StoreRef); ok {
		return x.StoreRef
	}
	return ""
}

func (x *ValueRequest) GetClerkIdentifier() string {
	if x != nil {
		return x.ClerkIdentifier
	}
	return ""
}

func (x *ValueRequest) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *ValueRequest) GetSurchargeAmount() string {
	if x != nil {
		return x.SurchargeAmount
	}
	return ""
}

func (x *ValueRequest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *ValueRequest) GetLineItems() []*v1.LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *ValueRequest) GetAdjustments() []*v1.Adjustment {
	if x != nil {
		return x.Adjustments
	}
	return nil
}

func (x *ValueRequest) GetReceiptData() *v1.ReceiptTransactionData {
	if x != nil {
		return x.ReceiptData
	}
	return nil
}

type isValueRequest_OrganizationIdentifier interface {
	isValueRequest_OrganizationIdentifier()
}

type ValueRequest_OrganizationKey struct {
	OrganizationKey string `protobuf:"bytes,16,opt,name=organization_key,json=organizationKey,proto3,oneof"`
}

type ValueRequest_OrganizationRef struct {
	// The primary key for this organization at the Partner.
	OrganizationRef string `protobuf:"bytes,15,opt,name=organization_ref,json=organizationRef,proto3,oneof"`
}

func (*ValueRequest_OrganizationKey) isValueRequest_OrganizationIdentifier() {}

func (*ValueRequest_OrganizationRef) isValueRequest_OrganizationIdentifier() {}

type isValueRequest_StoreIdentifier interface {
	isValueRequest_StoreIdentifier()
}

type ValueRequest_StoreKey struct {
	StoreKey string `protobuf:"bytes,17,opt,name=store_key,json=storeKey,proto3,oneof"`
}

type ValueRequest_StoreRef struct {
	// The primary key for this store at the Partner.
	StoreRef string `protobuf:"bytes,18,opt,name=store_ref,json=storeRef,proto3,oneof"`
}

func (*ValueRequest_StoreKey) isValueRequest_StoreIdentifier() {}

func (*ValueRequest_StoreRef) isValueRequest_StoreIdentifier() {}

// Type that represents the details of the value request (either to obtain or return).
type ObtainValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovalType approvaltypev1.ApprovalType `protobuf:"varint,1,opt,name=approval_type,json=approvalType,proto3,enum=micashared.common.enums.approvaltype.v1.ApprovalType" json:"approval_type,omitempty"`
	Value        *ValueRequest               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ObtainValueRequest) Reset() {
	*x = ObtainValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainValueRequest) ProtoMessage() {}

func (x *ObtainValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainValueRequest.ProtoReflect.Descriptor instead.
func (*ObtainValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{2}
}

func (x *ObtainValueRequest) GetApprovalType() approvaltypev1.ApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return approvaltypev1.ApprovalType(0)
}

func (x *ObtainValueRequest) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

type ObtainValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ObtainValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.value.v1.ObtainValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// Correlation ID of the request assigned by Mica.
	Cid string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,5,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
	// summary of discounts that were applied
	DiscountSummary *v1.DiscountSummary `protobuf:"bytes,7,opt,name=discount_summary,json=discountSummary,proto3" json:"discount_summary,omitempty"`
	// status of each line item based on processing by Mica. The list will be in the same order as the request and will
	// will typically have a status of LINE_ITEM_STATUS_ELIGIBLE.
	LineItemSequenceAndStatuses []*v1.LineItemSequenceAndStatus `protobuf:"bytes,6,rep,name=line_item_sequence_and_statuses,json=lineItemSequenceAndStatuses,proto3" json:"line_item_sequence_and_statuses,omitempty"`
	ImmutableInstrumentDetails  *v1.ImmutableInstrumentDetails  `protobuf:"bytes,8,opt,name=immutable_instrument_details,json=immutableInstrumentDetails,proto3" json:"immutable_instrument_details,omitempty"`
}

func (x *ObtainValueResponse) Reset() {
	*x = ObtainValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainValueResponse) ProtoMessage() {}

func (x *ObtainValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainValueResponse.ProtoReflect.Descriptor instead.
func (*ObtainValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{3}
}

func (x *ObtainValueResponse) GetStatus() ObtainValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ObtainValueResponse_STATUS_UNSPECIFIED
}

func (x *ObtainValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ObtainValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ObtainValueResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *ObtainValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

func (x *ObtainValueResponse) GetDiscountSummary() *v1.DiscountSummary {
	if x != nil {
		return x.DiscountSummary
	}
	return nil
}

func (x *ObtainValueResponse) GetLineItemSequenceAndStatuses() []*v1.LineItemSequenceAndStatus {
	if x != nil {
		return x.LineItemSequenceAndStatuses
	}
	return nil
}

func (x *ObtainValueResponse) GetImmutableInstrumentDetails() *v1.ImmutableInstrumentDetails {
	if x != nil {
		return x.ImmutableInstrumentDetails
	}
	return nil
}

type ReturnValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *ValueRequest `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// if set the return value must match the immutable identifier that the uuek abstracts. This value is returned in the value requests
	ImmutableIdentifierMustMatch string `protobuf:"bytes,2,opt,name=immutable_identifier_must_match,json=immutableIdentifierMustMatch,proto3" json:"immutable_identifier_must_match,omitempty"`
}

func (x *ReturnValueRequest) Reset() {
	*x = ReturnValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnValueRequest) ProtoMessage() {}

func (x *ReturnValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnValueRequest.ProtoReflect.Descriptor instead.
func (*ReturnValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{4}
}

func (x *ReturnValueRequest) GetValue() *ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReturnValueRequest) GetImmutableIdentifierMustMatch() string {
	if x != nil {
		return x.ImmutableIdentifierMustMatch
	}
	return ""
}

type ReturnValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReturnValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.value.v1.ReturnValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// Correlation ID of the request assigned by Mica.
	Cid string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount             string                         `protobuf:"bytes,5,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
	ImmutableInstrumentDetails *v1.ImmutableInstrumentDetails `protobuf:"bytes,6,opt,name=immutable_instrument_details,json=immutableInstrumentDetails,proto3" json:"immutable_instrument_details,omitempty"`
}

func (x *ReturnValueResponse) Reset() {
	*x = ReturnValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnValueResponse) ProtoMessage() {}

func (x *ReturnValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnValueResponse.ProtoReflect.Descriptor instead.
func (*ReturnValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{5}
}

func (x *ReturnValueResponse) GetStatus() ReturnValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReturnValueResponse_STATUS_UNSPECIFIED
}

func (x *ReturnValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReturnValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ReturnValueResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *ReturnValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

func (x *ReturnValueResponse) GetImmutableInstrumentDetails() *v1.ImmutableInstrumentDetails {
	if x != nil {
		return x.ImmutableInstrumentDetails
	}
	return nil
}

type GetValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TransactionIdentifier:
	//
	//	*GetValueRequest_TransactionKey
	//	*GetValueRequest_TransactionRef
	TransactionIdentifier isGetValueRequest_TransactionIdentifier `protobuf_oneof:"transaction_identifier"`
}

func (x *GetValueRequest) Reset() {
	*x = GetValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueRequest) ProtoMessage() {}

func (x *GetValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueRequest.ProtoReflect.Descriptor instead.
func (*GetValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{6}
}

func (m *GetValueRequest) GetTransactionIdentifier() isGetValueRequest_TransactionIdentifier {
	if m != nil {
		return m.TransactionIdentifier
	}
	return nil
}

func (x *GetValueRequest) GetTransactionKey() string {
	if x, ok := x.GetTransactionIdentifier().(*GetValueRequest_TransactionKey); ok {
		return x.TransactionKey
	}
	return ""
}

func (x *GetValueRequest) GetTransactionRef() string {
	if x, ok := x.GetTransactionIdentifier().(*GetValueRequest_TransactionRef); ok {
		return x.TransactionRef
	}
	return ""
}

type isGetValueRequest_TransactionIdentifier interface {
	isGetValueRequest_TransactionIdentifier()
}

type GetValueRequest_TransactionKey struct {
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3,oneof"`
}

type GetValueRequest_TransactionRef struct {
	// the Partner's reference for this transaction
	TransactionRef string `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3,oneof"`
}

func (*GetValueRequest_TransactionKey) isGetValueRequest_TransactionIdentifier() {}

func (*GetValueRequest_TransactionRef) isGetValueRequest_TransactionIdentifier() {}

type GetValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.value.v1.GetValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error               `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Value  *Value                  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The oldest transaction available
	OldestTransactionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=oldest_transaction_time,json=oldestTransactionTime,proto3" json:"oldest_transaction_time,omitempty"`
}

func (x *GetValueResponse) Reset() {
	*x = GetValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValueResponse) ProtoMessage() {}

func (x *GetValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValueResponse.ProtoReflect.Descriptor instead.
func (*GetValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{7}
}

func (x *GetValueResponse) GetStatus() GetValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetValueResponse_STATUS_UNSPECIFIED
}

func (x *GetValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetValueResponse) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetValueResponse) GetOldestTransactionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OldestTransactionTime
	}
	return nil
}

type ReverseValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TransactionIdentifier:
	//
	//	*ReverseValueRequest_TransactionKey
	//	*ReverseValueRequest_TransactionRef
	TransactionIdentifier isReverseValueRequest_TransactionIdentifier `protobuf_oneof:"transaction_identifier"`
}

func (x *ReverseValueRequest) Reset() {
	*x = ReverseValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseValueRequest) ProtoMessage() {}

func (x *ReverseValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseValueRequest.ProtoReflect.Descriptor instead.
func (*ReverseValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{8}
}

func (m *ReverseValueRequest) GetTransactionIdentifier() isReverseValueRequest_TransactionIdentifier {
	if m != nil {
		return m.TransactionIdentifier
	}
	return nil
}

func (x *ReverseValueRequest) GetTransactionKey() string {
	if x, ok := x.GetTransactionIdentifier().(*ReverseValueRequest_TransactionKey); ok {
		return x.TransactionKey
	}
	return ""
}

func (x *ReverseValueRequest) GetTransactionRef() string {
	if x, ok := x.GetTransactionIdentifier().(*ReverseValueRequest_TransactionRef); ok {
		return x.TransactionRef
	}
	return ""
}

type isReverseValueRequest_TransactionIdentifier interface {
	isReverseValueRequest_TransactionIdentifier()
}

type ReverseValueRequest_TransactionKey struct {
	// Mica primary key, returned when the original transaction was processed by Mica
	TransactionKey string `protobuf:"bytes,1,opt,name=transaction_key,json=transactionKey,proto3,oneof"`
}

type ReverseValueRequest_TransactionRef struct {
	// A unique identifier at the Partner for the transaction being reversed.
	TransactionRef string `protobuf:"bytes,2,opt,name=transaction_ref,json=transactionRef,proto3,oneof"`
}

func (*ReverseValueRequest_TransactionKey) isReverseValueRequest_TransactionIdentifier() {}

func (*ReverseValueRequest_TransactionRef) isReverseValueRequest_TransactionIdentifier() {}

type ReverseObtainValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReverseObtainValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.value.v1.ReverseObtainValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
}

func (x *ReverseObtainValueResponse) Reset() {
	*x = ReverseObtainValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseObtainValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseObtainValueResponse) ProtoMessage() {}

func (x *ReverseObtainValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseObtainValueResponse.ProtoReflect.Descriptor instead.
func (*ReverseObtainValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{9}
}

func (x *ReverseObtainValueResponse) GetStatus() ReverseObtainValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReverseObtainValueResponse_STATUS_UNSPECIFIED
}

func (x *ReverseObtainValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReverseObtainValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

// TODO if this remains the same as ObtainReversalResponse, dedupe. probably not because of discounts
type ReverseReturnValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReverseReturnValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.value.v1.ReverseReturnValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
}

func (x *ReverseReturnValueResponse) Reset() {
	*x = ReverseReturnValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseReturnValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseReturnValueResponse) ProtoMessage() {}

func (x *ReverseReturnValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseReturnValueResponse.ProtoReflect.Descriptor instead.
func (*ReverseReturnValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{10}
}

func (x *ReverseReturnValueResponse) GetStatus() ReverseReturnValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReverseReturnValueResponse_STATUS_UNSPECIFIED
}

func (x *ReverseReturnValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReverseReturnValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

type HoldValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Uuek       string                 `protobuf:"bytes,2,opt,name=uuek,proto3" json:"uuek,omitempty"`
	// A unique identifier at the Partner for this transaction.
	TransactionRef string `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
	Currency        currencyv1.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	LocationDetails *LocationDetails    `protobuf:"bytes,5,opt,name=location_details,json=locationDetails,proto3" json:"location_details,omitempty"`
	// Total amount for this transaction.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The additional cost for this transaction. This would hold the ATM fee or the tip at a restaurant.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	SurchargeAmount string `protobuf:"bytes,7,opt,name=surcharge_amount,json=surchargeAmount,proto3" json:"surcharge_amount,omitempty"`
}

func (x *HoldValueRequest) Reset() {
	*x = HoldValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldValueRequest) ProtoMessage() {}

func (x *HoldValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldValueRequest.ProtoReflect.Descriptor instead.
func (*HoldValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{11}
}

func (x *HoldValueRequest) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *HoldValueRequest) GetUuek() string {
	if x != nil {
		return x.Uuek
	}
	return ""
}

func (x *HoldValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *HoldValueRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *HoldValueRequest) GetLocationDetails() *LocationDetails {
	if x != nil {
		return x.LocationDetails
	}
	return nil
}

func (x *HoldValueRequest) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *HoldValueRequest) GetSurchargeAmount() string {
	if x != nil {
		return x.SurchargeAmount
	}
	return ""
}

type HoldValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HoldValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.value.v1.HoldValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// Correlation ID of the request assigned by Mica.
	Cid string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,5,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
}

func (x *HoldValueResponse) Reset() {
	*x = HoldValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldValueResponse) ProtoMessage() {}

func (x *HoldValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldValueResponse.ProtoReflect.Descriptor instead.
func (*HoldValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{12}
}

func (x *HoldValueResponse) GetStatus() HoldValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return HoldValueResponse_STATUS_UNSPECIFIED
}

func (x *HoldValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *HoldValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *HoldValueResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *HoldValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

type ReleaseHoldValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TransactionIdentifier:
	//
	//	*ReleaseHoldValueRequest_HoldTransactionKey
	//	*ReleaseHoldValueRequest_HoldTransactionRef
	TransactionIdentifier isReleaseHoldValueRequest_TransactionIdentifier `protobuf_oneof:"transaction_identifier"`
	// the Partner's reference for the release transaction
	TransactionRef string `protobuf:"bytes,3,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
}

func (x *ReleaseHoldValueRequest) Reset() {
	*x = ReleaseHoldValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseHoldValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseHoldValueRequest) ProtoMessage() {}

func (x *ReleaseHoldValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseHoldValueRequest.ProtoReflect.Descriptor instead.
func (*ReleaseHoldValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{13}
}

func (m *ReleaseHoldValueRequest) GetTransactionIdentifier() isReleaseHoldValueRequest_TransactionIdentifier {
	if m != nil {
		return m.TransactionIdentifier
	}
	return nil
}

func (x *ReleaseHoldValueRequest) GetHoldTransactionKey() string {
	if x, ok := x.GetTransactionIdentifier().(*ReleaseHoldValueRequest_HoldTransactionKey); ok {
		return x.HoldTransactionKey
	}
	return ""
}

func (x *ReleaseHoldValueRequest) GetHoldTransactionRef() string {
	if x, ok := x.GetTransactionIdentifier().(*ReleaseHoldValueRequest_HoldTransactionRef); ok {
		return x.HoldTransactionRef
	}
	return ""
}

func (x *ReleaseHoldValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

type isReleaseHoldValueRequest_TransactionIdentifier interface {
	isReleaseHoldValueRequest_TransactionIdentifier()
}

type ReleaseHoldValueRequest_HoldTransactionKey struct {
	HoldTransactionKey string `protobuf:"bytes,1,opt,name=hold_transaction_key,json=holdTransactionKey,proto3,oneof"`
}

type ReleaseHoldValueRequest_HoldTransactionRef struct {
	// the Partner's reference for the hold transaction
	HoldTransactionRef string `protobuf:"bytes,2,opt,name=hold_transaction_ref,json=holdTransactionRef,proto3,oneof"`
}

func (*ReleaseHoldValueRequest_HoldTransactionKey) isReleaseHoldValueRequest_TransactionIdentifier() {
}

func (*ReleaseHoldValueRequest_HoldTransactionRef) isReleaseHoldValueRequest_TransactionIdentifier() {
}

type ReleaseHoldValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReleaseHoldValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.value.v1.ReleaseHoldValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// Correlation ID of the request assigned by Mica.
	Cid string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *ReleaseHoldValueResponse) Reset() {
	*x = ReleaseHoldValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseHoldValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseHoldValueResponse) ProtoMessage() {}

func (x *ReleaseHoldValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseHoldValueResponse.ProtoReflect.Descriptor instead.
func (*ReleaseHoldValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{14}
}

func (x *ReleaseHoldValueResponse) GetStatus() ReleaseHoldValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReleaseHoldValueResponse_STATUS_UNSPECIFIED
}

func (x *ReleaseHoldValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReleaseHoldValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ReleaseHoldValueResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

type LocationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The organization this operation is being processed for.
	//
	// Types that are assignable to OrganizationIdentifier:
	//
	//	*LocationDetails_OrganizationKey
	//	*LocationDetails_OrganizationRef
	OrganizationIdentifier isLocationDetails_OrganizationIdentifier `protobuf_oneof:"organization_identifier"`
	// Organization category
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,6,opt,name=category,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
	// The store where this operation occurred.
	//
	// Types that are assignable to StoreIdentifier:
	//
	//	*LocationDetails_StoreKey
	//	*LocationDetails_StoreRef
	StoreIdentifier isLocationDetails_StoreIdentifier `protobuf_oneof:"store_identifier"`
}

func (x *LocationDetails) Reset() {
	*x = LocationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationDetails) ProtoMessage() {}

func (x *LocationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationDetails.ProtoReflect.Descriptor instead.
func (*LocationDetails) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{15}
}

func (m *LocationDetails) GetOrganizationIdentifier() isLocationDetails_OrganizationIdentifier {
	if m != nil {
		return m.OrganizationIdentifier
	}
	return nil
}

func (x *LocationDetails) GetOrganizationKey() string {
	if x, ok := x.GetOrganizationIdentifier().(*LocationDetails_OrganizationKey); ok {
		return x.OrganizationKey
	}
	return ""
}

func (x *LocationDetails) GetOrganizationRef() string {
	if x, ok := x.GetOrganizationIdentifier().(*LocationDetails_OrganizationRef); ok {
		return x.OrganizationRef
	}
	return ""
}

func (x *LocationDetails) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

func (m *LocationDetails) GetStoreIdentifier() isLocationDetails_StoreIdentifier {
	if m != nil {
		return m.StoreIdentifier
	}
	return nil
}

func (x *LocationDetails) GetStoreKey() string {
	if x, ok := x.GetStoreIdentifier().(*LocationDetails_StoreKey); ok {
		return x.StoreKey
	}
	return ""
}

func (x *LocationDetails) GetStoreRef() string {
	if x, ok := x.GetStoreIdentifier().(*LocationDetails_StoreRef); ok {
		return x.StoreRef
	}
	return ""
}

type isLocationDetails_OrganizationIdentifier interface {
	isLocationDetails_OrganizationIdentifier()
}

type LocationDetails_OrganizationKey struct {
	OrganizationKey string `protobuf:"bytes,16,opt,name=organization_key,json=organizationKey,proto3,oneof"`
}

type LocationDetails_OrganizationRef struct {
	// The primary key for this organization at the Partner.
	OrganizationRef string `protobuf:"bytes,15,opt,name=organization_ref,json=organizationRef,proto3,oneof"`
}

func (*LocationDetails_OrganizationKey) isLocationDetails_OrganizationIdentifier() {}

func (*LocationDetails_OrganizationRef) isLocationDetails_OrganizationIdentifier() {}

type isLocationDetails_StoreIdentifier interface {
	isLocationDetails_StoreIdentifier()
}

type LocationDetails_StoreKey struct {
	StoreKey string `protobuf:"bytes,17,opt,name=store_key,json=storeKey,proto3,oneof"`
}

type LocationDetails_StoreRef struct {
	// The primary key for this store at the Partner.
	StoreRef string `protobuf:"bytes,18,opt,name=store_ref,json=storeRef,proto3,oneof"`
}

func (*LocationDetails_StoreKey) isLocationDetails_StoreIdentifier() {}

func (*LocationDetails_StoreRef) isLocationDetails_StoreIdentifier() {}

type ObtainHoldValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If a previous hold has been placed on the instrument, the hold transaction key or ref must be provided
	//
	// Types that are assignable to TransactionIdentifier:
	//
	//	*ObtainHoldValueRequest_HoldTransactionKey
	//	*ObtainHoldValueRequest_HoldTransactionRef
	TransactionIdentifier isObtainHoldValueRequest_TransactionIdentifier `protobuf_oneof:"transaction_identifier"`
	ApprovalType          approvaltypev1.ApprovalType                    `protobuf:"varint,3,opt,name=approval_type,json=approvalType,proto3,enum=micashared.common.enums.approvaltype.v1.ApprovalType" json:"approval_type,omitempty"`
	// A unique identifier at the Partner for this transaction.
	TransactionRef string `protobuf:"bytes,4,opt,name=transaction_ref,json=transactionRef,proto3" json:"transaction_ref,omitempty"`
	// The 3-letter currency code defined in ISO 4217. Note all amounts are in this currency.
	Currency        currencyv1.Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	LocationDetails *LocationDetails    `protobuf:"bytes,6,opt,name=location_details,json=locationDetails,proto3" json:"location_details,omitempty"`
	// The clerk that processed this operation.
	ClerkIdentifier string `protobuf:"bytes,7,opt,name=clerk_identifier,json=clerkIdentifier,proto3" json:"clerk_identifier,omitempty"`
	// Total amount for this transaction.
	//
	// When Items are present then: `total_amount` = sum(`items.amount + items.tax_amount`) + surcharge_amount
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	TotalAmount string `protobuf:"bytes,8,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// The additional cost for this transaction. This would hold the ATM fee or the tip at a restaurant.
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	SurchargeAmount string `protobuf:"bytes,9,opt,name=surcharge_amount,json=surchargeAmount,proto3" json:"surcharge_amount,omitempty"`
	OrderNumber     string `protobuf:"bytes,10,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	// List of items bought or returned.
	LineItems   []*v1.LineItem             `protobuf:"bytes,11,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	Adjustments []*v1.Adjustment           `protobuf:"bytes,12,rep,name=adjustments,proto3" json:"adjustments,omitempty"`
	ReceiptData *v1.ReceiptTransactionData `protobuf:"bytes,13,opt,name=receipt_data,json=receiptData,proto3" json:"receipt_data,omitempty"`
}

func (x *ObtainHoldValueRequest) Reset() {
	*x = ObtainHoldValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainHoldValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainHoldValueRequest) ProtoMessage() {}

func (x *ObtainHoldValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainHoldValueRequest.ProtoReflect.Descriptor instead.
func (*ObtainHoldValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{16}
}

func (m *ObtainHoldValueRequest) GetTransactionIdentifier() isObtainHoldValueRequest_TransactionIdentifier {
	if m != nil {
		return m.TransactionIdentifier
	}
	return nil
}

func (x *ObtainHoldValueRequest) GetHoldTransactionKey() string {
	if x, ok := x.GetTransactionIdentifier().(*ObtainHoldValueRequest_HoldTransactionKey); ok {
		return x.HoldTransactionKey
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetHoldTransactionRef() string {
	if x, ok := x.GetTransactionIdentifier().(*ObtainHoldValueRequest_HoldTransactionRef); ok {
		return x.HoldTransactionRef
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetApprovalType() approvaltypev1.ApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return approvaltypev1.ApprovalType(0)
}

func (x *ObtainHoldValueRequest) GetTransactionRef() string {
	if x != nil {
		return x.TransactionRef
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *ObtainHoldValueRequest) GetLocationDetails() *LocationDetails {
	if x != nil {
		return x.LocationDetails
	}
	return nil
}

func (x *ObtainHoldValueRequest) GetClerkIdentifier() string {
	if x != nil {
		return x.ClerkIdentifier
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetSurchargeAmount() string {
	if x != nil {
		return x.SurchargeAmount
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *ObtainHoldValueRequest) GetLineItems() []*v1.LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *ObtainHoldValueRequest) GetAdjustments() []*v1.Adjustment {
	if x != nil {
		return x.Adjustments
	}
	return nil
}

func (x *ObtainHoldValueRequest) GetReceiptData() *v1.ReceiptTransactionData {
	if x != nil {
		return x.ReceiptData
	}
	return nil
}

type isObtainHoldValueRequest_TransactionIdentifier interface {
	isObtainHoldValueRequest_TransactionIdentifier()
}

type ObtainHoldValueRequest_HoldTransactionKey struct {
	HoldTransactionKey string `protobuf:"bytes,1,opt,name=hold_transaction_key,json=holdTransactionKey,proto3,oneof"`
}

type ObtainHoldValueRequest_HoldTransactionRef struct {
	// the Partner's reference for the hold transaction
	HoldTransactionRef string `protobuf:"bytes,2,opt,name=hold_transaction_ref,json=holdTransactionRef,proto3,oneof"`
}

func (*ObtainHoldValueRequest_HoldTransactionKey) isObtainHoldValueRequest_TransactionIdentifier() {}

func (*ObtainHoldValueRequest_HoldTransactionRef) isObtainHoldValueRequest_TransactionIdentifier() {}

type ObtainHoldValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ObtainHoldValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.value.v1.ObtainHoldValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// Correlation ID of the request assigned by Mica.
	Cid string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// Amount expressed as: [+-]?([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,5,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
	// summary of discounts that were applied
	DiscountSummary *v1.DiscountSummary `protobuf:"bytes,7,opt,name=discount_summary,json=discountSummary,proto3" json:"discount_summary,omitempty"`
	// status of each line item based on processing by Mica. The list will be in the same order as the request and will
	// will typically have a status of LINE_ITEM_STATUS_ELIGIBLE.
	LineItemSequenceAndStatuses []*v1.LineItemSequenceAndStatus `protobuf:"bytes,6,rep,name=line_item_sequence_and_statuses,json=lineItemSequenceAndStatuses,proto3" json:"line_item_sequence_and_statuses,omitempty"`
}

func (x *ObtainHoldValueResponse) Reset() {
	*x = ObtainHoldValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_value_v1_value_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObtainHoldValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainHoldValueResponse) ProtoMessage() {}

func (x *ObtainHoldValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_value_v1_value_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainHoldValueResponse.ProtoReflect.Descriptor instead.
func (*ObtainHoldValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_value_v1_value_proto_rawDescGZIP(), []int{17}
}

func (x *ObtainHoldValueResponse) GetStatus() ObtainHoldValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return ObtainHoldValueResponse_STATUS_UNSPECIFIED
}

func (x *ObtainHoldValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ObtainHoldValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *ObtainHoldValueResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *ObtainHoldValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

func (x *ObtainHoldValueResponse) GetDiscountSummary() *v1.DiscountSummary {
	if x != nil {
		return x.DiscountSummary
	}
	return nil
}

func (x *ObtainHoldValueResponse) GetLineItemSequenceAndStatuses() []*v1.LineItemSequenceAndStatus {
	if x != nil {
		return x.LineItemSequenceAndStatuses
	}
	return nil
}

var File_mica_partner_value_v1_value_proto protoreflect.FileDescriptor

var file_mica_partner_value_v1_value_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x75, 0x65, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8,
	0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x68, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x04,
	0x75, 0x75, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x12, 0x30, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x49, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x19, 0x6f, 0x62, 0x73, 0x6f,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x32, 0x18, 0x01, 0x52, 0x17, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x32, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x61, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x37,
	0x0a, 0x12, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x32, 0x18, 0x01, 0x52, 0x10, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x32, 0x48, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x01, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x16,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xf4, 0x07, 0x0a, 0x0c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75,
	0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x1e, 0x18, 0x32, 0x52, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x19, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x32, 0x18, 0x01, 0x52, 0x17, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32,
	0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x61, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x12,
	0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x32, 0x18, 0x01, 0x52, 0x10, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x32, 0x48, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x42, 0x0a, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x19, 0x0a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x12, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e,
	0x22, 0xab, 0x01, 0x0a, 0x12, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf,
	0x09, 0x0a, 0x13, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x75, 0x0a, 0x1f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x1b, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x1c,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xed, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44,
	0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55,
	0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x11, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10,
	0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x55, 0x45, 0x4b,
	0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0f, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x14,
	0x22, 0x96, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4d, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x97, 0x06, 0x0a, 0x13, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x72,
	0x0a, 0x1c, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x55, 0x45, 0x4b, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x13, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x42, 0x1d, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xf3, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x6f, 0x6c, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5c, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x9e, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x1b, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x42, 0x1d, 0x0a,
	0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xb5, 0x03, 0x0a,
	0x1a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x22, 0xdd, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x55,
	0x45, 0x4b, 0x10, 0x07, 0x22, 0xb6, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0xde, 0x01, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x55, 0x45, 0x4b, 0x10, 0x07, 0x22, 0x9f, 0x03,
	0x0a, 0x10, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x65, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18,
	0x32, 0x52, 0x04, 0x75, 0x75, 0x65, 0x6b, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x5b, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb1, 0x06, 0x0a, 0x11, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb0, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46,
	0x52, 0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44,
	0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x55, 0x45, 0x4b, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x0e, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x10, 0x14, 0x22, 0xdb, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x12, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x14, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x12, 0x68, 0x6f,
	0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x42, 0x1d, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42,
	0x01, 0x22, 0xfb, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x6f, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x6f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x05, 0x22,
	0xdf, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12,
	0x61, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x66, 0x42, 0x19, 0x0a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x12, 0x0a,
	0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xc9, 0x06, 0x0a, 0x16, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x68, 0x6f,
	0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x3b, 0x0a, 0x14, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x12, 0x68, 0x6f, 0x6c, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x5a, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5b, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x65, 0x72, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x42,
	0x0a, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x18, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x9d, 0x08,
	0x0a, 0x17, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x75, 0x0a, 0x1f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1b, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x22, 0xc7, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46,
	0x52, 0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44,
	0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x55, 0x45, 0x4b, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x15, 0x42, 0x43, 0x0a,
	0x18, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x14, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49,
	0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_partner_value_v1_value_proto_rawDescOnce sync.Once
	file_mica_partner_value_v1_value_proto_rawDescData = file_mica_partner_value_v1_value_proto_rawDesc
)

func file_mica_partner_value_v1_value_proto_rawDescGZIP() []byte {
	file_mica_partner_value_v1_value_proto_rawDescOnce.Do(func() {
		file_mica_partner_value_v1_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_partner_value_v1_value_proto_rawDescData)
	})
	return file_mica_partner_value_v1_value_proto_rawDescData
}

var file_mica_partner_value_v1_value_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_mica_partner_value_v1_value_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_mica_partner_value_v1_value_proto_goTypes = []interface{}{
	(ObtainValueResponse_Status)(0),                  // 0: mica.partner.value.v1.ObtainValueResponse.Status
	(ReturnValueResponse_Status)(0),                  // 1: mica.partner.value.v1.ReturnValueResponse.Status
	(GetValueResponse_Status)(0),                     // 2: mica.partner.value.v1.GetValueResponse.Status
	(ReverseObtainValueResponse_Status)(0),           // 3: mica.partner.value.v1.ReverseObtainValueResponse.Status
	(ReverseReturnValueResponse_Status)(0),           // 4: mica.partner.value.v1.ReverseReturnValueResponse.Status
	(HoldValueResponse_Status)(0),                    // 5: mica.partner.value.v1.HoldValueResponse.Status
	(ReleaseHoldValueResponse_Status)(0),             // 6: mica.partner.value.v1.ReleaseHoldValueResponse.Status
	(ObtainHoldValueResponse_Status)(0),              // 7: mica.partner.value.v1.ObtainHoldValueResponse.Status
	(*Value)(nil),                                    // 8: mica.partner.value.v1.Value
	(*ValueRequest)(nil),                             // 9: mica.partner.value.v1.ValueRequest
	(*ObtainValueRequest)(nil),                       // 10: mica.partner.value.v1.ObtainValueRequest
	(*ObtainValueResponse)(nil),                      // 11: mica.partner.value.v1.ObtainValueResponse
	(*ReturnValueRequest)(nil),                       // 12: mica.partner.value.v1.ReturnValueRequest
	(*ReturnValueResponse)(nil),                      // 13: mica.partner.value.v1.ReturnValueResponse
	(*GetValueRequest)(nil),                          // 14: mica.partner.value.v1.GetValueRequest
	(*GetValueResponse)(nil),                         // 15: mica.partner.value.v1.GetValueResponse
	(*ReverseValueRequest)(nil),                      // 16: mica.partner.value.v1.ReverseValueRequest
	(*ReverseObtainValueResponse)(nil),               // 17: mica.partner.value.v1.ReverseObtainValueResponse
	(*ReverseReturnValueResponse)(nil),               // 18: mica.partner.value.v1.ReverseReturnValueResponse
	(*HoldValueRequest)(nil),                         // 19: mica.partner.value.v1.HoldValueRequest
	(*HoldValueResponse)(nil),                        // 20: mica.partner.value.v1.HoldValueResponse
	(*ReleaseHoldValueRequest)(nil),                  // 21: mica.partner.value.v1.ReleaseHoldValueRequest
	(*ReleaseHoldValueResponse)(nil),                 // 22: mica.partner.value.v1.ReleaseHoldValueResponse
	(*LocationDetails)(nil),                          // 23: mica.partner.value.v1.LocationDetails
	(*ObtainHoldValueRequest)(nil),                   // 24: mica.partner.value.v1.ObtainHoldValueRequest
	(*ObtainHoldValueResponse)(nil),                  // 25: mica.partner.value.v1.ObtainHoldValueResponse
	(*timestamppb.Timestamp)(nil),                    // 26: google.protobuf.Timestamp
	(valueoperationtypev1.ValueOperationType)(0),     // 27: micashared.common.enums.valueoperationtype.v1.ValueOperationType
	(currencyv1.Currency)(0),                         // 28: micashared.common.enums.currency.v1.Currency
	(organizationcategoryv1.OrganizationCategory)(0), // 29: micashared.common.enums.organizationcategory.v1.OrganizationCategory
	(*v1.LineItemAndStatus)(nil),                     // 30: micashared.common.v1.LineItemAndStatus
	(*v1.LineItem)(nil),                              // 31: micashared.common.v1.LineItem
	(*v1.Adjustment)(nil),                            // 32: micashared.common.v1.Adjustment
	(*v1.ReceiptTransactionData)(nil),                // 33: micashared.common.v1.ReceiptTransactionData
	(approvaltypev1.ApprovalType)(0),                 // 34: micashared.common.enums.approvaltype.v1.ApprovalType
	(*v1.Error)(nil),                                 // 35: micashared.common.v1.Error
	(*v1.DiscountSummary)(nil),                       // 36: micashared.common.v1.DiscountSummary
	(*v1.LineItemSequenceAndStatus)(nil),             // 37: micashared.common.v1.LineItemSequenceAndStatus
	(*v1.ImmutableInstrumentDetails)(nil),            // 38: micashared.common.v1.ImmutableInstrumentDetails
}
var file_mica_partner_value_v1_value_proto_depIdxs = []int32{
	26, // 0: mica.partner.value.v1.Value.created:type_name -> google.protobuf.Timestamp
	26, // 1: mica.partner.value.v1.Value.updated:type_name -> google.protobuf.Timestamp
	27, // 2: mica.partner.value.v1.Value.operation_type:type_name -> micashared.common.enums.valueoperationtype.v1.ValueOperationType
	28, // 3: mica.partner.value.v1.Value.currency:type_name -> micashared.common.enums.currency.v1.Currency
	29, // 4: mica.partner.value.v1.Value.category:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	30, // 5: mica.partner.value.v1.Value.line_item_and_statuses:type_name -> micashared.common.v1.LineItemAndStatus
	28, // 6: mica.partner.value.v1.ValueRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	29, // 7: mica.partner.value.v1.ValueRequest.category:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	31, // 8: mica.partner.value.v1.ValueRequest.line_items:type_name -> micashared.common.v1.LineItem
	32, // 9: mica.partner.value.v1.ValueRequest.adjustments:type_name -> micashared.common.v1.Adjustment
	33, // 10: mica.partner.value.v1.ValueRequest.receipt_data:type_name -> micashared.common.v1.ReceiptTransactionData
	34, // 11: mica.partner.value.v1.ObtainValueRequest.approval_type:type_name -> micashared.common.enums.approvaltype.v1.ApprovalType
	9,  // 12: mica.partner.value.v1.ObtainValueRequest.value:type_name -> mica.partner.value.v1.ValueRequest
	0,  // 13: mica.partner.value.v1.ObtainValueResponse.status:type_name -> mica.partner.value.v1.ObtainValueResponse.Status
	35, // 14: mica.partner.value.v1.ObtainValueResponse.error:type_name -> micashared.common.v1.Error
	36, // 15: mica.partner.value.v1.ObtainValueResponse.discount_summary:type_name -> micashared.common.v1.DiscountSummary
	37, // 16: mica.partner.value.v1.ObtainValueResponse.line_item_sequence_and_statuses:type_name -> micashared.common.v1.LineItemSequenceAndStatus
	38, // 17: mica.partner.value.v1.ObtainValueResponse.immutable_instrument_details:type_name -> micashared.common.v1.ImmutableInstrumentDetails
	9,  // 18: mica.partner.value.v1.ReturnValueRequest.value:type_name -> mica.partner.value.v1.ValueRequest
	1,  // 19: mica.partner.value.v1.ReturnValueResponse.status:type_name -> mica.partner.value.v1.ReturnValueResponse.Status
	35, // 20: mica.partner.value.v1.ReturnValueResponse.error:type_name -> micashared.common.v1.Error
	38, // 21: mica.partner.value.v1.ReturnValueResponse.immutable_instrument_details:type_name -> micashared.common.v1.ImmutableInstrumentDetails
	2,  // 22: mica.partner.value.v1.GetValueResponse.status:type_name -> mica.partner.value.v1.GetValueResponse.Status
	35, // 23: mica.partner.value.v1.GetValueResponse.error:type_name -> micashared.common.v1.Error
	8,  // 24: mica.partner.value.v1.GetValueResponse.value:type_name -> mica.partner.value.v1.Value
	26, // 25: mica.partner.value.v1.GetValueResponse.oldest_transaction_time:type_name -> google.protobuf.Timestamp
	3,  // 26: mica.partner.value.v1.ReverseObtainValueResponse.status:type_name -> mica.partner.value.v1.ReverseObtainValueResponse.Status
	35, // 27: mica.partner.value.v1.ReverseObtainValueResponse.error:type_name -> micashared.common.v1.Error
	4,  // 28: mica.partner.value.v1.ReverseReturnValueResponse.status:type_name -> mica.partner.value.v1.ReverseReturnValueResponse.Status
	35, // 29: mica.partner.value.v1.ReverseReturnValueResponse.error:type_name -> micashared.common.v1.Error
	26, // 30: mica.partner.value.v1.HoldValueRequest.expiration:type_name -> google.protobuf.Timestamp
	28, // 31: mica.partner.value.v1.HoldValueRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	23, // 32: mica.partner.value.v1.HoldValueRequest.location_details:type_name -> mica.partner.value.v1.LocationDetails
	5,  // 33: mica.partner.value.v1.HoldValueResponse.status:type_name -> mica.partner.value.v1.HoldValueResponse.Status
	35, // 34: mica.partner.value.v1.HoldValueResponse.error:type_name -> micashared.common.v1.Error
	6,  // 35: mica.partner.value.v1.ReleaseHoldValueResponse.status:type_name -> mica.partner.value.v1.ReleaseHoldValueResponse.Status
	35, // 36: mica.partner.value.v1.ReleaseHoldValueResponse.error:type_name -> micashared.common.v1.Error
	29, // 37: mica.partner.value.v1.LocationDetails.category:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	34, // 38: mica.partner.value.v1.ObtainHoldValueRequest.approval_type:type_name -> micashared.common.enums.approvaltype.v1.ApprovalType
	28, // 39: mica.partner.value.v1.ObtainHoldValueRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	23, // 40: mica.partner.value.v1.ObtainHoldValueRequest.location_details:type_name -> mica.partner.value.v1.LocationDetails
	31, // 41: mica.partner.value.v1.ObtainHoldValueRequest.line_items:type_name -> micashared.common.v1.LineItem
	32, // 42: mica.partner.value.v1.ObtainHoldValueRequest.adjustments:type_name -> micashared.common.v1.Adjustment
	33, // 43: mica.partner.value.v1.ObtainHoldValueRequest.receipt_data:type_name -> micashared.common.v1.ReceiptTransactionData
	7,  // 44: mica.partner.value.v1.ObtainHoldValueResponse.status:type_name -> mica.partner.value.v1.ObtainHoldValueResponse.Status
	35, // 45: mica.partner.value.v1.ObtainHoldValueResponse.error:type_name -> micashared.common.v1.Error
	36, // 46: mica.partner.value.v1.ObtainHoldValueResponse.discount_summary:type_name -> micashared.common.v1.DiscountSummary
	37, // 47: mica.partner.value.v1.ObtainHoldValueResponse.line_item_sequence_and_statuses:type_name -> micashared.common.v1.LineItemSequenceAndStatus
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_mica_partner_value_v1_value_proto_init() }
func file_mica_partner_value_v1_value_proto_init() {
	if File_mica_partner_value_v1_value_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_partner_value_v1_value_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseObtainValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseReturnValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseHoldValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseHoldValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainHoldValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_value_v1_value_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObtainHoldValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_partner_value_v1_value_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Value_OrganizationKey)(nil),
		(*Value_OrganizationRef)(nil),
		(*Value_StoreKey)(nil),
		(*Value_StoreRef)(nil),
	}
	file_mica_partner_value_v1_value_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ValueRequest_OrganizationKey)(nil),
		(*ValueRequest_OrganizationRef)(nil),
		(*ValueRequest_StoreKey)(nil),
		(*ValueRequest_StoreRef)(nil),
	}
	file_mica_partner_value_v1_value_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GetValueRequest_TransactionKey)(nil),
		(*GetValueRequest_TransactionRef)(nil),
	}
	file_mica_partner_value_v1_value_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ReverseValueRequest_TransactionKey)(nil),
		(*ReverseValueRequest_TransactionRef)(nil),
	}
	file_mica_partner_value_v1_value_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ReleaseHoldValueRequest_HoldTransactionKey)(nil),
		(*ReleaseHoldValueRequest_HoldTransactionRef)(nil),
	}
	file_mica_partner_value_v1_value_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*LocationDetails_OrganizationKey)(nil),
		(*LocationDetails_OrganizationRef)(nil),
		(*LocationDetails_StoreKey)(nil),
		(*LocationDetails_StoreRef)(nil),
	}
	file_mica_partner_value_v1_value_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ObtainHoldValueRequest_HoldTransactionKey)(nil),
		(*ObtainHoldValueRequest_HoldTransactionRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_partner_value_v1_value_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_partner_value_v1_value_proto_goTypes,
		DependencyIndexes: file_mica_partner_value_v1_value_proto_depIdxs,
		EnumInfos:         file_mica_partner_value_v1_value_proto_enumTypes,
		MessageInfos:      file_mica_partner_value_v1_value_proto_msgTypes,
	}.Build()
	File_mica_partner_value_v1_value_proto = out.File
	file_mica_partner_value_v1_value_proto_rawDesc = nil
	file_mica_partner_value_v1_value_proto_goTypes = nil
	file_mica_partner_value_v1_value_proto_depIdxs = nil
}
