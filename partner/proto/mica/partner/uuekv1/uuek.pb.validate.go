// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mica/partner/uuek/v1/uuek.proto

package uuekv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UUEK with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *UUEK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UUEK with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UUEKMultiError, or nil if none found.
func (m *UUEK) ValidateAll() error {
	return m.validate(true)
}

func (m *UUEK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartnerUserRef()); l < 1 || l > 100 {
		err := UUEKValidationError{
			field:  "PartnerUserRef",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPartnerInstrumentRef()); l < 1 || l > 100 {
		err := UUEKValidationError{
			field:  "PartnerInstrumentRef",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPartnerUuekRef()); l < 1 || l > 100 {
		err := UUEKValidationError{
			field:  "PartnerUuekRef",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUuek()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UUEKValidationError{
					field:  "Uuek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UUEKValidationError{
					field:  "Uuek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUuek()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UUEKValidationError{
				field:  "Uuek",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UUEKMultiError(errors)
	}

	return nil
}

// UUEKMultiError is an error wrapping multiple validation errors returned by
// UUEK.ValidateAll() if the designated constraints aren't met.
type UUEKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UUEKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UUEKMultiError) AllErrors() []error { return m }

// UUEKValidationError is the validation error returned by UUEK.Validate if the
// designated constraints aren't met.
type UUEKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UUEKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UUEKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UUEKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UUEKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UUEKValidationError) ErrorName() string { return "UUEKValidationError" }

// Error satisfies the builtin error interface
func (e UUEKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUUEK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UUEKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UUEKValidationError{}

// Validate checks the field values on RemoveUUEKRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveUUEKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUUEKRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUUEKRequestMultiError, or nil if none found.
func (m *RemoveUUEKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUUEKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartnerUuek()); l < 30 || l > 50 {
		err := RemoveUUEKRequestValidationError{
			field:  "PartnerUuek",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveUUEKRequestMultiError(errors)
	}

	return nil
}

// RemoveUUEKRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveUUEKRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveUUEKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUUEKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUUEKRequestMultiError) AllErrors() []error { return m }

// RemoveUUEKRequestValidationError is the validation error returned by
// RemoveUUEKRequest.Validate if the designated constraints aren't met.
type RemoveUUEKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUUEKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUUEKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUUEKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUUEKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUUEKRequestValidationError) ErrorName() string {
	return "RemoveUUEKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUUEKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUUEKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUUEKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUUEKRequestValidationError{}

// Validate checks the field values on RemoveUUEKResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUUEKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUUEKResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUUEKResponseMultiError, or nil if none found.
func (m *RemoveUUEKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUUEKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveUUEKResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveUUEKResponseMultiError(errors)
	}

	return nil
}

// RemoveUUEKResponseMultiError is an error wrapping multiple validation errors
// returned by RemoveUUEKResponse.ValidateAll() if the designated constraints
// aren't met.
type RemoveUUEKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUUEKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUUEKResponseMultiError) AllErrors() []error { return m }

// RemoveUUEKResponseValidationError is the validation error returned by
// RemoveUUEKResponse.Validate if the designated constraints aren't met.
type RemoveUUEKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUUEKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUUEKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUUEKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUUEKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUUEKResponseValidationError) ErrorName() string {
	return "RemoveUUEKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUUEKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUUEKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUUEKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUUEKResponseValidationError{}

// Validate checks the field values on ExchangeUUEKRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeUUEKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeUUEKRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeUUEKRequestMultiError, or nil if none found.
func (m *ExchangeUUEKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeUUEKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPartnerUuek()); l < 30 || l > 50 {
		err := ExchangeUUEKRequestValidationError{
			field:  "PartnerUuek",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RemoveExisting

	if l := utf8.RuneCountInString(m.GetPartnerUuekRef()); l < 1 || l > 100 {
		err := ExchangeUUEKRequestValidationError{
			field:  "PartnerUuekRef",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeUUEKRequestMultiError(errors)
	}

	return nil
}

// ExchangeUUEKRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeUUEKRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeUUEKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeUUEKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeUUEKRequestMultiError) AllErrors() []error { return m }

// ExchangeUUEKRequestValidationError is the validation error returned by
// ExchangeUUEKRequest.Validate if the designated constraints aren't met.
type ExchangeUUEKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeUUEKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeUUEKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeUUEKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeUUEKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeUUEKRequestValidationError) ErrorName() string {
	return "ExchangeUUEKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeUUEKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeUUEKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeUUEKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeUUEKRequestValidationError{}

// Validate checks the field values on ExchangeUUEKResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeUUEKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeUUEKResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeUUEKResponseMultiError, or nil if none found.
func (m *ExchangeUUEKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeUUEKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeUUEKResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetPartnerUuek()); l < 30 || l > 50 {
		err := ExchangeUUEKResponseValidationError{
			field:  "PartnerUuek",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeUUEKResponseMultiError(errors)
	}

	return nil
}

// ExchangeUUEKResponseMultiError is an error wrapping multiple validation
// errors returned by ExchangeUUEKResponse.ValidateAll() if the designated
// constraints aren't met.
type ExchangeUUEKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeUUEKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeUUEKResponseMultiError) AllErrors() []error { return m }

// ExchangeUUEKResponseValidationError is the validation error returned by
// ExchangeUUEKResponse.Validate if the designated constraints aren't met.
type ExchangeUUEKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeUUEKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeUUEKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeUUEKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeUUEKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeUUEKResponseValidationError) ErrorName() string {
	return "ExchangeUUEKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeUUEKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeUUEKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeUUEKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeUUEKResponseValidationError{}

// Validate checks the field values on SearchUUEKRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchUUEKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUUEKRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUUEKRequestMultiError, or nil if none found.
func (m *SearchUUEKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUUEKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerUserRef

	// no validation rules for PartnerInstrumentRef

	// no validation rules for PartnerUuekRef

	if len(errors) > 0 {
		return SearchUUEKRequestMultiError(errors)
	}

	return nil
}

// SearchUUEKRequestMultiError is an error wrapping multiple validation errors
// returned by SearchUUEKRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchUUEKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUUEKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUUEKRequestMultiError) AllErrors() []error { return m }

// SearchUUEKRequestValidationError is the validation error returned by
// SearchUUEKRequest.Validate if the designated constraints aren't met.
type SearchUUEKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUUEKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUUEKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUUEKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUUEKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUUEKRequestValidationError) ErrorName() string {
	return "SearchUUEKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUUEKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUUEKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUUEKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUUEKRequestValidationError{}

// Validate checks the field values on SearchUUEKResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUUEKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUUEKResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUUEKResponseMultiError, or nil if none found.
func (m *SearchUUEKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUUEKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUUEKResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUUEKResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUueks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUUEKResponseValidationError{
						field:  fmt.Sprintf("Uueks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUUEKResponseValidationError{
						field:  fmt.Sprintf("Uueks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUUEKResponseValidationError{
					field:  fmt.Sprintf("Uueks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchUUEKResponseMultiError(errors)
	}

	return nil
}

// SearchUUEKResponseMultiError is an error wrapping multiple validation errors
// returned by SearchUUEKResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchUUEKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUUEKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUUEKResponseMultiError) AllErrors() []error { return m }

// SearchUUEKResponseValidationError is the validation error returned by
// SearchUUEKResponse.Validate if the designated constraints aren't met.
type SearchUUEKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUUEKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUUEKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUUEKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUUEKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUUEKResponseValidationError) ErrorName() string {
	return "SearchUUEKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUUEKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUUEKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUUEKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUUEKResponseValidationError{}
