// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mica/partner/paymenttoken/v1/payment_token.proto

package paymenttokenv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PaymentToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentTokenMultiError, or
// nil if none found.
func (m *PaymentToken) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerUserRef

	// no validation rules for PartnerInstrumentRef

	// no validation rules for PartnerPaymentTokenRef

	if all {
		switch v := interface{}(m.GetPaymentToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentTokenValidationError{
					field:  "PaymentToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentTokenValidationError{
					field:  "PaymentToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentTokenValidationError{
				field:  "PaymentToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentTokenMultiError(errors)
	}

	return nil
}

// PaymentTokenMultiError is an error wrapping multiple validation errors
// returned by PaymentToken.ValidateAll() if the designated constraints aren't met.
type PaymentTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentTokenMultiError) AllErrors() []error { return m }

// PaymentTokenValidationError is the validation error returned by
// PaymentToken.Validate if the designated constraints aren't met.
type PaymentTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentTokenValidationError) ErrorName() string { return "PaymentTokenValidationError" }

// Error satisfies the builtin error interface
func (e PaymentTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentTokenValidationError{}

// Validate checks the field values on RemovePaymentTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePaymentTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePaymentTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePaymentTokenRequestMultiError, or nil if none found.
func (m *RemovePaymentTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePaymentTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerPaymentToken

	if len(errors) > 0 {
		return RemovePaymentTokenRequestMultiError(errors)
	}

	return nil
}

// RemovePaymentTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RemovePaymentTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type RemovePaymentTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePaymentTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePaymentTokenRequestMultiError) AllErrors() []error { return m }

// RemovePaymentTokenRequestValidationError is the validation error returned by
// RemovePaymentTokenRequest.Validate if the designated constraints aren't met.
type RemovePaymentTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePaymentTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePaymentTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePaymentTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePaymentTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePaymentTokenRequestValidationError) ErrorName() string {
	return "RemovePaymentTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePaymentTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePaymentTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePaymentTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePaymentTokenRequestValidationError{}

// Validate checks the field values on RemovePaymentTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePaymentTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePaymentTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePaymentTokenResponseMultiError, or nil if none found.
func (m *RemovePaymentTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePaymentTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemovePaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemovePaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemovePaymentTokenResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemovePaymentTokenResponseMultiError(errors)
	}

	return nil
}

// RemovePaymentTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RemovePaymentTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type RemovePaymentTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePaymentTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePaymentTokenResponseMultiError) AllErrors() []error { return m }

// RemovePaymentTokenResponseValidationError is the validation error returned
// by RemovePaymentTokenResponse.Validate if the designated constraints aren't met.
type RemovePaymentTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePaymentTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePaymentTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePaymentTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePaymentTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePaymentTokenResponseValidationError) ErrorName() string {
	return "RemovePaymentTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePaymentTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePaymentTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePaymentTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePaymentTokenResponseValidationError{}

// Validate checks the field values on ExchangePaymentTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangePaymentTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangePaymentTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangePaymentTokenRequestMultiError, or nil if none found.
func (m *ExchangePaymentTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangePaymentTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerPaymentToken

	// no validation rules for RemoveExisting

	if len(errors) > 0 {
		return ExchangePaymentTokenRequestMultiError(errors)
	}

	return nil
}

// ExchangePaymentTokenRequestMultiError is an error wrapping multiple
// validation errors returned by ExchangePaymentTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type ExchangePaymentTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangePaymentTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangePaymentTokenRequestMultiError) AllErrors() []error { return m }

// ExchangePaymentTokenRequestValidationError is the validation error returned
// by ExchangePaymentTokenRequest.Validate if the designated constraints
// aren't met.
type ExchangePaymentTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangePaymentTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangePaymentTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangePaymentTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangePaymentTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangePaymentTokenRequestValidationError) ErrorName() string {
	return "ExchangePaymentTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangePaymentTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangePaymentTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangePaymentTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangePaymentTokenRequestValidationError{}

// Validate checks the field values on ExchangePaymentTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangePaymentTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangePaymentTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangePaymentTokenResponseMultiError, or nil if none found.
func (m *ExchangePaymentTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangePaymentTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangePaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangePaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangePaymentTokenResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PartnerPaymentToken

	if len(errors) > 0 {
		return ExchangePaymentTokenResponseMultiError(errors)
	}

	return nil
}

// ExchangePaymentTokenResponseMultiError is an error wrapping multiple
// validation errors returned by ExchangePaymentTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type ExchangePaymentTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangePaymentTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangePaymentTokenResponseMultiError) AllErrors() []error { return m }

// ExchangePaymentTokenResponseValidationError is the validation error returned
// by ExchangePaymentTokenResponse.Validate if the designated constraints
// aren't met.
type ExchangePaymentTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangePaymentTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangePaymentTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangePaymentTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangePaymentTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangePaymentTokenResponseValidationError) ErrorName() string {
	return "ExchangePaymentTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangePaymentTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangePaymentTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangePaymentTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangePaymentTokenResponseValidationError{}

// Validate checks the field values on SearchPaymentTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPaymentTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPaymentTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPaymentTokenRequestMultiError, or nil if none found.
func (m *SearchPaymentTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPaymentTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerUserRef

	// no validation rules for PartnerInstrumentRef

	// no validation rules for PartnerPaymentTokenRef

	if len(errors) > 0 {
		return SearchPaymentTokenRequestMultiError(errors)
	}

	return nil
}

// SearchPaymentTokenRequestMultiError is an error wrapping multiple validation
// errors returned by SearchPaymentTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchPaymentTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPaymentTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPaymentTokenRequestMultiError) AllErrors() []error { return m }

// SearchPaymentTokenRequestValidationError is the validation error returned by
// SearchPaymentTokenRequest.Validate if the designated constraints aren't met.
type SearchPaymentTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPaymentTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPaymentTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPaymentTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPaymentTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPaymentTokenRequestValidationError) ErrorName() string {
	return "SearchPaymentTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPaymentTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPaymentTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPaymentTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPaymentTokenRequestValidationError{}

// Validate checks the field values on SearchPaymentTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPaymentTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPaymentTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPaymentTokenResponseMultiError, or nil if none found.
func (m *SearchPaymentTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPaymentTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchPaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchPaymentTokenResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchPaymentTokenResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPaymentTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchPaymentTokenResponseValidationError{
						field:  fmt.Sprintf("PaymentTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchPaymentTokenResponseValidationError{
						field:  fmt.Sprintf("PaymentTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchPaymentTokenResponseValidationError{
					field:  fmt.Sprintf("PaymentTokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchPaymentTokenResponseMultiError(errors)
	}

	return nil
}

// SearchPaymentTokenResponseMultiError is an error wrapping multiple
// validation errors returned by SearchPaymentTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchPaymentTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPaymentTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPaymentTokenResponseMultiError) AllErrors() []error { return m }

// SearchPaymentTokenResponseValidationError is the validation error returned
// by SearchPaymentTokenResponse.Validate if the designated constraints aren't met.
type SearchPaymentTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPaymentTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPaymentTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPaymentTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPaymentTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPaymentTokenResponseValidationError) ErrorName() string {
	return "SearchPaymentTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPaymentTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPaymentTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPaymentTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPaymentTokenResponseValidationError{}
