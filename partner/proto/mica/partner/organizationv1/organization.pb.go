// Copyright (c) 2022 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.24.3
// source: mica/partner/organization/v1/organization.proto

package organizationv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	barcodelocationv1 "github.com/1080network/golang/partner/proto/micashared/common/enums/barcodelocationv1"
	barcodetypev1 "github.com/1080network/golang/partner/proto/micashared/common/enums/barcodetypev1"
	organizationcategoryv1 "github.com/1080network/golang/partner/proto/micashared/common/enums/organizationcategoryv1"
	v1 "github.com/1080network/golang/partner/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateOrganizationResponse_Status int32

const (
	CreateOrganizationResponse_STATUS_UNSPECIFIED CreateOrganizationResponse_Status = 0
	CreateOrganizationResponse_STATUS_SUCCESS     CreateOrganizationResponse_Status = 1
	CreateOrganizationResponse_STATUS_ERROR       CreateOrganizationResponse_Status = 2
	CreateOrganizationResponse_STATUS_DUPLICATE   CreateOrganizationResponse_Status = 3
	CreateOrganizationResponse_STATUS_NOT_FOUND   CreateOrganizationResponse_Status = 4
)

// Enum value maps for CreateOrganizationResponse_Status.
var (
	CreateOrganizationResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_DUPLICATE",
		4: "STATUS_NOT_FOUND",
	}
	CreateOrganizationResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
		"STATUS_DUPLICATE":   3,
		"STATUS_NOT_FOUND":   4,
	}
)

func (x CreateOrganizationResponse_Status) Enum() *CreateOrganizationResponse_Status {
	p := new(CreateOrganizationResponse_Status)
	*p = x
	return p
}

func (x CreateOrganizationResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateOrganizationResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_organization_v1_organization_proto_enumTypes[0].Descriptor()
}

func (CreateOrganizationResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_organization_v1_organization_proto_enumTypes[0]
}

func (x CreateOrganizationResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateOrganizationResponse_Status.Descriptor instead.
func (CreateOrganizationResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{1, 0}
}

type GetOrganizationResponse_Status int32

const (
	GetOrganizationResponse_STATUS_UNSPECIFIED        GetOrganizationResponse_Status = 0
	GetOrganizationResponse_STATUS_SUCCESS            GetOrganizationResponse_Status = 1
	GetOrganizationResponse_STATUS_ERROR              GetOrganizationResponse_Status = 2
	GetOrganizationResponse_STATUS_INVALID_PARTNER_ID GetOrganizationResponse_Status = 3
	GetOrganizationResponse_STATUS_NOT_FOUND          GetOrganizationResponse_Status = 4
)

// Enum value maps for GetOrganizationResponse_Status.
var (
	GetOrganizationResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_INVALID_PARTNER_ID",
		4: "STATUS_NOT_FOUND",
	}
	GetOrganizationResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"STATUS_SUCCESS":            1,
		"STATUS_ERROR":              2,
		"STATUS_INVALID_PARTNER_ID": 3,
		"STATUS_NOT_FOUND":          4,
	}
)

func (x GetOrganizationResponse_Status) Enum() *GetOrganizationResponse_Status {
	p := new(GetOrganizationResponse_Status)
	*p = x
	return p
}

func (x GetOrganizationResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetOrganizationResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_organization_v1_organization_proto_enumTypes[1].Descriptor()
}

func (GetOrganizationResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_organization_v1_organization_proto_enumTypes[1]
}

func (x GetOrganizationResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetOrganizationResponse_Status.Descriptor instead.
func (GetOrganizationResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{3, 0}
}

type UpdateOrganizationResponse_Status int32

const (
	UpdateOrganizationResponse_STATUS_UNSPECIFIED      UpdateOrganizationResponse_Status = 0
	UpdateOrganizationResponse_STATUS_SUCCESS          UpdateOrganizationResponse_Status = 1
	UpdateOrganizationResponse_STATUS_ERROR            UpdateOrganizationResponse_Status = 2
	UpdateOrganizationResponse_STATUS_NOT_FOUND        UpdateOrganizationResponse_Status = 3
	UpdateOrganizationResponse_STATUS_VERSION_MISMATCH UpdateOrganizationResponse_Status = 4
)

// Enum value maps for UpdateOrganizationResponse_Status.
var (
	UpdateOrganizationResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_NOT_FOUND",
		4: "STATUS_VERSION_MISMATCH",
	}
	UpdateOrganizationResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":      0,
		"STATUS_SUCCESS":          1,
		"STATUS_ERROR":            2,
		"STATUS_NOT_FOUND":        3,
		"STATUS_VERSION_MISMATCH": 4,
	}
)

func (x UpdateOrganizationResponse_Status) Enum() *UpdateOrganizationResponse_Status {
	p := new(UpdateOrganizationResponse_Status)
	*p = x
	return p
}

func (x UpdateOrganizationResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateOrganizationResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_organization_v1_organization_proto_enumTypes[2].Descriptor()
}

func (UpdateOrganizationResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_organization_v1_organization_proto_enumTypes[2]
}

func (x UpdateOrganizationResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateOrganizationResponse_Status.Descriptor instead.
func (UpdateOrganizationResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{5, 0}
}

type SearchOrganizationResponse_Status int32

const (
	SearchOrganizationResponse_STATUS_UNSPECIFIED        SearchOrganizationResponse_Status = 0
	SearchOrganizationResponse_STATUS_SUCCESS            SearchOrganizationResponse_Status = 1
	SearchOrganizationResponse_STATUS_ERROR              SearchOrganizationResponse_Status = 2
	SearchOrganizationResponse_STATUS_INVALID_PARTNER_ID SearchOrganizationResponse_Status = 3
)

// Enum value maps for SearchOrganizationResponse_Status.
var (
	SearchOrganizationResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_INVALID_PARTNER_ID",
	}
	SearchOrganizationResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"STATUS_SUCCESS":            1,
		"STATUS_ERROR":              2,
		"STATUS_INVALID_PARTNER_ID": 3,
	}
)

func (x SearchOrganizationResponse_Status) Enum() *SearchOrganizationResponse_Status {
	p := new(SearchOrganizationResponse_Status)
	*p = x
	return p
}

func (x SearchOrganizationResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchOrganizationResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_organization_v1_organization_proto_enumTypes[3].Descriptor()
}

func (SearchOrganizationResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_organization_v1_organization_proto_enumTypes[3]
}

func (x SearchOrganizationResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchOrganizationResponse_Status.Descriptor instead.
func (SearchOrganizationResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{7, 0}
}

type CreateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The primary key for this organization at the Partner.
	OrganizationRef  string                                        `protobuf:"bytes,2,opt,name=organization_ref,json=organizationRef,proto3" json:"organization_ref,omitempty"`
	Name             string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address          *v1.Address                                   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Categories       []organizationcategoryv1.OrganizationCategory `protobuf:"varint,4,rep,packed,name=categories,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"categories,omitempty"`
	OperatingAccount *v1.BankAccountDetail                         `protobuf:"bytes,5,opt,name=operating_account,json=operatingAccount,proto3" json:"operating_account,omitempty"`
	RevenueAccount   *v1.BankAccountDetail                         `protobuf:"bytes,6,opt,name=revenue_account,json=revenueAccount,proto3" json:"revenue_account,omitempty"`
	BarcodeType      barcodetypev1.BarcodeType                     `protobuf:"varint,7,opt,name=barcode_type,json=barcodeType,proto3,enum=micashared.common.enums.barcodetype.v1.BarcodeType" json:"barcode_type,omitempty"`
	BarcodeLocation  barcodelocationv1.BarcodeLocation             `protobuf:"varint,8,opt,name=barcode_location,json=barcodeLocation,proto3,enum=micashared.common.enums.barcodelocation.v1.BarcodeLocation" json:"barcode_location,omitempty"`
}

func (x *CreateOrganizationRequest) Reset() {
	*x = CreateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationRequest) ProtoMessage() {}

func (x *CreateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOrganizationRequest) GetOrganizationRef() string {
	if x != nil {
		return x.OrganizationRef
	}
	return ""
}

func (x *CreateOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationRequest) GetAddress() *v1.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CreateOrganizationRequest) GetCategories() []organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *CreateOrganizationRequest) GetOperatingAccount() *v1.BankAccountDetail {
	if x != nil {
		return x.OperatingAccount
	}
	return nil
}

func (x *CreateOrganizationRequest) GetRevenueAccount() *v1.BankAccountDetail {
	if x != nil {
		return x.RevenueAccount
	}
	return nil
}

func (x *CreateOrganizationRequest) GetBarcodeType() barcodetypev1.BarcodeType {
	if x != nil {
		return x.BarcodeType
	}
	return barcodetypev1.BarcodeType(0)
}

func (x *CreateOrganizationRequest) GetBarcodeLocation() barcodelocationv1.BarcodeLocation {
	if x != nil {
		return x.BarcodeLocation
	}
	return barcodelocationv1.BarcodeLocation(0)
}

type CreateOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         CreateOrganizationResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.organization.v1.CreateOrganizationResponse_Status" json:"status,omitempty"`
	Error          *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	OrganizationId []byte                            `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Version        int64                             `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CreateOrganizationResponse) Reset() {
	*x = CreateOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationResponse) ProtoMessage() {}

func (x *CreateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*CreateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOrganizationResponse) GetStatus() CreateOrganizationResponse_Status {
	if x != nil {
		return x.Status
	}
	return CreateOrganizationResponse_STATUS_UNSPECIFIED
}

func (x *CreateOrganizationResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateOrganizationResponse) GetOrganizationId() []byte {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

func (x *CreateOrganizationResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in mica/partner/organization/v1/organization.proto.
	ObsoleteOrganizationKey string `protobuf:"bytes,1,opt,name=obsolete_organization_key,json=obsoleteOrganizationKey,proto3" json:"obsolete_organization_key,omitempty"`
	// Types that are assignable to OrganizationIdentifier:
	//
	//	*GetOrganizationRequest_OrganizationKey
	//	*GetOrganizationRequest_OrganizationRef
	OrganizationIdentifier isGetOrganizationRequest_OrganizationIdentifier `protobuf_oneof:"organization_identifier"`
}

func (x *GetOrganizationRequest) Reset() {
	*x = GetOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationRequest) ProtoMessage() {}

func (x *GetOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in mica/partner/organization/v1/organization.proto.
func (x *GetOrganizationRequest) GetObsoleteOrganizationKey() string {
	if x != nil {
		return x.ObsoleteOrganizationKey
	}
	return ""
}

func (m *GetOrganizationRequest) GetOrganizationIdentifier() isGetOrganizationRequest_OrganizationIdentifier {
	if m != nil {
		return m.OrganizationIdentifier
	}
	return nil
}

func (x *GetOrganizationRequest) GetOrganizationKey() string {
	if x, ok := x.GetOrganizationIdentifier().(*GetOrganizationRequest_OrganizationKey); ok {
		return x.OrganizationKey
	}
	return ""
}

func (x *GetOrganizationRequest) GetOrganizationRef() string {
	if x, ok := x.GetOrganizationIdentifier().(*GetOrganizationRequest_OrganizationRef); ok {
		return x.OrganizationRef
	}
	return ""
}

type isGetOrganizationRequest_OrganizationIdentifier interface {
	isGetOrganizationRequest_OrganizationIdentifier()
}

type GetOrganizationRequest_OrganizationKey struct {
	OrganizationKey string `protobuf:"bytes,2,opt,name=organization_key,json=organizationKey,proto3,oneof"`
}

type GetOrganizationRequest_OrganizationRef struct {
	// The primary key for this organization at the Partner.
	OrganizationRef string `protobuf:"bytes,3,opt,name=organization_ref,json=organizationRef,proto3,oneof"`
}

func (*GetOrganizationRequest_OrganizationKey) isGetOrganizationRequest_OrganizationIdentifier() {}

func (*GetOrganizationRequest_OrganizationRef) isGetOrganizationRequest_OrganizationIdentifier() {}

type GetOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       GetOrganizationResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.organization.v1.GetOrganizationResponse_Status" json:"status,omitempty"`
	Error        *v1.Error                      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Organization *v1.Organization               `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *GetOrganizationResponse) Reset() {
	*x = GetOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationResponse) ProtoMessage() {}

func (x *GetOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{3}
}

func (x *GetOrganizationResponse) GetStatus() GetOrganizationResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetOrganizationResponse_STATUS_UNSPECIFIED
}

func (x *GetOrganizationResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetOrganizationResponse) GetOrganization() *v1.Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in mica/partner/organization/v1/organization.proto.
	ObsoleteOrganizationKey string `protobuf:"bytes,1,opt,name=obsolete_organization_key,json=obsoleteOrganizationKey,proto3" json:"obsolete_organization_key,omitempty"`
	// Types that are assignable to OrganizationIdentifier:
	//
	//	*UpdateOrganizationRequest_OrganizationKey
	//	*UpdateOrganizationRequest_OrganizationRef
	OrganizationIdentifier isUpdateOrganizationRequest_OrganizationIdentifier `protobuf_oneof:"organization_identifier"`
	Version                int64                                              `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Name                   string                                             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Address                *v1.Address                                        `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Categories             []organizationcategoryv1.OrganizationCategory      `protobuf:"varint,5,rep,packed,name=categories,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"categories,omitempty"` // [(validate.rules) .repeated.min_items = 1];
	OperatingAccount       *v1.BankAccountDetail                              `protobuf:"bytes,10,opt,name=operating_account,json=operatingAccount,proto3" json:"operating_account,omitempty"`
	RevenueAccount         *v1.BankAccountDetail                              `protobuf:"bytes,11,opt,name=revenue_account,json=revenueAccount,proto3" json:"revenue_account,omitempty"`
	BarcodeType            barcodetypev1.BarcodeType                          `protobuf:"varint,16,opt,name=barcode_type,json=barcodeType,proto3,enum=micashared.common.enums.barcodetype.v1.BarcodeType" json:"barcode_type,omitempty"`
	BarcodeLocation        barcodelocationv1.BarcodeLocation                  `protobuf:"varint,17,opt,name=barcode_location,json=barcodeLocation,proto3,enum=micashared.common.enums.barcodelocation.v1.BarcodeLocation" json:"barcode_location,omitempty"`
}

func (x *UpdateOrganizationRequest) Reset() {
	*x = UpdateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationRequest) ProtoMessage() {}

func (x *UpdateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in mica/partner/organization/v1/organization.proto.
func (x *UpdateOrganizationRequest) GetObsoleteOrganizationKey() string {
	if x != nil {
		return x.ObsoleteOrganizationKey
	}
	return ""
}

func (m *UpdateOrganizationRequest) GetOrganizationIdentifier() isUpdateOrganizationRequest_OrganizationIdentifier {
	if m != nil {
		return m.OrganizationIdentifier
	}
	return nil
}

func (x *UpdateOrganizationRequest) GetOrganizationKey() string {
	if x, ok := x.GetOrganizationIdentifier().(*UpdateOrganizationRequest_OrganizationKey); ok {
		return x.OrganizationKey
	}
	return ""
}

func (x *UpdateOrganizationRequest) GetOrganizationRef() string {
	if x, ok := x.GetOrganizationIdentifier().(*UpdateOrganizationRequest_OrganizationRef); ok {
		return x.OrganizationRef
	}
	return ""
}

func (x *UpdateOrganizationRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UpdateOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationRequest) GetAddress() *v1.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UpdateOrganizationRequest) GetCategories() []organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *UpdateOrganizationRequest) GetOperatingAccount() *v1.BankAccountDetail {
	if x != nil {
		return x.OperatingAccount
	}
	return nil
}

func (x *UpdateOrganizationRequest) GetRevenueAccount() *v1.BankAccountDetail {
	if x != nil {
		return x.RevenueAccount
	}
	return nil
}

func (x *UpdateOrganizationRequest) GetBarcodeType() barcodetypev1.BarcodeType {
	if x != nil {
		return x.BarcodeType
	}
	return barcodetypev1.BarcodeType(0)
}

func (x *UpdateOrganizationRequest) GetBarcodeLocation() barcodelocationv1.BarcodeLocation {
	if x != nil {
		return x.BarcodeLocation
	}
	return barcodelocationv1.BarcodeLocation(0)
}

type isUpdateOrganizationRequest_OrganizationIdentifier interface {
	isUpdateOrganizationRequest_OrganizationIdentifier()
}

type UpdateOrganizationRequest_OrganizationKey struct {
	OrganizationKey string `protobuf:"bytes,6,opt,name=organization_key,json=organizationKey,proto3,oneof"`
}

type UpdateOrganizationRequest_OrganizationRef struct {
	// The primary key for this organization at the Partner.
	OrganizationRef string `protobuf:"bytes,7,opt,name=organization_ref,json=organizationRef,proto3,oneof"`
}

func (*UpdateOrganizationRequest_OrganizationKey) isUpdateOrganizationRequest_OrganizationIdentifier() {
}

func (*UpdateOrganizationRequest_OrganizationRef) isUpdateOrganizationRequest_OrganizationIdentifier() {
}

type UpdateOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  UpdateOrganizationResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.organization.v1.UpdateOrganizationResponse_Status" json:"status,omitempty"`
	Error   *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Version int64                             `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateOrganizationResponse) Reset() {
	*x = UpdateOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationResponse) ProtoMessage() {}

func (x *UpdateOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateOrganizationResponse) GetStatus() UpdateOrganizationResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateOrganizationResponse_STATUS_UNSPECIFIED
}

func (x *UpdateOrganizationResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateOrganizationResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SearchOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this organization.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The category of this organization (used by Service Provider's to as part of their processing rules).
	Category organizationcategoryv1.OrganizationCategory `protobuf:"varint,2,opt,name=category,proto3,enum=micashared.common.enums.organizationcategory.v1.OrganizationCategory" json:"category,omitempty"`
}

func (x *SearchOrganizationRequest) Reset() {
	*x = SearchOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOrganizationRequest) ProtoMessage() {}

func (x *SearchOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOrganizationRequest.ProtoReflect.Descriptor instead.
func (*SearchOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{6}
}

func (x *SearchOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchOrganizationRequest) GetCategory() organizationcategoryv1.OrganizationCategory {
	if x != nil {
		return x.Category
	}
	return organizationcategoryv1.OrganizationCategory(0)
}

type SearchOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        SearchOrganizationResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.organization.v1.SearchOrganizationResponse_Status" json:"status,omitempty"`
	Error         *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Organizations []*v1.Organization                `protobuf:"bytes,3,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *SearchOrganizationResponse) Reset() {
	*x = SearchOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOrganizationResponse) ProtoMessage() {}

func (x *SearchOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_organization_v1_organization_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOrganizationResponse.ProtoReflect.Descriptor instead.
func (*SearchOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_organization_v1_organization_proto_rawDescGZIP(), []int{7}
}

func (x *SearchOrganizationResponse) GetStatus() SearchOrganizationResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchOrganizationResponse_STATUS_UNSPECIFIED
}

func (x *SearchOrganizationResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchOrganizationResponse) GetOrganizations() []*v1.Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

var File_mica_partner_organization_v1_organization_proto protoreflect.FileDescriptor

var file_mica_partner_organization_v1_organization_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a,
	0x41, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x39, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x96, 0x05, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a, 0x10, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x02, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x7a, 0x02, 0x68, 0x10, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x22, 0xe6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x19, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x18, 0x01, 0x52,
	0x17, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x42, 0x19, 0x0a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0xe7, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x22, 0x96, 0x06, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x19, 0x6f, 0x62, 0x73, 0x6f, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x32, 0x18, 0x01, 0x52, 0x17, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x32, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x66, 0x0a, 0x10, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0xbd, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x04, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xd9, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x65, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x10, 0x03, 0x42, 0x58, 0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x1b, 0x6d, 0x69, 0x63, 0x61, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_partner_organization_v1_organization_proto_rawDescOnce sync.Once
	file_mica_partner_organization_v1_organization_proto_rawDescData = file_mica_partner_organization_v1_organization_proto_rawDesc
)

func file_mica_partner_organization_v1_organization_proto_rawDescGZIP() []byte {
	file_mica_partner_organization_v1_organization_proto_rawDescOnce.Do(func() {
		file_mica_partner_organization_v1_organization_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_partner_organization_v1_organization_proto_rawDescData)
	})
	return file_mica_partner_organization_v1_organization_proto_rawDescData
}

var file_mica_partner_organization_v1_organization_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mica_partner_organization_v1_organization_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_mica_partner_organization_v1_organization_proto_goTypes = []interface{}{
	(CreateOrganizationResponse_Status)(0),           // 0: mica.partner.organization.v1.CreateOrganizationResponse.Status
	(GetOrganizationResponse_Status)(0),              // 1: mica.partner.organization.v1.GetOrganizationResponse.Status
	(UpdateOrganizationResponse_Status)(0),           // 2: mica.partner.organization.v1.UpdateOrganizationResponse.Status
	(SearchOrganizationResponse_Status)(0),           // 3: mica.partner.organization.v1.SearchOrganizationResponse.Status
	(*CreateOrganizationRequest)(nil),                // 4: mica.partner.organization.v1.CreateOrganizationRequest
	(*CreateOrganizationResponse)(nil),               // 5: mica.partner.organization.v1.CreateOrganizationResponse
	(*GetOrganizationRequest)(nil),                   // 6: mica.partner.organization.v1.GetOrganizationRequest
	(*GetOrganizationResponse)(nil),                  // 7: mica.partner.organization.v1.GetOrganizationResponse
	(*UpdateOrganizationRequest)(nil),                // 8: mica.partner.organization.v1.UpdateOrganizationRequest
	(*UpdateOrganizationResponse)(nil),               // 9: mica.partner.organization.v1.UpdateOrganizationResponse
	(*SearchOrganizationRequest)(nil),                // 10: mica.partner.organization.v1.SearchOrganizationRequest
	(*SearchOrganizationResponse)(nil),               // 11: mica.partner.organization.v1.SearchOrganizationResponse
	(*v1.Address)(nil),                               // 12: micashared.common.v1.Address
	(organizationcategoryv1.OrganizationCategory)(0), // 13: micashared.common.enums.organizationcategory.v1.OrganizationCategory
	(*v1.BankAccountDetail)(nil),                     // 14: micashared.common.v1.BankAccountDetail
	(barcodetypev1.BarcodeType)(0),                   // 15: micashared.common.enums.barcodetype.v1.BarcodeType
	(barcodelocationv1.BarcodeLocation)(0),           // 16: micashared.common.enums.barcodelocation.v1.BarcodeLocation
	(*v1.Error)(nil),                                 // 17: micashared.common.v1.Error
	(*v1.Organization)(nil),                          // 18: micashared.common.v1.Organization
}
var file_mica_partner_organization_v1_organization_proto_depIdxs = []int32{
	12, // 0: mica.partner.organization.v1.CreateOrganizationRequest.address:type_name -> micashared.common.v1.Address
	13, // 1: mica.partner.organization.v1.CreateOrganizationRequest.categories:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	14, // 2: mica.partner.organization.v1.CreateOrganizationRequest.operating_account:type_name -> micashared.common.v1.BankAccountDetail
	14, // 3: mica.partner.organization.v1.CreateOrganizationRequest.revenue_account:type_name -> micashared.common.v1.BankAccountDetail
	15, // 4: mica.partner.organization.v1.CreateOrganizationRequest.barcode_type:type_name -> micashared.common.enums.barcodetype.v1.BarcodeType
	16, // 5: mica.partner.organization.v1.CreateOrganizationRequest.barcode_location:type_name -> micashared.common.enums.barcodelocation.v1.BarcodeLocation
	0,  // 6: mica.partner.organization.v1.CreateOrganizationResponse.status:type_name -> mica.partner.organization.v1.CreateOrganizationResponse.Status
	17, // 7: mica.partner.organization.v1.CreateOrganizationResponse.error:type_name -> micashared.common.v1.Error
	1,  // 8: mica.partner.organization.v1.GetOrganizationResponse.status:type_name -> mica.partner.organization.v1.GetOrganizationResponse.Status
	17, // 9: mica.partner.organization.v1.GetOrganizationResponse.error:type_name -> micashared.common.v1.Error
	18, // 10: mica.partner.organization.v1.GetOrganizationResponse.organization:type_name -> micashared.common.v1.Organization
	12, // 11: mica.partner.organization.v1.UpdateOrganizationRequest.address:type_name -> micashared.common.v1.Address
	13, // 12: mica.partner.organization.v1.UpdateOrganizationRequest.categories:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	14, // 13: mica.partner.organization.v1.UpdateOrganizationRequest.operating_account:type_name -> micashared.common.v1.BankAccountDetail
	14, // 14: mica.partner.organization.v1.UpdateOrganizationRequest.revenue_account:type_name -> micashared.common.v1.BankAccountDetail
	15, // 15: mica.partner.organization.v1.UpdateOrganizationRequest.barcode_type:type_name -> micashared.common.enums.barcodetype.v1.BarcodeType
	16, // 16: mica.partner.organization.v1.UpdateOrganizationRequest.barcode_location:type_name -> micashared.common.enums.barcodelocation.v1.BarcodeLocation
	2,  // 17: mica.partner.organization.v1.UpdateOrganizationResponse.status:type_name -> mica.partner.organization.v1.UpdateOrganizationResponse.Status
	17, // 18: mica.partner.organization.v1.UpdateOrganizationResponse.error:type_name -> micashared.common.v1.Error
	13, // 19: mica.partner.organization.v1.SearchOrganizationRequest.category:type_name -> micashared.common.enums.organizationcategory.v1.OrganizationCategory
	3,  // 20: mica.partner.organization.v1.SearchOrganizationResponse.status:type_name -> mica.partner.organization.v1.SearchOrganizationResponse.Status
	17, // 21: mica.partner.organization.v1.SearchOrganizationResponse.error:type_name -> micashared.common.v1.Error
	18, // 22: mica.partner.organization.v1.SearchOrganizationResponse.organizations:type_name -> micashared.common.v1.Organization
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_mica_partner_organization_v1_organization_proto_init() }
func file_mica_partner_organization_v1_organization_proto_init() {
	if File_mica_partner_organization_v1_organization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_partner_organization_v1_organization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_organization_v1_organization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_organization_v1_organization_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_organization_v1_organization_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_organization_v1_organization_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_organization_v1_organization_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_organization_v1_organization_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_organization_v1_organization_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_partner_organization_v1_organization_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetOrganizationRequest_OrganizationKey)(nil),
		(*GetOrganizationRequest_OrganizationRef)(nil),
	}
	file_mica_partner_organization_v1_organization_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UpdateOrganizationRequest_OrganizationKey)(nil),
		(*UpdateOrganizationRequest_OrganizationRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_partner_organization_v1_organization_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mica_partner_organization_v1_organization_proto_goTypes,
		DependencyIndexes: file_mica_partner_organization_v1_organization_proto_depIdxs,
		EnumInfos:         file_mica_partner_organization_v1_organization_proto_enumTypes,
		MessageInfos:      file_mica_partner_organization_v1_organization_proto_msgTypes,
	}.Build()
	File_mica_partner_organization_v1_organization_proto = out.File
	file_mica_partner_organization_v1_organization_proto_rawDesc = nil
	file_mica_partner_organization_v1_organization_proto_goTypes = nil
	file_mica_partner_organization_v1_organization_proto_depIdxs = nil
}
