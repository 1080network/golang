// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: mica/partner/service/v1/partner_to_mica_wip_service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartnerToMicaWIPService_CreateRecurringPayment_FullMethodName        = "/mica.partner.service.v1.PartnerToMicaWIPService/CreateRecurringPayment"
	PartnerToMicaWIPService_GetRecurringPayment_FullMethodName           = "/mica.partner.service.v1.PartnerToMicaWIPService/GetRecurringPayment"
	PartnerToMicaWIPService_ProvisionRecurringPaymentUUEK_FullMethodName = "/mica.partner.service.v1.PartnerToMicaWIPService/ProvisionRecurringPaymentUUEK"
)

// PartnerToMicaWIPServiceClient is the client API for PartnerToMicaWIPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerToMicaWIPServiceClient interface {
	// Create a recurring payment to be attached to a partner to service provider link
	CreateRecurringPayment(ctx context.Context, in *CreateRecurringPaymentRequest, opts ...grpc.CallOption) (*CreateRecurringPaymentResponse, error)
	// return a recurring payment using a unique identifier as a key
	GetRecurringPayment(ctx context.Context, in *GetRecurringPaymentRequest, opts ...grpc.CallOption) (*GetRecurringPaymentResponse, error)
	// The user should call this method before calling ExecuteRecurringPaymentObtainValue below
	ProvisionRecurringPaymentUUEK(ctx context.Context, in *ProvisionRecurringPaymentUUEKRequest, opts ...grpc.CallOption) (*ProvisionRecurringPaymentUUEKResponse, error)
}

type partnerToMicaWIPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerToMicaWIPServiceClient(cc grpc.ClientConnInterface) PartnerToMicaWIPServiceClient {
	return &partnerToMicaWIPServiceClient{cc}
}

func (c *partnerToMicaWIPServiceClient) CreateRecurringPayment(ctx context.Context, in *CreateRecurringPaymentRequest, opts ...grpc.CallOption) (*CreateRecurringPaymentResponse, error) {
	out := new(CreateRecurringPaymentResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaWIPService_CreateRecurringPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaWIPServiceClient) GetRecurringPayment(ctx context.Context, in *GetRecurringPaymentRequest, opts ...grpc.CallOption) (*GetRecurringPaymentResponse, error) {
	out := new(GetRecurringPaymentResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaWIPService_GetRecurringPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaWIPServiceClient) ProvisionRecurringPaymentUUEK(ctx context.Context, in *ProvisionRecurringPaymentUUEKRequest, opts ...grpc.CallOption) (*ProvisionRecurringPaymentUUEKResponse, error) {
	out := new(ProvisionRecurringPaymentUUEKResponse)
	err := c.cc.Invoke(ctx, PartnerToMicaWIPService_ProvisionRecurringPaymentUUEK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerToMicaWIPServiceServer is the server API for PartnerToMicaWIPService service.
// All implementations must embed UnimplementedPartnerToMicaWIPServiceServer
// for forward compatibility
type PartnerToMicaWIPServiceServer interface {
	// Create a recurring payment to be attached to a partner to service provider link
	CreateRecurringPayment(context.Context, *CreateRecurringPaymentRequest) (*CreateRecurringPaymentResponse, error)
	// return a recurring payment using a unique identifier as a key
	GetRecurringPayment(context.Context, *GetRecurringPaymentRequest) (*GetRecurringPaymentResponse, error)
	// The user should call this method before calling ExecuteRecurringPaymentObtainValue below
	ProvisionRecurringPaymentUUEK(context.Context, *ProvisionRecurringPaymentUUEKRequest) (*ProvisionRecurringPaymentUUEKResponse, error)
	mustEmbedUnimplementedPartnerToMicaWIPServiceServer()
}

// UnimplementedPartnerToMicaWIPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerToMicaWIPServiceServer struct {
}

func (UnimplementedPartnerToMicaWIPServiceServer) CreateRecurringPayment(context.Context, *CreateRecurringPaymentRequest) (*CreateRecurringPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecurringPayment not implemented")
}
func (UnimplementedPartnerToMicaWIPServiceServer) GetRecurringPayment(context.Context, *GetRecurringPaymentRequest) (*GetRecurringPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecurringPayment not implemented")
}
func (UnimplementedPartnerToMicaWIPServiceServer) ProvisionRecurringPaymentUUEK(context.Context, *ProvisionRecurringPaymentUUEKRequest) (*ProvisionRecurringPaymentUUEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionRecurringPaymentUUEK not implemented")
}
func (UnimplementedPartnerToMicaWIPServiceServer) mustEmbedUnimplementedPartnerToMicaWIPServiceServer() {
}

// UnsafePartnerToMicaWIPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerToMicaWIPServiceServer will
// result in compilation errors.
type UnsafePartnerToMicaWIPServiceServer interface {
	mustEmbedUnimplementedPartnerToMicaWIPServiceServer()
}

func RegisterPartnerToMicaWIPServiceServer(s grpc.ServiceRegistrar, srv PartnerToMicaWIPServiceServer) {
	s.RegisterService(&PartnerToMicaWIPService_ServiceDesc, srv)
}

func _PartnerToMicaWIPService_CreateRecurringPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecurringPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaWIPServiceServer).CreateRecurringPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaWIPService_CreateRecurringPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaWIPServiceServer).CreateRecurringPayment(ctx, req.(*CreateRecurringPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaWIPService_GetRecurringPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecurringPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaWIPServiceServer).GetRecurringPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaWIPService_GetRecurringPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaWIPServiceServer).GetRecurringPayment(ctx, req.(*GetRecurringPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaWIPService_ProvisionRecurringPaymentUUEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRecurringPaymentUUEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaWIPServiceServer).ProvisionRecurringPaymentUUEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerToMicaWIPService_ProvisionRecurringPaymentUUEK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaWIPServiceServer).ProvisionRecurringPaymentUUEK(ctx, req.(*ProvisionRecurringPaymentUUEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerToMicaWIPService_ServiceDesc is the grpc.ServiceDesc for PartnerToMicaWIPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerToMicaWIPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mica.partner.service.v1.PartnerToMicaWIPService",
	HandlerType: (*PartnerToMicaWIPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecurringPayment",
			Handler:    _PartnerToMicaWIPService_CreateRecurringPayment_Handler,
		},
		{
			MethodName: "GetRecurringPayment",
			Handler:    _PartnerToMicaWIPService_GetRecurringPayment_Handler,
		},
		{
			MethodName: "ProvisionRecurringPaymentUUEK",
			Handler:    _PartnerToMicaWIPService_ProvisionRecurringPaymentUUEK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/1080network/golang/partner/proto/mica/partner/service/v1/partner_to_mica_wip_service.proto",
}
