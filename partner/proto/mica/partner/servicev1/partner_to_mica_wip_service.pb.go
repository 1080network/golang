// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.28.3
// source: mica/partner/service/v1/partner_to_mica_wip_service.proto

package servicev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	valuev1 "github.com/1080network/golang/partner/proto/mica/partner/valuev1"
	approvaltypev1 "github.com/1080network/golang/partner/proto/micashared/common/enums/approvaltypev1"
	currencyv1 "github.com/1080network/golang/partner/proto/micashared/common/enums/currencyv1"
	recurringpaymentfrequencyv1 "github.com/1080network/golang/partner/proto/micashared/common/enums/recurringpaymentfrequencyv1"
	recurringpaymenttypev1 "github.com/1080network/golang/partner/proto/micashared/common/enums/recurringpaymenttypev1"
	v1 "github.com/1080network/golang/partner/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecurringPaymentStatus int32

const (
	RecurringPaymentStatus_RECURRING_PAYMENT_STATUS_UNSPECIFIED RecurringPaymentStatus = 0
	RecurringPaymentStatus_RECURRING_PAYMENT_STATUS_ACTIVE      RecurringPaymentStatus = 1
	RecurringPaymentStatus_RECURRING_PAYMENT_STATUS_INACTIVE    RecurringPaymentStatus = 2
	RecurringPaymentStatus_RECURRING_PAYMENT_STATUS_CANCELED    RecurringPaymentStatus = 3
)

// Enum value maps for RecurringPaymentStatus.
var (
	RecurringPaymentStatus_name = map[int32]string{
		0: "RECURRING_PAYMENT_STATUS_UNSPECIFIED",
		1: "RECURRING_PAYMENT_STATUS_ACTIVE",
		2: "RECURRING_PAYMENT_STATUS_INACTIVE",
		3: "RECURRING_PAYMENT_STATUS_CANCELED",
	}
	RecurringPaymentStatus_value = map[string]int32{
		"RECURRING_PAYMENT_STATUS_UNSPECIFIED": 0,
		"RECURRING_PAYMENT_STATUS_ACTIVE":      1,
		"RECURRING_PAYMENT_STATUS_INACTIVE":    2,
		"RECURRING_PAYMENT_STATUS_CANCELED":    3,
	}
)

func (x RecurringPaymentStatus) Enum() *RecurringPaymentStatus {
	p := new(RecurringPaymentStatus)
	*p = x
	return p
}

func (x RecurringPaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecurringPaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[0].Descriptor()
}

func (RecurringPaymentStatus) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[0]
}

func (x RecurringPaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecurringPaymentStatus.Descriptor instead.
func (RecurringPaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{0}
}

type CreateRecurringPaymentResponse_Status int32

const (
	CreateRecurringPaymentResponse_STATUS_UNSPECIFIED                         CreateRecurringPaymentResponse_Status = 0
	CreateRecurringPaymentResponse_STATUS_SUCCESS                             CreateRecurringPaymentResponse_Status = 1
	CreateRecurringPaymentResponse_STATUS_INVALID_LINK                        CreateRecurringPaymentResponse_Status = 2
	CreateRecurringPaymentResponse_STATUS_INVALID_ORGANIZATION                CreateRecurringPaymentResponse_Status = 3
	CreateRecurringPaymentResponse_STATUS_INVALID_NETWORK                     CreateRecurringPaymentResponse_Status = 4
	CreateRecurringPaymentResponse_STATUS_INVALID_RECURRING_PAYMENT_PARAMETER CreateRecurringPaymentResponse_Status = 5
)

// Enum value maps for CreateRecurringPaymentResponse_Status.
var (
	CreateRecurringPaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_INVALID_LINK",
		3: "STATUS_INVALID_ORGANIZATION",
		4: "STATUS_INVALID_NETWORK",
		5: "STATUS_INVALID_RECURRING_PAYMENT_PARAMETER",
	}
	CreateRecurringPaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                         0,
		"STATUS_SUCCESS":                             1,
		"STATUS_INVALID_LINK":                        2,
		"STATUS_INVALID_ORGANIZATION":                3,
		"STATUS_INVALID_NETWORK":                     4,
		"STATUS_INVALID_RECURRING_PAYMENT_PARAMETER": 5,
	}
)

func (x CreateRecurringPaymentResponse_Status) Enum() *CreateRecurringPaymentResponse_Status {
	p := new(CreateRecurringPaymentResponse_Status)
	*p = x
	return p
}

func (x CreateRecurringPaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateRecurringPaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[1].Descriptor()
}

func (CreateRecurringPaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[1]
}

func (x CreateRecurringPaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateRecurringPaymentResponse_Status.Descriptor instead.
func (CreateRecurringPaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{2, 0}
}

type CancelRecurringPaymentResponse_Status int32

const (
	CancelRecurringPaymentResponse_STATUS_UNSPECIFIED CancelRecurringPaymentResponse_Status = 0
	CancelRecurringPaymentResponse_STATUS_SUCCESS     CancelRecurringPaymentResponse_Status = 1
	CancelRecurringPaymentResponse_STATUS_ERROR       CancelRecurringPaymentResponse_Status = 2
)

// Enum value maps for CancelRecurringPaymentResponse_Status.
var (
	CancelRecurringPaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	CancelRecurringPaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x CancelRecurringPaymentResponse_Status) Enum() *CancelRecurringPaymentResponse_Status {
	p := new(CancelRecurringPaymentResponse_Status)
	*p = x
	return p
}

func (x CancelRecurringPaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelRecurringPaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[2].Descriptor()
}

func (CancelRecurringPaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[2]
}

func (x CancelRecurringPaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelRecurringPaymentResponse_Status.Descriptor instead.
func (CancelRecurringPaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{4, 0}
}

type ActivateRecurringPaymentResponse_Status int32

const (
	ActivateRecurringPaymentResponse_STATUS_UNSPECIFIED ActivateRecurringPaymentResponse_Status = 0
	ActivateRecurringPaymentResponse_STATUS_SUCCESS     ActivateRecurringPaymentResponse_Status = 1
	ActivateRecurringPaymentResponse_STATUS_ERROR       ActivateRecurringPaymentResponse_Status = 2
)

// Enum value maps for ActivateRecurringPaymentResponse_Status.
var (
	ActivateRecurringPaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	ActivateRecurringPaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x ActivateRecurringPaymentResponse_Status) Enum() *ActivateRecurringPaymentResponse_Status {
	p := new(ActivateRecurringPaymentResponse_Status)
	*p = x
	return p
}

func (x ActivateRecurringPaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivateRecurringPaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[3].Descriptor()
}

func (ActivateRecurringPaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[3]
}

func (x ActivateRecurringPaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivateRecurringPaymentResponse_Status.Descriptor instead.
func (ActivateRecurringPaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{6, 0}
}

type SearchRecurringPaymentResponse_Status int32

const (
	SearchRecurringPaymentResponse_STATUS_UNSPECIFIED SearchRecurringPaymentResponse_Status = 0
	SearchRecurringPaymentResponse_STATUS_SUCCESS     SearchRecurringPaymentResponse_Status = 1
	SearchRecurringPaymentResponse_STATUS_ERROR       SearchRecurringPaymentResponse_Status = 2
)

// Enum value maps for SearchRecurringPaymentResponse_Status.
var (
	SearchRecurringPaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchRecurringPaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchRecurringPaymentResponse_Status) Enum() *SearchRecurringPaymentResponse_Status {
	p := new(SearchRecurringPaymentResponse_Status)
	*p = x
	return p
}

func (x SearchRecurringPaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchRecurringPaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[4].Descriptor()
}

func (SearchRecurringPaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[4]
}

func (x SearchRecurringPaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchRecurringPaymentResponse_Status.Descriptor instead.
func (SearchRecurringPaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{8, 0}
}

type GetRecurringPaymentResponse_Status int32

const (
	GetRecurringPaymentResponse_STATUS_UNSPECIFIED GetRecurringPaymentResponse_Status = 0
	GetRecurringPaymentResponse_STATUS_SUCCESS     GetRecurringPaymentResponse_Status = 1
	GetRecurringPaymentResponse_STATUS_NOT_FOUND   GetRecurringPaymentResponse_Status = 2
)

// Enum value maps for GetRecurringPaymentResponse_Status.
var (
	GetRecurringPaymentResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
	}
	GetRecurringPaymentResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
	}
)

func (x GetRecurringPaymentResponse_Status) Enum() *GetRecurringPaymentResponse_Status {
	p := new(GetRecurringPaymentResponse_Status)
	*p = x
	return p
}

func (x GetRecurringPaymentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRecurringPaymentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[5].Descriptor()
}

func (GetRecurringPaymentResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[5]
}

func (x GetRecurringPaymentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetRecurringPaymentResponse_Status.Descriptor instead.
func (GetRecurringPaymentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{10, 0}
}

type ProvisionRecurringPaymentUUEKResponse_Status int32

const (
	ProvisionRecurringPaymentUUEKResponse_STATUS_UNSPECIFIED ProvisionRecurringPaymentUUEKResponse_Status = 0
	ProvisionRecurringPaymentUUEKResponse_STATUS_SUCCESS     ProvisionRecurringPaymentUUEKResponse_Status = 1
	ProvisionRecurringPaymentUUEKResponse_STATUS_NOT_FOUND   ProvisionRecurringPaymentUUEKResponse_Status = 2
)

// Enum value maps for ProvisionRecurringPaymentUUEKResponse_Status.
var (
	ProvisionRecurringPaymentUUEKResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
	}
	ProvisionRecurringPaymentUUEKResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
	}
)

func (x ProvisionRecurringPaymentUUEKResponse_Status) Enum() *ProvisionRecurringPaymentUUEKResponse_Status {
	p := new(ProvisionRecurringPaymentUUEKResponse_Status)
	*p = x
	return p
}

func (x ProvisionRecurringPaymentUUEKResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisionRecurringPaymentUUEKResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[6].Descriptor()
}

func (ProvisionRecurringPaymentUUEKResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[6]
}

func (x ProvisionRecurringPaymentUUEKResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisionRecurringPaymentUUEKResponse_Status.Descriptor instead.
func (ProvisionRecurringPaymentUUEKResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{12, 0}
}

type RecurringPaymentObtainValueResponse_Status int32

const (
	RecurringPaymentObtainValueResponse_STATUS_UNSPECIFIED RecurringPaymentObtainValueResponse_Status = 0
	// An approval for the full amount
	RecurringPaymentObtainValueResponse_STATUS_FULL_APPROVAL RecurringPaymentObtainValueResponse_Status = 1
	// An error occurred when processing the request
	RecurringPaymentObtainValueResponse_STATUS_ERROR RecurringPaymentObtainValueResponse_Status = 2
	// An approval was given for a partial amount
	RecurringPaymentObtainValueResponse_STATUS_PARTIAL_APPROVAL RecurringPaymentObtainValueResponse_Status = 3
	// User instrument doesn't have sufficient value to cover the transaction
	RecurringPaymentObtainValueResponse_STATUS_INSUFFICIENT_VALUE RecurringPaymentObtainValueResponse_Status = 4
	// When all products are either ineligible or age restricted
	RecurringPaymentObtainValueResponse_STATUS_INELIGIBLE_PRODUCTS RecurringPaymentObtainValueResponse_Status = 5
	// Instrument/account not found
	RecurringPaymentObtainValueResponse_STATUS_NOT_FOUND RecurringPaymentObtainValueResponse_Status = 6
	// User instrument is closed
	RecurringPaymentObtainValueResponse_STATUS_INSTRUMENT_CLOSED RecurringPaymentObtainValueResponse_Status = 7
	// Request triggered a transactional risk or fraud check resulting in a decline
	RecurringPaymentObtainValueResponse_STATUS_TRANSACTION_RISK_FRAUD RecurringPaymentObtainValueResponse_Status = 8
	// Request triggered a bad actor risk or fraud check resulting in a decline
	RecurringPaymentObtainValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD RecurringPaymentObtainValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	RecurringPaymentObtainValueResponse_STATUS_USER_RISK_FRAUD RecurringPaymentObtainValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	RecurringPaymentObtainValueResponse_STATUS_INSTRUMENT_RISK_FRAUD RecurringPaymentObtainValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	RecurringPaymentObtainValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER RecurringPaymentObtainValueResponse_Status = 9
	// The operation isn't supported by the Service Provider
	RecurringPaymentObtainValueResponse_STATUS_UNSUPPORTED RecurringPaymentObtainValueResponse_Status = 10
	// The Fi is unavailable at this time
	RecurringPaymentObtainValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE RecurringPaymentObtainValueResponse_Status = 11
	// The UUEK sent is invalid or not found
	RecurringPaymentObtainValueResponse_STATUS_INVALID_UUEK RecurringPaymentObtainValueResponse_Status = 12
	// A valid PIN is required for this transaction
	RecurringPaymentObtainValueResponse_STATUS_PIN_REQUIRED RecurringPaymentObtainValueResponse_Status = 13
	// returned when processing an EBT transaction but no line items have been given
	RecurringPaymentObtainValueResponse_STATUS_MISSING_LINE_ITEMS RecurringPaymentObtainValueResponse_Status = 14
	// when partial approval is requested but not supported
	RecurringPaymentObtainValueResponse_STATUS_PARTIAL_APPROVAL_INVALID RecurringPaymentObtainValueResponse_Status = 15
	// Request resulted in one or more limits being exceeded at the Service Provider
	RecurringPaymentObtainValueResponse_STATUS_LIMIT_EXCEEDED RecurringPaymentObtainValueResponse_Status = 19
	// The referenced Organization of this request isn't fully configured to process transactions
	RecurringPaymentObtainValueResponse_STATUS_ORGANIZATION_NOT_CONFIGURED RecurringPaymentObtainValueResponse_Status = 21
	// The total amount of the line items does not match the total amount of the transaction
	RecurringPaymentObtainValueResponse_STATUS_LINE_ITEM_TOTAL_MISMATCH RecurringPaymentObtainValueResponse_Status = 22
	// The call to the Service Provider (a.k.a. the issuer) timed out
	RecurringPaymentObtainValueResponse_STATUS_SERVICE_PROVIDER_TIMEOUT RecurringPaymentObtainValueResponse_Status = 23
)

// Enum value maps for RecurringPaymentObtainValueResponse_Status.
var (
	RecurringPaymentObtainValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		3:  "STATUS_PARTIAL_APPROVAL",
		4:  "STATUS_INSUFFICIENT_VALUE",
		5:  "STATUS_INELIGIBLE_PRODUCTS",
		6:  "STATUS_NOT_FOUND",
		7:  "STATUS_INSTRUMENT_CLOSED",
		8:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		9:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		10: "STATUS_UNSUPPORTED",
		11: "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		12: "STATUS_INVALID_UUEK",
		13: "STATUS_PIN_REQUIRED",
		14: "STATUS_MISSING_LINE_ITEMS",
		15: "STATUS_PARTIAL_APPROVAL_INVALID",
		19: "STATUS_LIMIT_EXCEEDED",
		21: "STATUS_ORGANIZATION_NOT_CONFIGURED",
		22: "STATUS_LINE_ITEM_TOTAL_MISMATCH",
		23: "STATUS_SERVICE_PROVIDER_TIMEOUT",
	}
	RecurringPaymentObtainValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_PARTIAL_APPROVAL":             3,
		"STATUS_INSUFFICIENT_VALUE":           4,
		"STATUS_INELIGIBLE_PRODUCTS":          5,
		"STATUS_NOT_FOUND":                    6,
		"STATUS_INSTRUMENT_CLOSED":            7,
		"STATUS_TRANSACTION_RISK_FRAUD":       8,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   9,
		"STATUS_UNSUPPORTED":                  10,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 11,
		"STATUS_INVALID_UUEK":                 12,
		"STATUS_PIN_REQUIRED":                 13,
		"STATUS_MISSING_LINE_ITEMS":           14,
		"STATUS_PARTIAL_APPROVAL_INVALID":     15,
		"STATUS_LIMIT_EXCEEDED":               19,
		"STATUS_ORGANIZATION_NOT_CONFIGURED":  21,
		"STATUS_LINE_ITEM_TOTAL_MISMATCH":     22,
		"STATUS_SERVICE_PROVIDER_TIMEOUT":     23,
	}
)

func (x RecurringPaymentObtainValueResponse_Status) Enum() *RecurringPaymentObtainValueResponse_Status {
	p := new(RecurringPaymentObtainValueResponse_Status)
	*p = x
	return p
}

func (x RecurringPaymentObtainValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecurringPaymentObtainValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[7].Descriptor()
}

func (RecurringPaymentObtainValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[7]
}

func (x RecurringPaymentObtainValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecurringPaymentObtainValueResponse_Status.Descriptor instead.
func (RecurringPaymentObtainValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{14, 0}
}

type RecurringPaymentReturnValueResponse_Status int32

const (
	RecurringPaymentReturnValueResponse_STATUS_UNSPECIFIED RecurringPaymentReturnValueResponse_Status = 0
	// An approval for the full amount
	RecurringPaymentReturnValueResponse_STATUS_FULL_APPROVAL RecurringPaymentReturnValueResponse_Status = 1
	// An error occurred when processing the request
	RecurringPaymentReturnValueResponse_STATUS_ERROR RecurringPaymentReturnValueResponse_Status = 2
	// User instrument is closed
	RecurringPaymentReturnValueResponse_STATUS_INSTRUMENT_CLOSED RecurringPaymentReturnValueResponse_Status = 3
	// Instrument/account not found
	RecurringPaymentReturnValueResponse_STATUS_NOT_FOUND RecurringPaymentReturnValueResponse_Status = 4
	// Request triggered a transactional risk or fraud check resulting in a decline
	RecurringPaymentReturnValueResponse_STATUS_TRANSACTION_RISK_FRAUD RecurringPaymentReturnValueResponse_Status = 5
	// Request triggered a bad actor risk or fraud check resulting in a decline
	RecurringPaymentReturnValueResponse_STATUS_BAD_ACTOR_RISK_FRAUD RecurringPaymentReturnValueResponse_Status = 16
	// Request triggered a user-based risk or fraud check resulting in a decline
	RecurringPaymentReturnValueResponse_STATUS_USER_RISK_FRAUD RecurringPaymentReturnValueResponse_Status = 17
	// Request triggered a instrument-based risk or fraud check resulting in a decline
	RecurringPaymentReturnValueResponse_STATUS_INSTRUMENT_RISK_FRAUD RecurringPaymentReturnValueResponse_Status = 18
	// The user needs to call the Service Provider to resolve an issue
	RecurringPaymentReturnValueResponse_STATUS_USER_CALL_SERVICE_PROVIDER RecurringPaymentReturnValueResponse_Status = 6
	// The operation isn't supported by the Service Provider
	RecurringPaymentReturnValueResponse_STATUS_UNSUPPORTED RecurringPaymentReturnValueResponse_Status = 7
	// The Fi is unavailable at this time
	RecurringPaymentReturnValueResponse_STATUS_SERVICE_PROVIDER_UNAVAILABLE RecurringPaymentReturnValueResponse_Status = 8
	// The UUEK sent is invalid or not found
	RecurringPaymentReturnValueResponse_STATUS_INVALID_UUEK RecurringPaymentReturnValueResponse_Status = 9
	// Request resulted in one or more limits being exceeded at the Service Provider
	RecurringPaymentReturnValueResponse_STATUS_LIMIT_EXCEEDED RecurringPaymentReturnValueResponse_Status = 19
	// The referenced Organization of this request isn't fully configured to process transactions
	RecurringPaymentReturnValueResponse_STATUS_ORGANIZATION_NOT_CONFIGURED RecurringPaymentReturnValueResponse_Status = 20
	// The total amount of the line items does not match the total amount of the transaction
	RecurringPaymentReturnValueResponse_STATUS_LINE_ITEM_TOTAL_MISMATCH RecurringPaymentReturnValueResponse_Status = 21
	// The call to the Service Provider (a.k.a. the issuer) timed out
	RecurringPaymentReturnValueResponse_STATUS_SERVICE_PROVIDER_TIMEOUT RecurringPaymentReturnValueResponse_Status = 22
)

// Enum value maps for RecurringPaymentReturnValueResponse_Status.
var (
	RecurringPaymentReturnValueResponse_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_FULL_APPROVAL",
		2:  "STATUS_ERROR",
		3:  "STATUS_INSTRUMENT_CLOSED",
		4:  "STATUS_NOT_FOUND",
		5:  "STATUS_TRANSACTION_RISK_FRAUD",
		16: "STATUS_BAD_ACTOR_RISK_FRAUD",
		17: "STATUS_USER_RISK_FRAUD",
		18: "STATUS_INSTRUMENT_RISK_FRAUD",
		6:  "STATUS_USER_CALL_SERVICE_PROVIDER",
		7:  "STATUS_UNSUPPORTED",
		8:  "STATUS_SERVICE_PROVIDER_UNAVAILABLE",
		9:  "STATUS_INVALID_UUEK",
		19: "STATUS_LIMIT_EXCEEDED",
		20: "STATUS_ORGANIZATION_NOT_CONFIGURED",
		21: "STATUS_LINE_ITEM_TOTAL_MISMATCH",
		22: "STATUS_SERVICE_PROVIDER_TIMEOUT",
	}
	RecurringPaymentReturnValueResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                  0,
		"STATUS_FULL_APPROVAL":                1,
		"STATUS_ERROR":                        2,
		"STATUS_INSTRUMENT_CLOSED":            3,
		"STATUS_NOT_FOUND":                    4,
		"STATUS_TRANSACTION_RISK_FRAUD":       5,
		"STATUS_BAD_ACTOR_RISK_FRAUD":         16,
		"STATUS_USER_RISK_FRAUD":              17,
		"STATUS_INSTRUMENT_RISK_FRAUD":        18,
		"STATUS_USER_CALL_SERVICE_PROVIDER":   6,
		"STATUS_UNSUPPORTED":                  7,
		"STATUS_SERVICE_PROVIDER_UNAVAILABLE": 8,
		"STATUS_INVALID_UUEK":                 9,
		"STATUS_LIMIT_EXCEEDED":               19,
		"STATUS_ORGANIZATION_NOT_CONFIGURED":  20,
		"STATUS_LINE_ITEM_TOTAL_MISMATCH":     21,
		"STATUS_SERVICE_PROVIDER_TIMEOUT":     22,
	}
)

func (x RecurringPaymentReturnValueResponse_Status) Enum() *RecurringPaymentReturnValueResponse_Status {
	p := new(RecurringPaymentReturnValueResponse_Status)
	*p = x
	return p
}

func (x RecurringPaymentReturnValueResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecurringPaymentReturnValueResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[8].Descriptor()
}

func (RecurringPaymentReturnValueResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[8]
}

func (x RecurringPaymentReturnValueResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecurringPaymentReturnValueResponse_Status.Descriptor instead.
func (RecurringPaymentReturnValueResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{16, 0}
}

type InitializeWidgetResponse_Status int32

const (
	InitializeWidgetResponse_STATUS_UNSPECIFIED InitializeWidgetResponse_Status = 0
	InitializeWidgetResponse_STATUS_SUCCESS     InitializeWidgetResponse_Status = 1
	// generic error that's not one of the following
	InitializeWidgetResponse_STATUS_ERROR InitializeWidgetResponse_Status = 2
)

// Enum value maps for InitializeWidgetResponse_Status.
var (
	InitializeWidgetResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	InitializeWidgetResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x InitializeWidgetResponse_Status) Enum() *InitializeWidgetResponse_Status {
	p := new(InitializeWidgetResponse_Status)
	*p = x
	return p
}

func (x InitializeWidgetResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitializeWidgetResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[9].Descriptor()
}

func (InitializeWidgetResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[9]
}

func (x InitializeWidgetResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitializeWidgetResponse_Status.Descriptor instead.
func (InitializeWidgetResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{18, 0}
}

type ExchangeSessionKeyResponse_Status int32

const (
	ExchangeSessionKeyResponse_STATUS_UNSPECIFIED            ExchangeSessionKeyResponse_Status = 0
	ExchangeSessionKeyResponse_STATUS_SUCCESS                ExchangeSessionKeyResponse_Status = 1
	ExchangeSessionKeyResponse_STATUS_ERROR                  ExchangeSessionKeyResponse_Status = 2
	ExchangeSessionKeyResponse_STATUS_MATCHING_CODE_MISMATCH ExchangeSessionKeyResponse_Status = 3
	ExchangeSessionKeyResponse_STATUS_NOT_FOUND              ExchangeSessionKeyResponse_Status = 4
)

// Enum value maps for ExchangeSessionKeyResponse_Status.
var (
	ExchangeSessionKeyResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_MATCHING_CODE_MISMATCH",
		4: "STATUS_NOT_FOUND",
	}
	ExchangeSessionKeyResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":            0,
		"STATUS_SUCCESS":                1,
		"STATUS_ERROR":                  2,
		"STATUS_MATCHING_CODE_MISMATCH": 3,
		"STATUS_NOT_FOUND":              4,
	}
)

func (x ExchangeSessionKeyResponse_Status) Enum() *ExchangeSessionKeyResponse_Status {
	p := new(ExchangeSessionKeyResponse_Status)
	*p = x
	return p
}

func (x ExchangeSessionKeyResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeSessionKeyResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[10].Descriptor()
}

func (ExchangeSessionKeyResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes[10]
}

func (x ExchangeSessionKeyResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeSessionKeyResponse_Status.Descriptor instead.
func (ExchangeSessionKeyResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{20, 0}
}

type RecurringPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey  string                                                `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
	Nickname             string                                                `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Currency             currencyv1.Currency                                   `protobuf:"varint,3,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	Amount               string                                                `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Frequency            recurringpaymentfrequencyv1.RecurringPaymentFrequency `protobuf:"varint,5,opt,name=frequency,proto3,enum=micashared.common.enums.recurringpaymentfrequency.v1.RecurringPaymentFrequency" json:"frequency,omitempty"`
	RecurringPaymentType recurringpaymenttypev1.RecurringPaymentType           `protobuf:"varint,6,opt,name=recurring_payment_type,json=recurringPaymentType,proto3,enum=micashared.common.enums.recurringpaymenttype.v1.RecurringPaymentType" json:"recurring_payment_type,omitempty"`
	Created              *timestamppb.Timestamp                                `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	TotalNumberPayments  int64                                                 `protobuf:"varint,8,opt,name=total_number_payments,json=totalNumberPayments,proto3" json:"total_number_payments,omitempty"`
	LastPayment          *timestamppb.Timestamp                                `protobuf:"bytes,9,opt,name=last_payment,json=lastPayment,proto3" json:"last_payment,omitempty"`
	LastPaymentAmount    string                                                `protobuf:"bytes,10,opt,name=last_payment_amount,json=lastPaymentAmount,proto3" json:"last_payment_amount,omitempty"`
	NumberPaymentsMade   int64                                                 `protobuf:"varint,11,opt,name=number_payments_made,json=numberPaymentsMade,proto3" json:"number_payments_made,omitempty"`
	Status               RecurringPaymentStatus                                `protobuf:"varint,12,opt,name=status,proto3,enum=mica.partner.service.v1.RecurringPaymentStatus" json:"status,omitempty"`
}

func (x *RecurringPayment) Reset() {
	*x = RecurringPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringPayment) ProtoMessage() {}

func (x *RecurringPayment) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringPayment.ProtoReflect.Descriptor instead.
func (*RecurringPayment) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{0}
}

func (x *RecurringPayment) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

func (x *RecurringPayment) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RecurringPayment) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *RecurringPayment) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RecurringPayment) GetFrequency() recurringpaymentfrequencyv1.RecurringPaymentFrequency {
	if x != nil {
		return x.Frequency
	}
	return recurringpaymentfrequencyv1.RecurringPaymentFrequency(0)
}

func (x *RecurringPayment) GetRecurringPaymentType() recurringpaymenttypev1.RecurringPaymentType {
	if x != nil {
		return x.RecurringPaymentType
	}
	return recurringpaymenttypev1.RecurringPaymentType(0)
}

func (x *RecurringPayment) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *RecurringPayment) GetTotalNumberPayments() int64 {
	if x != nil {
		return x.TotalNumberPayments
	}
	return 0
}

func (x *RecurringPayment) GetLastPayment() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPayment
	}
	return nil
}

func (x *RecurringPayment) GetLastPaymentAmount() string {
	if x != nil {
		return x.LastPaymentAmount
	}
	return ""
}

func (x *RecurringPayment) GetNumberPaymentsMade() int64 {
	if x != nil {
		return x.NumberPaymentsMade
	}
	return 0
}

func (x *RecurringPayment) GetStatus() RecurringPaymentStatus {
	if x != nil {
		return x.Status
	}
	return RecurringPaymentStatus_RECURRING_PAYMENT_STATUS_UNSPECIFIED
}

// the recurring payment must have an associated link object which refers to a
// service provider link, which in turn refers to an instrument and user
type CreateRecurringPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OrganizationIdentifier:
	//
	//	*CreateRecurringPaymentRequest_OrganizationKey
	//	*CreateRecurringPaymentRequest_OrganizationRef
	OrganizationIdentifier isCreateRecurringPaymentRequest_OrganizationIdentifier `protobuf_oneof:"organization_identifier"`
	LinkingCode            string                                                 `protobuf:"bytes,4,opt,name=linking_code,json=linkingCode,proto3" json:"linking_code,omitempty"`
	Nickname               string                                                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Currency               currencyv1.Currency                                    `protobuf:"varint,5,opt,name=currency,proto3,enum=micashared.common.enums.currency.v1.Currency" json:"currency,omitempty"`
	Amount                 string                                                 `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	NumberPayments         int64                                                  `protobuf:"varint,7,opt,name=number_payments,json=numberPayments,proto3" json:"number_payments,omitempty"`
	Frequency              recurringpaymentfrequencyv1.RecurringPaymentFrequency  `protobuf:"varint,8,opt,name=frequency,proto3,enum=micashared.common.enums.recurringpaymentfrequency.v1.RecurringPaymentFrequency" json:"frequency,omitempty"`
	RecurringPaymentType   recurringpaymenttypev1.RecurringPaymentType            `protobuf:"varint,9,opt,name=recurring_payment_type,json=recurringPaymentType,proto3,enum=micashared.common.enums.recurringpaymenttype.v1.RecurringPaymentType" json:"recurring_payment_type,omitempty"`
}

func (x *CreateRecurringPaymentRequest) Reset() {
	*x = CreateRecurringPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecurringPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecurringPaymentRequest) ProtoMessage() {}

func (x *CreateRecurringPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecurringPaymentRequest.ProtoReflect.Descriptor instead.
func (*CreateRecurringPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{1}
}

func (m *CreateRecurringPaymentRequest) GetOrganizationIdentifier() isCreateRecurringPaymentRequest_OrganizationIdentifier {
	if m != nil {
		return m.OrganizationIdentifier
	}
	return nil
}

func (x *CreateRecurringPaymentRequest) GetOrganizationKey() string {
	if x, ok := x.GetOrganizationIdentifier().(*CreateRecurringPaymentRequest_OrganizationKey); ok {
		return x.OrganizationKey
	}
	return ""
}

func (x *CreateRecurringPaymentRequest) GetOrganizationRef() string {
	if x, ok := x.GetOrganizationIdentifier().(*CreateRecurringPaymentRequest_OrganizationRef); ok {
		return x.OrganizationRef
	}
	return ""
}

func (x *CreateRecurringPaymentRequest) GetLinkingCode() string {
	if x != nil {
		return x.LinkingCode
	}
	return ""
}

func (x *CreateRecurringPaymentRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CreateRecurringPaymentRequest) GetCurrency() currencyv1.Currency {
	if x != nil {
		return x.Currency
	}
	return currencyv1.Currency(0)
}

func (x *CreateRecurringPaymentRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreateRecurringPaymentRequest) GetNumberPayments() int64 {
	if x != nil {
		return x.NumberPayments
	}
	return 0
}

func (x *CreateRecurringPaymentRequest) GetFrequency() recurringpaymentfrequencyv1.RecurringPaymentFrequency {
	if x != nil {
		return x.Frequency
	}
	return recurringpaymentfrequencyv1.RecurringPaymentFrequency(0)
}

func (x *CreateRecurringPaymentRequest) GetRecurringPaymentType() recurringpaymenttypev1.RecurringPaymentType {
	if x != nil {
		return x.RecurringPaymentType
	}
	return recurringpaymenttypev1.RecurringPaymentType(0)
}

type isCreateRecurringPaymentRequest_OrganizationIdentifier interface {
	isCreateRecurringPaymentRequest_OrganizationIdentifier()
}

type CreateRecurringPaymentRequest_OrganizationKey struct {
	OrganizationKey string `protobuf:"bytes,1,opt,name=organization_key,json=organizationKey,proto3,oneof"`
}

type CreateRecurringPaymentRequest_OrganizationRef struct {
	// The primary key for this organization at the Partner.
	OrganizationRef string `protobuf:"bytes,2,opt,name=organization_ref,json=organizationRef,proto3,oneof"`
}

func (*CreateRecurringPaymentRequest_OrganizationKey) isCreateRecurringPaymentRequest_OrganizationIdentifier() {
}

func (*CreateRecurringPaymentRequest_OrganizationRef) isCreateRecurringPaymentRequest_OrganizationIdentifier() {
}

type CreateRecurringPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           CreateRecurringPaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.CreateRecurringPaymentResponse_Status" json:"status,omitempty"`
	Error            *v1.Error                             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RecurringPayment *RecurringPayment                     `protobuf:"bytes,3,opt,name=recurring_payment,json=recurringPayment,proto3" json:"recurring_payment,omitempty"`
}

func (x *CreateRecurringPaymentResponse) Reset() {
	*x = CreateRecurringPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecurringPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecurringPaymentResponse) ProtoMessage() {}

func (x *CreateRecurringPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecurringPaymentResponse.ProtoReflect.Descriptor instead.
func (*CreateRecurringPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRecurringPaymentResponse) GetStatus() CreateRecurringPaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return CreateRecurringPaymentResponse_STATUS_UNSPECIFIED
}

func (x *CreateRecurringPaymentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateRecurringPaymentResponse) GetRecurringPayment() *RecurringPayment {
	if x != nil {
		return x.RecurringPayment
	}
	return nil
}

type CancelRecurringPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey string `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
}

func (x *CancelRecurringPaymentRequest) Reset() {
	*x = CancelRecurringPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRecurringPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRecurringPaymentRequest) ProtoMessage() {}

func (x *CancelRecurringPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRecurringPaymentRequest.ProtoReflect.Descriptor instead.
func (*CancelRecurringPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{3}
}

func (x *CancelRecurringPaymentRequest) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

type CancelRecurringPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CancelRecurringPaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.CancelRecurringPaymentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CancelRecurringPaymentResponse) Reset() {
	*x = CancelRecurringPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRecurringPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRecurringPaymentResponse) ProtoMessage() {}

func (x *CancelRecurringPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRecurringPaymentResponse.ProtoReflect.Descriptor instead.
func (*CancelRecurringPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{4}
}

func (x *CancelRecurringPaymentResponse) GetStatus() CancelRecurringPaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return CancelRecurringPaymentResponse_STATUS_UNSPECIFIED
}

func (x *CancelRecurringPaymentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ActivateRecurringPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey string `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
}

func (x *ActivateRecurringPaymentRequest) Reset() {
	*x = ActivateRecurringPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateRecurringPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateRecurringPaymentRequest) ProtoMessage() {}

func (x *ActivateRecurringPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateRecurringPaymentRequest.ProtoReflect.Descriptor instead.
func (*ActivateRecurringPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{5}
}

func (x *ActivateRecurringPaymentRequest) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

type ActivateRecurringPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ActivateRecurringPaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.ActivateRecurringPaymentResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                               `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ActivateRecurringPaymentResponse) Reset() {
	*x = ActivateRecurringPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateRecurringPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateRecurringPaymentResponse) ProtoMessage() {}

func (x *ActivateRecurringPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateRecurringPaymentResponse.ProtoReflect.Descriptor instead.
func (*ActivateRecurringPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{6}
}

func (x *ActivateRecurringPaymentResponse) GetStatus() ActivateRecurringPaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return ActivateRecurringPaymentResponse_STATUS_UNSPECIFIED
}

func (x *ActivateRecurringPaymentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// right now we can only search by the
// link id but perhaps later we can use
// a different search parameter
type SearchRecurringPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkKey string `protobuf:"bytes,1,opt,name=link_key,json=linkKey,proto3" json:"link_key,omitempty"`
}

func (x *SearchRecurringPaymentRequest) Reset() {
	*x = SearchRecurringPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecurringPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecurringPaymentRequest) ProtoMessage() {}

func (x *SearchRecurringPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecurringPaymentRequest.ProtoReflect.Descriptor instead.
func (*SearchRecurringPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{7}
}

func (x *SearchRecurringPaymentRequest) GetLinkKey() string {
	if x != nil {
		return x.LinkKey
	}
	return ""
}

type SearchRecurringPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            SearchRecurringPaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.SearchRecurringPaymentResponse_Status" json:"status,omitempty"`
	Error             *v1.Error                             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RecurringPayments []*RecurringPayment                   `protobuf:"bytes,3,rep,name=recurring_payments,json=recurringPayments,proto3" json:"recurring_payments,omitempty"`
}

func (x *SearchRecurringPaymentResponse) Reset() {
	*x = SearchRecurringPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRecurringPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecurringPaymentResponse) ProtoMessage() {}

func (x *SearchRecurringPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecurringPaymentResponse.ProtoReflect.Descriptor instead.
func (*SearchRecurringPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{8}
}

func (x *SearchRecurringPaymentResponse) GetStatus() SearchRecurringPaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchRecurringPaymentResponse_STATUS_UNSPECIFIED
}

func (x *SearchRecurringPaymentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchRecurringPaymentResponse) GetRecurringPayments() []*RecurringPayment {
	if x != nil {
		return x.RecurringPayments
	}
	return nil
}

type GetRecurringPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey string `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
}

func (x *GetRecurringPaymentRequest) Reset() {
	*x = GetRecurringPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPaymentRequest) ProtoMessage() {}

func (x *GetRecurringPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPaymentRequest.ProtoReflect.Descriptor instead.
func (*GetRecurringPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetRecurringPaymentRequest) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

type GetRecurringPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           GetRecurringPaymentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.GetRecurringPaymentResponse_Status" json:"status,omitempty"`
	Error            *v1.Error                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RecurringPayment *RecurringPayment                  `protobuf:"bytes,3,opt,name=recurring_payment,json=recurringPayment,proto3" json:"recurring_payment,omitempty"`
}

func (x *GetRecurringPaymentResponse) Reset() {
	*x = GetRecurringPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringPaymentResponse) ProtoMessage() {}

func (x *GetRecurringPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringPaymentResponse.ProtoReflect.Descriptor instead.
func (*GetRecurringPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetRecurringPaymentResponse) GetStatus() GetRecurringPaymentResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetRecurringPaymentResponse_STATUS_UNSPECIFIED
}

func (x *GetRecurringPaymentResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetRecurringPaymentResponse) GetRecurringPayment() *RecurringPayment {
	if x != nil {
		return x.RecurringPayment
	}
	return nil
}

type ProvisionRecurringPaymentUUEKRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey string `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
}

func (x *ProvisionRecurringPaymentUUEKRequest) Reset() {
	*x = ProvisionRecurringPaymentUUEKRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionRecurringPaymentUUEKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionRecurringPaymentUUEKRequest) ProtoMessage() {}

func (x *ProvisionRecurringPaymentUUEKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionRecurringPaymentUUEKRequest.ProtoReflect.Descriptor instead.
func (*ProvisionRecurringPaymentUUEKRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{11}
}

func (x *ProvisionRecurringPaymentUUEKRequest) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

type ProvisionRecurringPaymentUUEKResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      ProvisionRecurringPaymentUUEKResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.ProvisionRecurringPaymentUUEKResponse_Status" json:"status,omitempty"`
	Error       *v1.Error                                    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	PartnerUuek string                                       `protobuf:"bytes,3,opt,name=partner_uuek,json=partnerUuek,proto3" json:"partner_uuek,omitempty"`
}

func (x *ProvisionRecurringPaymentUUEKResponse) Reset() {
	*x = ProvisionRecurringPaymentUUEKResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionRecurringPaymentUUEKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionRecurringPaymentUUEKResponse) ProtoMessage() {}

func (x *ProvisionRecurringPaymentUUEKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionRecurringPaymentUUEKResponse.ProtoReflect.Descriptor instead.
func (*ProvisionRecurringPaymentUUEKResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{12}
}

func (x *ProvisionRecurringPaymentUUEKResponse) GetStatus() ProvisionRecurringPaymentUUEKResponse_Status {
	if x != nil {
		return x.Status
	}
	return ProvisionRecurringPaymentUUEKResponse_STATUS_UNSPECIFIED
}

func (x *ProvisionRecurringPaymentUUEKResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProvisionRecurringPaymentUUEKResponse) GetPartnerUuek() string {
	if x != nil {
		return x.PartnerUuek
	}
	return ""
}

type RecurringPaymentObtainValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey string                      `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
	ApprovalType        approvaltypev1.ApprovalType `protobuf:"varint,2,opt,name=approval_type,json=approvalType,proto3,enum=micashared.common.enums.approvaltype.v1.ApprovalType" json:"approval_type,omitempty"`
	Value               *valuev1.ValueRequest       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	RiskSignal          *v1.RiskSignal              `protobuf:"bytes,4,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
}

func (x *RecurringPaymentObtainValueRequest) Reset() {
	*x = RecurringPaymentObtainValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringPaymentObtainValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringPaymentObtainValueRequest) ProtoMessage() {}

func (x *RecurringPaymentObtainValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringPaymentObtainValueRequest.ProtoReflect.Descriptor instead.
func (*RecurringPaymentObtainValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{13}
}

func (x *RecurringPaymentObtainValueRequest) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

func (x *RecurringPaymentObtainValueRequest) GetApprovalType() approvaltypev1.ApprovalType {
	if x != nil {
		return x.ApprovalType
	}
	return approvaltypev1.ApprovalType(0)
}

func (x *RecurringPaymentObtainValueRequest) GetValue() *valuev1.ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RecurringPaymentObtainValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

type RecurringPaymentObtainValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RecurringPaymentObtainValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.RecurringPaymentObtainValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Primary key of created transaction assigned by Mica.
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	// Correlation ID of the request assigned by Mica.
	Cid string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// Amount expressed as: ([0-9]*[.])?[0-9]+
	ApprovedAmount string `protobuf:"bytes,5,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
	// status of each line item based on processing by Mica. The list will be in the same order as the request and will
	// will typically have a status of LINE_ITEM_STATUS_ELIGIBLE.
	LineItemSequenceAndStatuses []*v1.LineItemSequenceAndStatus `protobuf:"bytes,6,rep,name=line_item_sequence_and_statuses,json=lineItemSequenceAndStatuses,proto3" json:"line_item_sequence_and_statuses,omitempty"`
	// This message holds immutable details about the instruments that back UUEKs. These attributes can be used to have
	// stable references or knowledge of the underlying instrument that was used to transact.
	ImmutableInstrumentDetails *v1.ImmutableInstrumentDetails `protobuf:"bytes,8,opt,name=immutable_instrument_details,json=immutableInstrumentDetails,proto3" json:"immutable_instrument_details,omitempty"`
	TransactionIdentifier      *v1.TransactionIdentifier      `protobuf:"bytes,9,opt,name=transaction_identifier,json=transactionIdentifier,proto3" json:"transaction_identifier,omitempty"`
}

func (x *RecurringPaymentObtainValueResponse) Reset() {
	*x = RecurringPaymentObtainValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringPaymentObtainValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringPaymentObtainValueResponse) ProtoMessage() {}

func (x *RecurringPaymentObtainValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringPaymentObtainValueResponse.ProtoReflect.Descriptor instead.
func (*RecurringPaymentObtainValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{14}
}

func (x *RecurringPaymentObtainValueResponse) GetStatus() RecurringPaymentObtainValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return RecurringPaymentObtainValueResponse_STATUS_UNSPECIFIED
}

func (x *RecurringPaymentObtainValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RecurringPaymentObtainValueResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *RecurringPaymentObtainValueResponse) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *RecurringPaymentObtainValueResponse) GetApprovedAmount() string {
	if x != nil {
		return x.ApprovedAmount
	}
	return ""
}

func (x *RecurringPaymentObtainValueResponse) GetLineItemSequenceAndStatuses() []*v1.LineItemSequenceAndStatus {
	if x != nil {
		return x.LineItemSequenceAndStatuses
	}
	return nil
}

func (x *RecurringPaymentObtainValueResponse) GetImmutableInstrumentDetails() *v1.ImmutableInstrumentDetails {
	if x != nil {
		return x.ImmutableInstrumentDetails
	}
	return nil
}

func (x *RecurringPaymentObtainValueResponse) GetTransactionIdentifier() *v1.TransactionIdentifier {
	if x != nil {
		return x.TransactionIdentifier
	}
	return nil
}

type RecurringPaymentReturnValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringPaymentKey string                `protobuf:"bytes,1,opt,name=recurring_payment_key,json=recurringPaymentKey,proto3" json:"recurring_payment_key,omitempty"`
	Value               *valuev1.ValueRequest `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	RiskSignal          *v1.RiskSignal        `protobuf:"bytes,3,opt,name=risk_signal,json=riskSignal,proto3" json:"risk_signal,omitempty"`
}

func (x *RecurringPaymentReturnValueRequest) Reset() {
	*x = RecurringPaymentReturnValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringPaymentReturnValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringPaymentReturnValueRequest) ProtoMessage() {}

func (x *RecurringPaymentReturnValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringPaymentReturnValueRequest.ProtoReflect.Descriptor instead.
func (*RecurringPaymentReturnValueRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{15}
}

func (x *RecurringPaymentReturnValueRequest) GetRecurringPaymentKey() string {
	if x != nil {
		return x.RecurringPaymentKey
	}
	return ""
}

func (x *RecurringPaymentReturnValueRequest) GetValue() *valuev1.ValueRequest {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RecurringPaymentReturnValueRequest) GetRiskSignal() *v1.RiskSignal {
	if x != nil {
		return x.RiskSignal
	}
	return nil
}

type RecurringPaymentReturnValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RecurringPaymentReturnValueResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.RecurringPaymentReturnValueResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RecurringPaymentReturnValueResponse) Reset() {
	*x = RecurringPaymentReturnValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringPaymentReturnValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringPaymentReturnValueResponse) ProtoMessage() {}

func (x *RecurringPaymentReturnValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringPaymentReturnValueResponse.ProtoReflect.Descriptor instead.
func (*RecurringPaymentReturnValueResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{16}
}

func (x *RecurringPaymentReturnValueResponse) GetStatus() RecurringPaymentReturnValueResponse_Status {
	if x != nil {
		return x.Status
	}
	return RecurringPaymentReturnValueResponse_STATUS_UNSPECIFIED
}

func (x *RecurringPaymentReturnValueResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type InitializeWidgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the user.
	UserDemographic *v1.UserDemographic `protobuf:"bytes,3,opt,name=user_demographic,json=userDemographic,proto3" json:"user_demographic,omitempty"`
}

func (x *InitializeWidgetRequest) Reset() {
	*x = InitializeWidgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeWidgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeWidgetRequest) ProtoMessage() {}

func (x *InitializeWidgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeWidgetRequest.ProtoReflect.Descriptor instead.
func (*InitializeWidgetRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{17}
}

func (x *InitializeWidgetRequest) GetUserDemographic() *v1.UserDemographic {
	if x != nil {
		return x.UserDemographic
	}
	return nil
}

type InitializeWidgetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     InitializeWidgetResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.InitializeWidgetResponse_Status" json:"status,omitempty"`
	Error      *v1.Error                       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SessionKey string                          `protobuf:"bytes,3,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
}

func (x *InitializeWidgetResponse) Reset() {
	*x = InitializeWidgetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeWidgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeWidgetResponse) ProtoMessage() {}

func (x *InitializeWidgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeWidgetResponse.ProtoReflect.Descriptor instead.
func (*InitializeWidgetResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{18}
}

func (x *InitializeWidgetResponse) GetStatus() InitializeWidgetResponse_Status {
	if x != nil {
		return x.Status
	}
	return InitializeWidgetResponse_STATUS_UNSPECIFIED
}

func (x *InitializeWidgetResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *InitializeWidgetResponse) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

type ExchangeSessionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session key that was established when the Widget was initialized
	SessionKey string `protobuf:"bytes,1,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	// The organization this operation is being processed for.
	//
	// Types that are assignable to OrganizationIdentifier:
	//
	//	*ExchangeSessionKeyRequest_OrganizationKey
	//	*ExchangeSessionKeyRequest_OrganizationRef
	OrganizationIdentifier isExchangeSessionKeyRequest_OrganizationIdentifier `protobuf_oneof:"organization_identifier"`
}

func (x *ExchangeSessionKeyRequest) Reset() {
	*x = ExchangeSessionKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSessionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSessionKeyRequest) ProtoMessage() {}

func (x *ExchangeSessionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSessionKeyRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSessionKeyRequest) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{19}
}

func (x *ExchangeSessionKeyRequest) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

func (m *ExchangeSessionKeyRequest) GetOrganizationIdentifier() isExchangeSessionKeyRequest_OrganizationIdentifier {
	if m != nil {
		return m.OrganizationIdentifier
	}
	return nil
}

func (x *ExchangeSessionKeyRequest) GetOrganizationKey() string {
	if x, ok := x.GetOrganizationIdentifier().(*ExchangeSessionKeyRequest_OrganizationKey); ok {
		return x.OrganizationKey
	}
	return ""
}

func (x *ExchangeSessionKeyRequest) GetOrganizationRef() string {
	if x, ok := x.GetOrganizationIdentifier().(*ExchangeSessionKeyRequest_OrganizationRef); ok {
		return x.OrganizationRef
	}
	return ""
}

type isExchangeSessionKeyRequest_OrganizationIdentifier interface {
	isExchangeSessionKeyRequest_OrganizationIdentifier()
}

type ExchangeSessionKeyRequest_OrganizationKey struct {
	OrganizationKey string `protobuf:"bytes,5,opt,name=organization_key,json=organizationKey,proto3,oneof"`
}

type ExchangeSessionKeyRequest_OrganizationRef struct {
	// The primary key for this organization at the Partner.
	OrganizationRef string `protobuf:"bytes,6,opt,name=organization_ref,json=organizationRef,proto3,oneof"`
}

func (*ExchangeSessionKeyRequest_OrganizationKey) isExchangeSessionKeyRequest_OrganizationIdentifier() {
}

func (*ExchangeSessionKeyRequest_OrganizationRef) isExchangeSessionKeyRequest_OrganizationIdentifier() {
}

type ExchangeSessionKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ExchangeSessionKeyResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.partner.service.v1.ExchangeSessionKeyResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The UUEK that the Partner can use to obtain or return value for this user.
	PartnerUuek string `protobuf:"bytes,3,opt,name=partner_uuek,json=partnerUuek,proto3" json:"partner_uuek,omitempty"`
}

func (x *ExchangeSessionKeyResponse) Reset() {
	*x = ExchangeSessionKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSessionKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSessionKeyResponse) ProtoMessage() {}

func (x *ExchangeSessionKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSessionKeyResponse.ProtoReflect.Descriptor instead.
func (*ExchangeSessionKeyResponse) Descriptor() ([]byte, []int) {
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP(), []int{20}
}

func (x *ExchangeSessionKeyResponse) GetStatus() ExchangeSessionKeyResponse_Status {
	if x != nil {
		return x.Status
	}
	return ExchangeSessionKeyResponse_STATUS_UNSPECIFIED
}

func (x *ExchangeSessionKeyResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExchangeSessionKeyResponse) GetPartnerUuek() string {
	if x != nil {
		return x.PartnerUuek
	}
	return ""
}

var File_mica_partner_service_v1_partner_to_mica_wip_service_proto protoreflect.FileDescriptor

var file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDesc = []byte{
	0x0a, 0x39, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x61, 0x5f, 0x77, 0x69, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x54, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x4a, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x75, 0x65, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x85, 0x06, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x7b, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6d, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x64, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x6d, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x7b, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x19, 0x0a, 0x17,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xc0, 0x03, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xba, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x43,
	0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x05, 0x22, 0x53, 0x0a, 0x1d, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22,
	0xf3, 0x01, 0x0a, 0x1e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x46, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x55, 0x0a, 0x1f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xf7, 0x01, 0x0a,
	0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x46,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x4b,
	0x65, 0x79, 0x22, 0xcd, 0x02, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x58, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x22, 0x50, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x22, 0xc9, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x11,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02,
	0x22, 0x5a, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x45,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xa8, 0x02, 0x0a,
	0x25, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x65, 0x6b, 0x22, 0x4a, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xb2, 0x02, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xbf, 0x0a, 0x0a,
	0x23, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x1f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1b, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x1c, 0x69, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x62,
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0xc9, 0x05, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42,
	0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10,
	0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55,
	0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x55,
	0x45, 0x4b, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x0f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x45, 0x44, 0x10, 0x15, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4d,
	0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x17, 0x22, 0xd6,
	0x01, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x72, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xc8, 0x05, 0x0a, 0x23, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x43, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x90, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46,
	0x52, 0x41, 0x55, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44,
	0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x55, 0x45, 0x4b, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x13,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x15, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x16, 0x22, 0x6b, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22,
	0x93, 0x02, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1b, 0x18,
	0x32, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x46, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x1b, 0x18, 0x32, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x32, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x42, 0x19, 0x0a, 0x17, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xd2, 0x02, 0x0a, 0x1a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x65, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x1e, 0x18, 0x32, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x65, 0x6b, 0x22, 0x7f, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0xb5, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x43, 0x55,
	0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x43, 0x55, 0x52,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x52, 0x45, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xbc, 0x0b, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x57, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x55, 0x45, 0x4b, 0x12, 0x3d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x55, 0x45, 0x4b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12,
	0x82, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x88, 0x02, 0x01, 0x42, 0x56, 0x0a, 0x1a, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x19, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4d, 0x69, 0x63,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x16, 0x6d,
	0x69, 0x63, 0x61, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescOnce sync.Once
	file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescData = file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDesc
)

func file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescGZIP() []byte {
	file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescOnce.Do(func() {
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescData)
	})
	return file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDescData
}

var file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_mica_partner_service_v1_partner_to_mica_wip_service_proto_goTypes = []interface{}{
	(RecurringPaymentStatus)(0),                                // 0: mica.partner.service.v1.RecurringPaymentStatus
	(CreateRecurringPaymentResponse_Status)(0),                 // 1: mica.partner.service.v1.CreateRecurringPaymentResponse.Status
	(CancelRecurringPaymentResponse_Status)(0),                 // 2: mica.partner.service.v1.CancelRecurringPaymentResponse.Status
	(ActivateRecurringPaymentResponse_Status)(0),               // 3: mica.partner.service.v1.ActivateRecurringPaymentResponse.Status
	(SearchRecurringPaymentResponse_Status)(0),                 // 4: mica.partner.service.v1.SearchRecurringPaymentResponse.Status
	(GetRecurringPaymentResponse_Status)(0),                    // 5: mica.partner.service.v1.GetRecurringPaymentResponse.Status
	(ProvisionRecurringPaymentUUEKResponse_Status)(0),          // 6: mica.partner.service.v1.ProvisionRecurringPaymentUUEKResponse.Status
	(RecurringPaymentObtainValueResponse_Status)(0),            // 7: mica.partner.service.v1.RecurringPaymentObtainValueResponse.Status
	(RecurringPaymentReturnValueResponse_Status)(0),            // 8: mica.partner.service.v1.RecurringPaymentReturnValueResponse.Status
	(InitializeWidgetResponse_Status)(0),                       // 9: mica.partner.service.v1.InitializeWidgetResponse.Status
	(ExchangeSessionKeyResponse_Status)(0),                     // 10: mica.partner.service.v1.ExchangeSessionKeyResponse.Status
	(*RecurringPayment)(nil),                                   // 11: mica.partner.service.v1.RecurringPayment
	(*CreateRecurringPaymentRequest)(nil),                      // 12: mica.partner.service.v1.CreateRecurringPaymentRequest
	(*CreateRecurringPaymentResponse)(nil),                     // 13: mica.partner.service.v1.CreateRecurringPaymentResponse
	(*CancelRecurringPaymentRequest)(nil),                      // 14: mica.partner.service.v1.CancelRecurringPaymentRequest
	(*CancelRecurringPaymentResponse)(nil),                     // 15: mica.partner.service.v1.CancelRecurringPaymentResponse
	(*ActivateRecurringPaymentRequest)(nil),                    // 16: mica.partner.service.v1.ActivateRecurringPaymentRequest
	(*ActivateRecurringPaymentResponse)(nil),                   // 17: mica.partner.service.v1.ActivateRecurringPaymentResponse
	(*SearchRecurringPaymentRequest)(nil),                      // 18: mica.partner.service.v1.SearchRecurringPaymentRequest
	(*SearchRecurringPaymentResponse)(nil),                     // 19: mica.partner.service.v1.SearchRecurringPaymentResponse
	(*GetRecurringPaymentRequest)(nil),                         // 20: mica.partner.service.v1.GetRecurringPaymentRequest
	(*GetRecurringPaymentResponse)(nil),                        // 21: mica.partner.service.v1.GetRecurringPaymentResponse
	(*ProvisionRecurringPaymentUUEKRequest)(nil),               // 22: mica.partner.service.v1.ProvisionRecurringPaymentUUEKRequest
	(*ProvisionRecurringPaymentUUEKResponse)(nil),              // 23: mica.partner.service.v1.ProvisionRecurringPaymentUUEKResponse
	(*RecurringPaymentObtainValueRequest)(nil),                 // 24: mica.partner.service.v1.RecurringPaymentObtainValueRequest
	(*RecurringPaymentObtainValueResponse)(nil),                // 25: mica.partner.service.v1.RecurringPaymentObtainValueResponse
	(*RecurringPaymentReturnValueRequest)(nil),                 // 26: mica.partner.service.v1.RecurringPaymentReturnValueRequest
	(*RecurringPaymentReturnValueResponse)(nil),                // 27: mica.partner.service.v1.RecurringPaymentReturnValueResponse
	(*InitializeWidgetRequest)(nil),                            // 28: mica.partner.service.v1.InitializeWidgetRequest
	(*InitializeWidgetResponse)(nil),                           // 29: mica.partner.service.v1.InitializeWidgetResponse
	(*ExchangeSessionKeyRequest)(nil),                          // 30: mica.partner.service.v1.ExchangeSessionKeyRequest
	(*ExchangeSessionKeyResponse)(nil),                         // 31: mica.partner.service.v1.ExchangeSessionKeyResponse
	(currencyv1.Currency)(0),                                   // 32: micashared.common.enums.currency.v1.Currency
	(recurringpaymentfrequencyv1.RecurringPaymentFrequency)(0), // 33: micashared.common.enums.recurringpaymentfrequency.v1.RecurringPaymentFrequency
	(recurringpaymenttypev1.RecurringPaymentType)(0),           // 34: micashared.common.enums.recurringpaymenttype.v1.RecurringPaymentType
	(*timestamppb.Timestamp)(nil),                              // 35: google.protobuf.Timestamp
	(*v1.Error)(nil),                                           // 36: micashared.common.v1.Error
	(approvaltypev1.ApprovalType)(0),                           // 37: micashared.common.enums.approvaltype.v1.ApprovalType
	(*valuev1.ValueRequest)(nil),                               // 38: mica.partner.value.v1.ValueRequest
	(*v1.RiskSignal)(nil),                                      // 39: micashared.common.v1.RiskSignal
	(*v1.LineItemSequenceAndStatus)(nil),                       // 40: micashared.common.v1.LineItemSequenceAndStatus
	(*v1.ImmutableInstrumentDetails)(nil),                      // 41: micashared.common.v1.ImmutableInstrumentDetails
	(*v1.TransactionIdentifier)(nil),                           // 42: micashared.common.v1.TransactionIdentifier
	(*v1.UserDemographic)(nil),                                 // 43: micashared.common.v1.UserDemographic
}
var file_mica_partner_service_v1_partner_to_mica_wip_service_proto_depIdxs = []int32{
	32, // 0: mica.partner.service.v1.RecurringPayment.currency:type_name -> micashared.common.enums.currency.v1.Currency
	33, // 1: mica.partner.service.v1.RecurringPayment.frequency:type_name -> micashared.common.enums.recurringpaymentfrequency.v1.RecurringPaymentFrequency
	34, // 2: mica.partner.service.v1.RecurringPayment.recurring_payment_type:type_name -> micashared.common.enums.recurringpaymenttype.v1.RecurringPaymentType
	35, // 3: mica.partner.service.v1.RecurringPayment.created:type_name -> google.protobuf.Timestamp
	35, // 4: mica.partner.service.v1.RecurringPayment.last_payment:type_name -> google.protobuf.Timestamp
	0,  // 5: mica.partner.service.v1.RecurringPayment.status:type_name -> mica.partner.service.v1.RecurringPaymentStatus
	32, // 6: mica.partner.service.v1.CreateRecurringPaymentRequest.currency:type_name -> micashared.common.enums.currency.v1.Currency
	33, // 7: mica.partner.service.v1.CreateRecurringPaymentRequest.frequency:type_name -> micashared.common.enums.recurringpaymentfrequency.v1.RecurringPaymentFrequency
	34, // 8: mica.partner.service.v1.CreateRecurringPaymentRequest.recurring_payment_type:type_name -> micashared.common.enums.recurringpaymenttype.v1.RecurringPaymentType
	1,  // 9: mica.partner.service.v1.CreateRecurringPaymentResponse.status:type_name -> mica.partner.service.v1.CreateRecurringPaymentResponse.Status
	36, // 10: mica.partner.service.v1.CreateRecurringPaymentResponse.error:type_name -> micashared.common.v1.Error
	11, // 11: mica.partner.service.v1.CreateRecurringPaymentResponse.recurring_payment:type_name -> mica.partner.service.v1.RecurringPayment
	2,  // 12: mica.partner.service.v1.CancelRecurringPaymentResponse.status:type_name -> mica.partner.service.v1.CancelRecurringPaymentResponse.Status
	36, // 13: mica.partner.service.v1.CancelRecurringPaymentResponse.error:type_name -> micashared.common.v1.Error
	3,  // 14: mica.partner.service.v1.ActivateRecurringPaymentResponse.status:type_name -> mica.partner.service.v1.ActivateRecurringPaymentResponse.Status
	36, // 15: mica.partner.service.v1.ActivateRecurringPaymentResponse.error:type_name -> micashared.common.v1.Error
	4,  // 16: mica.partner.service.v1.SearchRecurringPaymentResponse.status:type_name -> mica.partner.service.v1.SearchRecurringPaymentResponse.Status
	36, // 17: mica.partner.service.v1.SearchRecurringPaymentResponse.error:type_name -> micashared.common.v1.Error
	11, // 18: mica.partner.service.v1.SearchRecurringPaymentResponse.recurring_payments:type_name -> mica.partner.service.v1.RecurringPayment
	5,  // 19: mica.partner.service.v1.GetRecurringPaymentResponse.status:type_name -> mica.partner.service.v1.GetRecurringPaymentResponse.Status
	36, // 20: mica.partner.service.v1.GetRecurringPaymentResponse.error:type_name -> micashared.common.v1.Error
	11, // 21: mica.partner.service.v1.GetRecurringPaymentResponse.recurring_payment:type_name -> mica.partner.service.v1.RecurringPayment
	6,  // 22: mica.partner.service.v1.ProvisionRecurringPaymentUUEKResponse.status:type_name -> mica.partner.service.v1.ProvisionRecurringPaymentUUEKResponse.Status
	36, // 23: mica.partner.service.v1.ProvisionRecurringPaymentUUEKResponse.error:type_name -> micashared.common.v1.Error
	37, // 24: mica.partner.service.v1.RecurringPaymentObtainValueRequest.approval_type:type_name -> micashared.common.enums.approvaltype.v1.ApprovalType
	38, // 25: mica.partner.service.v1.RecurringPaymentObtainValueRequest.value:type_name -> mica.partner.value.v1.ValueRequest
	39, // 26: mica.partner.service.v1.RecurringPaymentObtainValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	7,  // 27: mica.partner.service.v1.RecurringPaymentObtainValueResponse.status:type_name -> mica.partner.service.v1.RecurringPaymentObtainValueResponse.Status
	36, // 28: mica.partner.service.v1.RecurringPaymentObtainValueResponse.error:type_name -> micashared.common.v1.Error
	40, // 29: mica.partner.service.v1.RecurringPaymentObtainValueResponse.line_item_sequence_and_statuses:type_name -> micashared.common.v1.LineItemSequenceAndStatus
	41, // 30: mica.partner.service.v1.RecurringPaymentObtainValueResponse.immutable_instrument_details:type_name -> micashared.common.v1.ImmutableInstrumentDetails
	42, // 31: mica.partner.service.v1.RecurringPaymentObtainValueResponse.transaction_identifier:type_name -> micashared.common.v1.TransactionIdentifier
	38, // 32: mica.partner.service.v1.RecurringPaymentReturnValueRequest.value:type_name -> mica.partner.value.v1.ValueRequest
	39, // 33: mica.partner.service.v1.RecurringPaymentReturnValueRequest.risk_signal:type_name -> micashared.common.v1.RiskSignal
	8,  // 34: mica.partner.service.v1.RecurringPaymentReturnValueResponse.status:type_name -> mica.partner.service.v1.RecurringPaymentReturnValueResponse.Status
	36, // 35: mica.partner.service.v1.RecurringPaymentReturnValueResponse.error:type_name -> micashared.common.v1.Error
	43, // 36: mica.partner.service.v1.InitializeWidgetRequest.user_demographic:type_name -> micashared.common.v1.UserDemographic
	9,  // 37: mica.partner.service.v1.InitializeWidgetResponse.status:type_name -> mica.partner.service.v1.InitializeWidgetResponse.Status
	36, // 38: mica.partner.service.v1.InitializeWidgetResponse.error:type_name -> micashared.common.v1.Error
	10, // 39: mica.partner.service.v1.ExchangeSessionKeyResponse.status:type_name -> mica.partner.service.v1.ExchangeSessionKeyResponse.Status
	36, // 40: mica.partner.service.v1.ExchangeSessionKeyResponse.error:type_name -> micashared.common.v1.Error
	12, // 41: mica.partner.service.v1.PartnerToMicaWIPService.CreateRecurringPayment:input_type -> mica.partner.service.v1.CreateRecurringPaymentRequest
	16, // 42: mica.partner.service.v1.PartnerToMicaWIPService.ActivateRecurringPayment:input_type -> mica.partner.service.v1.ActivateRecurringPaymentRequest
	14, // 43: mica.partner.service.v1.PartnerToMicaWIPService.CancelRecurringPayment:input_type -> mica.partner.service.v1.CancelRecurringPaymentRequest
	20, // 44: mica.partner.service.v1.PartnerToMicaWIPService.GetRecurringPayment:input_type -> mica.partner.service.v1.GetRecurringPaymentRequest
	18, // 45: mica.partner.service.v1.PartnerToMicaWIPService.SearchRecurringPayment:input_type -> mica.partner.service.v1.SearchRecurringPaymentRequest
	22, // 46: mica.partner.service.v1.PartnerToMicaWIPService.ProvisionRecurringPaymentUUEK:input_type -> mica.partner.service.v1.ProvisionRecurringPaymentUUEKRequest
	24, // 47: mica.partner.service.v1.PartnerToMicaWIPService.RecurringPaymentObtainValue:input_type -> mica.partner.service.v1.RecurringPaymentObtainValueRequest
	26, // 48: mica.partner.service.v1.PartnerToMicaWIPService.RecurringPaymentReturnValue:input_type -> mica.partner.service.v1.RecurringPaymentReturnValueRequest
	28, // 49: mica.partner.service.v1.PartnerToMicaWIPService.InitializeWidget:input_type -> mica.partner.service.v1.InitializeWidgetRequest
	30, // 50: mica.partner.service.v1.PartnerToMicaWIPService.ExchangeSessionKey:input_type -> mica.partner.service.v1.ExchangeSessionKeyRequest
	13, // 51: mica.partner.service.v1.PartnerToMicaWIPService.CreateRecurringPayment:output_type -> mica.partner.service.v1.CreateRecurringPaymentResponse
	17, // 52: mica.partner.service.v1.PartnerToMicaWIPService.ActivateRecurringPayment:output_type -> mica.partner.service.v1.ActivateRecurringPaymentResponse
	15, // 53: mica.partner.service.v1.PartnerToMicaWIPService.CancelRecurringPayment:output_type -> mica.partner.service.v1.CancelRecurringPaymentResponse
	21, // 54: mica.partner.service.v1.PartnerToMicaWIPService.GetRecurringPayment:output_type -> mica.partner.service.v1.GetRecurringPaymentResponse
	19, // 55: mica.partner.service.v1.PartnerToMicaWIPService.SearchRecurringPayment:output_type -> mica.partner.service.v1.SearchRecurringPaymentResponse
	23, // 56: mica.partner.service.v1.PartnerToMicaWIPService.ProvisionRecurringPaymentUUEK:output_type -> mica.partner.service.v1.ProvisionRecurringPaymentUUEKResponse
	25, // 57: mica.partner.service.v1.PartnerToMicaWIPService.RecurringPaymentObtainValue:output_type -> mica.partner.service.v1.RecurringPaymentObtainValueResponse
	27, // 58: mica.partner.service.v1.PartnerToMicaWIPService.RecurringPaymentReturnValue:output_type -> mica.partner.service.v1.RecurringPaymentReturnValueResponse
	29, // 59: mica.partner.service.v1.PartnerToMicaWIPService.InitializeWidget:output_type -> mica.partner.service.v1.InitializeWidgetResponse
	31, // 60: mica.partner.service.v1.PartnerToMicaWIPService.ExchangeSessionKey:output_type -> mica.partner.service.v1.ExchangeSessionKeyResponse
	51, // [51:61] is the sub-list for method output_type
	41, // [41:51] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_mica_partner_service_v1_partner_to_mica_wip_service_proto_init() }
func file_mica_partner_service_v1_partner_to_mica_wip_service_proto_init() {
	if File_mica_partner_service_v1_partner_to_mica_wip_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecurringPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecurringPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRecurringPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRecurringPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateRecurringPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateRecurringPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecurringPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRecurringPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecurringPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionRecurringPaymentUUEKRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionRecurringPaymentUUEKResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringPaymentObtainValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringPaymentObtainValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringPaymentReturnValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringPaymentReturnValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeWidgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeWidgetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSessionKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSessionKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CreateRecurringPaymentRequest_OrganizationKey)(nil),
		(*CreateRecurringPaymentRequest_OrganizationRef)(nil),
	}
	file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ExchangeSessionKeyRequest_OrganizationKey)(nil),
		(*ExchangeSessionKeyRequest_OrganizationRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mica_partner_service_v1_partner_to_mica_wip_service_proto_goTypes,
		DependencyIndexes: file_mica_partner_service_v1_partner_to_mica_wip_service_proto_depIdxs,
		EnumInfos:         file_mica_partner_service_v1_partner_to_mica_wip_service_proto_enumTypes,
		MessageInfos:      file_mica_partner_service_v1_partner_to_mica_wip_service_proto_msgTypes,
	}.Build()
	File_mica_partner_service_v1_partner_to_mica_wip_service_proto = out.File
	file_mica_partner_service_v1_partner_to_mica_wip_service_proto_rawDesc = nil
	file_mica_partner_service_v1_partner_to_mica_wip_service_proto_goTypes = nil
	file_mica_partner_service_v1_partner_to_mica_wip_service_proto_depIdxs = nil
}
