// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.28.3
// source: mica/member/auth/v1/mtls_to_mica_service.proto

package authv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	v1 "github.com/1080network/golang/partner/proto/micashared/common/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateCertificateResponse_Status int32

const (
	GenerateCertificateResponse_STATUS_UNSPECIFIED GenerateCertificateResponse_Status = 0
	GenerateCertificateResponse_STATUS_SUCCESS     GenerateCertificateResponse_Status = 1
	GenerateCertificateResponse_STATUS_ERROR       GenerateCertificateResponse_Status = 2
)

// Enum value maps for GenerateCertificateResponse_Status.
var (
	GenerateCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	GenerateCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x GenerateCertificateResponse_Status) Enum() *GenerateCertificateResponse_Status {
	p := new(GenerateCertificateResponse_Status)
	*p = x
	return p
}

func (x GenerateCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[0].Descriptor()
}

func (GenerateCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[0]
}

func (x GenerateCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateCertificateResponse_Status.Descriptor instead.
func (GenerateCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{3, 0}
}

type EnableCertificateResponse_Status int32

const (
	EnableCertificateResponse_STATUS_UNSPECIFIED EnableCertificateResponse_Status = 0
	EnableCertificateResponse_STATUS_SUCCESS     EnableCertificateResponse_Status = 1
	EnableCertificateResponse_STATUS_ERROR       EnableCertificateResponse_Status = 2
)

// Enum value maps for EnableCertificateResponse_Status.
var (
	EnableCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	EnableCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x EnableCertificateResponse_Status) Enum() *EnableCertificateResponse_Status {
	p := new(EnableCertificateResponse_Status)
	*p = x
	return p
}

func (x EnableCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[1].Descriptor()
}

func (EnableCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[1]
}

func (x EnableCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnableCertificateResponse_Status.Descriptor instead.
func (EnableCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{5, 0}
}

type DisableCertificateResponse_Status int32

const (
	DisableCertificateResponse_STATUS_UNSPECIFIED DisableCertificateResponse_Status = 0
	DisableCertificateResponse_STATUS_SUCCESS     DisableCertificateResponse_Status = 1
	DisableCertificateResponse_STATUS_ERROR       DisableCertificateResponse_Status = 2
)

// Enum value maps for DisableCertificateResponse_Status.
var (
	DisableCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	DisableCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x DisableCertificateResponse_Status) Enum() *DisableCertificateResponse_Status {
	p := new(DisableCertificateResponse_Status)
	*p = x
	return p
}

func (x DisableCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisableCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[2].Descriptor()
}

func (DisableCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[2]
}

func (x DisableCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisableCertificateResponse_Status.Descriptor instead.
func (DisableCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{7, 0}
}

type GetCertificateResponse_Status int32

const (
	GetCertificateResponse_STATUS_UNSPECIFIED GetCertificateResponse_Status = 0
	GetCertificateResponse_STATUS_SUCCESS     GetCertificateResponse_Status = 1
	GetCertificateResponse_STATUS_NOT_FOUND   GetCertificateResponse_Status = 2
	GetCertificateResponse_STATUS_ERROR       GetCertificateResponse_Status = 3
)

// Enum value maps for GetCertificateResponse_Status.
var (
	GetCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
		3: "STATUS_ERROR",
	}
	GetCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
		"STATUS_ERROR":       3,
	}
)

func (x GetCertificateResponse_Status) Enum() *GetCertificateResponse_Status {
	p := new(GetCertificateResponse_Status)
	*p = x
	return p
}

func (x GetCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[3].Descriptor()
}

func (GetCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[3]
}

func (x GetCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetCertificateResponse_Status.Descriptor instead.
func (GetCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{9, 0}
}

type SearchCertificateResponse_Status int32

const (
	SearchCertificateResponse_STATUS_UNSPECIFIED SearchCertificateResponse_Status = 0
	SearchCertificateResponse_STATUS_SUCCESS     SearchCertificateResponse_Status = 1
	SearchCertificateResponse_STATUS_ERROR       SearchCertificateResponse_Status = 2
)

// Enum value maps for SearchCertificateResponse_Status.
var (
	SearchCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchCertificateResponse_Status) Enum() *SearchCertificateResponse_Status {
	p := new(SearchCertificateResponse_Status)
	*p = x
	return p
}

func (x SearchCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[4].Descriptor()
}

func (SearchCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes[4]
}

func (x SearchCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchCertificateResponse_Status.Descriptor instead.
func (SearchCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{11, 0}
}

type MTLSCertificateSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base64 standard encoded PEM string
	Base64PemCsr string `protobuf:"bytes,1,opt,name=base64_pem_csr,json=base64PemCsr,proto3" json:"base64_pem_csr,omitempty"`
}

func (x *MTLSCertificateSignatureRequest) Reset() {
	*x = MTLSCertificateSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSCertificateSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSCertificateSignatureRequest) ProtoMessage() {}

func (x *MTLSCertificateSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSCertificateSignatureRequest.ProtoReflect.Descriptor instead.
func (*MTLSCertificateSignatureRequest) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{0}
}

func (x *MTLSCertificateSignatureRequest) GetBase64PemCsr() string {
	if x != nil {
		return x.Base64PemCsr
	}
	return ""
}

type ToMicaCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serial number of the generated certificate
	SerialNumber string                 `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Issued       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=issued,proto3" json:"issued,omitempty"`
	Expiry       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// whether this certificate can be used or has been disallowed for access regardless of expiration
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Base64 standard encoded PEM string
	Base64CertificatePem string `protobuf:"bytes,12,opt,name=base64_certificate_pem,json=base64CertificatePem,proto3" json:"base64_certificate_pem,omitempty"`
	// Base64 standard encoded PEM string
	Base64RootcaPem string `protobuf:"bytes,13,opt,name=base64_rootca_pem,json=base64RootcaPem,proto3" json:"base64_rootca_pem,omitempty"`
	// The roles the certificate has
	Roles []string `protobuf:"bytes,9,rep,name=roles,proto3" json:"roles,omitempty"`
	// The friendly name of the certificate
	DisplayName string `protobuf:"bytes,10,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The last usage of the certificate
	LastUsed *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
}

func (x *ToMicaCertificate) Reset() {
	*x = ToMicaCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToMicaCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToMicaCertificate) ProtoMessage() {}

func (x *ToMicaCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToMicaCertificate.ProtoReflect.Descriptor instead.
func (*ToMicaCertificate) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{1}
}

func (x *ToMicaCertificate) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ToMicaCertificate) GetIssued() *timestamppb.Timestamp {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *ToMicaCertificate) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *ToMicaCertificate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToMicaCertificate) GetBase64CertificatePem() string {
	if x != nil {
		return x.Base64CertificatePem
	}
	return ""
}

func (x *ToMicaCertificate) GetBase64RootcaPem() string {
	if x != nil {
		return x.Base64RootcaPem
	}
	return ""
}

func (x *ToMicaCertificate) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ToMicaCertificate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ToMicaCertificate) GetLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsed
	}
	return nil
}

type GenerateCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Csr              *MTLSCertificateSignatureRequest `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	Roles            []string                         `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	ExpireInDuration string                           `protobuf:"bytes,4,opt,name=expire_in_duration,json=expireInDuration,proto3" json:"expire_in_duration,omitempty"`
	DisplayName      string                           `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *GenerateCertificateRequest) Reset() {
	*x = GenerateCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCertificateRequest) ProtoMessage() {}

func (x *GenerateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCertificateRequest.ProtoReflect.Descriptor instead.
func (*GenerateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{2}
}

func (x *GenerateCertificateRequest) GetCsr() *MTLSCertificateSignatureRequest {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *GenerateCertificateRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GenerateCertificateRequest) GetExpireInDuration() string {
	if x != nil {
		return x.ExpireInDuration
	}
	return ""
}

func (x *GenerateCertificateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type GenerateCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      GenerateCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.member.auth.v1.GenerateCertificateResponse_Status" json:"status,omitempty"`
	Error       *v1.Error                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate *ToMicaCertificate                 `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GenerateCertificateResponse) Reset() {
	*x = GenerateCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCertificateResponse) ProtoMessage() {}

func (x *GenerateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCertificateResponse.ProtoReflect.Descriptor instead.
func (*GenerateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateCertificateResponse) GetStatus() GenerateCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return GenerateCertificateResponse_STATUS_UNSPECIFIED
}

func (x *GenerateCertificateResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GenerateCertificateResponse) GetCertificate() *ToMicaCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type EnableCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *EnableCertificateRequest) Reset() {
	*x = EnableCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCertificateRequest) ProtoMessage() {}

func (x *EnableCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCertificateRequest.ProtoReflect.Descriptor instead.
func (*EnableCertificateRequest) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{4}
}

func (x *EnableCertificateRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type EnableCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       EnableCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.member.auth.v1.EnableCertificateResponse_Status" json:"status,omitempty"`
	Error        *v1.Error                        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SerialNumber string                           `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *EnableCertificateResponse) Reset() {
	*x = EnableCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCertificateResponse) ProtoMessage() {}

func (x *EnableCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCertificateResponse.ProtoReflect.Descriptor instead.
func (*EnableCertificateResponse) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{5}
}

func (x *EnableCertificateResponse) GetStatus() EnableCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return EnableCertificateResponse_STATUS_UNSPECIFIED
}

func (x *EnableCertificateResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EnableCertificateResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type DisableCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *DisableCertificateRequest) Reset() {
	*x = DisableCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableCertificateRequest) ProtoMessage() {}

func (x *DisableCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableCertificateRequest.ProtoReflect.Descriptor instead.
func (*DisableCertificateRequest) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{6}
}

func (x *DisableCertificateRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type DisableCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       DisableCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.member.auth.v1.DisableCertificateResponse_Status" json:"status,omitempty"`
	Error        *v1.Error                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SerialNumber string                            `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *DisableCertificateResponse) Reset() {
	*x = DisableCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableCertificateResponse) ProtoMessage() {}

func (x *DisableCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableCertificateResponse.ProtoReflect.Descriptor instead.
func (*DisableCertificateResponse) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{7}
}

func (x *DisableCertificateResponse) GetStatus() DisableCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return DisableCertificateResponse_STATUS_UNSPECIFIED
}

func (x *DisableCertificateResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DisableCertificateResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type GetCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *GetCertificateRequest) Reset() {
	*x = GetCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateRequest) ProtoMessage() {}

func (x *GetCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateRequest) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetCertificateRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type GetCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      GetCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.member.auth.v1.GetCertificateResponse_Status" json:"status,omitempty"`
	Error       *v1.Error                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate *ToMicaCertificate            `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GetCertificateResponse) Reset() {
	*x = GetCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateResponse) ProtoMessage() {}

func (x *GetCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateResponse.ProtoReflect.Descriptor instead.
func (*GetCertificateResponse) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetCertificateResponse) GetStatus() GetCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetCertificateResponse_STATUS_UNSPECIFIED
}

func (x *GetCertificateResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCertificateResponse) GetCertificate() *ToMicaCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type SearchCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchCertificateRequest) Reset() {
	*x = SearchCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCertificateRequest) ProtoMessage() {}

func (x *SearchCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCertificateRequest.ProtoReflect.Descriptor instead.
func (*SearchCertificateRequest) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{10}
}

type SearchCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       SearchCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mica.member.auth.v1.SearchCertificateResponse_Status" json:"status,omitempty"`
	Error        *v1.Error                        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificates []*ToMicaCertificate             `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *SearchCertificateResponse) Reset() {
	*x = SearchCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCertificateResponse) ProtoMessage() {}

func (x *SearchCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCertificateResponse.ProtoReflect.Descriptor instead.
func (*SearchCertificateResponse) Descriptor() ([]byte, []int) {
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP(), []int{11}
}

func (x *SearchCertificateResponse) GetStatus() SearchCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchCertificateResponse_STATUS_UNSPECIFIED
}

func (x *SearchCertificateResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchCertificateResponse) GetCertificates() []*ToMicaCertificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

var File_mica_member_auth_v1_mtls_to_mica_service_proto protoreflect.FileDescriptor

var file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x74, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x69,
	0x63, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x50, 0x0a, 0x1f, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x70,
	0x65, 0x6d, 0x5f, 0x63, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x50, 0x65, 0x6d,
	0x43, 0x73, 0x72, 0x22, 0xa1, 0x03, 0x0a, 0x11, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x6f, 0x6f, 0x74,
	0x63, 0x61, 0x50, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x03, 0x63, 0x73, 0x72, 0x12, 0x1e, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x1b, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22,
	0x48, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8a, 0x02, 0x0a, 0x19, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x46,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x49, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x8c, 0x02, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x22, 0x45, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbf, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x4d,
	0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x32, 0xe1, 0x04, 0x0a, 0x11, 0x4d, 0x54,
	0x4c, 0x53, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x7a, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x11, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x77, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x11, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4b, 0x0a,
	0x16, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x4d, 0x54, 0x4c, 0x53, 0x54, 0x6f, 0x4d,
	0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a,
	0x12, 0x6d, 0x69, 0x63, 0x61, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescOnce sync.Once
	file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescData = file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDesc
)

func file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescGZIP() []byte {
	file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescOnce.Do(func() {
		file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescData)
	})
	return file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDescData
}

var file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_mica_member_auth_v1_mtls_to_mica_service_proto_goTypes = []interface{}{
	(GenerateCertificateResponse_Status)(0), // 0: mica.member.auth.v1.GenerateCertificateResponse.Status
	(EnableCertificateResponse_Status)(0),   // 1: mica.member.auth.v1.EnableCertificateResponse.Status
	(DisableCertificateResponse_Status)(0),  // 2: mica.member.auth.v1.DisableCertificateResponse.Status
	(GetCertificateResponse_Status)(0),      // 3: mica.member.auth.v1.GetCertificateResponse.Status
	(SearchCertificateResponse_Status)(0),   // 4: mica.member.auth.v1.SearchCertificateResponse.Status
	(*MTLSCertificateSignatureRequest)(nil), // 5: mica.member.auth.v1.MTLSCertificateSignatureRequest
	(*ToMicaCertificate)(nil),               // 6: mica.member.auth.v1.ToMicaCertificate
	(*GenerateCertificateRequest)(nil),      // 7: mica.member.auth.v1.GenerateCertificateRequest
	(*GenerateCertificateResponse)(nil),     // 8: mica.member.auth.v1.GenerateCertificateResponse
	(*EnableCertificateRequest)(nil),        // 9: mica.member.auth.v1.EnableCertificateRequest
	(*EnableCertificateResponse)(nil),       // 10: mica.member.auth.v1.EnableCertificateResponse
	(*DisableCertificateRequest)(nil),       // 11: mica.member.auth.v1.DisableCertificateRequest
	(*DisableCertificateResponse)(nil),      // 12: mica.member.auth.v1.DisableCertificateResponse
	(*GetCertificateRequest)(nil),           // 13: mica.member.auth.v1.GetCertificateRequest
	(*GetCertificateResponse)(nil),          // 14: mica.member.auth.v1.GetCertificateResponse
	(*SearchCertificateRequest)(nil),        // 15: mica.member.auth.v1.SearchCertificateRequest
	(*SearchCertificateResponse)(nil),       // 16: mica.member.auth.v1.SearchCertificateResponse
	(*timestamppb.Timestamp)(nil),           // 17: google.protobuf.Timestamp
	(*v1.Error)(nil),                        // 18: micashared.common.v1.Error
}
var file_mica_member_auth_v1_mtls_to_mica_service_proto_depIdxs = []int32{
	17, // 0: mica.member.auth.v1.ToMicaCertificate.issued:type_name -> google.protobuf.Timestamp
	17, // 1: mica.member.auth.v1.ToMicaCertificate.expiry:type_name -> google.protobuf.Timestamp
	17, // 2: mica.member.auth.v1.ToMicaCertificate.last_used:type_name -> google.protobuf.Timestamp
	5,  // 3: mica.member.auth.v1.GenerateCertificateRequest.csr:type_name -> mica.member.auth.v1.MTLSCertificateSignatureRequest
	0,  // 4: mica.member.auth.v1.GenerateCertificateResponse.status:type_name -> mica.member.auth.v1.GenerateCertificateResponse.Status
	18, // 5: mica.member.auth.v1.GenerateCertificateResponse.error:type_name -> micashared.common.v1.Error
	6,  // 6: mica.member.auth.v1.GenerateCertificateResponse.certificate:type_name -> mica.member.auth.v1.ToMicaCertificate
	1,  // 7: mica.member.auth.v1.EnableCertificateResponse.status:type_name -> mica.member.auth.v1.EnableCertificateResponse.Status
	18, // 8: mica.member.auth.v1.EnableCertificateResponse.error:type_name -> micashared.common.v1.Error
	2,  // 9: mica.member.auth.v1.DisableCertificateResponse.status:type_name -> mica.member.auth.v1.DisableCertificateResponse.Status
	18, // 10: mica.member.auth.v1.DisableCertificateResponse.error:type_name -> micashared.common.v1.Error
	3,  // 11: mica.member.auth.v1.GetCertificateResponse.status:type_name -> mica.member.auth.v1.GetCertificateResponse.Status
	18, // 12: mica.member.auth.v1.GetCertificateResponse.error:type_name -> micashared.common.v1.Error
	6,  // 13: mica.member.auth.v1.GetCertificateResponse.certificate:type_name -> mica.member.auth.v1.ToMicaCertificate
	4,  // 14: mica.member.auth.v1.SearchCertificateResponse.status:type_name -> mica.member.auth.v1.SearchCertificateResponse.Status
	18, // 15: mica.member.auth.v1.SearchCertificateResponse.error:type_name -> micashared.common.v1.Error
	6,  // 16: mica.member.auth.v1.SearchCertificateResponse.certificates:type_name -> mica.member.auth.v1.ToMicaCertificate
	7,  // 17: mica.member.auth.v1.MTLSToMicaService.GenerateCertificate:input_type -> mica.member.auth.v1.GenerateCertificateRequest
	9,  // 18: mica.member.auth.v1.MTLSToMicaService.EnableCertificate:input_type -> mica.member.auth.v1.EnableCertificateRequest
	11, // 19: mica.member.auth.v1.MTLSToMicaService.DisableCertificate:input_type -> mica.member.auth.v1.DisableCertificateRequest
	15, // 20: mica.member.auth.v1.MTLSToMicaService.SearchCertificate:input_type -> mica.member.auth.v1.SearchCertificateRequest
	13, // 21: mica.member.auth.v1.MTLSToMicaService.GetCertificate:input_type -> mica.member.auth.v1.GetCertificateRequest
	8,  // 22: mica.member.auth.v1.MTLSToMicaService.GenerateCertificate:output_type -> mica.member.auth.v1.GenerateCertificateResponse
	10, // 23: mica.member.auth.v1.MTLSToMicaService.EnableCertificate:output_type -> mica.member.auth.v1.EnableCertificateResponse
	12, // 24: mica.member.auth.v1.MTLSToMicaService.DisableCertificate:output_type -> mica.member.auth.v1.DisableCertificateResponse
	16, // 25: mica.member.auth.v1.MTLSToMicaService.SearchCertificate:output_type -> mica.member.auth.v1.SearchCertificateResponse
	14, // 26: mica.member.auth.v1.MTLSToMicaService.GetCertificate:output_type -> mica.member.auth.v1.GetCertificateResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_mica_member_auth_v1_mtls_to_mica_service_proto_init() }
func file_mica_member_auth_v1_mtls_to_mica_service_proto_init() {
	if File_mica_member_auth_v1_mtls_to_mica_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTLSCertificateSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToMicaCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mica_member_auth_v1_mtls_to_mica_service_proto_goTypes,
		DependencyIndexes: file_mica_member_auth_v1_mtls_to_mica_service_proto_depIdxs,
		EnumInfos:         file_mica_member_auth_v1_mtls_to_mica_service_proto_enumTypes,
		MessageInfos:      file_mica_member_auth_v1_mtls_to_mica_service_proto_msgTypes,
	}.Build()
	File_mica_member_auth_v1_mtls_to_mica_service_proto = out.File
	file_mica_member_auth_v1_mtls_to_mica_service_proto_rawDesc = nil
	file_mica_member_auth_v1_mtls_to_mica_service_proto_goTypes = nil
	file_mica_member_auth_v1_mtls_to_mica_service_proto_depIdxs = nil
}
