// Copyright (c) 2022-2024 Mica. All rights reserved. All software, including, without limitation, all source
// code and object code, is the intellectual property of Mica, Inc. and is protected by copyright, trademark and
// other intellectual property laws (collective "Mica Software"). You may not use, copy, reproduce, download, store,
// post, broadcast, transmit, modify, sell or make available to the public content from the Mica Software without a
// valid license or the prior written approval of Mica, Inc. Mica, its logos, slogans, taglines,
// products, feature names, and other trademarks are trademarks of Mica, Inc. and may not be used without
// permission.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.28.3
// source: micashared/common/v1/mtls_certificate.proto

package commonv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateToMicaCertificateResponse_Status int32

const (
	GenerateToMicaCertificateResponse_STATUS_UNSPECIFIED GenerateToMicaCertificateResponse_Status = 0
	GenerateToMicaCertificateResponse_STATUS_SUCCESS     GenerateToMicaCertificateResponse_Status = 1
	GenerateToMicaCertificateResponse_STATUS_ERROR       GenerateToMicaCertificateResponse_Status = 2
)

// Enum value maps for GenerateToMicaCertificateResponse_Status.
var (
	GenerateToMicaCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	GenerateToMicaCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x GenerateToMicaCertificateResponse_Status) Enum() *GenerateToMicaCertificateResponse_Status {
	p := new(GenerateToMicaCertificateResponse_Status)
	*p = x
	return p
}

func (x GenerateToMicaCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateToMicaCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[0].Descriptor()
}

func (GenerateToMicaCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[0]
}

func (x GenerateToMicaCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateToMicaCertificateResponse_Status.Descriptor instead.
func (GenerateToMicaCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{3, 0}
}

type EnableToMicaCertificateResponse_Status int32

const (
	EnableToMicaCertificateResponse_STATUS_UNSPECIFIED EnableToMicaCertificateResponse_Status = 0
	EnableToMicaCertificateResponse_STATUS_SUCCESS     EnableToMicaCertificateResponse_Status = 1
	EnableToMicaCertificateResponse_STATUS_ERROR       EnableToMicaCertificateResponse_Status = 2
)

// Enum value maps for EnableToMicaCertificateResponse_Status.
var (
	EnableToMicaCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	EnableToMicaCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x EnableToMicaCertificateResponse_Status) Enum() *EnableToMicaCertificateResponse_Status {
	p := new(EnableToMicaCertificateResponse_Status)
	*p = x
	return p
}

func (x EnableToMicaCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableToMicaCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[1].Descriptor()
}

func (EnableToMicaCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[1]
}

func (x EnableToMicaCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnableToMicaCertificateResponse_Status.Descriptor instead.
func (EnableToMicaCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{5, 0}
}

type DisableToMicaCertificateResponse_Status int32

const (
	DisableToMicaCertificateResponse_STATUS_UNSPECIFIED DisableToMicaCertificateResponse_Status = 0
	DisableToMicaCertificateResponse_STATUS_SUCCESS     DisableToMicaCertificateResponse_Status = 1
	DisableToMicaCertificateResponse_STATUS_ERROR       DisableToMicaCertificateResponse_Status = 2
)

// Enum value maps for DisableToMicaCertificateResponse_Status.
var (
	DisableToMicaCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	DisableToMicaCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x DisableToMicaCertificateResponse_Status) Enum() *DisableToMicaCertificateResponse_Status {
	p := new(DisableToMicaCertificateResponse_Status)
	*p = x
	return p
}

func (x DisableToMicaCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisableToMicaCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[2].Descriptor()
}

func (DisableToMicaCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[2]
}

func (x DisableToMicaCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisableToMicaCertificateResponse_Status.Descriptor instead.
func (DisableToMicaCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{7, 0}
}

type GetToMicaCertificateResponse_Status int32

const (
	GetToMicaCertificateResponse_STATUS_UNSPECIFIED GetToMicaCertificateResponse_Status = 0
	GetToMicaCertificateResponse_STATUS_SUCCESS     GetToMicaCertificateResponse_Status = 1
	GetToMicaCertificateResponse_STATUS_NOT_FOUND   GetToMicaCertificateResponse_Status = 2
	GetToMicaCertificateResponse_STATUS_ERROR       GetToMicaCertificateResponse_Status = 3
)

// Enum value maps for GetToMicaCertificateResponse_Status.
var (
	GetToMicaCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_NOT_FOUND",
		3: "STATUS_ERROR",
	}
	GetToMicaCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_NOT_FOUND":   2,
		"STATUS_ERROR":       3,
	}
)

func (x GetToMicaCertificateResponse_Status) Enum() *GetToMicaCertificateResponse_Status {
	p := new(GetToMicaCertificateResponse_Status)
	*p = x
	return p
}

func (x GetToMicaCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetToMicaCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[3].Descriptor()
}

func (GetToMicaCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[3]
}

func (x GetToMicaCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetToMicaCertificateResponse_Status.Descriptor instead.
func (GetToMicaCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{9, 0}
}

type SearchToMicaCertificateResponse_Status int32

const (
	SearchToMicaCertificateResponse_STATUS_UNSPECIFIED SearchToMicaCertificateResponse_Status = 0
	SearchToMicaCertificateResponse_STATUS_SUCCESS     SearchToMicaCertificateResponse_Status = 1
	SearchToMicaCertificateResponse_STATUS_ERROR       SearchToMicaCertificateResponse_Status = 2
)

// Enum value maps for SearchToMicaCertificateResponse_Status.
var (
	SearchToMicaCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchToMicaCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchToMicaCertificateResponse_Status) Enum() *SearchToMicaCertificateResponse_Status {
	p := new(SearchToMicaCertificateResponse_Status)
	*p = x
	return p
}

func (x SearchToMicaCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchToMicaCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[4].Descriptor()
}

func (SearchToMicaCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[4]
}

func (x SearchToMicaCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchToMicaCertificateResponse_Status.Descriptor instead.
func (SearchToMicaCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{11, 0}
}

type GenerateFromMicaClientCertificateResponse_Status int32

const (
	GenerateFromMicaClientCertificateResponse_STATUS_UNSPECIFIED GenerateFromMicaClientCertificateResponse_Status = 0
	GenerateFromMicaClientCertificateResponse_STATUS_SUCCESS     GenerateFromMicaClientCertificateResponse_Status = 1
	GenerateFromMicaClientCertificateResponse_STATUS_ERROR       GenerateFromMicaClientCertificateResponse_Status = 2
)

// Enum value maps for GenerateFromMicaClientCertificateResponse_Status.
var (
	GenerateFromMicaClientCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	GenerateFromMicaClientCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x GenerateFromMicaClientCertificateResponse_Status) Enum() *GenerateFromMicaClientCertificateResponse_Status {
	p := new(GenerateFromMicaClientCertificateResponse_Status)
	*p = x
	return p
}

func (x GenerateFromMicaClientCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateFromMicaClientCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[5].Descriptor()
}

func (GenerateFromMicaClientCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[5]
}

func (x GenerateFromMicaClientCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateFromMicaClientCertificateResponse_Status.Descriptor instead.
func (GenerateFromMicaClientCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{14, 0}
}

type UpdateFromMicaClientCertificateResponse_Status int32

const (
	UpdateFromMicaClientCertificateResponse_STATUS_UNSPECIFIED UpdateFromMicaClientCertificateResponse_Status = 0
	UpdateFromMicaClientCertificateResponse_STATUS_SUCCESS     UpdateFromMicaClientCertificateResponse_Status = 1
	UpdateFromMicaClientCertificateResponse_STATUS_ERROR       UpdateFromMicaClientCertificateResponse_Status = 2
)

// Enum value maps for UpdateFromMicaClientCertificateResponse_Status.
var (
	UpdateFromMicaClientCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	UpdateFromMicaClientCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x UpdateFromMicaClientCertificateResponse_Status) Enum() *UpdateFromMicaClientCertificateResponse_Status {
	p := new(UpdateFromMicaClientCertificateResponse_Status)
	*p = x
	return p
}

func (x UpdateFromMicaClientCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateFromMicaClientCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[6].Descriptor()
}

func (UpdateFromMicaClientCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[6]
}

func (x UpdateFromMicaClientCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateFromMicaClientCertificateResponse_Status.Descriptor instead.
func (UpdateFromMicaClientCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{16, 0}
}

type EnableFromMicaClientCertificateResponse_Status int32

const (
	EnableFromMicaClientCertificateResponse_STATUS_UNSPECIFIED EnableFromMicaClientCertificateResponse_Status = 0
	EnableFromMicaClientCertificateResponse_STATUS_SUCCESS     EnableFromMicaClientCertificateResponse_Status = 1
	EnableFromMicaClientCertificateResponse_STATUS_ERROR       EnableFromMicaClientCertificateResponse_Status = 2
)

// Enum value maps for EnableFromMicaClientCertificateResponse_Status.
var (
	EnableFromMicaClientCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	EnableFromMicaClientCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x EnableFromMicaClientCertificateResponse_Status) Enum() *EnableFromMicaClientCertificateResponse_Status {
	p := new(EnableFromMicaClientCertificateResponse_Status)
	*p = x
	return p
}

func (x EnableFromMicaClientCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableFromMicaClientCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[7].Descriptor()
}

func (EnableFromMicaClientCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[7]
}

func (x EnableFromMicaClientCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnableFromMicaClientCertificateResponse_Status.Descriptor instead.
func (EnableFromMicaClientCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{18, 0}
}

type SearchFromMicaClientCertificateResponse_Status int32

const (
	SearchFromMicaClientCertificateResponse_STATUS_UNSPECIFIED SearchFromMicaClientCertificateResponse_Status = 0
	SearchFromMicaClientCertificateResponse_STATUS_SUCCESS     SearchFromMicaClientCertificateResponse_Status = 1
	SearchFromMicaClientCertificateResponse_STATUS_ERROR       SearchFromMicaClientCertificateResponse_Status = 2
)

// Enum value maps for SearchFromMicaClientCertificateResponse_Status.
var (
	SearchFromMicaClientCertificateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	SearchFromMicaClientCertificateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x SearchFromMicaClientCertificateResponse_Status) Enum() *SearchFromMicaClientCertificateResponse_Status {
	p := new(SearchFromMicaClientCertificateResponse_Status)
	*p = x
	return p
}

func (x SearchFromMicaClientCertificateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchFromMicaClientCertificateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_micashared_common_v1_mtls_certificate_proto_enumTypes[8].Descriptor()
}

func (SearchFromMicaClientCertificateResponse_Status) Type() protoreflect.EnumType {
	return &file_micashared_common_v1_mtls_certificate_proto_enumTypes[8]
}

func (x SearchFromMicaClientCertificateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchFromMicaClientCertificateResponse_Status.Descriptor instead.
func (SearchFromMicaClientCertificateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{20, 0}
}

type MTLSCertificateSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base64 standard encoded PEM string
	Base64PemCsr string `protobuf:"bytes,1,opt,name=base64_pem_csr,json=base64PemCsr,proto3" json:"base64_pem_csr,omitempty"`
}

func (x *MTLSCertificateSignatureRequest) Reset() {
	*x = MTLSCertificateSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSCertificateSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSCertificateSignatureRequest) ProtoMessage() {}

func (x *MTLSCertificateSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSCertificateSignatureRequest.ProtoReflect.Descriptor instead.
func (*MTLSCertificateSignatureRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *MTLSCertificateSignatureRequest) GetBase64PemCsr() string {
	if x != nil {
		return x.Base64PemCsr
	}
	return ""
}

type ToMicaCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serial number of the generated certificate
	SerialNumber string                 `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Issued       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=issued,proto3" json:"issued,omitempty"`
	Expiry       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// whether this certificate can be used or has been disallowed for access regardless of expiration
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Base64 standard encoded PEM string
	Base64CertificatePem string `protobuf:"bytes,12,opt,name=base64_certificate_pem,json=base64CertificatePem,proto3" json:"base64_certificate_pem,omitempty"`
	// Base64 standard encoded PEM string
	Base64RootcaPem string `protobuf:"bytes,13,opt,name=base64_rootca_pem,json=base64RootcaPem,proto3" json:"base64_rootca_pem,omitempty"`
	// The roles the certificate has
	Roles []string `protobuf:"bytes,9,rep,name=roles,proto3" json:"roles,omitempty"`
	// The friendly name of the certificate
	DisplayName string `protobuf:"bytes,10,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The last usage of the certificate
	LastUsed *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
}

func (x *ToMicaCertificate) Reset() {
	*x = ToMicaCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToMicaCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToMicaCertificate) ProtoMessage() {}

func (x *ToMicaCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToMicaCertificate.ProtoReflect.Descriptor instead.
func (*ToMicaCertificate) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{1}
}

func (x *ToMicaCertificate) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ToMicaCertificate) GetIssued() *timestamppb.Timestamp {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *ToMicaCertificate) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *ToMicaCertificate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToMicaCertificate) GetBase64CertificatePem() string {
	if x != nil {
		return x.Base64CertificatePem
	}
	return ""
}

func (x *ToMicaCertificate) GetBase64RootcaPem() string {
	if x != nil {
		return x.Base64RootcaPem
	}
	return ""
}

func (x *ToMicaCertificate) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ToMicaCertificate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ToMicaCertificate) GetLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsed
	}
	return nil
}

type GenerateToMicaCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Csr *MTLSCertificateSignatureRequest `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	// TODO we should probably enum this with the few roles that are allowed for mTLS?
	Roles            []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	ExpireInDuration string   `protobuf:"bytes,4,opt,name=expire_in_duration,json=expireInDuration,proto3" json:"expire_in_duration,omitempty"`
	DisplayName      string   `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *GenerateToMicaCertificateRequest) Reset() {
	*x = GenerateToMicaCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateToMicaCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateToMicaCertificateRequest) ProtoMessage() {}

func (x *GenerateToMicaCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateToMicaCertificateRequest.ProtoReflect.Descriptor instead.
func (*GenerateToMicaCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{2}
}

func (x *GenerateToMicaCertificateRequest) GetCsr() *MTLSCertificateSignatureRequest {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *GenerateToMicaCertificateRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GenerateToMicaCertificateRequest) GetExpireInDuration() string {
	if x != nil {
		return x.ExpireInDuration
	}
	return ""
}

func (x *GenerateToMicaCertificateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type GenerateToMicaCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      GenerateToMicaCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.GenerateToMicaCertificateResponse_Status" json:"status,omitempty"`
	Error       *Error                                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate *ToMicaCertificate                       `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GenerateToMicaCertificateResponse) Reset() {
	*x = GenerateToMicaCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateToMicaCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateToMicaCertificateResponse) ProtoMessage() {}

func (x *GenerateToMicaCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateToMicaCertificateResponse.ProtoReflect.Descriptor instead.
func (*GenerateToMicaCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateToMicaCertificateResponse) GetStatus() GenerateToMicaCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return GenerateToMicaCertificateResponse_STATUS_UNSPECIFIED
}

func (x *GenerateToMicaCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GenerateToMicaCertificateResponse) GetCertificate() *ToMicaCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type EnableToMicaCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *EnableToMicaCertificateRequest) Reset() {
	*x = EnableToMicaCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableToMicaCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableToMicaCertificateRequest) ProtoMessage() {}

func (x *EnableToMicaCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableToMicaCertificateRequest.ProtoReflect.Descriptor instead.
func (*EnableToMicaCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{4}
}

func (x *EnableToMicaCertificateRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type EnableToMicaCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       EnableToMicaCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.EnableToMicaCertificateResponse_Status" json:"status,omitempty"`
	Error        *Error                                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SerialNumber string                                 `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *EnableToMicaCertificateResponse) Reset() {
	*x = EnableToMicaCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableToMicaCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableToMicaCertificateResponse) ProtoMessage() {}

func (x *EnableToMicaCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableToMicaCertificateResponse.ProtoReflect.Descriptor instead.
func (*EnableToMicaCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{5}
}

func (x *EnableToMicaCertificateResponse) GetStatus() EnableToMicaCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return EnableToMicaCertificateResponse_STATUS_UNSPECIFIED
}

func (x *EnableToMicaCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EnableToMicaCertificateResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type DisableToMicaCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *DisableToMicaCertificateRequest) Reset() {
	*x = DisableToMicaCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableToMicaCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableToMicaCertificateRequest) ProtoMessage() {}

func (x *DisableToMicaCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableToMicaCertificateRequest.ProtoReflect.Descriptor instead.
func (*DisableToMicaCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{6}
}

func (x *DisableToMicaCertificateRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type DisableToMicaCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       DisableToMicaCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.DisableToMicaCertificateResponse_Status" json:"status,omitempty"`
	Error        *Error                                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SerialNumber string                                  `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *DisableToMicaCertificateResponse) Reset() {
	*x = DisableToMicaCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableToMicaCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableToMicaCertificateResponse) ProtoMessage() {}

func (x *DisableToMicaCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableToMicaCertificateResponse.ProtoReflect.Descriptor instead.
func (*DisableToMicaCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{7}
}

func (x *DisableToMicaCertificateResponse) GetStatus() DisableToMicaCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return DisableToMicaCertificateResponse_STATUS_UNSPECIFIED
}

func (x *DisableToMicaCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DisableToMicaCertificateResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type GetToMicaCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *GetToMicaCertificateRequest) Reset() {
	*x = GetToMicaCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToMicaCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToMicaCertificateRequest) ProtoMessage() {}

func (x *GetToMicaCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToMicaCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetToMicaCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{8}
}

func (x *GetToMicaCertificateRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type GetToMicaCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      GetToMicaCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.GetToMicaCertificateResponse_Status" json:"status,omitempty"`
	Error       *Error                              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate *ToMicaCertificate                  `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GetToMicaCertificateResponse) Reset() {
	*x = GetToMicaCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToMicaCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToMicaCertificateResponse) ProtoMessage() {}

func (x *GetToMicaCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToMicaCertificateResponse.ProtoReflect.Descriptor instead.
func (*GetToMicaCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{9}
}

func (x *GetToMicaCertificateResponse) GetStatus() GetToMicaCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetToMicaCertificateResponse_STATUS_UNSPECIFIED
}

func (x *GetToMicaCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetToMicaCertificateResponse) GetCertificate() *ToMicaCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type SearchToMicaCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchToMicaCertificateRequest) Reset() {
	*x = SearchToMicaCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchToMicaCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchToMicaCertificateRequest) ProtoMessage() {}

func (x *SearchToMicaCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchToMicaCertificateRequest.ProtoReflect.Descriptor instead.
func (*SearchToMicaCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{10}
}

type SearchToMicaCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       SearchToMicaCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.SearchToMicaCertificateResponse_Status" json:"status,omitempty"`
	Error        *Error                                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificates []*ToMicaCertificate                   `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *SearchToMicaCertificateResponse) Reset() {
	*x = SearchToMicaCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchToMicaCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchToMicaCertificateResponse) ProtoMessage() {}

func (x *SearchToMicaCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchToMicaCertificateResponse.ProtoReflect.Descriptor instead.
func (*SearchToMicaCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{11}
}

func (x *SearchToMicaCertificateResponse) GetStatus() SearchToMicaCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchToMicaCertificateResponse_STATUS_UNSPECIFIED
}

func (x *SearchToMicaCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchToMicaCertificateResponse) GetCertificates() []*ToMicaCertificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type FromMicaClientCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"` // Used for lookups NOT the actual private key.
	DisplayName   string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Base64 standard encoded cert PEM string
	Base64CertificatePem string `protobuf:"bytes,7,opt,name=base64_certificate_pem,json=base64CertificatePem,proto3" json:"base64_certificate_pem,omitempty"`
	// Base64 standard encoded CSR PEM string
	Base64CsrPem string `protobuf:"bytes,8,opt,name=base64_csr_pem,json=base64CsrPem,proto3" json:"base64_csr_pem,omitempty"`
	// Base64 standard encoded PEM string
	Base64RootcaPem     string `protobuf:"bytes,9,opt,name=base64_rootca_pem,json=base64RootcaPem,proto3" json:"base64_rootca_pem,omitempty"`
	Enabled             bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	UseHostTrustedCerts bool   `protobuf:"varint,10,opt,name=use_host_trusted_certs,json=useHostTrustedCerts,proto3" json:"use_host_trusted_certs,omitempty"`
}

func (x *FromMicaClientCertificate) Reset() {
	*x = FromMicaClientCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromMicaClientCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromMicaClientCertificate) ProtoMessage() {}

func (x *FromMicaClientCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromMicaClientCertificate.ProtoReflect.Descriptor instead.
func (*FromMicaClientCertificate) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{12}
}

func (x *FromMicaClientCertificate) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *FromMicaClientCertificate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *FromMicaClientCertificate) GetBase64CertificatePem() string {
	if x != nil {
		return x.Base64CertificatePem
	}
	return ""
}

func (x *FromMicaClientCertificate) GetBase64CsrPem() string {
	if x != nil {
		return x.Base64CsrPem
	}
	return ""
}

func (x *FromMicaClientCertificate) GetBase64RootcaPem() string {
	if x != nil {
		return x.Base64RootcaPem
	}
	return ""
}

func (x *FromMicaClientCertificate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FromMicaClientCertificate) GetUseHostTrustedCerts() bool {
	if x != nil {
		return x.UseHostTrustedCerts
	}
	return false
}

// We generate the db entry and return the csr to the user so they can sign it.
type GenerateFromMicaClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *GenerateFromMicaClientCertificateRequest) Reset() {
	*x = GenerateFromMicaClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFromMicaClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFromMicaClientCertificateRequest) ProtoMessage() {}

func (x *GenerateFromMicaClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFromMicaClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*GenerateFromMicaClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateFromMicaClientCertificateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type GenerateFromMicaClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            GenerateFromMicaClientCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.GenerateFromMicaClientCertificateResponse_Status" json:"status,omitempty"`
	Error             *Error                                           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	CertificateToSign *FromMicaClientCertificate                       `protobuf:"bytes,3,opt,name=certificate_to_sign,json=certificateToSign,proto3" json:"certificate_to_sign,omitempty"`
}

func (x *GenerateFromMicaClientCertificateResponse) Reset() {
	*x = GenerateFromMicaClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFromMicaClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFromMicaClientCertificateResponse) ProtoMessage() {}

func (x *GenerateFromMicaClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFromMicaClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*GenerateFromMicaClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateFromMicaClientCertificateResponse) GetStatus() GenerateFromMicaClientCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return GenerateFromMicaClientCertificateResponse_STATUS_UNSPECIFIED
}

func (x *GenerateFromMicaClientCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GenerateFromMicaClientCertificateResponse) GetCertificateToSign() *FromMicaClientCertificate {
	if x != nil {
		return x.CertificateToSign
	}
	return nil
}

type UpdateFromMicaClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	DisplayName   string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Base64 standard encoded PEM string
	Base64SignedCertPemFromCsr string `protobuf:"bytes,3,opt,name=base64_signed_cert_pem_from_csr,json=base64SignedCertPemFromCsr,proto3" json:"base64_signed_cert_pem_from_csr,omitempty"`
	// Base64 standard encoded PEM string
	Base64RootcaPem string `protobuf:"bytes,4,opt,name=base64_rootca_pem,json=base64RootcaPem,proto3" json:"base64_rootca_pem,omitempty"`
}

func (x *UpdateFromMicaClientCertificateRequest) Reset() {
	*x = UpdateFromMicaClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFromMicaClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromMicaClientCertificateRequest) ProtoMessage() {}

func (x *UpdateFromMicaClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromMicaClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*UpdateFromMicaClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateFromMicaClientCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *UpdateFromMicaClientCertificateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdateFromMicaClientCertificateRequest) GetBase64SignedCertPemFromCsr() string {
	if x != nil {
		return x.Base64SignedCertPemFromCsr
	}
	return ""
}

func (x *UpdateFromMicaClientCertificateRequest) GetBase64RootcaPem() string {
	if x != nil {
		return x.Base64RootcaPem
	}
	return ""
}

type UpdateFromMicaClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      UpdateFromMicaClientCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.UpdateFromMicaClientCertificateResponse_Status" json:"status,omitempty"`
	Error       *Error                                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate *FromMicaClientCertificate                     `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *UpdateFromMicaClientCertificateResponse) Reset() {
	*x = UpdateFromMicaClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFromMicaClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFromMicaClientCertificateResponse) ProtoMessage() {}

func (x *UpdateFromMicaClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFromMicaClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*UpdateFromMicaClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateFromMicaClientCertificateResponse) GetStatus() UpdateFromMicaClientCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpdateFromMicaClientCertificateResponse_STATUS_UNSPECIFIED
}

func (x *UpdateFromMicaClientCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateFromMicaClientCertificateResponse) GetCertificate() *FromMicaClientCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type EnableFromMicaClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
}

func (x *EnableFromMicaClientCertificateRequest) Reset() {
	*x = EnableFromMicaClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFromMicaClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFromMicaClientCertificateRequest) ProtoMessage() {}

func (x *EnableFromMicaClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFromMicaClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*EnableFromMicaClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{17}
}

func (x *EnableFromMicaClientCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

type EnableFromMicaClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      EnableFromMicaClientCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.EnableFromMicaClientCertificateResponse_Status" json:"status,omitempty"`
	Error       *Error                                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate *FromMicaClientCertificate                     `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *EnableFromMicaClientCertificateResponse) Reset() {
	*x = EnableFromMicaClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFromMicaClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFromMicaClientCertificateResponse) ProtoMessage() {}

func (x *EnableFromMicaClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFromMicaClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*EnableFromMicaClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{18}
}

func (x *EnableFromMicaClientCertificateResponse) GetStatus() EnableFromMicaClientCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return EnableFromMicaClientCertificateResponse_STATUS_UNSPECIFIED
}

func (x *EnableFromMicaClientCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EnableFromMicaClientCertificateResponse) GetCertificate() *FromMicaClientCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type SearchFromMicaClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchFromMicaClientCertificateRequest) Reset() {
	*x = SearchFromMicaClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFromMicaClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFromMicaClientCertificateRequest) ProtoMessage() {}

func (x *SearchFromMicaClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFromMicaClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*SearchFromMicaClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{19}
}

type SearchFromMicaClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       SearchFromMicaClientCertificateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=micashared.common.v1.SearchFromMicaClientCertificateResponse_Status" json:"status,omitempty"`
	Error        *Error                                         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificates []*FromMicaClientCertificate                   `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *SearchFromMicaClientCertificateResponse) Reset() {
	*x = SearchFromMicaClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFromMicaClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFromMicaClientCertificateResponse) ProtoMessage() {}

func (x *SearchFromMicaClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_micashared_common_v1_mtls_certificate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFromMicaClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*SearchFromMicaClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP(), []int{20}
}

func (x *SearchFromMicaClientCertificateResponse) GetStatus() SearchFromMicaClientCertificateResponse_Status {
	if x != nil {
		return x.Status
	}
	return SearchFromMicaClientCertificateResponse_STATUS_UNSPECIFIED
}

func (x *SearchFromMicaClientCertificateResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SearchFromMicaClientCertificateResponse) GetCertificates() []*FromMicaClientCertificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

var File_micashared_common_v1_mtls_certificate_proto protoreflect.FileDescriptor

var file_micashared_common_v1_mtls_certificate_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x50, 0x0a, 0x1f, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x70, 0x65, 0x6d,
	0x5f, 0x63, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x50, 0x65, 0x6d, 0x43, 0x73,
	0x72, 0x22, 0xa1, 0x03, 0x0a, 0x11, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52, 0x6f, 0x6f, 0x74, 0x63, 0x61,
	0x50, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x03, 0x63, 0x73,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x63, 0x73, 0x72, 0x12, 0x1e, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x49, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc1,
	0x02, 0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x63,
	0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x49, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x4d, 0x69,
	0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x22, 0x4e, 0x0a, 0x1e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4d, 0x69,
	0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x1f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4d,
	0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x4f, 0x0a, 0x1f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x99, 0x02,
	0x0a, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x4b, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xcd, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x1f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69,
	0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xbc, 0x02, 0x0a, 0x19, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x5f, 0x63, 0x73, 0x72, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x43, 0x73, 0x72, 0x50, 0x65, 0x6d, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x5f,
	0x70, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x52, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x50, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x28, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x29, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x13, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x22, 0xe3, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65,
	0x6d, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x73, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x65,
	0x72, 0x74, 0x50, 0x65, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x73, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x5f, 0x70, 0x65,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x52,
	0x6f, 0x6f, 0x74, 0x63, 0x61, 0x50, 0x65, 0x6d, 0x22, 0xd5, 0x02, 0x0a, 0x27, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x22, 0x4f, 0x0a, 0x26, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69,
	0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x22, 0xd5, 0x02, 0x0a, 0x27, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e,
	0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d,
	0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x63,
	0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4d,
	0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x26, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x27, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x44, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72, 0x6f,
	0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x53, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x56, 0x0a,
	0x17, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a,
	0x1d, 0x6d, 0x69, 0x63, 0x61, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02,
	0x04, 0x4d, 0x49, 0x43, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_micashared_common_v1_mtls_certificate_proto_rawDescOnce sync.Once
	file_micashared_common_v1_mtls_certificate_proto_rawDescData = file_micashared_common_v1_mtls_certificate_proto_rawDesc
)

func file_micashared_common_v1_mtls_certificate_proto_rawDescGZIP() []byte {
	file_micashared_common_v1_mtls_certificate_proto_rawDescOnce.Do(func() {
		file_micashared_common_v1_mtls_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(file_micashared_common_v1_mtls_certificate_proto_rawDescData)
	})
	return file_micashared_common_v1_mtls_certificate_proto_rawDescData
}

var file_micashared_common_v1_mtls_certificate_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_micashared_common_v1_mtls_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_micashared_common_v1_mtls_certificate_proto_goTypes = []interface{}{
	(GenerateToMicaCertificateResponse_Status)(0),         // 0: micashared.common.v1.GenerateToMicaCertificateResponse.Status
	(EnableToMicaCertificateResponse_Status)(0),           // 1: micashared.common.v1.EnableToMicaCertificateResponse.Status
	(DisableToMicaCertificateResponse_Status)(0),          // 2: micashared.common.v1.DisableToMicaCertificateResponse.Status
	(GetToMicaCertificateResponse_Status)(0),              // 3: micashared.common.v1.GetToMicaCertificateResponse.Status
	(SearchToMicaCertificateResponse_Status)(0),           // 4: micashared.common.v1.SearchToMicaCertificateResponse.Status
	(GenerateFromMicaClientCertificateResponse_Status)(0), // 5: micashared.common.v1.GenerateFromMicaClientCertificateResponse.Status
	(UpdateFromMicaClientCertificateResponse_Status)(0),   // 6: micashared.common.v1.UpdateFromMicaClientCertificateResponse.Status
	(EnableFromMicaClientCertificateResponse_Status)(0),   // 7: micashared.common.v1.EnableFromMicaClientCertificateResponse.Status
	(SearchFromMicaClientCertificateResponse_Status)(0),   // 8: micashared.common.v1.SearchFromMicaClientCertificateResponse.Status
	(*MTLSCertificateSignatureRequest)(nil),               // 9: micashared.common.v1.MTLSCertificateSignatureRequest
	(*ToMicaCertificate)(nil),                             // 10: micashared.common.v1.ToMicaCertificate
	(*GenerateToMicaCertificateRequest)(nil),              // 11: micashared.common.v1.GenerateToMicaCertificateRequest
	(*GenerateToMicaCertificateResponse)(nil),             // 12: micashared.common.v1.GenerateToMicaCertificateResponse
	(*EnableToMicaCertificateRequest)(nil),                // 13: micashared.common.v1.EnableToMicaCertificateRequest
	(*EnableToMicaCertificateResponse)(nil),               // 14: micashared.common.v1.EnableToMicaCertificateResponse
	(*DisableToMicaCertificateRequest)(nil),               // 15: micashared.common.v1.DisableToMicaCertificateRequest
	(*DisableToMicaCertificateResponse)(nil),              // 16: micashared.common.v1.DisableToMicaCertificateResponse
	(*GetToMicaCertificateRequest)(nil),                   // 17: micashared.common.v1.GetToMicaCertificateRequest
	(*GetToMicaCertificateResponse)(nil),                  // 18: micashared.common.v1.GetToMicaCertificateResponse
	(*SearchToMicaCertificateRequest)(nil),                // 19: micashared.common.v1.SearchToMicaCertificateRequest
	(*SearchToMicaCertificateResponse)(nil),               // 20: micashared.common.v1.SearchToMicaCertificateResponse
	(*FromMicaClientCertificate)(nil),                     // 21: micashared.common.v1.FromMicaClientCertificate
	(*GenerateFromMicaClientCertificateRequest)(nil),      // 22: micashared.common.v1.GenerateFromMicaClientCertificateRequest
	(*GenerateFromMicaClientCertificateResponse)(nil),     // 23: micashared.common.v1.GenerateFromMicaClientCertificateResponse
	(*UpdateFromMicaClientCertificateRequest)(nil),        // 24: micashared.common.v1.UpdateFromMicaClientCertificateRequest
	(*UpdateFromMicaClientCertificateResponse)(nil),       // 25: micashared.common.v1.UpdateFromMicaClientCertificateResponse
	(*EnableFromMicaClientCertificateRequest)(nil),        // 26: micashared.common.v1.EnableFromMicaClientCertificateRequest
	(*EnableFromMicaClientCertificateResponse)(nil),       // 27: micashared.common.v1.EnableFromMicaClientCertificateResponse
	(*SearchFromMicaClientCertificateRequest)(nil),        // 28: micashared.common.v1.SearchFromMicaClientCertificateRequest
	(*SearchFromMicaClientCertificateResponse)(nil),       // 29: micashared.common.v1.SearchFromMicaClientCertificateResponse
	(*timestamppb.Timestamp)(nil),                         // 30: google.protobuf.Timestamp
	(*Error)(nil),                                         // 31: micashared.common.v1.Error
}
var file_micashared_common_v1_mtls_certificate_proto_depIdxs = []int32{
	30, // 0: micashared.common.v1.ToMicaCertificate.issued:type_name -> google.protobuf.Timestamp
	30, // 1: micashared.common.v1.ToMicaCertificate.expiry:type_name -> google.protobuf.Timestamp
	30, // 2: micashared.common.v1.ToMicaCertificate.last_used:type_name -> google.protobuf.Timestamp
	9,  // 3: micashared.common.v1.GenerateToMicaCertificateRequest.csr:type_name -> micashared.common.v1.MTLSCertificateSignatureRequest
	0,  // 4: micashared.common.v1.GenerateToMicaCertificateResponse.status:type_name -> micashared.common.v1.GenerateToMicaCertificateResponse.Status
	31, // 5: micashared.common.v1.GenerateToMicaCertificateResponse.error:type_name -> micashared.common.v1.Error
	10, // 6: micashared.common.v1.GenerateToMicaCertificateResponse.certificate:type_name -> micashared.common.v1.ToMicaCertificate
	1,  // 7: micashared.common.v1.EnableToMicaCertificateResponse.status:type_name -> micashared.common.v1.EnableToMicaCertificateResponse.Status
	31, // 8: micashared.common.v1.EnableToMicaCertificateResponse.error:type_name -> micashared.common.v1.Error
	2,  // 9: micashared.common.v1.DisableToMicaCertificateResponse.status:type_name -> micashared.common.v1.DisableToMicaCertificateResponse.Status
	31, // 10: micashared.common.v1.DisableToMicaCertificateResponse.error:type_name -> micashared.common.v1.Error
	3,  // 11: micashared.common.v1.GetToMicaCertificateResponse.status:type_name -> micashared.common.v1.GetToMicaCertificateResponse.Status
	31, // 12: micashared.common.v1.GetToMicaCertificateResponse.error:type_name -> micashared.common.v1.Error
	10, // 13: micashared.common.v1.GetToMicaCertificateResponse.certificate:type_name -> micashared.common.v1.ToMicaCertificate
	4,  // 14: micashared.common.v1.SearchToMicaCertificateResponse.status:type_name -> micashared.common.v1.SearchToMicaCertificateResponse.Status
	31, // 15: micashared.common.v1.SearchToMicaCertificateResponse.error:type_name -> micashared.common.v1.Error
	10, // 16: micashared.common.v1.SearchToMicaCertificateResponse.certificates:type_name -> micashared.common.v1.ToMicaCertificate
	5,  // 17: micashared.common.v1.GenerateFromMicaClientCertificateResponse.status:type_name -> micashared.common.v1.GenerateFromMicaClientCertificateResponse.Status
	31, // 18: micashared.common.v1.GenerateFromMicaClientCertificateResponse.error:type_name -> micashared.common.v1.Error
	21, // 19: micashared.common.v1.GenerateFromMicaClientCertificateResponse.certificate_to_sign:type_name -> micashared.common.v1.FromMicaClientCertificate
	6,  // 20: micashared.common.v1.UpdateFromMicaClientCertificateResponse.status:type_name -> micashared.common.v1.UpdateFromMicaClientCertificateResponse.Status
	31, // 21: micashared.common.v1.UpdateFromMicaClientCertificateResponse.error:type_name -> micashared.common.v1.Error
	21, // 22: micashared.common.v1.UpdateFromMicaClientCertificateResponse.certificate:type_name -> micashared.common.v1.FromMicaClientCertificate
	7,  // 23: micashared.common.v1.EnableFromMicaClientCertificateResponse.status:type_name -> micashared.common.v1.EnableFromMicaClientCertificateResponse.Status
	31, // 24: micashared.common.v1.EnableFromMicaClientCertificateResponse.error:type_name -> micashared.common.v1.Error
	21, // 25: micashared.common.v1.EnableFromMicaClientCertificateResponse.certificate:type_name -> micashared.common.v1.FromMicaClientCertificate
	8,  // 26: micashared.common.v1.SearchFromMicaClientCertificateResponse.status:type_name -> micashared.common.v1.SearchFromMicaClientCertificateResponse.Status
	31, // 27: micashared.common.v1.SearchFromMicaClientCertificateResponse.error:type_name -> micashared.common.v1.Error
	21, // 28: micashared.common.v1.SearchFromMicaClientCertificateResponse.certificates:type_name -> micashared.common.v1.FromMicaClientCertificate
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_micashared_common_v1_mtls_certificate_proto_init() }
func file_micashared_common_v1_mtls_certificate_proto_init() {
	if File_micashared_common_v1_mtls_certificate_proto != nil {
		return
	}
	file_micashared_common_v1_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTLSCertificateSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToMicaCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateToMicaCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateToMicaCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableToMicaCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableToMicaCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableToMicaCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableToMicaCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToMicaCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToMicaCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchToMicaCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchToMicaCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromMicaClientCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFromMicaClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFromMicaClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFromMicaClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFromMicaClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFromMicaClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFromMicaClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFromMicaClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micashared_common_v1_mtls_certificate_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFromMicaClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_micashared_common_v1_mtls_certificate_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_micashared_common_v1_mtls_certificate_proto_goTypes,
		DependencyIndexes: file_micashared_common_v1_mtls_certificate_proto_depIdxs,
		EnumInfos:         file_micashared_common_v1_mtls_certificate_proto_enumTypes,
		MessageInfos:      file_micashared_common_v1_mtls_certificate_proto_msgTypes,
	}.Build()
	File_micashared_common_v1_mtls_certificate_proto = out.File
	file_micashared_common_v1_mtls_certificate_proto_rawDesc = nil
	file_micashared_common_v1_mtls_certificate_proto_goTypes = nil
	file_micashared_common_v1_mtls_certificate_proto_depIdxs = nil
}
