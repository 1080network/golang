// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: partner/transaction/v1/transaction.proto

package transactionv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	currencyv1 "github.com/1080network/golang/partner/proto/common/enums/currencyv1"

	regionv1 "github.com/1080network/golang/partner/proto/common/enums/regionv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = currencyv1.Currency(0)

	_ = regionv1.Region(0)
)

// Validate checks the field values on SearchTransactionDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchTransactionDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchTransactionDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchTransactionDataRequestMultiError, or nil if none found.
func (m *SearchTransactionDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTransactionDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionDataRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionDataRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionDataRequestValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionDataRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionDataRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionDataRequestValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IntervalType

	// no validation rules for TopN

	// no validation rules for TransactionType

	// no validation rules for Currency

	if utf8.RuneCountInString(m.GetOrganizationKey()) > 50 {
		err := SearchTransactionDataRequestValidationError{
			field:  "OrganizationKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStoreKey()) > 50 {
		err := SearchTransactionDataRequestValidationError{
			field:  "StoreKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	if len(errors) > 0 {
		return SearchTransactionDataRequestMultiError(errors)
	}

	return nil
}

// SearchTransactionDataRequestMultiError is an error wrapping multiple
// validation errors returned by SearchTransactionDataRequest.ValidateAll() if
// the designated constraints aren't met.
type SearchTransactionDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTransactionDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTransactionDataRequestMultiError) AllErrors() []error { return m }

// SearchTransactionDataRequestValidationError is the validation error returned
// by SearchTransactionDataRequest.Validate if the designated constraints
// aren't met.
type SearchTransactionDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTransactionDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTransactionDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTransactionDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTransactionDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTransactionDataRequestValidationError) ErrorName() string {
	return "SearchTransactionDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTransactionDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTransactionDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTransactionDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTransactionDataRequestValidationError{}

// Validate checks the field values on CountAmountItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CountAmountItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountAmountItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountAmountItemMultiError, or nil if none found.
func (m *CountAmountItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CountAmountItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CountAmountItemValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CountAmountItemValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CountAmountItemValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	// no validation rules for ObtainApprovalCount

	// no validation rules for ObtainApprovalAmount

	// no validation rules for ObtainDeclineCount

	// no validation rules for ObtainDeclineAmount

	// no validation rules for ObtainNetworkDeclineCount

	// no validation rules for ObtainNetworkDeclineAmount

	// no validation rules for ReturnApprovalCount

	// no validation rules for ReturnApprovalAmount

	// no validation rules for ReturnDeclineCount

	// no validation rules for ReturnDeclineAmount

	// no validation rules for ReturnNetworkDeclineCount

	// no validation rules for ReturnNetworkDeclineAmount

	if len(errors) > 0 {
		return CountAmountItemMultiError(errors)
	}

	return nil
}

// CountAmountItemMultiError is an error wrapping multiple validation errors
// returned by CountAmountItem.ValidateAll() if the designated constraints
// aren't met.
type CountAmountItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountAmountItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountAmountItemMultiError) AllErrors() []error { return m }

// CountAmountItemValidationError is the validation error returned by
// CountAmountItem.Validate if the designated constraints aren't met.
type CountAmountItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountAmountItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountAmountItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountAmountItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountAmountItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountAmountItemValidationError) ErrorName() string { return "CountAmountItemValidationError" }

// Error satisfies the builtin error interface
func (e CountAmountItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountAmountItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountAmountItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountAmountItemValidationError{}

// Validate checks the field values on SearchTransactionDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchTransactionDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchTransactionDataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchTransactionDataResponseMultiError, or nil if none found.
func (m *SearchTransactionDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTransactionDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionDataResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionDataResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionDataResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cid

	for idx, item := range m.GetCountAmountItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchTransactionDataResponseValidationError{
						field:  fmt.Sprintf("CountAmountItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchTransactionDataResponseValidationError{
						field:  fmt.Sprintf("CountAmountItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchTransactionDataResponseValidationError{
					field:  fmt.Sprintf("CountAmountItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchTransactionDataResponseMultiError(errors)
	}

	return nil
}

// SearchTransactionDataResponseMultiError is an error wrapping multiple
// validation errors returned by SearchTransactionDataResponse.ValidateAll()
// if the designated constraints aren't met.
type SearchTransactionDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTransactionDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTransactionDataResponseMultiError) AllErrors() []error { return m }

// SearchTransactionDataResponseValidationError is the validation error
// returned by SearchTransactionDataResponse.Validate if the designated
// constraints aren't met.
type SearchTransactionDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTransactionDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTransactionDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTransactionDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTransactionDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTransactionDataResponseValidationError) ErrorName() string {
	return "SearchTransactionDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTransactionDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTransactionDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTransactionDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTransactionDataResponseValidationError{}

// Validate checks the field values on SearchTransactionGeographyDataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchTransactionGeographyDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchTransactionGeographyDataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchTransactionGeographyDataRequestMultiError, or nil if none found.
func (m *SearchTransactionGeographyDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTransactionGeographyDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionGeographyDataRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionGeographyDataRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionGeographyDataRequestValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionGeographyDataRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionGeographyDataRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionGeographyDataRequestValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IntervalType

	// no validation rules for TopN

	// no validation rules for TransactionType

	// no validation rules for Currency

	if utf8.RuneCountInString(m.GetOrganizationKey()) > 50 {
		err := SearchTransactionGeographyDataRequestValidationError{
			field:  "OrganizationKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStoreKey()) > 50 {
		err := SearchTransactionGeographyDataRequestValidationError{
			field:  "StoreKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Region

	// no validation rules for PostalCode

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	if len(errors) > 0 {
		return SearchTransactionGeographyDataRequestMultiError(errors)
	}

	return nil
}

// SearchTransactionGeographyDataRequestMultiError is an error wrapping
// multiple validation errors returned by
// SearchTransactionGeographyDataRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchTransactionGeographyDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTransactionGeographyDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTransactionGeographyDataRequestMultiError) AllErrors() []error { return m }

// SearchTransactionGeographyDataRequestValidationError is the validation error
// returned by SearchTransactionGeographyDataRequest.Validate if the
// designated constraints aren't met.
type SearchTransactionGeographyDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTransactionGeographyDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTransactionGeographyDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTransactionGeographyDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTransactionGeographyDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTransactionGeographyDataRequestValidationError) ErrorName() string {
	return "SearchTransactionGeographyDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTransactionGeographyDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTransactionGeographyDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTransactionGeographyDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTransactionGeographyDataRequestValidationError{}

// Validate checks the field values on SearchTransactionGeographyDataItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchTransactionGeographyDataItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchTransactionGeographyDataItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchTransactionGeographyDataItemMultiError, or nil if none found.
func (m *SearchTransactionGeographyDataItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTransactionGeographyDataItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Latitude

	// no validation rules for Longitude

	for idx, item := range m.GetCountAmountItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchTransactionGeographyDataItemValidationError{
						field:  fmt.Sprintf("CountAmountItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchTransactionGeographyDataItemValidationError{
						field:  fmt.Sprintf("CountAmountItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchTransactionGeographyDataItemValidationError{
					field:  fmt.Sprintf("CountAmountItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchTransactionGeographyDataItemMultiError(errors)
	}

	return nil
}

// SearchTransactionGeographyDataItemMultiError is an error wrapping multiple
// validation errors returned by
// SearchTransactionGeographyDataItem.ValidateAll() if the designated
// constraints aren't met.
type SearchTransactionGeographyDataItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTransactionGeographyDataItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTransactionGeographyDataItemMultiError) AllErrors() []error { return m }

// SearchTransactionGeographyDataItemValidationError is the validation error
// returned by SearchTransactionGeographyDataItem.Validate if the designated
// constraints aren't met.
type SearchTransactionGeographyDataItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTransactionGeographyDataItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTransactionGeographyDataItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTransactionGeographyDataItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTransactionGeographyDataItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTransactionGeographyDataItemValidationError) ErrorName() string {
	return "SearchTransactionGeographyDataItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTransactionGeographyDataItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTransactionGeographyDataItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTransactionGeographyDataItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTransactionGeographyDataItemValidationError{}

// Validate checks the field values on SearchTransactionGeographyDataResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchTransactionGeographyDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchTransactionGeographyDataResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SearchTransactionGeographyDataResponseMultiError, or nil if none found.
func (m *SearchTransactionGeographyDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTransactionGeographyDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionGeographyDataResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionGeographyDataResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionGeographyDataResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cid

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchTransactionGeographyDataResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchTransactionGeographyDataResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchTransactionGeographyDataResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchTransactionGeographyDataResponseMultiError(errors)
	}

	return nil
}

// SearchTransactionGeographyDataResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchTransactionGeographyDataResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchTransactionGeographyDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTransactionGeographyDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTransactionGeographyDataResponseMultiError) AllErrors() []error { return m }

// SearchTransactionGeographyDataResponseValidationError is the validation
// error returned by SearchTransactionGeographyDataResponse.Validate if the
// designated constraints aren't met.
type SearchTransactionGeographyDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTransactionGeographyDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTransactionGeographyDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTransactionGeographyDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTransactionGeographyDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTransactionGeographyDataResponseValidationError) ErrorName() string {
	return "SearchTransactionGeographyDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTransactionGeographyDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTransactionGeographyDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTransactionGeographyDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTransactionGeographyDataResponseValidationError{}

// Validate checks the field values on
// SearchTransactionServiceProviderDataRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchTransactionServiceProviderDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchTransactionServiceProviderDataRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchTransactionServiceProviderDataRequestMultiError, or nil if none found.
func (m *SearchTransactionServiceProviderDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTransactionServiceProviderDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionServiceProviderDataRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionServiceProviderDataRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionServiceProviderDataRequestValidationError{
				field:  "DateFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionServiceProviderDataRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionServiceProviderDataRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionServiceProviderDataRequestValidationError{
				field:  "DateTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IntervalType

	// no validation rules for TopN

	// no validation rules for TransactionType

	// no validation rules for Currency

	if utf8.RuneCountInString(m.GetOrganizationKey()) > 50 {
		err := SearchTransactionServiceProviderDataRequestValidationError{
			field:  "OrganizationKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStoreKey()) > 50 {
		err := SearchTransactionServiceProviderDataRequestValidationError{
			field:  "StoreKey",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	if len(errors) > 0 {
		return SearchTransactionServiceProviderDataRequestMultiError(errors)
	}

	return nil
}

// SearchTransactionServiceProviderDataRequestMultiError is an error wrapping
// multiple validation errors returned by
// SearchTransactionServiceProviderDataRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchTransactionServiceProviderDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTransactionServiceProviderDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTransactionServiceProviderDataRequestMultiError) AllErrors() []error { return m }

// SearchTransactionServiceProviderDataRequestValidationError is the validation
// error returned by SearchTransactionServiceProviderDataRequest.Validate if
// the designated constraints aren't met.
type SearchTransactionServiceProviderDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTransactionServiceProviderDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTransactionServiceProviderDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTransactionServiceProviderDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTransactionServiceProviderDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTransactionServiceProviderDataRequestValidationError) ErrorName() string {
	return "SearchTransactionServiceProviderDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTransactionServiceProviderDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTransactionServiceProviderDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTransactionServiceProviderDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTransactionServiceProviderDataRequestValidationError{}

// Validate checks the field values on SearchTransactionServiceProviderDataItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearchTransactionServiceProviderDataItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchTransactionServiceProviderDataItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchTransactionServiceProviderDataItemMultiError, or nil if none found.
func (m *SearchTransactionServiceProviderDataItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTransactionServiceProviderDataItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetServiceProviderKey()); l < 30 || l > 50 {
		err := SearchTransactionServiceProviderDataItemValidationError{
			field:  "ServiceProviderKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceProviderName

	if all {
		switch v := interface{}(m.GetCountAmountItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionServiceProviderDataItemValidationError{
					field:  "CountAmountItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionServiceProviderDataItemValidationError{
					field:  "CountAmountItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountAmountItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionServiceProviderDataItemValidationError{
				field:  "CountAmountItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchTransactionServiceProviderDataItemMultiError(errors)
	}

	return nil
}

// SearchTransactionServiceProviderDataItemMultiError is an error wrapping
// multiple validation errors returned by
// SearchTransactionServiceProviderDataItem.ValidateAll() if the designated
// constraints aren't met.
type SearchTransactionServiceProviderDataItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTransactionServiceProviderDataItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTransactionServiceProviderDataItemMultiError) AllErrors() []error { return m }

// SearchTransactionServiceProviderDataItemValidationError is the validation
// error returned by SearchTransactionServiceProviderDataItem.Validate if the
// designated constraints aren't met.
type SearchTransactionServiceProviderDataItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTransactionServiceProviderDataItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTransactionServiceProviderDataItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTransactionServiceProviderDataItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTransactionServiceProviderDataItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTransactionServiceProviderDataItemValidationError) ErrorName() string {
	return "SearchTransactionServiceProviderDataItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTransactionServiceProviderDataItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTransactionServiceProviderDataItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTransactionServiceProviderDataItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTransactionServiceProviderDataItemValidationError{}

// Validate checks the field values on
// SearchTransactionServiceProviderDataResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchTransactionServiceProviderDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchTransactionServiceProviderDataResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearchTransactionServiceProviderDataResponseMultiError, or nil if none found.
func (m *SearchTransactionServiceProviderDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTransactionServiceProviderDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchTransactionServiceProviderDataResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchTransactionServiceProviderDataResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchTransactionServiceProviderDataResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cid

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchTransactionServiceProviderDataResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchTransactionServiceProviderDataResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchTransactionServiceProviderDataResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchTransactionServiceProviderDataResponseMultiError(errors)
	}

	return nil
}

// SearchTransactionServiceProviderDataResponseMultiError is an error wrapping
// multiple validation errors returned by
// SearchTransactionServiceProviderDataResponse.ValidateAll() if the
// designated constraints aren't met.
type SearchTransactionServiceProviderDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTransactionServiceProviderDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTransactionServiceProviderDataResponseMultiError) AllErrors() []error { return m }

// SearchTransactionServiceProviderDataResponseValidationError is the
// validation error returned by
// SearchTransactionServiceProviderDataResponse.Validate if the designated
// constraints aren't met.
type SearchTransactionServiceProviderDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTransactionServiceProviderDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTransactionServiceProviderDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTransactionServiceProviderDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTransactionServiceProviderDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTransactionServiceProviderDataResponseValidationError) ErrorName() string {
	return "SearchTransactionServiceProviderDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchTransactionServiceProviderDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTransactionServiceProviderDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTransactionServiceProviderDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTransactionServiceProviderDataResponseValidationError{}
