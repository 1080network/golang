// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: partner/partner/v1/partner.proto

package partnerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	accounttypev1 "mica/proto/common/enums/accounttypev1"

	currencyv1 "mica/proto/common/enums/currencyv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = accounttypev1.AccountType(0)

	_ = currencyv1.Currency(0)
)

// Validate checks the field values on PartnerAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartnerAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartnerAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartnerAccountMultiError,
// or nil if none found.
func (m *PartnerAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *PartnerAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAccountKey

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartnerAccountValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartnerAccountValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartnerAccountValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartnerAccountValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartnerAccountValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartnerAccountValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for PartnerKey

	// no validation rules for AccountType

	// no validation rules for Currency

	if len(errors) > 0 {
		return PartnerAccountMultiError(errors)
	}

	return nil
}

// PartnerAccountMultiError is an error wrapping multiple validation errors
// returned by PartnerAccount.ValidateAll() if the designated constraints
// aren't met.
type PartnerAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartnerAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartnerAccountMultiError) AllErrors() []error { return m }

// PartnerAccountValidationError is the validation error returned by
// PartnerAccount.Validate if the designated constraints aren't met.
type PartnerAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartnerAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartnerAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartnerAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartnerAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartnerAccountValidationError) ErrorName() string { return "PartnerAccountValidationError" }

// Error satisfies the builtin error interface
func (e PartnerAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartnerAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartnerAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartnerAccountValidationError{}

// Validate checks the field values on Partner with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Partner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Partner with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PartnerMultiError, or nil if none found.
func (m *Partner) ValidateAll() error {
	return m.validate(true)
}

func (m *Partner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerKey

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartnerValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartnerValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartnerValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartnerValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartnerValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartnerValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for Name

	// no validation rules for TaxIdentifier

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartnerValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartnerValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartnerValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CallbackAddress

	for idx, item := range m.GetPartnerAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PartnerValidationError{
						field:  fmt.Sprintf("PartnerAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PartnerValidationError{
						field:  fmt.Sprintf("PartnerAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PartnerValidationError{
					field:  fmt.Sprintf("PartnerAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PartnerMultiError(errors)
	}

	return nil
}

// PartnerMultiError is an error wrapping multiple validation errors returned
// by Partner.ValidateAll() if the designated constraints aren't met.
type PartnerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartnerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartnerMultiError) AllErrors() []error { return m }

// PartnerValidationError is the validation error returned by Partner.Validate
// if the designated constraints aren't met.
type PartnerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartnerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartnerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartnerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartnerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartnerValidationError) ErrorName() string { return "PartnerValidationError" }

// Error satisfies the builtin error interface
func (e PartnerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartnerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartnerValidationError{}

// Validate checks the field values on GetPartnerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPartnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartnerRequestMultiError, or nil if none found.
func (m *GetPartnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPartnerRequestMultiError(errors)
	}

	return nil
}

// GetPartnerRequestMultiError is an error wrapping multiple validation errors
// returned by GetPartnerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPartnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartnerRequestMultiError) AllErrors() []error { return m }

// GetPartnerRequestValidationError is the validation error returned by
// GetPartnerRequest.Validate if the designated constraints aren't met.
type GetPartnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartnerRequestValidationError) ErrorName() string {
	return "GetPartnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartnerRequestValidationError{}

// Validate checks the field values on GetPartnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartnerResponseMultiError, or nil if none found.
func (m *GetPartnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartnerResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartnerResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartnerResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartnerResponseValidationError{
					field:  "Partner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartnerResponseValidationError{
					field:  "Partner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartnerResponseValidationError{
				field:  "Partner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartnerResponseMultiError(errors)
	}

	return nil
}

// GetPartnerResponseMultiError is an error wrapping multiple validation errors
// returned by GetPartnerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPartnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartnerResponseMultiError) AllErrors() []error { return m }

// GetPartnerResponseValidationError is the validation error returned by
// GetPartnerResponse.Validate if the designated constraints aren't met.
type GetPartnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartnerResponseValidationError) ErrorName() string {
	return "GetPartnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartnerResponseValidationError{}

// Validate checks the field values on GetPartnerLegacyConfigurationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPartnerLegacyConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartnerLegacyConfigurationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPartnerLegacyConfigurationRequestMultiError, or nil if none found.
func (m *GetPartnerLegacyConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartnerLegacyConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPartnerLegacyConfigurationRequestMultiError(errors)
	}

	return nil
}

// GetPartnerLegacyConfigurationRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPartnerLegacyConfigurationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPartnerLegacyConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartnerLegacyConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartnerLegacyConfigurationRequestMultiError) AllErrors() []error { return m }

// GetPartnerLegacyConfigurationRequestValidationError is the validation error
// returned by GetPartnerLegacyConfigurationRequest.Validate if the designated
// constraints aren't met.
type GetPartnerLegacyConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartnerLegacyConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartnerLegacyConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartnerLegacyConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartnerLegacyConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartnerLegacyConfigurationRequestValidationError) ErrorName() string {
	return "GetPartnerLegacyConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartnerLegacyConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartnerLegacyConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartnerLegacyConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartnerLegacyConfigurationRequestValidationError{}

// Validate checks the field values on GetPartnerLegacyConfigurationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPartnerLegacyConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartnerLegacyConfigurationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPartnerLegacyConfigurationResponseMultiError, or nil if none found.
func (m *GetPartnerLegacyConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartnerLegacyConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartnerLegacyConfigurationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartnerLegacyConfigurationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartnerLegacyConfigurationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartnerLegacyConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartnerLegacyConfigurationResponseValidationError{
					field:  "PartnerLegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartnerLegacyConfigurationResponseValidationError{
					field:  "PartnerLegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartnerLegacyConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartnerLegacyConfigurationResponseValidationError{
				field:  "PartnerLegacyConfiguration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartnerLegacyConfigurationResponseMultiError(errors)
	}

	return nil
}

// GetPartnerLegacyConfigurationResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPartnerLegacyConfigurationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPartnerLegacyConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartnerLegacyConfigurationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartnerLegacyConfigurationResponseMultiError) AllErrors() []error { return m }

// GetPartnerLegacyConfigurationResponseValidationError is the validation error
// returned by GetPartnerLegacyConfigurationResponse.Validate if the
// designated constraints aren't met.
type GetPartnerLegacyConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartnerLegacyConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartnerLegacyConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartnerLegacyConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartnerLegacyConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartnerLegacyConfigurationResponseValidationError) ErrorName() string {
	return "GetPartnerLegacyConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartnerLegacyConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartnerLegacyConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartnerLegacyConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartnerLegacyConfigurationResponseValidationError{}

// Validate checks the field values on UpdatePartnerLegacyConfigurationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdatePartnerLegacyConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePartnerLegacyConfigurationRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdatePartnerLegacyConfigurationRequestMultiError, or nil if none found.
func (m *UpdatePartnerLegacyConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartnerLegacyConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLegacyConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePartnerLegacyConfigurationRequestValidationError{
					field:  "LegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePartnerLegacyConfigurationRequestValidationError{
					field:  "LegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLegacyConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePartnerLegacyConfigurationRequestValidationError{
				field:  "LegacyConfiguration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdatePartnerLegacyConfigurationRequestMultiError(errors)
	}

	return nil
}

// UpdatePartnerLegacyConfigurationRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdatePartnerLegacyConfigurationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePartnerLegacyConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartnerLegacyConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartnerLegacyConfigurationRequestMultiError) AllErrors() []error { return m }

// UpdatePartnerLegacyConfigurationRequestValidationError is the validation
// error returned by UpdatePartnerLegacyConfigurationRequest.Validate if the
// designated constraints aren't met.
type UpdatePartnerLegacyConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartnerLegacyConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartnerLegacyConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartnerLegacyConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartnerLegacyConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartnerLegacyConfigurationRequestValidationError) ErrorName() string {
	return "UpdatePartnerLegacyConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartnerLegacyConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartnerLegacyConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartnerLegacyConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartnerLegacyConfigurationRequestValidationError{}

// Validate checks the field values on UpdatePartnerLegacyConfigurationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdatePartnerLegacyConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdatePartnerLegacyConfigurationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdatePartnerLegacyConfigurationResponseMultiError, or nil if none found.
func (m *UpdatePartnerLegacyConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartnerLegacyConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePartnerLegacyConfigurationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePartnerLegacyConfigurationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePartnerLegacyConfigurationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdatePartnerLegacyConfigurationResponseMultiError(errors)
	}

	return nil
}

// UpdatePartnerLegacyConfigurationResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdatePartnerLegacyConfigurationResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePartnerLegacyConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartnerLegacyConfigurationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartnerLegacyConfigurationResponseMultiError) AllErrors() []error { return m }

// UpdatePartnerLegacyConfigurationResponseValidationError is the validation
// error returned by UpdatePartnerLegacyConfigurationResponse.Validate if the
// designated constraints aren't met.
type UpdatePartnerLegacyConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartnerLegacyConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartnerLegacyConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartnerLegacyConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartnerLegacyConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartnerLegacyConfigurationResponseValidationError) ErrorName() string {
	return "UpdatePartnerLegacyConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartnerLegacyConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartnerLegacyConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartnerLegacyConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartnerLegacyConfigurationResponseValidationError{}
