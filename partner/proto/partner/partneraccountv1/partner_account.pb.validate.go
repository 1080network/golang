// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: partner/partneraccount/v1/partner_account.proto

package partneraccountv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	accounttypev1 "mica/proto/common/enums/accounttypev1"

	currencyv1 "mica/proto/common/enums/currencyv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = accounttypev1.AccountType(0)

	_ = currencyv1.Currency(0)
)

// Validate checks the field values on PartnerAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartnerAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartnerAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartnerAccountMultiError,
// or nil if none found.
func (m *PartnerAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *PartnerAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAccountKey

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartnerAccountValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartnerAccountValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartnerAccountValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartnerAccountValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartnerAccountValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartnerAccountValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for PartnerKey

	// no validation rules for AccountType

	// no validation rules for Currency

	if len(errors) > 0 {
		return PartnerAccountMultiError(errors)
	}

	return nil
}

// PartnerAccountMultiError is an error wrapping multiple validation errors
// returned by PartnerAccount.ValidateAll() if the designated constraints
// aren't met.
type PartnerAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartnerAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartnerAccountMultiError) AllErrors() []error { return m }

// PartnerAccountValidationError is the validation error returned by
// PartnerAccount.Validate if the designated constraints aren't met.
type PartnerAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartnerAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartnerAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartnerAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartnerAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartnerAccountValidationError) ErrorName() string { return "PartnerAccountValidationError" }

// Error satisfies the builtin error interface
func (e PartnerAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartnerAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartnerAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartnerAccountValidationError{}

// Validate checks the field values on GetPartnerAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartnerAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartnerAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartnerAccountRequestMultiError, or nil if none found.
func (m *GetPartnerAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartnerAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerAccountKey

	if len(errors) > 0 {
		return GetPartnerAccountRequestMultiError(errors)
	}

	return nil
}

// GetPartnerAccountRequestMultiError is an error wrapping multiple validation
// errors returned by GetPartnerAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPartnerAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartnerAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartnerAccountRequestMultiError) AllErrors() []error { return m }

// GetPartnerAccountRequestValidationError is the validation error returned by
// GetPartnerAccountRequest.Validate if the designated constraints aren't met.
type GetPartnerAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartnerAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartnerAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartnerAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartnerAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartnerAccountRequestValidationError) ErrorName() string {
	return "GetPartnerAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartnerAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartnerAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartnerAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartnerAccountRequestValidationError{}

// Validate checks the field values on GetPartnerAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPartnerAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartnerAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartnerAccountResponseMultiError, or nil if none found.
func (m *GetPartnerAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartnerAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartnerAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartnerAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartnerAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartnerAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartnerAccountResponseValidationError{
					field:  "PartnerAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartnerAccountResponseValidationError{
					field:  "PartnerAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartnerAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartnerAccountResponseValidationError{
				field:  "PartnerAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartnerAccountResponseMultiError(errors)
	}

	return nil
}

// GetPartnerAccountResponseMultiError is an error wrapping multiple validation
// errors returned by GetPartnerAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type GetPartnerAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartnerAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartnerAccountResponseMultiError) AllErrors() []error { return m }

// GetPartnerAccountResponseValidationError is the validation error returned by
// GetPartnerAccountResponse.Validate if the designated constraints aren't met.
type GetPartnerAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartnerAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartnerAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartnerAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartnerAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartnerAccountResponseValidationError) ErrorName() string {
	return "GetPartnerAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPartnerAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartnerAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartnerAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartnerAccountResponseValidationError{}

// Validate checks the field values on SearchPartnerAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPartnerAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPartnerAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPartnerAccountRequestMultiError, or nil if none found.
func (m *SearchPartnerAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPartnerAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountType

	// no validation rules for Currency

	if len(errors) > 0 {
		return SearchPartnerAccountRequestMultiError(errors)
	}

	return nil
}

// SearchPartnerAccountRequestMultiError is an error wrapping multiple
// validation errors returned by SearchPartnerAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type SearchPartnerAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPartnerAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPartnerAccountRequestMultiError) AllErrors() []error { return m }

// SearchPartnerAccountRequestValidationError is the validation error returned
// by SearchPartnerAccountRequest.Validate if the designated constraints
// aren't met.
type SearchPartnerAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPartnerAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPartnerAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPartnerAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPartnerAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPartnerAccountRequestValidationError) ErrorName() string {
	return "SearchPartnerAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPartnerAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPartnerAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPartnerAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPartnerAccountRequestValidationError{}

// Validate checks the field values on SearchPartnerAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchPartnerAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchPartnerAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchPartnerAccountResponseMultiError, or nil if none found.
func (m *SearchPartnerAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchPartnerAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchPartnerAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchPartnerAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchPartnerAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPartnerAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchPartnerAccountResponseValidationError{
						field:  fmt.Sprintf("PartnerAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchPartnerAccountResponseValidationError{
						field:  fmt.Sprintf("PartnerAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchPartnerAccountResponseValidationError{
					field:  fmt.Sprintf("PartnerAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchPartnerAccountResponseMultiError(errors)
	}

	return nil
}

// SearchPartnerAccountResponseMultiError is an error wrapping multiple
// validation errors returned by SearchPartnerAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchPartnerAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchPartnerAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchPartnerAccountResponseMultiError) AllErrors() []error { return m }

// SearchPartnerAccountResponseValidationError is the validation error returned
// by SearchPartnerAccountResponse.Validate if the designated constraints
// aren't met.
type SearchPartnerAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchPartnerAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchPartnerAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchPartnerAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchPartnerAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchPartnerAccountResponseValidationError) ErrorName() string {
	return "SearchPartnerAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchPartnerAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchPartnerAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchPartnerAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchPartnerAccountResponseValidationError{}
