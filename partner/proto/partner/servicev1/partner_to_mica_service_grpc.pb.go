// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: partner/service/v1/partner_to_mica_service.proto

package servicev1

import (
	context "context"
	pingv1 "github.com/1080network/golang/partner/proto/common/pingv1"
	instrumentv1 "github.com/1080network/golang/partner/proto/partner/instrumentv1"
	organizationv1 "github.com/1080network/golang/partner/proto/partner/organizationv1"
	partnerv1 "github.com/1080network/golang/partner/proto/partner/partnerv1"
	paymenttokenv1 "github.com/1080network/golang/partner/proto/partner/paymenttokenv1"
	serviceproviderv1 "github.com/1080network/golang/partner/proto/partner/serviceproviderv1"
	storev1 "github.com/1080network/golang/partner/proto/partner/storev1"
	transactionv1 "github.com/1080network/golang/partner/proto/partner/transactionv1"
	valuev1 "github.com/1080network/golang/partner/proto/partner/valuev1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnerToMicaServiceClient is the client API for PartnerToMicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerToMicaServiceClient interface {
	// Retrieves the details of the Partner at mica.
	GetPartner(ctx context.Context, in *partnerv1.GetPartnerRequest, opts ...grpc.CallOption) (*partnerv1.GetPartnerResponse, error)
	// Retrieve an partner's legacy configuration based on it's key.
	GetPartnerLegacyConfiguration(ctx context.Context, in *partnerv1.GetPartnerLegacyConfigurationRequest, opts ...grpc.CallOption) (*partnerv1.GetPartnerLegacyConfigurationResponse, error)
	// Update a given partner's legacy configuration.
	UpdatePartnerLegacyConfiguration(ctx context.Context, in *partnerv1.UpdatePartnerLegacyConfigurationRequest, opts ...grpc.CallOption) (*partnerv1.UpdatePartnerLegacyConfigurationResponse, error)
	// Retrieve an organization based on it's key.
	GetOrganization(ctx context.Context, in *organizationv1.GetOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.GetOrganizationResponse, error)
	// Update a given organization.
	UpdateOrganization(ctx context.Context, in *organizationv1.UpdateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationResponse, error)
	// Like GetOrganization, can be used to retrieve Organizations based on the criteria in the request.
	SearchOrganization(ctx context.Context, in *organizationv1.SearchOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.SearchOrganizationResponse, error)
	// Retrieve an organization's legacy configuration based on it's key.
	GetOrganizationLegacyConfiguration(ctx context.Context, in *organizationv1.GetOrganizationLegacyConfigurationRequest, opts ...grpc.CallOption) (*organizationv1.GetOrganizationLegacyConfigurationResponse, error)
	// Update a given organization's legacy configuration.
	UpdateOrganizationLegacyConfiguration(ctx context.Context, in *organizationv1.UpdateOrganizationLegacyConfigurationRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationLegacyConfigurationResponse, error)
	// Create a store that sits under an Organization.
	CreateStore(ctx context.Context, in *storev1.CreateStoreRequest, opts ...grpc.CallOption) (*storev1.CreateStoreResponse, error)
	// Retrieve a store based on it's key.
	GetStore(ctx context.Context, in *storev1.GetStoreRequest, opts ...grpc.CallOption) (*storev1.GetStoreResponse, error)
	// Update the store number and address of a Store.
	UpdateStore(ctx context.Context, in *storev1.UpdateStoreRequest, opts ...grpc.CallOption) (*storev1.UpdateStoreResponse, error)
	// Remove an existing Store.
	RemoveStore(ctx context.Context, in *storev1.RemoveStoreRequest, opts ...grpc.CallOption) (*storev1.RemoveStoreResponse, error)
	// Like GetStore, can be used to retrieve Stores based on the criteria in the request.
	SearchStore(ctx context.Context, in *storev1.SearchStoreRequest, opts ...grpc.CallOption) (*storev1.SearchStoreResponse, error)
	// Used to retrieve SPs based on the criteria in the request.
	SearchServiceProvider(ctx context.Context, in *serviceproviderv1.SearchServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.SearchServiceProviderResponse, error)
	// When a user no longer wishes to use their payment tokens this operation can remove them from mica.
	ClosePaymentToken(ctx context.Context, in *paymenttokenv1.RemovePaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemovePaymentTokenResponse, error)
	// A Partner can proactively replace a payment token with a new one for future use.
	ReplacePaymentToken(ctx context.Context, in *paymenttokenv1.ExchangePaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ExchangePaymentTokenResponse, error)
	// Search for Payment Tokens that the Partner has created.
	SearchPaymentToken(ctx context.Context, in *paymenttokenv1.SearchPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchPaymentTokenResponse, error)
	// An operation to obtain value from a user in order to pay for goods or services rendered to the user.
	ObtainValue(ctx context.Context, in *valuev1.ObtainValueRequest, opts ...grpc.CallOption) (*valuev1.ObtainValueResponse, error)
	// An operation to return value to a user in order to refund them for goods or services.
	ReturnValue(ctx context.Context, in *valuev1.ReturnValueRequest, opts ...grpc.CallOption) (*valuev1.ReturnValueResponse, error)
	// An operation to search for Value operations either Obtain or Return that the Partner has requested of mica.
	SearchValue(ctx context.Context, in *valuev1.SearchValueRequest, opts ...grpc.CallOption) (*valuev1.SearchValueResponse, error)
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error)
	InitializeWidget(ctx context.Context, in *instrumentv1.InitializeWidgetRequest, opts ...grpc.CallOption) (*instrumentv1.InitializeWidgetResponse, error)
	ExchangeSessionKey(ctx context.Context, in *instrumentv1.ExchangeSessionKeyRequest, opts ...grpc.CallOption) (*instrumentv1.ExchangeSessionKeyResponse, error)
	SearchTransactionData(ctx context.Context, in *transactionv1.SearchTransactionDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionDataResponse, error)
	SearchTransactionGeographyData(ctx context.Context, in *transactionv1.SearchTransactionGeographyDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionGeographyDataResponse, error)
	SearchTransactionServiceProviderData(ctx context.Context, in *transactionv1.SearchTransactionServiceProviderDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionServiceProviderDataResponse, error)
}

type partnerToMicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerToMicaServiceClient(cc grpc.ClientConnInterface) PartnerToMicaServiceClient {
	return &partnerToMicaServiceClient{cc}
}

func (c *partnerToMicaServiceClient) GetPartner(ctx context.Context, in *partnerv1.GetPartnerRequest, opts ...grpc.CallOption) (*partnerv1.GetPartnerResponse, error) {
	out := new(partnerv1.GetPartnerResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetPartnerLegacyConfiguration(ctx context.Context, in *partnerv1.GetPartnerLegacyConfigurationRequest, opts ...grpc.CallOption) (*partnerv1.GetPartnerLegacyConfigurationResponse, error) {
	out := new(partnerv1.GetPartnerLegacyConfigurationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetPartnerLegacyConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdatePartnerLegacyConfiguration(ctx context.Context, in *partnerv1.UpdatePartnerLegacyConfigurationRequest, opts ...grpc.CallOption) (*partnerv1.UpdatePartnerLegacyConfigurationResponse, error) {
	out := new(partnerv1.UpdatePartnerLegacyConfigurationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/UpdatePartnerLegacyConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetOrganization(ctx context.Context, in *organizationv1.GetOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.GetOrganizationResponse, error) {
	out := new(organizationv1.GetOrganizationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateOrganization(ctx context.Context, in *organizationv1.UpdateOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationResponse, error) {
	out := new(organizationv1.UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchOrganization(ctx context.Context, in *organizationv1.SearchOrganizationRequest, opts ...grpc.CallOption) (*organizationv1.SearchOrganizationResponse, error) {
	out := new(organizationv1.SearchOrganizationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetOrganizationLegacyConfiguration(ctx context.Context, in *organizationv1.GetOrganizationLegacyConfigurationRequest, opts ...grpc.CallOption) (*organizationv1.GetOrganizationLegacyConfigurationResponse, error) {
	out := new(organizationv1.GetOrganizationLegacyConfigurationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetOrganizationLegacyConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateOrganizationLegacyConfiguration(ctx context.Context, in *organizationv1.UpdateOrganizationLegacyConfigurationRequest, opts ...grpc.CallOption) (*organizationv1.UpdateOrganizationLegacyConfigurationResponse, error) {
	out := new(organizationv1.UpdateOrganizationLegacyConfigurationResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/UpdateOrganizationLegacyConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) CreateStore(ctx context.Context, in *storev1.CreateStoreRequest, opts ...grpc.CallOption) (*storev1.CreateStoreResponse, error) {
	out := new(storev1.CreateStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/CreateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) GetStore(ctx context.Context, in *storev1.GetStoreRequest, opts ...grpc.CallOption) (*storev1.GetStoreResponse, error) {
	out := new(storev1.GetStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) UpdateStore(ctx context.Context, in *storev1.UpdateStoreRequest, opts ...grpc.CallOption) (*storev1.UpdateStoreResponse, error) {
	out := new(storev1.UpdateStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/UpdateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) RemoveStore(ctx context.Context, in *storev1.RemoveStoreRequest, opts ...grpc.CallOption) (*storev1.RemoveStoreResponse, error) {
	out := new(storev1.RemoveStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/RemoveStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchStore(ctx context.Context, in *storev1.SearchStoreRequest, opts ...grpc.CallOption) (*storev1.SearchStoreResponse, error) {
	out := new(storev1.SearchStoreResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchServiceProvider(ctx context.Context, in *serviceproviderv1.SearchServiceProviderRequest, opts ...grpc.CallOption) (*serviceproviderv1.SearchServiceProviderResponse, error) {
	out := new(serviceproviderv1.SearchServiceProviderResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchServiceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ClosePaymentToken(ctx context.Context, in *paymenttokenv1.RemovePaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.RemovePaymentTokenResponse, error) {
	out := new(paymenttokenv1.RemovePaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ClosePaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ReplacePaymentToken(ctx context.Context, in *paymenttokenv1.ExchangePaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.ExchangePaymentTokenResponse, error) {
	out := new(paymenttokenv1.ExchangePaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ReplacePaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchPaymentToken(ctx context.Context, in *paymenttokenv1.SearchPaymentTokenRequest, opts ...grpc.CallOption) (*paymenttokenv1.SearchPaymentTokenResponse, error) {
	out := new(paymenttokenv1.SearchPaymentTokenResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchPaymentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ObtainValue(ctx context.Context, in *valuev1.ObtainValueRequest, opts ...grpc.CallOption) (*valuev1.ObtainValueResponse, error) {
	out := new(valuev1.ObtainValueResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ObtainValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ReturnValue(ctx context.Context, in *valuev1.ReturnValueRequest, opts ...grpc.CallOption) (*valuev1.ReturnValueResponse, error) {
	out := new(valuev1.ReturnValueResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ReturnValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchValue(ctx context.Context, in *valuev1.SearchValueRequest, opts ...grpc.CallOption) (*valuev1.SearchValueResponse, error) {
	out := new(valuev1.SearchValueResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) Ping(ctx context.Context, in *pingv1.PingRequest, opts ...grpc.CallOption) (*pingv1.PingResponse, error) {
	out := new(pingv1.PingResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) InitializeWidget(ctx context.Context, in *instrumentv1.InitializeWidgetRequest, opts ...grpc.CallOption) (*instrumentv1.InitializeWidgetResponse, error) {
	out := new(instrumentv1.InitializeWidgetResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/InitializeWidget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) ExchangeSessionKey(ctx context.Context, in *instrumentv1.ExchangeSessionKeyRequest, opts ...grpc.CallOption) (*instrumentv1.ExchangeSessionKeyResponse, error) {
	out := new(instrumentv1.ExchangeSessionKeyResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/ExchangeSessionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchTransactionData(ctx context.Context, in *transactionv1.SearchTransactionDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionDataResponse, error) {
	out := new(transactionv1.SearchTransactionDataResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchTransactionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchTransactionGeographyData(ctx context.Context, in *transactionv1.SearchTransactionGeographyDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionGeographyDataResponse, error) {
	out := new(transactionv1.SearchTransactionGeographyDataResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchTransactionGeographyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerToMicaServiceClient) SearchTransactionServiceProviderData(ctx context.Context, in *transactionv1.SearchTransactionServiceProviderDataRequest, opts ...grpc.CallOption) (*transactionv1.SearchTransactionServiceProviderDataResponse, error) {
	out := new(transactionv1.SearchTransactionServiceProviderDataResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerToMicaService/SearchTransactionServiceProviderData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerToMicaServiceServer is the server API for PartnerToMicaService service.
// All implementations must embed UnimplementedPartnerToMicaServiceServer
// for forward compatibility
type PartnerToMicaServiceServer interface {
	// Retrieves the details of the Partner at mica.
	GetPartner(context.Context, *partnerv1.GetPartnerRequest) (*partnerv1.GetPartnerResponse, error)
	// Retrieve an partner's legacy configuration based on it's key.
	GetPartnerLegacyConfiguration(context.Context, *partnerv1.GetPartnerLegacyConfigurationRequest) (*partnerv1.GetPartnerLegacyConfigurationResponse, error)
	// Update a given partner's legacy configuration.
	UpdatePartnerLegacyConfiguration(context.Context, *partnerv1.UpdatePartnerLegacyConfigurationRequest) (*partnerv1.UpdatePartnerLegacyConfigurationResponse, error)
	// Retrieve an organization based on it's key.
	GetOrganization(context.Context, *organizationv1.GetOrganizationRequest) (*organizationv1.GetOrganizationResponse, error)
	// Update a given organization.
	UpdateOrganization(context.Context, *organizationv1.UpdateOrganizationRequest) (*organizationv1.UpdateOrganizationResponse, error)
	// Like GetOrganization, can be used to retrieve Organizations based on the criteria in the request.
	SearchOrganization(context.Context, *organizationv1.SearchOrganizationRequest) (*organizationv1.SearchOrganizationResponse, error)
	// Retrieve an organization's legacy configuration based on it's key.
	GetOrganizationLegacyConfiguration(context.Context, *organizationv1.GetOrganizationLegacyConfigurationRequest) (*organizationv1.GetOrganizationLegacyConfigurationResponse, error)
	// Update a given organization's legacy configuration.
	UpdateOrganizationLegacyConfiguration(context.Context, *organizationv1.UpdateOrganizationLegacyConfigurationRequest) (*organizationv1.UpdateOrganizationLegacyConfigurationResponse, error)
	// Create a store that sits under an Organization.
	CreateStore(context.Context, *storev1.CreateStoreRequest) (*storev1.CreateStoreResponse, error)
	// Retrieve a store based on it's key.
	GetStore(context.Context, *storev1.GetStoreRequest) (*storev1.GetStoreResponse, error)
	// Update the store number and address of a Store.
	UpdateStore(context.Context, *storev1.UpdateStoreRequest) (*storev1.UpdateStoreResponse, error)
	// Remove an existing Store.
	RemoveStore(context.Context, *storev1.RemoveStoreRequest) (*storev1.RemoveStoreResponse, error)
	// Like GetStore, can be used to retrieve Stores based on the criteria in the request.
	SearchStore(context.Context, *storev1.SearchStoreRequest) (*storev1.SearchStoreResponse, error)
	// Used to retrieve SPs based on the criteria in the request.
	SearchServiceProvider(context.Context, *serviceproviderv1.SearchServiceProviderRequest) (*serviceproviderv1.SearchServiceProviderResponse, error)
	// When a user no longer wishes to use their payment tokens this operation can remove them from mica.
	ClosePaymentToken(context.Context, *paymenttokenv1.RemovePaymentTokenRequest) (*paymenttokenv1.RemovePaymentTokenResponse, error)
	// A Partner can proactively replace a payment token with a new one for future use.
	ReplacePaymentToken(context.Context, *paymenttokenv1.ExchangePaymentTokenRequest) (*paymenttokenv1.ExchangePaymentTokenResponse, error)
	// Search for Payment Tokens that the Partner has created.
	SearchPaymentToken(context.Context, *paymenttokenv1.SearchPaymentTokenRequest) (*paymenttokenv1.SearchPaymentTokenResponse, error)
	// An operation to obtain value from a user in order to pay for goods or services rendered to the user.
	ObtainValue(context.Context, *valuev1.ObtainValueRequest) (*valuev1.ObtainValueResponse, error)
	// An operation to return value to a user in order to refund them for goods or services.
	ReturnValue(context.Context, *valuev1.ReturnValueRequest) (*valuev1.ReturnValueResponse, error)
	// An operation to search for Value operations either Obtain or Return that the Partner has requested of mica.
	SearchValue(context.Context, *valuev1.SearchValueRequest) (*valuev1.SearchValueResponse, error)
	// An operation to ping the server to ensure it's up and running and that the connection is good.
	Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error)
	InitializeWidget(context.Context, *instrumentv1.InitializeWidgetRequest) (*instrumentv1.InitializeWidgetResponse, error)
	ExchangeSessionKey(context.Context, *instrumentv1.ExchangeSessionKeyRequest) (*instrumentv1.ExchangeSessionKeyResponse, error)
	SearchTransactionData(context.Context, *transactionv1.SearchTransactionDataRequest) (*transactionv1.SearchTransactionDataResponse, error)
	SearchTransactionGeographyData(context.Context, *transactionv1.SearchTransactionGeographyDataRequest) (*transactionv1.SearchTransactionGeographyDataResponse, error)
	SearchTransactionServiceProviderData(context.Context, *transactionv1.SearchTransactionServiceProviderDataRequest) (*transactionv1.SearchTransactionServiceProviderDataResponse, error)
	mustEmbedUnimplementedPartnerToMicaServiceServer()
}

// UnimplementedPartnerToMicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerToMicaServiceServer struct {
}

func (UnimplementedPartnerToMicaServiceServer) GetPartner(context.Context, *partnerv1.GetPartnerRequest) (*partnerv1.GetPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartner not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetPartnerLegacyConfiguration(context.Context, *partnerv1.GetPartnerLegacyConfigurationRequest) (*partnerv1.GetPartnerLegacyConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerLegacyConfiguration not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdatePartnerLegacyConfiguration(context.Context, *partnerv1.UpdatePartnerLegacyConfigurationRequest) (*partnerv1.UpdatePartnerLegacyConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnerLegacyConfiguration not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetOrganization(context.Context, *organizationv1.GetOrganizationRequest) (*organizationv1.GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateOrganization(context.Context, *organizationv1.UpdateOrganizationRequest) (*organizationv1.UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchOrganization(context.Context, *organizationv1.SearchOrganizationRequest) (*organizationv1.SearchOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrganization not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetOrganizationLegacyConfiguration(context.Context, *organizationv1.GetOrganizationLegacyConfigurationRequest) (*organizationv1.GetOrganizationLegacyConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationLegacyConfiguration not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateOrganizationLegacyConfiguration(context.Context, *organizationv1.UpdateOrganizationLegacyConfigurationRequest) (*organizationv1.UpdateOrganizationLegacyConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationLegacyConfiguration not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) CreateStore(context.Context, *storev1.CreateStoreRequest) (*storev1.CreateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) GetStore(context.Context, *storev1.GetStoreRequest) (*storev1.GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) UpdateStore(context.Context, *storev1.UpdateStoreRequest) (*storev1.UpdateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) RemoveStore(context.Context, *storev1.RemoveStoreRequest) (*storev1.RemoveStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchStore(context.Context, *storev1.SearchStoreRequest) (*storev1.SearchStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStore not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchServiceProvider(context.Context, *serviceproviderv1.SearchServiceProviderRequest) (*serviceproviderv1.SearchServiceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServiceProvider not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ClosePaymentToken(context.Context, *paymenttokenv1.RemovePaymentTokenRequest) (*paymenttokenv1.RemovePaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePaymentToken not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ReplacePaymentToken(context.Context, *paymenttokenv1.ExchangePaymentTokenRequest) (*paymenttokenv1.ExchangePaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplacePaymentToken not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchPaymentToken(context.Context, *paymenttokenv1.SearchPaymentTokenRequest) (*paymenttokenv1.SearchPaymentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPaymentToken not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ObtainValue(context.Context, *valuev1.ObtainValueRequest) (*valuev1.ObtainValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtainValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ReturnValue(context.Context, *valuev1.ReturnValueRequest) (*valuev1.ReturnValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchValue(context.Context, *valuev1.SearchValueRequest) (*valuev1.SearchValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchValue not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) Ping(context.Context, *pingv1.PingRequest) (*pingv1.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) InitializeWidget(context.Context, *instrumentv1.InitializeWidgetRequest) (*instrumentv1.InitializeWidgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeWidget not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) ExchangeSessionKey(context.Context, *instrumentv1.ExchangeSessionKeyRequest) (*instrumentv1.ExchangeSessionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeSessionKey not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchTransactionData(context.Context, *transactionv1.SearchTransactionDataRequest) (*transactionv1.SearchTransactionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransactionData not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchTransactionGeographyData(context.Context, *transactionv1.SearchTransactionGeographyDataRequest) (*transactionv1.SearchTransactionGeographyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransactionGeographyData not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) SearchTransactionServiceProviderData(context.Context, *transactionv1.SearchTransactionServiceProviderDataRequest) (*transactionv1.SearchTransactionServiceProviderDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransactionServiceProviderData not implemented")
}
func (UnimplementedPartnerToMicaServiceServer) mustEmbedUnimplementedPartnerToMicaServiceServer() {}

// UnsafePartnerToMicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerToMicaServiceServer will
// result in compilation errors.
type UnsafePartnerToMicaServiceServer interface {
	mustEmbedUnimplementedPartnerToMicaServiceServer()
}

func RegisterPartnerToMicaServiceServer(s grpc.ServiceRegistrar, srv PartnerToMicaServiceServer) {
	s.RegisterService(&PartnerToMicaService_ServiceDesc, srv)
}

func _PartnerToMicaService_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(partnerv1.GetPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetPartner(ctx, req.(*partnerv1.GetPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetPartnerLegacyConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(partnerv1.GetPartnerLegacyConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetPartnerLegacyConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetPartnerLegacyConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetPartnerLegacyConfiguration(ctx, req.(*partnerv1.GetPartnerLegacyConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdatePartnerLegacyConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(partnerv1.UpdatePartnerLegacyConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdatePartnerLegacyConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/UpdatePartnerLegacyConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdatePartnerLegacyConfiguration(ctx, req.(*partnerv1.UpdatePartnerLegacyConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetOrganization(ctx, req.(*organizationv1.GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateOrganization(ctx, req.(*organizationv1.UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.SearchOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchOrganization(ctx, req.(*organizationv1.SearchOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetOrganizationLegacyConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.GetOrganizationLegacyConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetOrganizationLegacyConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetOrganizationLegacyConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetOrganizationLegacyConfiguration(ctx, req.(*organizationv1.GetOrganizationLegacyConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateOrganizationLegacyConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(organizationv1.UpdateOrganizationLegacyConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateOrganizationLegacyConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/UpdateOrganizationLegacyConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateOrganizationLegacyConfiguration(ctx, req.(*organizationv1.UpdateOrganizationLegacyConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/CreateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).CreateStore(ctx, req.(*storev1.CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).GetStore(ctx, req.(*storev1.GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/UpdateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).UpdateStore(ctx, req.(*storev1.UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_RemoveStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.RemoveStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).RemoveStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/RemoveStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).RemoveStore(ctx, req.(*storev1.RemoveStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storev1.SearchStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchStore(ctx, req.(*storev1.SearchStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchServiceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serviceproviderv1.SearchServiceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchServiceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchServiceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchServiceProvider(ctx, req.(*serviceproviderv1.SearchServiceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ClosePaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.RemovePaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ClosePaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ClosePaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ClosePaymentToken(ctx, req.(*paymenttokenv1.RemovePaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ReplacePaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.ExchangePaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ReplacePaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ReplacePaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ReplacePaymentToken(ctx, req.(*paymenttokenv1.ExchangePaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchPaymentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(paymenttokenv1.SearchPaymentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchPaymentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchPaymentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchPaymentToken(ctx, req.(*paymenttokenv1.SearchPaymentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ObtainValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ObtainValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ObtainValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ObtainValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ObtainValue(ctx, req.(*valuev1.ObtainValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ReturnValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.ReturnValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ReturnValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ReturnValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ReturnValue(ctx, req.(*valuev1.ReturnValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(valuev1.SearchValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchValue(ctx, req.(*valuev1.SearchValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pingv1.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).Ping(ctx, req.(*pingv1.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_InitializeWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.InitializeWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).InitializeWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/InitializeWidget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).InitializeWidget(ctx, req.(*instrumentv1.InitializeWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_ExchangeSessionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(instrumentv1.ExchangeSessionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).ExchangeSessionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/ExchangeSessionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).ExchangeSessionKey(ctx, req.(*instrumentv1.ExchangeSessionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchTransactionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transactionv1.SearchTransactionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchTransactionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchTransactionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchTransactionData(ctx, req.(*transactionv1.SearchTransactionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchTransactionGeographyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transactionv1.SearchTransactionGeographyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchTransactionGeographyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchTransactionGeographyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchTransactionGeographyData(ctx, req.(*transactionv1.SearchTransactionGeographyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerToMicaService_SearchTransactionServiceProviderData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transactionv1.SearchTransactionServiceProviderDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerToMicaServiceServer).SearchTransactionServiceProviderData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerToMicaService/SearchTransactionServiceProviderData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerToMicaServiceServer).SearchTransactionServiceProviderData(ctx, req.(*transactionv1.SearchTransactionServiceProviderDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerToMicaService_ServiceDesc is the grpc.ServiceDesc for PartnerToMicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerToMicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partner.service.v1.PartnerToMicaService",
	HandlerType: (*PartnerToMicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartner",
			Handler:    _PartnerToMicaService_GetPartner_Handler,
		},
		{
			MethodName: "GetPartnerLegacyConfiguration",
			Handler:    _PartnerToMicaService_GetPartnerLegacyConfiguration_Handler,
		},
		{
			MethodName: "UpdatePartnerLegacyConfiguration",
			Handler:    _PartnerToMicaService_UpdatePartnerLegacyConfiguration_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _PartnerToMicaService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _PartnerToMicaService_UpdateOrganization_Handler,
		},
		{
			MethodName: "SearchOrganization",
			Handler:    _PartnerToMicaService_SearchOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationLegacyConfiguration",
			Handler:    _PartnerToMicaService_GetOrganizationLegacyConfiguration_Handler,
		},
		{
			MethodName: "UpdateOrganizationLegacyConfiguration",
			Handler:    _PartnerToMicaService_UpdateOrganizationLegacyConfiguration_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _PartnerToMicaService_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _PartnerToMicaService_GetStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _PartnerToMicaService_UpdateStore_Handler,
		},
		{
			MethodName: "RemoveStore",
			Handler:    _PartnerToMicaService_RemoveStore_Handler,
		},
		{
			MethodName: "SearchStore",
			Handler:    _PartnerToMicaService_SearchStore_Handler,
		},
		{
			MethodName: "SearchServiceProvider",
			Handler:    _PartnerToMicaService_SearchServiceProvider_Handler,
		},
		{
			MethodName: "ClosePaymentToken",
			Handler:    _PartnerToMicaService_ClosePaymentToken_Handler,
		},
		{
			MethodName: "ReplacePaymentToken",
			Handler:    _PartnerToMicaService_ReplacePaymentToken_Handler,
		},
		{
			MethodName: "SearchPaymentToken",
			Handler:    _PartnerToMicaService_SearchPaymentToken_Handler,
		},
		{
			MethodName: "ObtainValue",
			Handler:    _PartnerToMicaService_ObtainValue_Handler,
		},
		{
			MethodName: "ReturnValue",
			Handler:    _PartnerToMicaService_ReturnValue_Handler,
		},
		{
			MethodName: "SearchValue",
			Handler:    _PartnerToMicaService_SearchValue_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _PartnerToMicaService_Ping_Handler,
		},
		{
			MethodName: "InitializeWidget",
			Handler:    _PartnerToMicaService_InitializeWidget_Handler,
		},
		{
			MethodName: "ExchangeSessionKey",
			Handler:    _PartnerToMicaService_ExchangeSessionKey_Handler,
		},
		{
			MethodName: "SearchTransactionData",
			Handler:    _PartnerToMicaService_SearchTransactionData_Handler,
		},
		{
			MethodName: "SearchTransactionGeographyData",
			Handler:    _PartnerToMicaService_SearchTransactionGeographyData_Handler,
		},
		{
			MethodName: "SearchTransactionServiceProviderData",
			Handler:    _PartnerToMicaService_SearchTransactionServiceProviderData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "partner/service/v1/partner_to_mica_service.proto",
}
