// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: partner/organization/v1/organization.proto

package organizationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	organizationcategoryv1 "mica/proto/common/enums/organizationcategoryv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = organizationcategoryv1.OrganizationCategory(0)
)

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOrganizationKey()); l < 30 || l > 50 {
		err := GetOrganizationRequestValidationError{
			field:  "OrganizationKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on GetOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationResponseMultiError, or nil if none found.
func (m *GetOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationResponseValidationError is the validation error returned by
// GetOrganizationResponse.Validate if the designated constraints aren't met.
type GetOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationResponseValidationError) ErrorName() string {
	return "GetOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOrganizationKey()); l < 30 || l > 50 {
		err := UpdateOrganizationRequestValidationError{
			field:  "OrganizationKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_UpdateOrganizationRequest_DomesticAchRoutingNumber_Pattern.MatchString(m.GetDomesticAchRoutingNumber()) {
		err := UpdateOrganizationRequestValidationError{
			field:  "DomesticAchRoutingNumber",
			reason: "value does not match regex pattern \"^|\\\\w{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOrganizationRequest_InternationalAchRoutingNumber_Pattern.MatchString(m.GetInternationalAchRoutingNumber()) {
		err := UpdateOrganizationRequestValidationError{
			field:  "InternationalAchRoutingNumber",
			reason: "value does not match regex pattern \"^|\\\\w{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOrganizationRequest_WireRoutingNumber_Pattern.MatchString(m.GetWireRoutingNumber()) {
		err := UpdateOrganizationRequestValidationError{
			field:  "WireRoutingNumber",
			reason: "value does not match regex pattern \"^|\\\\w{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOrganizationRequest_SwiftRoutingNumber_Pattern.MatchString(m.GetSwiftRoutingNumber()) {
		err := UpdateOrganizationRequestValidationError{
			field:  "SwiftRoutingNumber",
			reason: "value does not match regex pattern \"^|\\\\w{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateOrganizationRequest_BankAccountNumber_Pattern.MatchString(m.GetBankAccountNumber()) {
		err := UpdateOrganizationRequestValidationError{
			field:  "BankAccountNumber",
			reason: "value does not match regex pattern \"^|\\\\w{14}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

var _UpdateOrganizationRequest_DomesticAchRoutingNumber_Pattern = regexp.MustCompile("^|\\w{9}$")

var _UpdateOrganizationRequest_InternationalAchRoutingNumber_Pattern = regexp.MustCompile("^|\\w{9}$")

var _UpdateOrganizationRequest_WireRoutingNumber_Pattern = regexp.MustCompile("^|\\w{9}$")

var _UpdateOrganizationRequest_SwiftRoutingNumber_Pattern = regexp.MustCompile("^|\\w{9}$")

var _UpdateOrganizationRequest_BankAccountNumber_Pattern = regexp.MustCompile("^|\\w{14}$")

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on SearchOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchOrganizationRequestMultiError, or nil if none found.
func (m *SearchOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Category

	if len(errors) > 0 {
		return SearchOrganizationRequestMultiError(errors)
	}

	return nil
}

// SearchOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by SearchOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type SearchOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationRequestMultiError) AllErrors() []error { return m }

// SearchOrganizationRequestValidationError is the validation error returned by
// SearchOrganizationRequest.Validate if the designated constraints aren't met.
type SearchOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationRequestValidationError) ErrorName() string {
	return "SearchOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationRequestValidationError{}

// Validate checks the field values on SearchOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchOrganizationResponseMultiError, or nil if none found.
func (m *SearchOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchOrganizationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchOrganizationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchOrganizationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchOrganizationResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchOrganizationResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchOrganizationResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchOrganizationResponseMultiError(errors)
	}

	return nil
}

// SearchOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by SearchOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationResponseMultiError) AllErrors() []error { return m }

// SearchOrganizationResponseValidationError is the validation error returned
// by SearchOrganizationResponse.Validate if the designated constraints aren't met.
type SearchOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationResponseValidationError) ErrorName() string {
	return "SearchOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationResponseValidationError{}

// Validate checks the field values on
// GetOrganizationLegacyConfigurationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationLegacyConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOrganizationLegacyConfigurationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOrganizationLegacyConfigurationRequestMultiError, or nil if none found.
func (m *GetOrganizationLegacyConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationLegacyConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOrganizationKey()); l < 30 || l > 50 {
		err := GetOrganizationLegacyConfigurationRequestValidationError{
			field:  "OrganizationKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationLegacyConfigurationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationLegacyConfigurationRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationLegacyConfigurationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationLegacyConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationLegacyConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationLegacyConfigurationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationLegacyConfigurationRequestValidationError is the validation
// error returned by GetOrganizationLegacyConfigurationRequest.Validate if the
// designated constraints aren't met.
type GetOrganizationLegacyConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationLegacyConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationLegacyConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationLegacyConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationLegacyConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationLegacyConfigurationRequestValidationError) ErrorName() string {
	return "GetOrganizationLegacyConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationLegacyConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationLegacyConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationLegacyConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationLegacyConfigurationRequestValidationError{}

// Validate checks the field values on
// GetOrganizationLegacyConfigurationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationLegacyConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOrganizationLegacyConfigurationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOrganizationLegacyConfigurationResponseMultiError, or nil if none found.
func (m *GetOrganizationLegacyConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationLegacyConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationLegacyConfigurationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationLegacyConfigurationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationLegacyConfigurationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPartnerLegacyConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationLegacyConfigurationResponseValidationError{
					field:  "PartnerLegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationLegacyConfigurationResponseValidationError{
					field:  "PartnerLegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartnerLegacyConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationLegacyConfigurationResponseValidationError{
				field:  "PartnerLegacyConfiguration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrganizationLegacyConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationLegacyConfigurationResponseValidationError{
					field:  "OrganizationLegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationLegacyConfigurationResponseValidationError{
					field:  "OrganizationLegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationLegacyConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationLegacyConfigurationResponseValidationError{
				field:  "OrganizationLegacyConfiguration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationLegacyConfigurationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationLegacyConfigurationResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationLegacyConfigurationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationLegacyConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationLegacyConfigurationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationLegacyConfigurationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationLegacyConfigurationResponseValidationError is the validation
// error returned by GetOrganizationLegacyConfigurationResponse.Validate if
// the designated constraints aren't met.
type GetOrganizationLegacyConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationLegacyConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationLegacyConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationLegacyConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationLegacyConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationLegacyConfigurationResponseValidationError) ErrorName() string {
	return "GetOrganizationLegacyConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationLegacyConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationLegacyConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationLegacyConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationLegacyConfigurationResponseValidationError{}

// Validate checks the field values on
// UpdateOrganizationLegacyConfigurationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationLegacyConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateOrganizationLegacyConfigurationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateOrganizationLegacyConfigurationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationLegacyConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationLegacyConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOrganizationKey()); l < 30 || l > 50 {
		err := UpdateOrganizationLegacyConfigurationRequestValidationError{
			field:  "OrganizationKey",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLegacyConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationLegacyConfigurationRequestValidationError{
					field:  "LegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationLegacyConfigurationRequestValidationError{
					field:  "LegacyConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLegacyConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationLegacyConfigurationRequestValidationError{
				field:  "LegacyConfiguration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdateOrganizationLegacyConfigurationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationLegacyConfigurationRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateOrganizationLegacyConfigurationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationLegacyConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationLegacyConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationLegacyConfigurationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationLegacyConfigurationRequestValidationError is the
// validation error returned by
// UpdateOrganizationLegacyConfigurationRequest.Validate if the designated
// constraints aren't met.
type UpdateOrganizationLegacyConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationLegacyConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationLegacyConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationLegacyConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationLegacyConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationLegacyConfigurationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationLegacyConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationLegacyConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationLegacyConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationLegacyConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationLegacyConfigurationRequestValidationError{}

// Validate checks the field values on
// UpdateOrganizationLegacyConfigurationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationLegacyConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateOrganizationLegacyConfigurationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateOrganizationLegacyConfigurationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationLegacyConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationLegacyConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationLegacyConfigurationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationLegacyConfigurationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationLegacyConfigurationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdateOrganizationLegacyConfigurationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationLegacyConfigurationResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateOrganizationLegacyConfigurationResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationLegacyConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationLegacyConfigurationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationLegacyConfigurationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationLegacyConfigurationResponseValidationError is the
// validation error returned by
// UpdateOrganizationLegacyConfigurationResponse.Validate if the designated
// constraints aren't met.
type UpdateOrganizationLegacyConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationLegacyConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationLegacyConfigurationResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateOrganizationLegacyConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationLegacyConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationLegacyConfigurationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationLegacyConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationLegacyConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationLegacyConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationLegacyConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationLegacyConfigurationResponseValidationError{}
