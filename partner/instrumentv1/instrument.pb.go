// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: partner/instrument/v1/instrument.proto

package instrumentv1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	v1 "ten80/proto/common/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RegisterInstrumentInitiateResponse_Status int32

const (
	RegisterInstrumentInitiateResponse_STATUS_UNSPECIFIED RegisterInstrumentInitiateResponse_Status = 0
	RegisterInstrumentInitiateResponse_STATUS_SUCCESS     RegisterInstrumentInitiateResponse_Status = 1
	// generic error that's not one of the following
	RegisterInstrumentInitiateResponse_STATUS_ERROR RegisterInstrumentInitiateResponse_Status = 2
	// The FI that holds this instrument is temporarily unavailable
	RegisterInstrumentInitiateResponse_STATUS_FI_UNAVAILABLE RegisterInstrumentInitiateResponse_Status = 3
	// this is the second attempt to register this instrument
	RegisterInstrumentInitiateResponse_STATUS_DUPLICATE RegisterInstrumentInitiateResponse_Status = 4
	// the FI the user selected doesn't exist
	RegisterInstrumentInitiateResponse_STATUS_FI_NOT_FOUND RegisterInstrumentInitiateResponse_Status = 5
	// the instrument was not found
	RegisterInstrumentInitiateResponse_STATUS_NOT_FOUND RegisterInstrumentInitiateResponse_Status = 6
	// the instrument was closed at the FI
	RegisterInstrumentInitiateResponse_STATUS_CLOSED RegisterInstrumentInitiateResponse_Status = 7
	// the instrument is in a temporary FI risk/fraud state
	RegisterInstrumentInitiateResponse_STATUS_RISK_FRAUD RegisterInstrumentInitiateResponse_Status = 8
)

// Enum value maps for RegisterInstrumentInitiateResponse_Status.
var (
	RegisterInstrumentInitiateResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_FI_UNAVAILABLE",
		4: "STATUS_DUPLICATE",
		5: "STATUS_FI_NOT_FOUND",
		6: "STATUS_NOT_FOUND",
		7: "STATUS_CLOSED",
		8: "STATUS_RISK_FRAUD",
	}
	RegisterInstrumentInitiateResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_SUCCESS":        1,
		"STATUS_ERROR":          2,
		"STATUS_FI_UNAVAILABLE": 3,
		"STATUS_DUPLICATE":      4,
		"STATUS_FI_NOT_FOUND":   5,
		"STATUS_NOT_FOUND":      6,
		"STATUS_CLOSED":         7,
		"STATUS_RISK_FRAUD":     8,
	}
)

func (x RegisterInstrumentInitiateResponse_Status) Enum() *RegisterInstrumentInitiateResponse_Status {
	p := new(RegisterInstrumentInitiateResponse_Status)
	*p = x
	return p
}

func (x RegisterInstrumentInitiateResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterInstrumentInitiateResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_partner_instrument_v1_instrument_proto_enumTypes[0].Descriptor()
}

func (RegisterInstrumentInitiateResponse_Status) Type() protoreflect.EnumType {
	return &file_partner_instrument_v1_instrument_proto_enumTypes[0]
}

func (x RegisterInstrumentInitiateResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterInstrumentInitiateResponse_Status.Descriptor instead.
func (RegisterInstrumentInitiateResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{1, 0}
}

type RegisterInstrumentCompleteResponse_Status int32

const (
	RegisterInstrumentCompleteResponse_STATUS_UNSPECIFIED            RegisterInstrumentCompleteResponse_Status = 0
	RegisterInstrumentCompleteResponse_STATUS_SUCCESS                RegisterInstrumentCompleteResponse_Status = 1
	RegisterInstrumentCompleteResponse_STATUS_ERROR                  RegisterInstrumentCompleteResponse_Status = 2
	RegisterInstrumentCompleteResponse_STATUS_MATCHING_CODE_MISMATCH RegisterInstrumentCompleteResponse_Status = 3
)

// Enum value maps for RegisterInstrumentCompleteResponse_Status.
var (
	RegisterInstrumentCompleteResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
		3: "STATUS_MATCHING_CODE_MISMATCH",
	}
	RegisterInstrumentCompleteResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":            0,
		"STATUS_SUCCESS":                1,
		"STATUS_ERROR":                  2,
		"STATUS_MATCHING_CODE_MISMATCH": 3,
	}
)

func (x RegisterInstrumentCompleteResponse_Status) Enum() *RegisterInstrumentCompleteResponse_Status {
	p := new(RegisterInstrumentCompleteResponse_Status)
	*p = x
	return p
}

func (x RegisterInstrumentCompleteResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterInstrumentCompleteResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_partner_instrument_v1_instrument_proto_enumTypes[1].Descriptor()
}

func (RegisterInstrumentCompleteResponse_Status) Type() protoreflect.EnumType {
	return &file_partner_instrument_v1_instrument_proto_enumTypes[1]
}

func (x RegisterInstrumentCompleteResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterInstrumentCompleteResponse_Status.Descriptor instead.
func (RegisterInstrumentCompleteResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{3, 0}
}

type RegisterInstrumentInitiateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary key on the external system.
	PartnerInstrumentRef string `protobuf:"bytes,1,opt,name=partner_instrument_ref,json=partnerInstrumentRef,proto3" json:"partner_instrument_ref,omitempty"`
	// The financial institution which holds this account/instrument.
	FiKey string `protobuf:"bytes,2,opt,name=fi_key,json=fiKey,proto3" json:"fi_key,omitempty"`
	// The first name of the user.
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name of the user.
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The email of the user.
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// The street address of the user.
	Address *v1.Address `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// The birthday of the user.
	Birthday *v1.Date `protobuf:"bytes,7,opt,name=birthday,proto3" json:"birthday,omitempty"`
	// E.164 format
	Phone string `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	// Last 4 digits of this instrument.
	LastFour string `protobuf:"bytes,9,opt,name=last_four,json=lastFour,proto3" json:"last_four,omitempty"`
	// The username for this person at the users FI
	Username string `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	// The password for this person at the users FI
	Password string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RegisterInstrumentInitiateRequest) Reset() {
	*x = RegisterInstrumentInitiateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partner_instrument_v1_instrument_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstrumentInitiateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstrumentInitiateRequest) ProtoMessage() {}

func (x *RegisterInstrumentInitiateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partner_instrument_v1_instrument_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstrumentInitiateRequest.ProtoReflect.Descriptor instead.
func (*RegisterInstrumentInitiateRequest) Descriptor() ([]byte, []int) {
	return file_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterInstrumentInitiateRequest) GetPartnerInstrumentRef() string {
	if x != nil {
		return x.PartnerInstrumentRef
	}
	return ""
}

func (x *RegisterInstrumentInitiateRequest) GetFiKey() string {
	if x != nil {
		return x.FiKey
	}
	return ""
}

func (x *RegisterInstrumentInitiateRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterInstrumentInitiateRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterInstrumentInitiateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterInstrumentInitiateRequest) GetAddress() *v1.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RegisterInstrumentInitiateRequest) GetBirthday() *v1.Date {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *RegisterInstrumentInitiateRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RegisterInstrumentInitiateRequest) GetLastFour() string {
	if x != nil {
		return x.LastFour
	}
	return ""
}

func (x *RegisterInstrumentInitiateRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterInstrumentInitiateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RegisterInstrumentInitiateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RegisterInstrumentInitiateResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=partner.instrument.v1.RegisterInstrumentInitiateResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The matching code sent to the Financial Institution. Only returned in non-production environments.
	MatchingCode string `protobuf:"bytes,3,opt,name=matching_code,json=matchingCode,proto3" json:"matching_code,omitempty"`
}

func (x *RegisterInstrumentInitiateResponse) Reset() {
	*x = RegisterInstrumentInitiateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partner_instrument_v1_instrument_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstrumentInitiateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstrumentInitiateResponse) ProtoMessage() {}

func (x *RegisterInstrumentInitiateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partner_instrument_v1_instrument_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstrumentInitiateResponse.ProtoReflect.Descriptor instead.
func (*RegisterInstrumentInitiateResponse) Descriptor() ([]byte, []int) {
	return file_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterInstrumentInitiateResponse) GetStatus() RegisterInstrumentInitiateResponse_Status {
	if x != nil {
		return x.Status
	}
	return RegisterInstrumentInitiateResponse_STATUS_UNSPECIFIED
}

func (x *RegisterInstrumentInitiateResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RegisterInstrumentInitiateResponse) GetMatchingCode() string {
	if x != nil {
		return x.MatchingCode
	}
	return ""
}

type RegisterInstrumentCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The matching code sent from the users Financial Institution and given by the user.
	MatchingCode string `protobuf:"bytes,1,opt,name=matching_code,json=matchingCode,proto3" json:"matching_code,omitempty"`
}

func (x *RegisterInstrumentCompleteRequest) Reset() {
	*x = RegisterInstrumentCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partner_instrument_v1_instrument_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstrumentCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstrumentCompleteRequest) ProtoMessage() {}

func (x *RegisterInstrumentCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partner_instrument_v1_instrument_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstrumentCompleteRequest.ProtoReflect.Descriptor instead.
func (*RegisterInstrumentCompleteRequest) Descriptor() ([]byte, []int) {
	return file_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterInstrumentCompleteRequest) GetMatchingCode() string {
	if x != nil {
		return x.MatchingCode
	}
	return ""
}

type RegisterInstrumentCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RegisterInstrumentCompleteResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=partner.instrument.v1.RegisterInstrumentCompleteResponse_Status" json:"status,omitempty"`
	Error  *v1.Error                                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The payment token that the Partner can use to obtain or return funds for this user.
	PartnerPaymentToken string `protobuf:"bytes,3,opt,name=partner_payment_token,json=partnerPaymentToken,proto3" json:"partner_payment_token,omitempty"`
}

func (x *RegisterInstrumentCompleteResponse) Reset() {
	*x = RegisterInstrumentCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partner_instrument_v1_instrument_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInstrumentCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInstrumentCompleteResponse) ProtoMessage() {}

func (x *RegisterInstrumentCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partner_instrument_v1_instrument_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInstrumentCompleteResponse.ProtoReflect.Descriptor instead.
func (*RegisterInstrumentCompleteResponse) Descriptor() ([]byte, []int) {
	return file_partner_instrument_v1_instrument_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterInstrumentCompleteResponse) GetStatus() RegisterInstrumentCompleteResponse_Status {
	if x != nil {
		return x.Status
	}
	return RegisterInstrumentCompleteResponse_STATUS_UNSPECIFIED
}

func (x *RegisterInstrumentCompleteResponse) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RegisterInstrumentCompleteResponse) GetPartnerPaymentToken() string {
	if x != nil {
		return x.PartnerPaymentToken
	}
	return ""
}

var File_partner_instrument_v1_instrument_proto protoreflect.FileDescriptor

var file_partner_instrument_v1_instrument_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x03, 0x0a, 0x21, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x9e, 0x03, 0x0a, 0x22, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd0,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x49, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10,
	0x08, 0x22, 0x48, 0x0a, 0x21, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x22,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x69, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x03, 0x42, 0x60, 0x0a, 0x23, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x74,
	0x65, 0x6e, 0x38, 0x30, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x20, 0x74, 0x65, 0x6e,
	0x38, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x05,
	0x54, 0x45, 0x4e, 0x38, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_partner_instrument_v1_instrument_proto_rawDescOnce sync.Once
	file_partner_instrument_v1_instrument_proto_rawDescData = file_partner_instrument_v1_instrument_proto_rawDesc
)

func file_partner_instrument_v1_instrument_proto_rawDescGZIP() []byte {
	file_partner_instrument_v1_instrument_proto_rawDescOnce.Do(func() {
		file_partner_instrument_v1_instrument_proto_rawDescData = protoimpl.X.CompressGZIP(file_partner_instrument_v1_instrument_proto_rawDescData)
	})
	return file_partner_instrument_v1_instrument_proto_rawDescData
}

var file_partner_instrument_v1_instrument_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_partner_instrument_v1_instrument_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_partner_instrument_v1_instrument_proto_goTypes = []interface{}{
	(RegisterInstrumentInitiateResponse_Status)(0), // 0: partner.instrument.v1.RegisterInstrumentInitiateResponse.Status
	(RegisterInstrumentCompleteResponse_Status)(0), // 1: partner.instrument.v1.RegisterInstrumentCompleteResponse.Status
	(*RegisterInstrumentInitiateRequest)(nil),      // 2: partner.instrument.v1.RegisterInstrumentInitiateRequest
	(*RegisterInstrumentInitiateResponse)(nil),     // 3: partner.instrument.v1.RegisterInstrumentInitiateResponse
	(*RegisterInstrumentCompleteRequest)(nil),      // 4: partner.instrument.v1.RegisterInstrumentCompleteRequest
	(*RegisterInstrumentCompleteResponse)(nil),     // 5: partner.instrument.v1.RegisterInstrumentCompleteResponse
	(*v1.Address)(nil),                             // 6: common.v1.Address
	(*v1.Date)(nil),                                // 7: common.v1.Date
	(*v1.Error)(nil),                               // 8: common.v1.Error
}
var file_partner_instrument_v1_instrument_proto_depIdxs = []int32{
	6, // 0: partner.instrument.v1.RegisterInstrumentInitiateRequest.address:type_name -> common.v1.Address
	7, // 1: partner.instrument.v1.RegisterInstrumentInitiateRequest.birthday:type_name -> common.v1.Date
	0, // 2: partner.instrument.v1.RegisterInstrumentInitiateResponse.status:type_name -> partner.instrument.v1.RegisterInstrumentInitiateResponse.Status
	8, // 3: partner.instrument.v1.RegisterInstrumentInitiateResponse.error:type_name -> common.v1.Error
	1, // 4: partner.instrument.v1.RegisterInstrumentCompleteResponse.status:type_name -> partner.instrument.v1.RegisterInstrumentCompleteResponse.Status
	8, // 5: partner.instrument.v1.RegisterInstrumentCompleteResponse.error:type_name -> common.v1.Error
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_partner_instrument_v1_instrument_proto_init() }
func file_partner_instrument_v1_instrument_proto_init() {
	if File_partner_instrument_v1_instrument_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_partner_instrument_v1_instrument_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstrumentInitiateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partner_instrument_v1_instrument_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstrumentInitiateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partner_instrument_v1_instrument_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstrumentCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partner_instrument_v1_instrument_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInstrumentCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_partner_instrument_v1_instrument_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_partner_instrument_v1_instrument_proto_goTypes,
		DependencyIndexes: file_partner_instrument_v1_instrument_proto_depIdxs,
		EnumInfos:         file_partner_instrument_v1_instrument_proto_enumTypes,
		MessageInfos:      file_partner_instrument_v1_instrument_proto_msgTypes,
	}.Build()
	File_partner_instrument_v1_instrument_proto = out.File
	file_partner_instrument_v1_instrument_proto_rawDesc = nil
	file_partner_instrument_v1_instrument_proto_goTypes = nil
	file_partner_instrument_v1_instrument_proto_depIdxs = nil
}
