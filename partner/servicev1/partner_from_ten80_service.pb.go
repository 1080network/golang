// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: partner/service/v1/partner_from_ten80_service.proto

package servicev1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	userv1 "ten80/proto/partner/userv1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_partner_service_v1_partner_from_ten80_service_proto protoreflect.FileDescriptor

var file_partner_service_v1_partner_from_ten80_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x65, 0x6e, 0x38, 0x30, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x70,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xf1, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x31, 0x30, 0x38, 0x30, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x14,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e, 0x0a, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x74, 0x65, 0x6e, 0x38, 0x30, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x1d,
	0x74, 0x65, 0x6e, 0x38, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x05,
	0x54, 0x45, 0x4e, 0x38, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_partner_service_v1_partner_from_ten80_service_proto_goTypes = []interface{}{
	(*userv1.EnrollUserInstrumentRequest)(nil),  // 0: partner.user.v1.EnrollUserInstrumentRequest
	(*PingPartnerRequest)(nil),                  // 1: partner.service.v1.PingPartnerRequest
	(*userv1.EnrollUserInstrumentResponse)(nil), // 2: partner.user.v1.EnrollUserInstrumentResponse
	(*PingPartnerResponse)(nil),                 // 3: partner.service.v1.PingPartnerResponse
}
var file_partner_service_v1_partner_from_ten80_service_proto_depIdxs = []int32{
	0, // 0: partner.service.v1.PartnerFrom1080Service.EnrollUserInstrument:input_type -> partner.user.v1.EnrollUserInstrumentRequest
	1, // 1: partner.service.v1.PartnerFrom1080Service.PingPartner:input_type -> partner.service.v1.PingPartnerRequest
	2, // 2: partner.service.v1.PartnerFrom1080Service.EnrollUserInstrument:output_type -> partner.user.v1.EnrollUserInstrumentResponse
	3, // 3: partner.service.v1.PartnerFrom1080Service.PingPartner:output_type -> partner.service.v1.PingPartnerResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_partner_service_v1_partner_from_ten80_service_proto_init() }
func file_partner_service_v1_partner_from_ten80_service_proto_init() {
	if File_partner_service_v1_partner_from_ten80_service_proto != nil {
		return
	}
	file_partner_ping_v1_ping_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_partner_service_v1_partner_from_ten80_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_partner_service_v1_partner_from_ten80_service_proto_goTypes,
		DependencyIndexes: file_partner_service_v1_partner_from_ten80_service_proto_depIdxs,
	}.Build()
	File_partner_service_v1_partner_from_ten80_service_proto = out.File
	file_partner_service_v1_partner_from_ten80_service_proto_rawDesc = nil
	file_partner_service_v1_partner_from_ten80_service_proto_goTypes = nil
	file_partner_service_v1_partner_from_ten80_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PartnerFrom1080ServiceClient is the client API for PartnerFrom1080Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PartnerFrom1080ServiceClient interface {
	// operation to support reverse onboarding. Instead of the Partner calling 1080, 1080 will call the Partner with a
	// new enrollment
	EnrollUserInstrument(ctx context.Context, in *userv1.EnrollUserInstrumentRequest, opts ...grpc.CallOption) (*userv1.EnrollUserInstrumentResponse, error)
	PingPartner(ctx context.Context, in *PingPartnerRequest, opts ...grpc.CallOption) (*PingPartnerResponse, error)
}

type partnerFrom1080ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerFrom1080ServiceClient(cc grpc.ClientConnInterface) PartnerFrom1080ServiceClient {
	return &partnerFrom1080ServiceClient{cc}
}

func (c *partnerFrom1080ServiceClient) EnrollUserInstrument(ctx context.Context, in *userv1.EnrollUserInstrumentRequest, opts ...grpc.CallOption) (*userv1.EnrollUserInstrumentResponse, error) {
	out := new(userv1.EnrollUserInstrumentResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerFrom1080Service/EnrollUserInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerFrom1080ServiceClient) PingPartner(ctx context.Context, in *PingPartnerRequest, opts ...grpc.CallOption) (*PingPartnerResponse, error) {
	out := new(PingPartnerResponse)
	err := c.cc.Invoke(ctx, "/partner.service.v1.PartnerFrom1080Service/PingPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerFrom1080ServiceServer is the server API for PartnerFrom1080Service service.
type PartnerFrom1080ServiceServer interface {
	// operation to support reverse onboarding. Instead of the Partner calling 1080, 1080 will call the Partner with a
	// new enrollment
	EnrollUserInstrument(context.Context, *userv1.EnrollUserInstrumentRequest) (*userv1.EnrollUserInstrumentResponse, error)
	PingPartner(context.Context, *PingPartnerRequest) (*PingPartnerResponse, error)
}

// UnimplementedPartnerFrom1080ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPartnerFrom1080ServiceServer struct {
}

func (*UnimplementedPartnerFrom1080ServiceServer) EnrollUserInstrument(context.Context, *userv1.EnrollUserInstrumentRequest) (*userv1.EnrollUserInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUserInstrument not implemented")
}
func (*UnimplementedPartnerFrom1080ServiceServer) PingPartner(context.Context, *PingPartnerRequest) (*PingPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPartner not implemented")
}

func RegisterPartnerFrom1080ServiceServer(s *grpc.Server, srv PartnerFrom1080ServiceServer) {
	s.RegisterService(&_PartnerFrom1080Service_serviceDesc, srv)
}

func _PartnerFrom1080Service_EnrollUserInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userv1.EnrollUserInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerFrom1080ServiceServer).EnrollUserInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerFrom1080Service/EnrollUserInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerFrom1080ServiceServer).EnrollUserInstrument(ctx, req.(*userv1.EnrollUserInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerFrom1080Service_PingPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerFrom1080ServiceServer).PingPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.service.v1.PartnerFrom1080Service/PingPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerFrom1080ServiceServer).PingPartner(ctx, req.(*PingPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PartnerFrom1080Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "partner.service.v1.PartnerFrom1080Service",
	HandlerType: (*PartnerFrom1080ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUserInstrument",
			Handler:    _PartnerFrom1080Service_EnrollUserInstrument_Handler,
		},
		{
			MethodName: "PingPartner",
			Handler:    _PartnerFrom1080Service_PingPartner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "partner/service/v1/partner_from_ten80_service.proto",
}
